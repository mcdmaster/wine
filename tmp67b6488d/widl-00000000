# 1 "include/xmldom.idl" 1


























# 1 "include/oaidl.h" 1 3







# 1 "include/rpc.h" 1 3






















# 1 "include/windows.h" 1 3



































# 1 "include/excpt.h" 1 3
























typedef enum _EXCEPTION_DISPOSITION
{
  ExceptionContinueExecution,
  ExceptionContinueSearch,
  ExceptionNestedException,
  ExceptionCollidedUnwind
} EXCEPTION_DISPOSITION;




















# 36 "include/windows.h" 2

# 1 "include/sdkddkver.h" 1 3
































































































# 37 "include/windows.h" 2

# 1 "include/windef.h" 1 3


















































































































































































































typedef unsigned char UCHAR, *PUCHAR;
typedef unsigned short USHORT, *PUSHORT;

typedef unsigned long ULONG, *PULONG;





typedef void                                   *LPVOID;
typedef const void                             *LPCVOID;
typedef int             BOOL,       *PBOOL,    *LPBOOL;
typedef unsigned char   BYTE,       *PBYTE,    *LPBYTE;
typedef unsigned short  WORD,       *PWORD,    *LPWORD;
typedef int             INT,        *PINT,     *LPINT;
typedef unsigned int    UINT,       *PUINT;
typedef float           FLOAT,      *PFLOAT;
typedef char                        *PSZ;

typedef long                                   *LPLONG;
typedef unsigned long   DWORD,      *PDWORD,   *LPDWORD;































# 1 "include/winnt.h" 1 3




















# 1 "include/config.h" 1





































































































































































































































































































































































































































































































































































































































































































































































































































































# 21 "include/winnt.h" 2
 









# 1 "include/ntstatus.h" 1









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 31 "include/winnt.h" 2

# 1 "include/basetsd.h" 1






















































































typedef signed char      INT8, *PINT8;
typedef signed short     INT16, *PINT16;
typedef signed int       INT32, *PINT32;
typedef unsigned char    UINT8, *PUINT8;
typedef unsigned short   UINT16, *PUINT16;
typedef unsigned int     UINT32, *PUINT32;
typedef signed int       LONG32, *PLONG32;
typedef unsigned int     ULONG32, *PULONG32;
typedef unsigned int     DWORD32, *PDWORD32;








typedef __int32  INT64, *PINT64;
typedef unsigned __int32  UINT64, *PUINT64;
typedef signed __int32    LONG64, *PLONG64;
typedef unsigned __int32  ULONG64, *PULONG64;
typedef unsigned __int32  DWORD64, *PDWORD64;






typedef  signed __int3264   INT_PTR, *PINT_PTR;
typedef  signed __int3264   LONG_PTR, *PLONG_PTR;
typedef  unsigned __int3264 UINT_PTR, *PUINT_PTR;
typedef  unsigned __int3264 ULONG_PTR, *PULONG_PTR;






















































































































































typedef signed short HALF_PTR, *PHALF_PTR;
typedef unsigned short UHALF_PTR, *PUHALF_PTR;



























typedef LONG_PTR SHANDLE_PTR;
typedef ULONG_PTR HANDLE_PTR;
typedef LONG_PTR SSIZE_T, *PSSIZE_T;
typedef ULONG_PTR SIZE_T, *PSIZE_T;
typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR;
typedef ULONG_PTR KAFFINITY, *PKAFFINITY;








# 32 "include/winnt.h" 2

# 1 "include/winapifamily.h" 1






























































# 33 "include/winnt.h" 2

# 1 "include/specstrings.h" 1












# 1 "include/sal.h" 1 3





























































































































































































































































































































































 













































 



































# 13 "include/specstrings.h" 2



























































































































































































































































































































# 1 "include/specstrings_strict.h" 1 3





































# 328 "include/specstrings.h" 2















# 1 "include/driverspecs.h" 1 3












# 1 "include/specstrings.h" 1 3
























































































































































































































































































































































# 13 "include/driverspecs.h" 2

# 1 "include/concurrencysal.h" 1 3
















































# 14 "include/driverspecs.h" 2










































# 343 "include/specstrings.h" 2


# 34 "include/winnt.h" 2

# 1 "include/ntdef.h" 1






















# 1 "include/basetsd.h" 1 3























































































































































































































































































































# 23 "include/ntdef.h" 2

# 1 "include/specstrings.h" 1 3
























































































































































































































































































































































# 24 "include/ntdef.h" 2





typedef enum _EVENT_TYPE {
    NotificationEvent,
    SynchronizationEvent
} EVENT_TYPE;

typedef enum _TIMER_TYPE {
    NotificationTimer,
    SynchronizationTimer
} TIMER_TYPE;

typedef enum _WAIT_TYPE {
    WaitAll,
    WaitAny,
    WaitNotification
} WAIT_TYPE;





















typedef struct _RTL_BALANCED_NODE
{
    union
    {
        struct _RTL_BALANCED_NODE *Children[2];
        struct
        {
            struct _RTL_BALANCED_NODE *Left;
            struct _RTL_BALANCED_NODE *Right;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
    union
    {
        UCHAR Red [1];
        UCHAR Balance [2];
        ULONG_PTR ParentValue;
    } DUMMYUNIONNAME2;
} RTL_BALANCED_NODE, *PRTL_BALANCED_NODE;



typedef struct _RTL_RB_TREE
{
    RTL_BALANCED_NODE *root;
    RTL_BALANCED_NODE *min;
} RTL_RB_TREE, *PRTL_RB_TREE;




# 35 "include/winnt.h" 2

# 1 "include/winternl.h" 1
























# 1 "include/ntdef.h" 1 3






























































































# 25 "include/winternl.h" 2

# 1 "include/windef.h" 1 3






















































































































































































































































































































































































































































# 26 "include/winternl.h" 2















typedef const char *PCSZ;

typedef short CSHORT;
typedef CSHORT *PCSHORT;



typedef struct _STRING {
  USHORT Length;
  USHORT MaximumLength;
  char *buffer;
} STRING, *PSTRING;


typedef STRING ANSI_STRING;
typedef PSTRING PANSI_STRING;
typedef const STRING *PCANSI_STRING;

typedef STRING OEM_STRING;
typedef PSTRING POEM_STRING;
typedef const STRING *PCOEM_STRING;



typedef struct _UNICODE_STRING {
  USHORT Length;        
  USHORT MaximumLength; 
  wchar_t  *Buffer;
} UNICODE_STRING, *PUNICODE_STRING;


typedef const UNICODE_STRING *PCUNICODE_STRING;




typedef struct _FILETIME
{
  DWORD  dwLowDateTime;
  DWORD  dwHighDateTime;
} FILETIME, *PFILETIME, *LPFILETIME;










typedef struct _RTL_SYSTEM_TIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
} RTL_SYSTEM_TIME, *PRTL_SYSTEM_TIME;

typedef struct _RTL_TIME_ZONE_INFORMATION {
    INT32 Bias;
    wchar_t StandardName[32];
    RTL_SYSTEM_TIME StandardDate;
    INT32 StandardBias;
    wchar_t DaylightName[32];
    RTL_SYSTEM_TIME DaylightDate;
    INT32 DaylightBias;
} RTL_TIME_ZONE_INFORMATION, *PRTL_TIME_ZONE_INFORMATION;

typedef struct _RTL_TIME_DYNAMIC_ZONE_INFORMATION
{
    INT32 Bias;
    wchar_t StandardName[32];
    RTL_SYSTEM_TIME StandardDate;
    INT32 StandardBias;
    wchar_t DaylightName[32];
    RTL_SYSTEM_TIME DaylightDate;
    INT32 DaylightBias;
    wchar_t TimeZoneKeyName[128];
    BOOL DynamicDaylightTimeDisabled;
} RTL_DYNAMIC_TIME_ZONE_INFORMATION, *PRTL_DYNAMIC_TIME_ZONE_INFORMATION;

typedef struct _CLIENT_ID
{
   int UniqueProcess;
   int UniqueThread;
} CLIENT_ID, *PCLIENT_ID;

typedef struct _CURDIR
{
    UNICODE_STRING DosPath;
    void *Handle;
} CURDIR, *PCURDIR;

typedef struct RTL_DRIVE_LETTER_CURDIR
{
    USHORT              Flags;
    USHORT              Length;
    ULONG               TimeStamp;
    UNICODE_STRING      DosPath;
} RTL_DRIVE_LETTER_CURDIR, *PRTL_DRIVE_LETTER_CURDIR;

typedef struct _RTL_RELATIVE_NAME
{
    UNICODE_STRING RelativeName;
    void         *ContainerDirectory;
    void          *CurDirRef;
} RTL_RELATIVE_NAME, *PRTL_RELATIVE_NAME;

typedef struct tagRTL_BITMAP {
    ULONG  SizeOfBitMap; 
    PULONG Buffer; 
} RTL_BITMAP, *PRTL_BITMAP;

typedef const RTL_BITMAP *PCRTL_BITMAP;

typedef struct tagRTL_BITMAP_RUN {
    ULONG StartingIndex; 
    ULONG NumberOfBits;  
} RTL_BITMAP_RUN, *PRTL_BITMAP_RUN;

typedef const RTL_BITMAP_RUN *PCRTL_BITMAP_RUN;

typedef struct _RTL_USER_PROCESS_PARAMETERS
{
    ULONG               AllocationSize;
    ULONG               Size;
    ULONG               Flags;
    ULONG               DebugFlags;
    void              *ConsoleHandle;
    ULONG               ConsoleFlags;
    void              *hStdInput;
    void              *hStdOutput;
    void              *hStdError;
    CURDIR              CurrentDirectory;
    UNICODE_STRING      DllPath;
    UNICODE_STRING      ImagePathName;
    UNICODE_STRING      CommandLine;
    wchar_t               Environment;
    ULONG               dwX;
    ULONG               dwY;
    ULONG               dwXSize;
    ULONG               dwYSize;
    ULONG               dwXCountChars;
    ULONG               dwYCountChars;
    ULONG               dwFillAttribute;
    ULONG               dwFlags;
    ULONG               wShowWindow;
    UNICODE_STRING      WindowTitle;
    UNICODE_STRING      Desktop;
    UNICODE_STRING      ShellInfo;
    UNICODE_STRING      RuntimeInfo;
    RTL_DRIVE_LETTER_CURDIR DLCurrentDirectory[0x20];
    ULONG_PTR           EnvironmentSize;
    ULONG_PTR           EnvironmentVersion;
    void               *PackageDependencyData;
    ULONG               ProcessGroupId;
    ULONG               LoaderThreads;
} RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS;




typedef struct _PEB_LDR_DATA
{
    ULONG               Length;
    BOOL             Initialized;
    void               *SsHandle;
    struct list          InLoadOrderModuleList;
    struct list          InMemoryOrderModuleList;
    struct list          InInitializationOrderModuleList;
    void               *EntryInProgress;
    BOOL             ShutdownInProgress;
    void              *ShutdownThreadId;
} PEB_LDR_DATA, *PPEB_LDR_DATA;

typedef struct _GDI_TEB_BATCH
{
    ULONG  Offset;
    void* HDC;
    ULONG  Buffer[0x136];
} GDI_TEB_BATCH;

typedef struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME
{
    struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME *Previous;
    struct _ACTIVATION_CONTEXT                 *ActivationContext;
    ULONG                                       Flags;
} RTL_ACTIVATION_CONTEXT_STACK_FRAME, *PRTL_ACTIVATION_CONTEXT_STACK_FRAME;

typedef struct _ACTIVATION_CONTEXT_STACK
{
    RTL_ACTIVATION_CONTEXT_STACK_FRAME *ActiveFrame;
    struct list                          FrameListCache;
    ULONG                               Flags;
    ULONG                               NextCookieSequenceNumber;
    ULONG_PTR                           StackId;
} ACTIVATION_CONTEXT_STACK, *PACTIVATION_CONTEXT_STACK;

typedef struct _TEB_ACTIVE_FRAME_CONTEXT
{
    ULONG       Flags;
    const char *FrameName;
} TEB_ACTIVE_FRAME_CONTEXT, *PTEB_ACTIVE_FRAME_CONTEXT;

typedef struct _TEB_ACTIVE_FRAME_CONTEXT_EX
{
    TEB_ACTIVE_FRAME_CONTEXT BasicContext;
    const char              *SourceLocation;
} TEB_ACTIVE_FRAME_CONTEXT_EX, *PTEB_ACTIVE_FRAME_CONTEXT_EX;

typedef struct _TEB_ACTIVE_FRAME
{
    ULONG                     Flags;
    struct _TEB_ACTIVE_FRAME *Previous;
    TEB_ACTIVE_FRAME_CONTEXT *Context;
} TEB_ACTIVE_FRAME, *PTEB_ACTIVE_FRAME;

typedef struct _TEB_ACTIVE_FRAME_EX
{
    TEB_ACTIVE_FRAME BasicFrame;
    void            *ExtensionIdentifier;
} TEB_ACTIVE_FRAME_EX, *PTEB_ACTIVE_FRAME_EX;

typedef struct _FLS_CALLBACK
{
    void                  *unknown;
    void * callback; 
} FLS_CALLBACK, *PFLS_CALLBACK;

typedef struct _FLS_INFO_CHUNK
{
    ULONG           count;         
    FLS_CALLBACK    callbacks[1];  

} FLS_INFO_CHUNK, *PFLS_INFO_CHUNK;

typedef struct _GLOBAL_FLS_DATA
{
    FLS_INFO_CHUNK *fls_callback_chunks[8];
    struct list      fls_list_head;
    ULONG           fls_high_index;
} GLOBAL_FLS_DATA, *PGLOBAL_FLS_DATA;

typedef struct _TEB_FLS_DATA
{
    struct list      fls_list_entry;
    void          **fls_data_chunks[8];
} TEB_FLS_DATA, *PTEB_FLS_DATA;



typedef struct
{
    UINT      next;
    UINT      id;
    ULONG32 addr;
    ULONG32 size;
    UINT      args[4];
} CROSS_PROCESS_WORK_ENTRY;

typedef union
{
    struct
    {
        UINT first;
        UINT counter;
    };
    inline LONG32 hdr;
} CROSS_PROCESS_WORK_HDR;

typedef structs
{
    CROSS_PROCESS_WORK_HDR   free_list;
    CROSS_PROCESS_WORK_HDR   work_list;
    ULONG32                unknown[4];
    CROSS_PROCESS_WORK_ENTRY entries[1];
} CROSS_PROCESS_WORK_LIST;

typedef enum
{
    CrossProcessPreVirtualAlloc    = 0,
    CrossProcessPostVirtualAlloc   = 1,
    CrossProcessPreVirtualFree     = 2,
    CrossProcessPostVirtualFree    = 3,
    CrossProcessPreVirtualProtect  = 4,
    CrossProcessPostVirtualProtect = 5,
    CrossProcessFlushCache         = 6,
    CrossProcessFlushCacheHeavy    = 7,
    CrossProcessMemoryWrite        = 8,
} CROSS_PROCESS_NOTIFICATION;





typedef struct _CHPE_V2_CPU_AREA_INFO
{
    BOOL             InSimulation;         
    BOOL             InSyscallCallback;    
    ULONG64             EmulatorStackBase;    
    ULONG64             EmulatorStackLimit;   
    ARM64EC_NT_CONTEXT *ContextAmd64;         
    ULONG              *SuspendDoorbell;      
    ULONG64             LoadingModuleModflag; 
    void               *EmulatorData[4];      
    ULONG64             EmulatorDataInline;   
} CHPE_V2_CPU_AREA_INFO, *PCHPE_V2_CPU_AREA_INFO;


typedef struct _CHPEV2_PROCESS_INFO
{
    ULONG                    Wow64ExecuteFlags;    
    USHORT                   NativeMachineType;    
    USHORT                   EmulatedMachineType;  
    void*                   SectionHandle;        
    CROSS_PROCESS_WORK_LIST *CrossProcessWorkList; 
    void                    *unknown;              
} CHPEV2_PROCESS_INFO, *PCHPEV2_PROCESS_INFO;




typedef NTSTATUS ( *KERNEL_CALLBACK_PROC)(void *, ULONG); 




typedef struct _PEB
{                                                                 
    BOOL                      InheritedAddressSpace;             
    BOOL                      ReadImageFileExecOptions;          
    BOOL                      BeingDebugged;                     
    UCHAR                        ImageUsedLargePages : 1;           
    UCHAR                        IsProtectedProcess : 1;
    UCHAR                        IsImageDynamicallyRelocated : 1;
    UCHAR                        SkipPatchingUser32Forwarders : 1;
    UCHAR                        IsPackagedProcess : 1;
    UCHAR                        IsAppContainer: 1;
    UCHAR                        IsProtectedProcessLight : 1;
    UCHAR                        IsLongPathAwareProcess : 1;
    void*                       Mutant;                            
    HMODULE                      ImageBaseAddress;                  
    PPEB_LDR_DATA                LdrData;                           
    RTL_USER_PROCESS_PARAMETERS *ProcessParameters;                 
    void*                        SubSystemData;                     
    void*                       ProcessHeap;                       
    PRTL_CRITICAL_SECTION        FastPebLock;                       
    void*                        AtlThunkSListPtr;                  
    void*                        IFEOKey;                           
    ULONG                        ProcessInJob : 1;                  
    ULONG                        ProcessInitializing : 1;
    ULONG                        ProcessUsingVEH : 1;
    ULONG                        ProcessUsingVCH : 1;
    ULONG                        ProcessUsingFTH : 1;
    ULONG                        ProcessPreviouslyThrottled : 1;
    ULONG                        ProcessCurrentlyThrottled : 1;
    ULONG                        ProcessImagesHotPatched : 1;
    ULONG                        ReservedBits0 : 24;
    KERNEL_CALLBACK_PROC        *KernelCallbackTable;               
    ULONG                        Reserved;                          
    ULONG                        AtlThunkSListPtr32;                
    void*                        ApiSetMap;                         
    ULONG                        TlsExpansionCounter;               
    PRTL_BITMAP                  TlsBitmap;                         
    ULONG                        TlsBitmapBits[2];                  
    void*                        ReadOnlySharedMemoryBase;          
    void*                        SharedData;                        
    void*                       *ReadOnlyStaticServerData;          
    void*                        AnsiCodePageData;                  
    void*                        OemCodePageData;                   
    void*                        UnicodeCaseTableData;              
    ULONG                        NumberOfProcessors;                
    ULONG                        NtGlobalFlag;                      
    LARGE_INTEGER                CriticalSectionTimeout;            
    SIZE_T                       HeapSegmentReserve;                
    SIZE_T                       HeapSegmentCommit;                 
    SIZE_T                       HeapDeCommitTotalFreeThreshold;    
    SIZE_T                       HeapDeCommitFreeBlockThreshold;    
    ULONG                        NumberOfHeaps;                     
    ULONG                        MaximumNumberOfHeaps;              
    void*                       *ProcessHeaps;                      
    void*                        GdiSharedHandleTable;              
    void*                        ProcessStarterHelper;              
    void*                        GdiDCAttributeList;                
    void*                        LoaderLock;                        
    ULONG                        OSMajorVersion;                    
    ULONG                        OSMinorVersion;                    
    ULONG                        OSBuildNumber;                     
    ULONG                        OSPlatformId;                      
    ULONG                        ImageSubSystem;                    
    ULONG                        ImageSubSystemMajorVersion;        
    ULONG                        ImageSubSystemMinorVersion;        
    KAFFINITY                    ActiveProcessAffinityMask;         



    ULONG                        GdiHandleBuffer[34];               

    void*                        PostProcessInitRoutine;            
    PRTL_BITMAP                  TlsExpansionBitmap;                
    ULONG                        TlsExpansionBitmapBits[32];        
    ULONG                        SessionId;                         
    ULARGE_INTEGER               AppCompatFlags;                    
    ULARGE_INTEGER               AppCompatFlagsUser;                
    void*                        ShimData;                          
    void*                        AppCompatInfo;                     
    UNICODE_STRING               CSDVersion;                        
    void*                        ActivationContextData;             
    void*                        ProcessAssemblyStorageMap;         
    void*                        SystemDefaultActivationData;       
    void*                        SystemAssemblyStorageMap;          
    SIZE_T                       MinimumStackCommit;                
    void*                       *FlsCallback;                       
    struct list                   FlsListHead;                       
    union
    {
        PRTL_BITMAP              FlsBitmap;                         



    };
    ULONG                        FlsBitmapBits[4];                  
    ULONG                        FlsHighIndex;                      
    void*                        WerRegistrationData;               
    void*                        WerShipAssertPtr;                  
    void*                        EcCodeBitMap;                      
    void*                        pImageHeaderHash;                  
    ULONG                        HeapTracingEnabled : 1;            
    ULONG                        CritSecTracingEnabled : 1;
    ULONG                        LibLoaderTracingEnabled : 1;
    ULONG                        SpareTracingBits : 29;
    ULONG32                    CsrServerReadOnlySharedMemoryBase; 
    ULONG                        TppWorkerpListLock;                
    struct list                   TppWorkerpList;                    
    void*                        WaitOnAddressHashTable [0x80];     
    void*                        TelemetryCoverageHeader;           
    ULONG                        CloudFileFlags;                    
    ULONG                        CloudFileDiagFlags;                
    CHAR                         PlaceholderCompatibilityMode;      
    CHAR                         PlaceholderCompatibilityModeReserved[7]; 
    void*                        LeapSecondData;                    
    ULONG                        LeapSecondFlags;                   
    ULONG                        NtGlobalFlag2;                     
} PEB, *PPEB;





typedef struct _TEB
{                                                                 
    NT_TIB                       Tib;                               
    void*                        EnvironmentPointer;                
    CLIENT_ID                    ClientId;                          
    void*                        ActiveRpcHandle;                   
    void*                        ThreadLocalStoragePointer;         
    PPEB                         Peb;                               
    ULONG                        LastErrorValue;                    
    ULONG                        CountOfOwnedCriticalSections;      
    void*                        CsrClientThread;                   
    void*                        Win32ThreadInfo;                   
    ULONG                        User32Reserved[26];                
    ULONG                        UserReserved[5];                   
    void*                        WOW32Reserved;                     
    ULONG                        CurrentLocale;                     
    ULONG                        FpSoftwareStatusRegister;          
    void*                        ReservedForDebuggerInstrumentation[16]; 



    void*                        SystemReserved1[26];               

    char                         PlaceholderCompatibilityMode;      
    BOOL                      PlaceholderHydrationAlwaysExplicit;
    char                         PlaceholderReserved[10];           
    DWORD                        ProxiedProcessId;                  
    ACTIVATION_CONTEXT_STACK     ActivationContextStack;            
    UCHAR                        WorkingOnBehalfOfTicket[8];        
    LONG                         ExceptionCode;                     
    ACTIVATION_CONTEXT_STACK    *ActivationContextStackPointer;     
    ULONG_PTR                    InstrumentationCallbackSp;         
    ULONG_PTR                    InstrumentationCallbackPreviousPc; 
    ULONG_PTR                    InstrumentationCallbackPreviousSp; 





    BOOL                      InstrumentationCallbackDisabled;   
    BYTE                         SpareBytes1[23];                   
    ULONG                        TxFsContext;                       

    GDI_TEB_BATCH                GdiTebBatch;                       
    CLIENT_ID                    RealClientId;                      
    void*                       GdiCachedProcessHandle;            
    ULONG                        GdiClientPID;                      
    ULONG                        GdiClientTID;                      
    void*                        GdiThreadLocaleInfo;               
    ULONG_PTR                    Win32ClientInfo[62];               
    void*                        glDispatchTable[233];              
    void*                        glReserved1[29];                   
    void*                        glReserved2;                       
    void*                        glSectionInfo;                     
    void*                        glSection;                         
    void*                        glTable;                           
    void*                        glCurrentRC;                       
    void*                        glContext;                         
    ULONG                        LastStatusValue;                   
    UNICODE_STRING               StaticUnicodeString;               
    WCHAR                        StaticUnicodeBuffer[261];          
    void*                        DeallocationStack;                 
    void*                        TlsSlots[64];                      
    struct list                   TlsLinks;                          
    void*                        Vdm;                               
    void*                        ReservedForNtRpc;                  
    void*                        DbgSsReserved[2];                  
    ULONG                        HardErrorMode;                     



    void*                        Instrumentation[9];                

    GUID                         ActivityId;                        
    void*                        SubProcessTag;                     
    void*                        PerflibData;                       
    void*                        EtwTraceData;                      
    void*                        WinSockData;                       
    ULONG                        GdiBatchCount;                     
    ULONG                        IdealProcessorValue;               
    ULONG                        GuaranteedStackBytes;              
    void*                        ReservedForPerf;                   
    void*                        ReservedForOle;                    
    ULONG                        WaitingOnLoaderLock;               
    void*                        SavedPriorityState;                
    ULONG_PTR                    ReservedForCodeCoverage;           
    void*                        ThreadPoolData;                    
    void*                       *TlsExpansionSlots;                 







    ULONG                        MuiGeneration;                     
    ULONG                        IsImpersonating;                   
    void*                        NlsCache;                          
    void*                        ShimData;                          
    ULONG                        HeapVirtualAffinity;               
    void*                        CurrentTransactionHandle;          
    TEB_ACTIVE_FRAME            *ActiveFrame;                       
    TEB_FLS_DATA                *FlsSlots;                          
    void*                        PreferredLanguages;                
    void*                        UserPrefLanguages;                 
    void*                        MergedPrefLanguages;               
    ULONG                        MuiImpersonation;                  
    USHORT                       CrossTebFlags;                     
    USHORT                       SameTebFlags;                      
    void*                        TxnScopeEnterCallback;             
    void*                        TxnScopeExitCallback;              
    void*                        TxnScopeContext;                   
    ULONG                        LockCount;                         
    LONG                         WowTebOffset;                      
    void*                        ResourceRetValue;                  
    void*                        ReservedForWdf;                    
    ULONG32                    ReservedForCrt;                    
    GUID                         EffectiveContainerId;              
} TEB, *PTEB;





typedef struct _NT_TIB32
{
    ULONG ExceptionList;        
    ULONG StackBase;            
    ULONG StackLimit;           
    ULONG SubSystemTib;         
    ULONG FiberData;            
    ULONG ArbitraryUserPointer; 
    ULONG Self;                 
} NT_TIB32;

typedef struct _NT_TIB64
{
    ULONG64 ExceptionList;        
    ULONG64 StackBase;            
    ULONG64 StackLimit;           
    ULONG64 SubSystemTib;         
    ULONG64 FiberData;            
    ULONG64 ArbitraryUserPointer; 
    ULONG64 Self;                 
} NT_TIB64;

typedef struct _CLIENT_ID32
{
   ULONG UniqueProcess;
   ULONG UniqueThread;
} CLIENT_ID32;

typedef struct _CLIENT_ID64
{
   ULONG64 UniqueProcess;
   ULONG64 UniqueThread;
} CLIENT_ID64;

typedef struct _LIST_ENTRY32
{
    ULONG Flink;
    ULONG Blink;
} LIST_ENTRY32;

typedef struct _LIST_ENTRY64
{
  ULONG64 Flink;
  ULONG64 Blink;
} LIST_ENTRY64;

typedef struct _UNICODE_STRING32
{
    USHORT  Length;
    USHORT  MaximumLength;
    ULONG   Buffer;
} UNICODE_STRING32;

typedef struct _UNICODE_STRING64
{
  USHORT  Length;
  USHORT  MaximumLength;
  ULONG64 Buffer;
} UNICODE_STRING64;

typedef struct _ACTIVATION_CONTEXT_STACK32
{
    ULONG        ActiveFrame;
    LIST_ENTRY32 FrameListCache;
    ULONG        Flags;
    ULONG        NextCookieSequenceNumber;
    ULONG32      StackId;
} ACTIVATION_CONTEXT_STACK32;

typedef struct _ACTIVATION_CONTEXT_STACK64
{
    ULONG64      ActiveFrame;
    LIST_ENTRY64 FrameListCache;
    ULONG        Flags;
    ULONG        NextCookieSequenceNumber;
    ULONG64      StackId;
} ACTIVATION_CONTEXT_STACK64;

typedef struct _CURDIR32
{
    UNICODE_STRING32 DosPath;
    ULONG Handle;
} CURDIR32;

typedef struct _CURDIR64
{
    UNICODE_STRING64 DosPath;
    ULONG64 Handle;
} CURDIR64;

typedef struct RTL_DRIVE_LETTER_CURDIR32
{
    USHORT              Flags;
    USHORT              Length;
    ULONG               TimeStamp;
    UNICODE_STRING32    DosPath;
} RTL_DRIVE_LETTER_CURDIR32;

typedef struct RTL_DRIVE_LETTER_CURDIR64
{
    USHORT              Flags;
    USHORT              Length;
    ULONG               TimeStamp;
    UNICODE_STRING64    DosPath;
} RTL_DRIVE_LETTER_CURDIR64;

typedef struct _RTL_USER_PROCESS_PARAMETERS32
{
    ULONG               AllocationSize;
    ULONG               Size;
    ULONG               Flags;
    ULONG               DebugFlags;
    ULONG               ConsoleHandle;
    ULONG               ConsoleFlags;
    ULONG               hStdInput;
    ULONG               hStdOutput;
    ULONG               hStdError;
    CURDIR32            CurrentDirectory;
    UNICODE_STRING32    DllPath;
    UNICODE_STRING32    ImagePathName;
    UNICODE_STRING32    CommandLine;
    ULONG               Environment;
    ULONG               dwX;
    ULONG               dwY;
    ULONG               dwXSize;
    ULONG               dwYSize;
    ULONG               dwXCountChars;
    ULONG               dwYCountChars;
    ULONG               dwFillAttribute;
    ULONG               dwFlags;
    ULONG               wShowWindow;
    UNICODE_STRING32    WindowTitle;
    UNICODE_STRING32    Desktop;
    UNICODE_STRING32    ShellInfo;
    UNICODE_STRING32    RuntimeInfo;
    RTL_DRIVE_LETTER_CURDIR32 DLCurrentDirectory[0x20];
    ULONG               EnvironmentSize;
    ULONG               EnvironmentVersion;
    ULONG               PackageDependencyData;
    ULONG               ProcessGroupId;
    ULONG               LoaderThreads;
} RTL_USER_PROCESS_PARAMETERS32;

typedef struct _RTL_USER_PROCESS_PARAMETERS64
{
    ULONG               AllocationSize;
    ULONG               Size;
    ULONG               Flags;
    ULONG               DebugFlags;
    ULONG64             ConsoleHandle;
    ULONG               ConsoleFlags;
    ULONG64             hStdInput;
    ULONG64             hStdOutput;
    ULONG64             hStdError;
    CURDIR64            CurrentDirectory;
    UNICODE_STRING64    DllPath;
    UNICODE_STRING64    ImagePathName;
    UNICODE_STRING64    CommandLine;
    ULONG64             Environment;
    ULONG               dwX;
    ULONG               dwY;
    ULONG               dwXSize;
    ULONG               dwYSize;
    ULONG               dwXCountChars;
    ULONG               dwYCountChars;
    ULONG               dwFillAttribute;
    ULONG               dwFlags;
    ULONG               wShowWindow;
    UNICODE_STRING64    WindowTitle;
    UNICODE_STRING64    Desktop;
    UNICODE_STRING64    ShellInfo;
    UNICODE_STRING64    RuntimeInfo;
    RTL_DRIVE_LETTER_CURDIR64 DLCurrentDirectory[0x20];
    ULONG64             EnvironmentSize;
    ULONG64             EnvironmentVersion;
    ULONG64             PackageDependencyData;
    ULONG               ProcessGroupId;
    ULONG               LoaderThreads;
} RTL_USER_PROCESS_PARAMETERS64;

typedef struct _PEB_LDR_DATA32
{
    ULONG               Length;
    BOOL             Initialized;
    ULONG               SsHandle;
    LIST_ENTRY32        InLoadOrderModuleList;
    LIST_ENTRY32        InMemoryOrderModuleList;
    LIST_ENTRY32        InInitializationOrderModuleList;
    ULONG               EntryInProgress;
    BOOL             ShutdownInProgress;
    ULONG               ShutdownThreadId;
} PEB_LDR_DATA32, *PPEB_LDR_DATA32;

typedef struct _PEB_LDR_DATA64
{
    ULONG               Length;
    BOOL             Initialized;
    ULONG64             SsHandle;
    LIST_ENTRY64        InLoadOrderModuleList;
    LIST_ENTRY64        InMemoryOrderModuleList;
    LIST_ENTRY64        InInitializationOrderModuleList;
    ULONG64             EntryInProgress;
    BOOL             ShutdownInProgress;
    ULONG64             ShutdownThreadId;
} PEB_LDR_DATA64, *PPEB_LDR_DATA64;

typedef struct _PEB32
{
    BOOL                      InheritedAddressSpace;             
    BOOL                      ReadImageFileExecOptions;          
    BOOL                      BeingDebugged;                     
    UCHAR                        ImageUsedLargePages : 1;           
    UCHAR                        IsProtectedProcess : 1;
    UCHAR                        IsImageDynamicallyRelocated : 1;
    UCHAR                        SkipPatchingUser32Forwarders : 1;
    UCHAR                        IsPackagedProcess : 1;
    UCHAR                        IsAppContainer: 1;
    UCHAR                        IsProtectedProcessLight : 1;
    UCHAR                        IsLongPathAwareProcess : 1;
    ULONG                        Mutant;                            
    ULONG                        ImageBaseAddress;                  
    ULONG                        LdrData;                           
    ULONG                        ProcessParameters;                 
    ULONG                        SubSystemData;                     
    ULONG                        ProcessHeap;                       
    ULONG                        FastPebLock;                       
    ULONG                        AtlThunkSListPtr;                  
    ULONG                        IFEOKey;                           
    ULONG                        ProcessInJob : 1;                  
    ULONG                        ProcessInitializing : 1;
    ULONG                        ProcessUsingVEH : 1;
    ULONG                        ProcessUsingVCH : 1;
    ULONG                        ProcessUsingFTH : 1;
    ULONG                        ProcessPreviouslyThrottled : 1;
    ULONG                        ProcessCurrentlyThrottled : 1;
    ULONG                        ProcessImagesHotPatched : 1;
    ULONG                        ReservedBits0 : 24;
    ULONG                        KernelCallbackTable;               
    ULONG                        Reserved;                          
    ULONG                        AtlThunkSListPtr32;                
    ULONG                        ApiSetMap;                         
    ULONG                        TlsExpansionCounter;               
    ULONG                        TlsBitmap;                         
    ULONG                        TlsBitmapBits[2];                  
    ULONG                        ReadOnlySharedMemoryBase;          
    ULONG                        SharedData;                        
    ULONG                        ReadOnlyStaticServerData;          
    ULONG                        AnsiCodePageData;                  
    ULONG                        OemCodePageData;                   
    ULONG                        UnicodeCaseTableData;              
    ULONG                        NumberOfProcessors;                
    ULONG                        NtGlobalFlag;                      
    LARGE_INTEGER                CriticalSectionTimeout;            
    ULONG                        HeapSegmentReserve;                
    ULONG                        HeapSegmentCommit;                 
    ULONG                        HeapDeCommitTotalFreeThreshold;    
    ULONG                        HeapDeCommitFreeBlockThreshold;    
    ULONG                        NumberOfHeaps;                     
    ULONG                        MaximumNumberOfHeaps;              
    ULONG                        ProcessHeaps;                      
    ULONG                        GdiSharedHandleTable;              
    ULONG                        ProcessStarterHelper;              
    ULONG                        GdiDCAttributeList;                
    ULONG                        LoaderLock;                        
    ULONG                        OSMajorVersion;                    
    ULONG                        OSMinorVersion;                    
    ULONG                        OSBuildNumber;                     
    ULONG                        OSPlatformId;                      
    ULONG                        ImageSubSystem;                    
    ULONG                        ImageSubSystemMajorVersion;        
    ULONG                        ImageSubSystemMinorVersion;        
    ULONG                        ActiveProcessAffinityMask;         
    ULONG                        GdiHandleBuffer[34];               
    ULONG                        PostProcessInitRoutine;            
    ULONG                        TlsExpansionBitmap;                
    ULONG                        TlsExpansionBitmapBits[32];        
    ULONG                        SessionId;                         
    ULARGE_INTEGER               AppCompatFlags;                    
    ULARGE_INTEGER               AppCompatFlagsUser;                
    ULONG                        ShimData;                          
    ULONG                        AppCompatInfo;                     
    UNICODE_STRING32             CSDVersion;                        
    ULONG                        ActivationContextData;             
    ULONG                        ProcessAssemblyStorageMap;         
    ULONG                        SystemDefaultActivationData;       
    ULONG                        SystemAssemblyStorageMap;          
    ULONG                        MinimumStackCommit;                
    ULONG                        FlsCallback;                       
    LIST_ENTRY32                 FlsListHead;                       
    ULONG                        FlsBitmap;                         
    ULONG                        FlsBitmapBits[4];                  
    ULONG                        FlsHighIndex;                      
    ULONG                        WerRegistrationData;               
    ULONG                        WerShipAssertPtr;                  
    ULONG                        pUnused;                           
    ULONG                        pImageHeaderHash;                  
    ULONG                        HeapTracingEnabled : 1;            
    ULONG                        CritSecTracingEnabled : 1;
    ULONG                        LibLoaderTracingEnabled : 1;
    ULONG                        SpareTracingBits : 29;
    ULONG32                    CsrServerReadOnlySharedMemoryBase; 
    ULONG                        TppWorkerpListLock;                
    LIST_ENTRY32                 TppWorkerpList;                    
    ULONG                        WaitOnAddressHashTable [0x80];     
    ULONG                        TelemetryCoverageHeader;           
    ULONG                        CloudFileFlags;                    
    ULONG                        CloudFileDiagFlags;                
    CHAR                         PlaceholderCompatibilityMode;      
    CHAR                         PlaceholderCompatibilityModeReserved[7]; 
    ULONG                        LeapSecondData;                    
    ULONG                        LeapSecondFlags;                   
    ULONG                        NtGlobalFlag2;                     
} PEB32;

C_ASSERT( sizeof(PEB32) == 0x480 );

typedef struct _PEB64
{
    BOOL                      InheritedAddressSpace;             
    BOOL                      ReadImageFileExecOptions;          
    BOOL                      BeingDebugged;                     
    UCHAR                        ImageUsedLargePages : 1;           
    UCHAR                        IsProtectedProcess : 1;
    UCHAR                        IsImageDynamicallyRelocated : 1;
    UCHAR                        SkipPatchingUser32Forwarders : 1;
    UCHAR                        IsPackagedProcess : 1;
    UCHAR                        IsAppContainer: 1;
    UCHAR                        IsProtectedProcessLight : 1;
    UCHAR                        IsLongPathAwareProcess : 1;
    ULONG64                      Mutant;                            
    ULONG64                      ImageBaseAddress;                  
    ULONG64                      LdrData;                           
    ULONG64                      ProcessParameters;                 
    ULONG64                      SubSystemData;                     
    ULONG64                      ProcessHeap;                       
    ULONG64                      FastPebLock;                       
    ULONG64                      AtlThunkSListPtr;                  
    ULONG64                      IFEOKey;                           
    ULONG                        ProcessInJob : 1;                  
    ULONG                        ProcessInitializing : 1;
    ULONG                        ProcessUsingVEH : 1;
    ULONG                        ProcessUsingVCH : 1;
    ULONG                        ProcessUsingFTH : 1;
    ULONG                        ProcessPreviouslyThrottled : 1;
    ULONG                        ProcessCurrentlyThrottled : 1;
    ULONG                        ProcessImagesHotPatched : 1;
    ULONG                        ReservedBits0 : 24;
    ULONG64                      KernelCallbackTable;               
    ULONG                        Reserved;                          
    ULONG                        AtlThunkSListPtr32;                
    ULONG64                      ApiSetMap;                         
    ULONG                        TlsExpansionCounter;               
    ULONG64                      TlsBitmap;                         
    ULONG                        TlsBitmapBits[2];                  
    ULONG64                      ReadOnlySharedMemoryBase;          
    ULONG64                      SharedData;                        
    ULONG64                      ReadOnlyStaticServerData;          
    ULONG64                      AnsiCodePageData;                  
    ULONG64                      OemCodePageData;                   
    ULONG64                      UnicodeCaseTableData;              
    ULONG                        NumberOfProcessors;                
    ULONG                        NtGlobalFlag;                      
    LARGE_INTEGER                CriticalSectionTimeout;            
    ULONG64                      HeapSegmentReserve;                
    ULONG64                      HeapSegmentCommit;                 
    ULONG64                      HeapDeCommitTotalFreeThreshold;    
    ULONG64                      HeapDeCommitFreeBlockThreshold;    
    ULONG                        NumberOfHeaps;                     
    ULONG                        MaximumNumberOfHeaps;              
    ULONG64                      ProcessHeaps;                      
    ULONG64                      GdiSharedHandleTable;              
    ULONG64                      ProcessStarterHelper;              
    ULONG64                      GdiDCAttributeList;                
    ULONG64                      LoaderLock;                        
    ULONG                        OSMajorVersion;                    
    ULONG                        OSMinorVersion;                    
    ULONG                        OSBuildNumber;                     
    ULONG                        OSPlatformId;                      
    ULONG                        ImageSubSystem;                    
    ULONG                        ImageSubSystemMajorVersion;        
    ULONG                        ImageSubSystemMinorVersion;        
    ULONG64                      ActiveProcessAffinityMask;         
    ULONG                        GdiHandleBuffer[60];               
    ULONG64                      PostProcessInitRoutine;            
    ULONG64                      TlsExpansionBitmap;                
    ULONG                        TlsExpansionBitmapBits[32];        
    ULONG                        SessionId;                         
    ULARGE_INTEGER               AppCompatFlags;                    
    ULARGE_INTEGER               AppCompatFlagsUser;                
    ULONG64                      ShimData;                          
    ULONG64                      AppCompatInfo;                     
    UNICODE_STRING64             CSDVersion;                        
    ULONG64                      ActivationContextData;             
    ULONG64                      ProcessAssemblyStorageMap;         
    ULONG64                      SystemDefaultActivationData;       
    ULONG64                      SystemAssemblyStorageMap;          
    ULONG64                      MinimumStackCommit;                
    ULONG64                      FlsCallback;                       
    LIST_ENTRY64                 FlsListHead;                       
    union
    {
        ULONG64                  FlsBitmap;                         
        ULONG64                  ChpeV2ProcessInfo;                 
    };
    ULONG                        FlsBitmapBits[4];                  
    ULONG                        FlsHighIndex;                      
    ULONG64                      WerRegistrationData;               
    ULONG64                      WerShipAssertPtr;                  
    ULONG64                      pUnused;                           
    ULONG64                      pImageHeaderHash;                  
    ULONG                        HeapTracingEnabled : 1;            
    ULONG                        CritSecTracingEnabled : 1;
    ULONG                        LibLoaderTracingEnabled : 1;
    ULONG                        SpareTracingBits : 29;
    ULONG32                    CsrServerReadOnlySharedMemoryBase; 
    ULONG                        TppWorkerpListLock;                
    LIST_ENTRY64                 TppWorkerpList;                    
    ULONG64                      WaitOnAddressHashTable [0x80];     
    ULONG64                      TelemetryCoverageHeader;           
    ULONG                        CloudFileFlags;                    
    ULONG                        CloudFileDiagFlags;                
    CHAR                         PlaceholderCompatibilityMode;      
    CHAR                         PlaceholderCompatibilityModeReserved[7]; 
    ULONG64                      LeapSecondData;                    
    ULONG                        LeapSecondFlags;                   
    ULONG                        NtGlobalFlag2;                     
} PEB64;

C_ASSERT( sizeof(PEB64) == 0x7c8 );

typedef struct _TEB32
{
    NT_TIB32                     Tib;                               
    ULONG                        EnvironmentPointer;                
    CLIENT_ID32                  ClientId;                          
    ULONG                        ActiveRpcHandle;                   
    ULONG                        ThreadLocalStoragePointer;         
    ULONG                        Peb;                               
    ULONG                        LastErrorValue;                    
    ULONG                        CountOfOwnedCriticalSections;      
    ULONG                        CsrClientThread;                   
    ULONG                        Win32ThreadInfo;                   
    ULONG                        User32Reserved[26];                
    ULONG                        UserReserved[5];                   
    ULONG                        WOW32Reserved;                     
    ULONG                        CurrentLocale;                     
    ULONG                        FpSoftwareStatusRegister;          
    ULONG                        ReservedForDebuggerInstrumentation[16]; 
    ULONG                        SystemReserved1[26];               
    char                         PlaceholderCompatibilityMode;      
    BOOL                      PlaceholderHydrationAlwaysExplicit;
    char                         PlaceholderReserved[10];           
    DWORD                        ProxiedProcessId;                  
    ACTIVATION_CONTEXT_STACK32   ActivationContextStack;            
    UCHAR                        WorkingOnBehalfOfTicket[8];        
    LONG                         ExceptionCode;                     
    ULONG                        ActivationContextStackPointer;     
    ULONG                        InstrumentationCallbackSp;         
    ULONG                        InstrumentationCallbackPreviousPc; 
    ULONG                        InstrumentationCallbackPreviousSp; 
    BOOL                      InstrumentationCallbackDisabled;   
    BYTE                         SpareBytes1[23];                   
    ULONG                        TxFsContext;                       
    ULONG                        GdiTebBatch[0x138];                
    CLIENT_ID32                  RealClientId;                      
    ULONG                        GdiCachedProcessHandle;            
    ULONG                        GdiClientPID;                      
    ULONG                        GdiClientTID;                      
    ULONG                        GdiThreadLocaleInfo;               
    ULONG                        Win32ClientInfo[62];               
    ULONG                        glDispatchTable[233];              
    ULONG                        glReserved1[29];                   
    ULONG                        glReserved2;                       
    ULONG                        glSectionInfo;                     
    ULONG                        glSection;                         
    ULONG                        glTable;                           
    ULONG                        glCurrentRC;                       
    ULONG                        glContext;                         
    ULONG                        LastStatusValue;                   
    UNICODE_STRING32             StaticUnicodeString;               
    WCHAR                        StaticUnicodeBuffer[261];          
    ULONG                        DeallocationStack;                 
    ULONG                        TlsSlots[64];                      
    LIST_ENTRY32                 TlsLinks;                          
    ULONG                        Vdm;                               
    ULONG                        ReservedForNtRpc;                  
    ULONG                        DbgSsReserved[2];                  
    ULONG                        HardErrorMode;                     
    ULONG                        Instrumentation[9];                
    GUID                         ActivityId;                        
    ULONG                        SubProcessTag;                     
    ULONG                        PerflibData;                       
    ULONG                        EtwTraceData;                      
    ULONG                        WinSockData;                       
    ULONG                        GdiBatchCount;                     
    ULONG                        IdealProcessorValue;               
    ULONG                        GuaranteedStackBytes;              
    ULONG                        ReservedForPerf;                   
    ULONG                        ReservedForOle;                    
    ULONG                        WaitingOnLoaderLock;               
    ULONG                        SavedPriorityState;                
    ULONG                        ReservedForCodeCoverage;           
    ULONG                        ThreadPoolData;                    
    ULONG                        TlsExpansionSlots;                 
    ULONG                        MuiGeneration;                     
    ULONG                        IsImpersonating;                   
    ULONG                        NlsCache;                          
    ULONG                        ShimData;                          
    ULONG                        HeapVirtualAffinity;               
    ULONG                        CurrentTransactionHandle;          
    ULONG                        ActiveFrame;                       
    ULONG                        FlsSlots;                          
    ULONG                        PreferredLanguages;                
    ULONG                        UserPrefLanguages;                 
    ULONG                        MergedPrefLanguages;               
    ULONG                        MuiImpersonation;                  
    USHORT                       CrossTebFlags;                     
    USHORT                       SameTebFlags;                      
    ULONG                        TxnScopeEnterCallback;             
    ULONG                        TxnScopeExitCallback;              
    ULONG                        TxnScopeContext;                   
    ULONG                        LockCount;                         
    LONG                         WowTebOffset;                      
    ULONG                        ResourceRetValue;                  
    ULONG                        ReservedForWdf;                    
    ULONG32                    ReservedForCrt;                    
    GUID                         EffectiveContainerId;              
} TEB32;

C_ASSERT( sizeof(TEB32) == 0x1000 );

typedef struct _TEB64
{
    NT_TIB64                     Tib;                               
    ULONG64                      EnvironmentPointer;                
    CLIENT_ID64                  ClientId;                          
    ULONG64                      ActiveRpcHandle;                   
    ULONG64                      ThreadLocalStoragePointer;         
    ULONG64                      Peb;                               
    ULONG                        LastErrorValue;                    
    ULONG                        CountOfOwnedCriticalSections;      
    ULONG64                      CsrClientThread;                   
    ULONG64                      Win32ThreadInfo;                   
    ULONG                        User32Reserved[26];                
    ULONG                        UserReserved[5];                   
    ULONG64                      WOW32Reserved;                     
    ULONG                        CurrentLocale;                     
    ULONG                        FpSoftwareStatusRegister;          
    ULONG64                      ReservedForDebuggerInstrumentation[16]; 
    ULONG64                      SystemReserved1[30];               
    char                         PlaceholderCompatibilityMode;      
    BOOL                      PlaceholderHydrationAlwaysExplicit;
    char                         PlaceholderReserved[10];           
    DWORD                        ProxiedProcessId;                  
    ACTIVATION_CONTEXT_STACK64   ActivationContextStack;            
    UCHAR                        WorkingOnBehalfOfTicket[8];        
    LONG                         ExceptionCode;                     
    ULONG64                      ActivationContextStackPointer;     
    ULONG64                      InstrumentationCallbackSp;         
    ULONG64                      InstrumentationCallbackPreviousPc; 
    ULONG64                      InstrumentationCallbackPreviousSp; 
    ULONG                        TxFsContext;                       
    BOOL                      InstrumentationCallbackDisabled;   
    BOOL                      UnalignedLoadStoreExceptions;      
    ULONG64                      GdiTebBatch[0x9d];                 
    CLIENT_ID64                  RealClientId;                      
    ULONG64                      GdiCachedProcessHandle;            
    ULONG                        GdiClientPID;                      
    ULONG                        GdiClientTID;                      
    ULONG64                      GdiThreadLocaleInfo;               
    ULONG64                      Win32ClientInfo[62];               
    ULONG64                      glDispatchTable[233];              
    ULONG64                      glReserved1[29];                   
    ULONG64                      glReserved2;                       
    ULONG64                      glSectionInfo;                     
    ULONG64                      glSection;                         
    ULONG64                      glTable;                           
    ULONG64                      glCurrentRC;                       
    ULONG64                      glContext;                         
    ULONG                        LastStatusValue;                   
    UNICODE_STRING64             StaticUnicodeString;               
    WCHAR                        StaticUnicodeBuffer[261];          
    ULONG64                      DeallocationStack;                 
    ULONG64                      TlsSlots[64];                      
    LIST_ENTRY64                 TlsLinks;                          
    ULONG64                      Vdm;                               
    ULONG64                      ReservedForNtRpc;                  
    ULONG64                      DbgSsReserved[2];                  
    ULONG                        HardErrorMode;                     
    ULONG64                      Instrumentation[11];               
    GUID                         ActivityId;                        
    ULONG64                      SubProcessTag;                     
    ULONG64                      PerflibData;                       
    ULONG64                      EtwTraceData;                      
    ULONG64                      WinSockData;                       
    ULONG                        GdiBatchCount;                     
    ULONG                        IdealProcessorValue;               
    ULONG                        GuaranteedStackBytes;              
    ULONG64                      ReservedForPerf;                   
    ULONG64                      ReservedForOle;                    
    ULONG                        WaitingOnLoaderLock;               
    ULONG64                      SavedPriorityState;                
    ULONG64                      ReservedForCodeCoverage;           
    ULONG64                      ThreadPoolData;                    
    ULONG64                      TlsExpansionSlots;                 
    union {
        ULONG64                  DeallocationBStore;                
        ULONG64                  ChpeV2CpuAreaInfo;                 
    } DUMMYUNIONNAME;
    ULONG64                      BStoreLimit;                       
    ULONG                        MuiGeneration;                     
    ULONG                        IsImpersonating;                   
    ULONG64                      NlsCache;                          
    ULONG64                      ShimData;                          
    ULONG                        HeapVirtualAffinity;               
    ULONG64                      CurrentTransactionHandle;          
    ULONG64                      ActiveFrame;                       
    ULONG64                      FlsSlots;                          
    ULONG64                      PreferredLanguages;                
    ULONG64                      UserPrefLanguages;                 
    ULONG64                      MergedPrefLanguages;               
    ULONG                        MuiImpersonation;                  
    USHORT                       CrossTebFlags;                     
    USHORT                       SameTebFlags;                      
    ULONG64                      TxnScopeEnterCallback;             
    ULONG64                      TxnScopeExitCallback;              
    ULONG64                      TxnScopeContext;                   
    ULONG                        LockCount;                         
    LONG                         WowTebOffset;                      
    ULONG64                      ResourceRetValue;                  
    ULONG64                      ReservedForWdf;                    
    ULONG32                    ReservedForCrt;                    
    GUID                         EffectiveContainerId;              
} TEB64;

C_ASSERT( sizeof(TEB64) == 0x1838 );





C_ASSERT( sizeof(PEB) == sizeof(PEB32) );
C_ASSERT( sizeof(TEB) == sizeof(TEB32) );
















typedef enum _FILE_INFORMATION_CLASS {
    FileDirectoryInformation = 1,
    FileFullDirectoryInformation,
    FileBothDirectoryInformation,
    FileBasicInformation,
    FileStandardInformation,
    FileInternalInformation,
    FileEaInformation,
    FileAccessInformation,
    FileNameInformation,
    FileRenameInformation,
    FileLinkInformation,
    FileNamesInformation,
    FileDispositionInformation,
    FilePositionInformation,
    FileFullEaInformation,
    FileModeInformation,
    FileAlignmentInformation,
    FileAllInformation,
    FileAllocationInformation,
    FileEndOfFileInformation,
    FileAlternateNameInformation,
    FileStreamInformation,
    FilePipeInformation,
    FilePipeLocalInformation,
    FilePipeRemoteInformation,
    FileMailslotQueryInformation,
    FileMailslotSetInformation,
    FileCompressionInformation,
    FileObjectIdInformation,
    FileCompletionInformation,
    FileMoveClusterInformation,
    FileQuotaInformation,
    FileReparsePointInformation,
    FileNetworkOpenInformation,
    FileAttributeTagInformation,
    FileTrackingInformation,
    FileIdBothDirectoryInformation,
    FileIdFullDirectoryInformation,
    FileValidDataLengthInformation,
    FileShortNameInformation,
    FileIoCompletionNotificationInformation,
    FileIoStatusBlockRangeInformation,
    FileIoPriorityHintInformation,
    FileSfioReserveInformation,
    FileSfioVolumeInformation,
    FileHardLinkInformation,
    FileProcessIdsUsingFileInformation,
    FileNormalizedNameInformation,
    FileNetworkPhysicalNameInformation,
    FileIdGlobalTxDirectoryInformation,
    FileIsRemoteDeviceInformation,
    FileAttributeCacheInformation,
    FileNumaNodeInformation,
    FileStandardLinkInformation,
    FileRemoteProtocolInformation,
    FileRenameInformationBypassAccessCheck,
    FileLinkInformationBypassAccessCheck,
    FileVolumeNameInformation,
    FileIdInformation,
    FileIdExtdDirectoryInformation,
    FileReplaceCompletionInformation,
    FileHardLinkFullIdInformation,
    FileIdExtdBothDirectoryInformation,
    FileDispositionInformationEx,
    FileRenameInformationEx,
    FileRenameInformationExBypassAccessCheck,
    FileDesiredStorageClassInformation,
    FileStatInformation,
    FileMemoryPartitionInformation,
    FileStatLxInformation,
    FileCaseSensitiveInformation,
    FileLinkInformationEx,
    FileLinkInformationExBypassAccessCheck,
    FileStorageReserveIdInformation,
    FileCaseSensitiveInformationForceAccessCheck,
    FileKnownFolderInformation,
    FileMaximumInformation
} FILE_INFORMATION_CLASS, *PFILE_INFORMATION_CLASS;

typedef struct _FILE_DIRECTORY_INFORMATION {
    ULONG               NextEntryOffset;
    ULONG               FileIndex;
    LARGE_INTEGER       CreationTime;
    LARGE_INTEGER       LastAccessTime;
    LARGE_INTEGER       LastWriteTime;
    LARGE_INTEGER       ChangeTime;
    LARGE_INTEGER       EndOfFile;
    LARGE_INTEGER       AllocationSize;
    ULONG               FileAttributes;
    ULONG               FileNameLength;
    WCHAR               FileName[ANYSIZE_ARRAY];
} FILE_DIRECTORY_INFORMATION, *PFILE_DIRECTORY_INFORMATION;

typedef struct _FILE_FULL_DIRECTORY_INFORMATION {
    ULONG               NextEntryOffset;
    ULONG               FileIndex;
    LARGE_INTEGER       CreationTime;
    LARGE_INTEGER       LastAccessTime;
    LARGE_INTEGER       LastWriteTime;
    LARGE_INTEGER       ChangeTime;
    LARGE_INTEGER       EndOfFile;
    LARGE_INTEGER       AllocationSize;
    ULONG               FileAttributes;
    ULONG               FileNameLength;
    ULONG               EaSize;
    WCHAR               FileName[ANYSIZE_ARRAY];
} FILE_FULL_DIRECTORY_INFORMATION, *PFILE_FULL_DIRECTORY_INFORMATION,
  FILE_FULL_DIR_INFORMATION, *PFILE_FULL_DIR_INFORMATION;

typedef struct _FILE_ID_FULL_DIRECTORY_INFORMATION {
    ULONG               NextEntryOffset;
    ULONG               FileIndex;
    LARGE_INTEGER       CreationTime;
    LARGE_INTEGER       LastAccessTime;
    LARGE_INTEGER       LastWriteTime;
    LARGE_INTEGER       ChangeTime;
    LARGE_INTEGER       EndOfFile;
    LARGE_INTEGER       AllocationSize;
    ULONG               FileAttributes;
    ULONG               FileNameLength;
    ULONG               EaSize;
    LARGE_INTEGER       FileId;
    WCHAR               FileName[ANYSIZE_ARRAY];
} FILE_ID_FULL_DIRECTORY_INFORMATION, *PFILE_ID_FULL_DIRECTORY_INFORMATION;

typedef struct _FILE_BOTH_DIRECTORY_INFORMATION {
    ULONG               NextEntryOffset;
    ULONG               FileIndex;
    LARGE_INTEGER       CreationTime;
    LARGE_INTEGER       LastAccessTime;
    LARGE_INTEGER       LastWriteTime;
    LARGE_INTEGER       ChangeTime;
    LARGE_INTEGER       EndOfFile;
    LARGE_INTEGER       AllocationSize;
    ULONG               FileAttributes;
    ULONG               FileNameLength;
    ULONG               EaSize;
    CHAR                ShortNameLength;
    WCHAR               ShortName[12];
    WCHAR               FileName[ANYSIZE_ARRAY];
} FILE_BOTH_DIRECTORY_INFORMATION, *PFILE_BOTH_DIRECTORY_INFORMATION,
  FILE_BOTH_DIR_INFORMATION, *PFILE_BOTH_DIR_INFORMATION;

typedef struct _FILE_ID_BOTH_DIRECTORY_INFORMATION {
    ULONG               NextEntryOffset;
    ULONG               FileIndex;
    LARGE_INTEGER       CreationTime;
    LARGE_INTEGER       LastAccessTime;
    LARGE_INTEGER       LastWriteTime;
    LARGE_INTEGER       ChangeTime;
    LARGE_INTEGER       EndOfFile;
    LARGE_INTEGER       AllocationSize;
    ULONG               FileAttributes;
    ULONG               FileNameLength;
    ULONG               EaSize;
    CHAR                ShortNameLength;
    WCHAR               ShortName[12];
    LARGE_INTEGER       FileId;
    WCHAR               FileName[ANYSIZE_ARRAY];
} FILE_ID_BOTH_DIRECTORY_INFORMATION, *PFILE_ID_BOTH_DIRECTORY_INFORMATION;

typedef struct _FILE_ID_GLOBAL_TX_DIR_INFORMATION {
    ULONG               NextEntryOffset;
    ULONG               FileIndex;
    LARGE_INTEGER       CreationTime;
    LARGE_INTEGER       LastAccessTime;
    LARGE_INTEGER       LastWriteTime;
    LARGE_INTEGER       ChangeTime;
    LARGE_INTEGER       EndOfFile;
    LARGE_INTEGER       AllocationSize;
    ULONG               FileAttributes;
    ULONG               FileNameLength;
    LARGE_INTEGER       FileId;
    GUID                LockingTransactionId;
    ULONG               TxInfoFlags;
    WCHAR               FileName[ANYSIZE_ARRAY];
} FILE_ID_GLOBAL_TX_DIR_INFORMATION, *PFILE_ID_GLOBAL_TX_DIR_INFORMATION;

typedef struct _FILE_BASIC_INFORMATION {
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    ULONG FileAttributes;
} FILE_BASIC_INFORMATION, *PFILE_BASIC_INFORMATION;

typedef struct _FILE_STANDARD_INFORMATION {
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    ULONG NumberOfLinks;
    BOOL DeletePending;
    BOOL Directory;
} FILE_STANDARD_INFORMATION, *PFILE_STANDARD_INFORMATION;

typedef struct _FILE_INTERNAL_INFORMATION {
    LARGE_INTEGER IndexNumber;
} FILE_INTERNAL_INFORMATION, *PFILE_INTERNAL_INFORMATION;

typedef struct _FILE_ID_128 {
    UCHAR Identifier[16];
} FILE_ID_128, *PFILE_ID_128;

typedef struct _FILE_ID_INFORMATION {
    ULONG32 VolumeSerialNumber;
    FILE_ID_128 FileId;
} FILE_ID_INFORMATION, *PFILE_ID_INFORMATION;

typedef struct _FILE_EA_INFORMATION {
    ULONG EaSize;
} FILE_EA_INFORMATION, *PFILE_EA_INFORMATION;

typedef struct _FILE_ACCESS_INFORMATION {
    ACCESS_MASK AccessFlags;
} FILE_ACCESS_INFORMATION, *PFILE_ACCESS_INFORMATION;

typedef struct _FILE_NAME_INFORMATION {
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_NAME_INFORMATION, *PFILE_NAME_INFORMATION;

typedef struct _FILE_RENAME_INFORMATION {
    union {
        BOOL ReplaceIfExists;
        ULONG Flags;
    } DUMMYUNIONNAME;
    void* RootDirectory;
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_RENAME_INFORMATION, *PFILE_RENAME_INFORMATION;










typedef struct _FILE_LINK_INFORMATION {
    union {
        BOOL ReplaceIfExists;
        ULONG Flags;
    } DUMMYUNIONNAME;
    void* RootDirectory;
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_LINK_INFORMATION, *PFILE_LINK_INFORMATION;












typedef struct _FILE_NAMES_INFORMATION {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    ULONG FileNameLength;
    WCHAR FileName[1];
} FILE_NAMES_INFORMATION, *PFILE_NAMES_INFORMATION;

typedef struct _FILE_DISPOSITION_INFORMATION {
    BOOL DoDeleteFile;
} FILE_DISPOSITION_INFORMATION, *PFILE_DISPOSITION_INFORMATION;

typedef struct _FILE_DISPOSITION_INFORMATION_EX {
    ULONG Flags;
} FILE_DISPOSITION_INFORMATION_EX, *PFILE_DISPOSITION_INFORMATION_EX;








typedef struct _FILE_POSITION_INFORMATION {
    LARGE_INTEGER CurrentByteOffset;
} FILE_POSITION_INFORMATION, *PFILE_POSITION_INFORMATION;

typedef struct _FILE_ALIGNMENT_INFORMATION {
    ULONG AlignmentRequirement;
} FILE_ALIGNMENT_INFORMATION, *PFILE_ALIGNMENT_INFORMATION;

typedef struct _FILE_ALLOCATION_INFORMATION {
    LARGE_INTEGER AllocationSize;
} FILE_ALLOCATION_INFORMATION, *PFILE_ALLOCATION_INFORMATION;

typedef struct _FILE_END_OF_FILE_INFORMATION {
    LARGE_INTEGER EndOfFile;
} FILE_END_OF_FILE_INFORMATION, *PFILE_END_OF_FILE_INFORMATION;

typedef struct _FILE_NETWORK_OPEN_INFORMATION {
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    ULONG FileAttributes;
} FILE_NETWORK_OPEN_INFORMATION, *PFILE_NETWORK_OPEN_INFORMATION;

typedef struct _FILE_FULL_EA_INFORMATION {
    ULONG NextEntryOffset;
    UCHAR Flags;
    UCHAR EaNameLength;
    USHORT EaValueLength;
    CHAR EaName[1];
} FILE_FULL_EA_INFORMATION, *PFILE_FULL_EA_INFORMATION;

typedef struct _FILE_MODE_INFORMATION {
    ULONG Mode;
} FILE_MODE_INFORMATION, *PFILE_MODE_INFORMATION;

typedef struct _FILE_STREAM_INFORMATION
{
    ULONG NextEntryOffset;
    ULONG StreamNameLength;
    LARGE_INTEGER StreamSize;
    LARGE_INTEGER StreamAllocationSize;
    WCHAR StreamName[1];
} FILE_STREAM_INFORMATION, *PFILE_STREAM_INFORMATION;

typedef struct _FILE_ATTRIBUTE_TAG_INFORMATION
{
    ULONG FileAttributes;
    ULONG ReparseTag;
} FILE_ATTRIBUTE_TAG_INFORMATION, *PFILE_ATTRIBUTE_TAG_INFORMATION;

typedef struct _FILE_MAILSLOT_QUERY_INFORMATION {
    ULONG MaximumMessageSize;
    ULONG MailslotQuota;
    ULONG NextMessageSize;
    ULONG MessagesAvailable;
    LARGE_INTEGER ReadTimeout;
} FILE_MAILSLOT_QUERY_INFORMATION, *PFILE_MAILSLOT_QUERY_INFORMATION;

typedef struct _FILE_MAILSLOT_SET_INFORMATION {
    LARGE_INTEGER ReadTimeout;
} FILE_MAILSLOT_SET_INFORMATION, *PFILE_MAILSLOT_SET_INFORMATION;

typedef struct _FILE_PIPE_INFORMATION {
    ULONG ReadMode;
    ULONG CompletionMode;
} FILE_PIPE_INFORMATION, *PFILE_PIPE_INFORMATION;

typedef struct _FILE_PIPE_LOCAL_INFORMATION {
    ULONG NamedPipeType;
    ULONG NamedPipeConfiguration;
    ULONG MaximumInstances;
    ULONG CurrentInstances;
    ULONG InboundQuota;
    ULONG ReadDataAvailable;
    ULONG OutboundQuota;
    ULONG WriteQuotaAvailable;
    ULONG NamedPipeState;
    ULONG NamedPipeEnd;
} FILE_PIPE_LOCAL_INFORMATION, *PFILE_PIPE_LOCAL_INFORMATION;






typedef struct _FILE_OBJECTID_BUFFER
{
    BYTE ObjectId[16];
    union
    {
        struct
        {
            BYTE BirthVolumeId[16];
            BYTE BirthObjectId[16];
            BYTE DomainId[16];
        } DUMMYSTRUCTNAME;
        BYTE ExtendedInfo[48];
    } DUMMYUNIONNAME;
} FILE_OBJECTID_BUFFER, *PFILE_OBJECTID_BUFFER;

typedef struct _FILE_OBJECTID_INFORMATION {
    LONG32 FileReference;
    UCHAR ObjectId[16];
    union {
        struct {
            UCHAR BirthVolumeId[16];
            UCHAR BirthObjectId[16];
            UCHAR DomainId[16];
        } DUMMYSTRUCTNAME;
        UCHAR ExtendedInfo[48];
    } DUMMYUNIONNAME;
} FILE_OBJECTID_INFORMATION, *PFILE_OBJECTID_INFORMATION;

typedef struct _FILE_QUOTA_INFORMATION {
    ULONG NextEntryOffset;
    ULONG SidLength;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER QuotaUsed;
    LARGE_INTEGER QuotaThreshold;
    LARGE_INTEGER QuotaLimit;
    SID Sid;
} FILE_QUOTA_INFORMATION, *PFILE_QUOTA_INFORMATION;

typedef struct _FILE_REPARSE_POINT_INFORMATION {
    LONG32 FileReference;
    ULONG Tag;
} FILE_REPARSE_POINT_INFORMATION, *PFILE_REPARSE_POINT_INFORMATION;

typedef struct _FILE_ALL_INFORMATION {
    FILE_BASIC_INFORMATION     BasicInformation;
    FILE_STANDARD_INFORMATION  StandardInformation;
    FILE_INTERNAL_INFORMATION  InternalInformation;
    FILE_EA_INFORMATION        EaInformation;
    FILE_ACCESS_INFORMATION    AccessInformation;
    FILE_POSITION_INFORMATION  PositionInformation;
    FILE_MODE_INFORMATION      ModeInformation;
    FILE_ALIGNMENT_INFORMATION AlignmentInformation;
    FILE_NAME_INFORMATION      NameInformation;
} FILE_ALL_INFORMATION, *PFILE_ALL_INFORMATION;

typedef struct _FILE_STAT_INFORMATION {
    LARGE_INTEGER FileId;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    ULONG FileAttributes;
    ULONG ReparseTag;
    ULONG NumberOfLinks;
    ULONG EffectiveAccess;
} FILE_STAT_INFORMATION, *PFILE_STAT_INFORMATION;

typedef struct _FILE_IO_COMPLETION_NOTIFICATION_INFORMATION {
    ULONG Flags;
} FILE_IO_COMPLETION_NOTIFICATION_INFORMATION, *PFILE_IO_COMPLETION_NOTIFICATION_INFORMATION;





typedef struct _PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION
{
    ULONG  Version;
    ULONG  Reserved;
    VOID  *void *;
} PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION, *PPROCESS_INSTRUMENTATION_CALLBACK_INFORMATION;

typedef enum _FSINFOCLASS {
    FileFsVolumeInformation = 1,
    FileFsLabelInformation,
    FileFsSizeInformation,
    FileFsDeviceInformation,
    FileFsAttributeInformation,
    FileFsControlInformation,
    FileFsFullSizeInformation,
    FileFsObjectIdInformation,
    FileFsDriverPathInformation,
    FileFsVolumeFlagsInformation,
    FileFsSectorSizeInformation,
    FileFsDataCopyInformation,
    FileFsMetadataSizeInformation,
    FileFsFullSizeInformationEx,
    FileFsMaximumInformation
} FS_INFORMATION_CLASS, *PFS_INFORMATION_CLASS;

typedef enum _KEY_INFORMATION_CLASS {
    KeyBasicInformation,
    KeyNodeInformation,
    KeyFullInformation,
    KeyNameInformation,
    KeyCachedInformation,
    KeyFlagsInformation,
    KeyVirtualizationInformation,
    KeyHandleTagsInformation,
    KeyTrustInformation,
    KeyLayerInformation,
    MaxKeyInfoClass
} KEY_INFORMATION_CLASS;

typedef enum _KEY_VALUE_INFORMATION_CLASS {
    KeyValueBasicInformation,
    KeyValueFullInformation,
    KeyValuePartialInformation,
    KeyValueFullInformationAlign64,
    KeyValuePartialInformationAlign64,
    KeyValueLayerInformation,
} KEY_VALUE_INFORMATION_CLASS;

typedef enum _OBJECT_INFORMATION_CLASS {
    ObjectBasicInformation,
    ObjectNameInformation,
    ObjectTypeInformation,
    ObjectTypesInformation,
    ObjectHandleFlagInformation,
    ObjectSessionInformation,
    ObjectSessionObjectInformation,
} OBJECT_INFORMATION_CLASS, *POBJECT_INFORMATION_CLASS;

typedef enum _PROCESSINFOCLASS {
    ProcessBasicInformation = 0,
    ProcessQuotaLimits = 1,
    ProcessIoCounters = 2,
    ProcessVmCounters = 3,
    ProcessTimes = 4,
    ProcessBasePriority = 5,
    ProcessRaisePriority = 6,
    ProcessDebugPort = 7,
    ProcessExceptionPort = 8,
    ProcessAccessToken = 9,
    ProcessLdtInformation = 10,
    ProcessLdtSize = 11,
    ProcessDefaultHardErrorMode = 12,
    ProcessIoPortHandlers = 13,
    ProcessPooledUsageAndLimits = 14,
    ProcessWorkingSetWatch = 15,
    ProcessUserModeIOPL = 16,
    ProcessEnableAlignmentFaultFixup = 17,
    ProcessPriorityClass = 18,
    ProcessWx86Information = 19,
    ProcessHandleCount = 20,
    ProcessAffinityMask = 21,
    ProcessPriorityBoost = 22,
    ProcessDeviceMap = 23,
    ProcessSessionInformation = 24,
    ProcessForegroundInformation = 25,
    ProcessWow64Information = 26,
    ProcessImageFileName = 27,
    ProcessLUIDDeviceMapsEnabled = 28,
    ProcessBreakOnTermination = 29,
    ProcessDebugObjectHandle = 30,
    ProcessDebugFlags = 31,
    ProcessHandleTracing = 32,
    ProcessIoPriority = 33,
    ProcessExecuteFlags = 34,
    ProcessTlsInformation = 35,
    ProcessCookie = 36,
    ProcessImageInformation = 37,
    ProcessCycleTime = 38,
    ProcessPagePriority = 39,
    ProcessInstrumentationCallback = 40,
    ProcessThreadStackAllocation = 41,
    ProcessWorkingSetWatchEx = 42,
    ProcessImageFileNameWin32 = 43,
    ProcessImageFileMapping = 44,
    ProcessAffinityUpdateMode = 45,
    ProcessMemoryAllocationMode = 46,
    ProcessGroupInformation = 47,
    ProcessTokenVirtualizationEnabled = 48,
    ProcessConsoleHostProcess = 49,
    ProcessWindowInformation = 50,
    ProcessHandleInformation = 51,
    ProcessMitigationPolicy = 52,
    ProcessDynamicFunctionTableInformation = 53,
    ProcessHandleCheckingMode = 54,
    ProcessKeepAliveCount = 55,
    ProcessRevokeFileHandles = 56,
    ProcessWorkingSetControl = 57,
    ProcessHandleTable = 58,
    ProcessCheckStackExtentsMode = 59,
    ProcessCommandLineInformation = 60,
    ProcessProtectionInformation = 61,
    ProcessMemoryExhaustion = 62,
    ProcessFaultInformation = 63,
    ProcessTelemetryIdInformation = 64,
    ProcessCommitReleaseInformation = 65,
    ProcessDefaultCpuSetsInformation = 66,
    ProcessAllowedCpuSetsInformation = 67,
    ProcessSubsystemProcess = 68,
    ProcessJobMemoryInformation = 69,
    ProcessInPrivate = 70,
    ProcessRaiseUMExceptionOnInvalidHandleClose = 71,
    ProcessIumChallengeResponse = 72,
    ProcessChildProcessInformation = 73,
    ProcessHighGraphicsPriorityInformation = 74,
    ProcessSubsystemInformation = 75,
    ProcessEnergyValues = 76,
    ProcessPowerThrottlingState = 77,
    ProcessReserved3Information = 78,
    ProcessWin32kSyscallFilterInformation = 79,
    ProcessDisableSystemAllowedCpuSets = 80,
    ProcessWakeInformation = 81,
    ProcessEnergyTrackingState = 82,
    ProcessManageWritesToExecutableMemory = 83,
    ProcessCaptureTrustletLiveDump = 84,
    ProcessTelemetryCoverage = 85,
    ProcessEnclaveInformation = 86,
    ProcessEnableReadWriteVmLogging = 87,
    ProcessUptimeInformation = 88,
    ProcessImageSection = 89,
    ProcessDebugAuthInformation = 90,
    ProcessSystemResourceManagement = 91,
    ProcessSequenceNumber = 92,
    ProcessLoaderDetour = 93,
    ProcessSecurityDomainInformation = 94,
    ProcessCombineSecurityDomainsInformation = 95,
    ProcessEnableLogging = 96,
    ProcessLeapSecondInformation = 97,
    ProcessFiberShadowStackAllocation = 98,
    ProcessFreeFiberShadowStackAllocation = 99,
    ProcessAltSystemCallInformation = 100,
    ProcessDynamicEHContinuationTargets = 101,
    ProcessDynamicEnforcedCetCompatibleRanges = 102,
    ProcessCreateStateChange = 103,
    ProcessApplyStateChange = 104,
    ProcessEnableOptionalXStateFeatures = 105,
    ProcessAltPrefetchParam = 106,
    ProcessAssignCpuPartitions = 107,
    ProcessPriorityClassEx = 108,
    ProcessMembershipInformation = 109,
    ProcessEffectiveIoPriority = 110,
    ProcessEffectivePagePriority = 111,
    MaxProcessInfoClass,

    ProcessWineMakeProcessSystem = 1000,
    ProcessWineLdtCopy,
    ProcessWineGrantAdminToken,

} PROCESSINFOCLASS;






typedef enum _SECTION_INHERIT {
    ViewShare = 1,
    ViewUnmap = 2
} SECTION_INHERIT;

typedef enum _SYSTEM_INFORMATION_CLASS {
    SystemBasicInformation = 0,
    SystemCpuInformation = 1,
    SystemPerformanceInformation = 2,
    SystemTimeOfDayInformation = 3, 
    SystemPathInformation = 4,
    SystemProcessInformation = 5,
    SystemCallCountInformation = 6,
    SystemDeviceInformation = 7,
    SystemProcessorPerformanceInformation = 8,
    SystemFlagsInformation = 9,
    SystemCallTimeInformation = 10,
    SystemModuleInformation = 11,
    SystemLocksInformation = 12,
    SystemStackTraceInformation = 13,
    SystemPagedPoolInformation = 14,
    SystemNonPagedPoolInformation = 15,
    SystemHandleInformation = 16,
    SystemObjectInformation = 17,
    SystemPageFileInformation = 18,
    SystemVdmInstemulInformation = 19,
    SystemVdmBopInformation = 20,
    SystemFileCacheInformation = 21,
    SystemPoolTagInformation = 22,
    SystemInterruptInformation = 23,
    SystemDpcBehaviorInformation = 24,
    SystemFullMemoryInformation = 25,
    SystemNotImplemented6 = 25,
    SystemLoadGdiDriverInformation = 26,
    SystemUnloadGdiDriverInformation = 27,
    SystemTimeAdjustmentInformation = 28,
    SystemTimeAdjustment = 28,
    SystemSummaryMemoryInformation = 29,
    SystemMirrorMemoryInformation = 30,
    SystemPerformanceTraceInformation = 31,
    SystemObsolete0 = 32,
    SystemExceptionInformation = 33,
    SystemCrashDumpStateInformation = 34,
    SystemKernelDebuggerInformation = 35,
    SystemContextSwitchInformation = 36,
    SystemRegistryQuotaInformation = 37,
    SystemExtendServiceTableInformation = 38,
    SystemPrioritySeparation = 39,
    SystemVerifierAddDriverInformation = 40,
    SystemVerifierRemoveDriverInformation = 41,
    SystemProcessorIdleInformation = 42,
    SystemLegacyDriverInformation = 43,
    SystemCurrentTimeZoneInformation = 44,
    SystemLookasideInformation = 45,
    SystemTimeSlipNotification = 46,
    SystemSessionCreate = 47,
    SystemSessionDetach = 48,
    SystemSessionInformation = 49,
    SystemRangeStartInformation = 50,
    SystemVerifierInformation = 51,
    SystemVerifierThunkExtend = 52,
    SystemSessionProcessesInformation	= 53,
    SystemLoadGdiDriverInSystemSpace = 54,
    SystemNumaProcessorMap = 55,
    SystemPrefetcherInformation = 56,
    SystemExtendedProcessInformation = 57,
    SystemRecommendedSharedDataAlignment = 58,
    SystemComPlusPackage = 59,
    SystemNumaAvailableMemory = 60,
    SystemProcessorPowerInformation = 61,
    SystemEmulationBasicInformation = 62,
    SystemEmulationProcessorInformation = 63,
    SystemExtendedHandleInformation = 64,
    SystemLostDelayedWriteInformation = 65,
    SystemBigPoolInformation = 66,
    SystemSessionPoolTagInformation = 67,
    SystemSessionMappedViewInformation = 68,
    SystemHotpatchInformation = 69,
    SystemObjectSecurityMode = 70,
    SystemWatchdogTimerHandler = 71,
    SystemWatchdogTimerInformation = 72,
    SystemLogicalProcessorInformation = 73,
    SystemWow64SharedInformationObsolete = 74,
    SystemRegisterFirmwareTableInformationHandler = 75,
    SystemFirmwareTableInformation = 76,
    SystemModuleInformationEx = 77,
    SystemVerifierTriageInformation = 78,
    SystemSuperfetchInformation = 79,
    SystemMemoryListInformation = 80,
    SystemFileCacheInformationEx = 81,
    SystemThreadPriorityClientIdInformation = 82,
    SystemProcessorIdleCycleTimeInformation = 83,
    SystemVerifierCancellationInformation = 84,
    SystemProcessorPowerInformationEx = 85,
    SystemRefTraceInformation = 86,
    SystemSpecialPoolInformation = 87,
    SystemProcessIdInformation = 88,
    SystemErrorPortInformation = 89,
    SystemBootEnvironmentInformation = 90,
    SystemHypervisorInformation = 91,
    SystemVerifierInformationEx = 92,
    SystemTimeZoneInformation = 93,
    SystemImageFileExecutionOptionsInformation = 94,
    SystemCoverageInformation = 95,
    SystemPrefetchPatchInformation = 96,
    SystemVerifierFaultsInformation = 97,
    SystemSystemPartitionInformation = 98,
    SystemSystemDiskInformation = 99,
    SystemProcessorPerformanceDistribution = 100,
    SystemNumaProximityNodeInformation = 101,
    SystemDynamicTimeZoneInformation = 102,
    SystemCodeIntegrityInformation = 103,
    SystemProcessorMicrocodeUpdateInformation = 104,
    SystemProcessorBrandString = 105,
    SystemVirtualAddressInformation = 106,
    SystemLogicalProcessorInformationEx = 107,
    SystemProcessorCycleTimeInformation = 108,
    SystemStoreInformation = 109,
    SystemRegistryAppendString = 110,
    SystemAitSamplingValue = 111,
    SystemVhdBootInformation = 112,
    SystemCpuQuotaInformation = 113,
    SystemNativeBasicInformation = 114,
    SystemErrorPortTimeouts = 115,
    SystemLowPriorityIoInformation = 116,
    SystemTpmBootEntropyInformation = 117,
    SystemVerifierCountersInformation = 118,
    SystemPagedPoolInformationEx = 119,
    SystemSystemPtesInformationEx = 120,
    SystemNodeDistanceInformation = 121,
    SystemAcpiAuditInformation = 122,
    SystemBasicPerformanceInformation = 123,
    SystemQueryPerformanceCounterInformation = 124,
    SystemSessionBigPoolInformation = 125,
    SystemBootGraphicsInformation = 126,
    SystemScrubPhysicalMemoryInformation = 127,
    SystemBadPageInformation = 128,
    SystemProcessorProfileControlArea = 129,
    SystemCombinePhysicalMemoryInformation = 130,
    SystemEntropyInterruptTimingInformation = 131,
    SystemConsoleInformation = 132,
    SystemPlatformBinaryInformation = 133,
    SystemPolicyInformation = 134,
    SystemHypervisorProcessorCountInformation = 135,
    SystemDeviceDataInformation = 136,
    SystemDeviceDataEnumerationInformation = 137,
    SystemMemoryTopologyInformation = 138,
    SystemMemoryChannelInformation = 139,
    SystemBootLogoInformation = 140,
    SystemProcessorPerformanceInformationEx = 141,
    SystemCriticalProcessErrorLogInformation = 142,
    SystemSecureBootPolicyInformation = 143,
    SystemPageFileInformationEx = 144,
    SystemSecureBootInformation = 145,
    SystemEntropyInterruptTimingRawInformation = 146,
    SystemPortableWorkspaceEfiLauncherInformation = 147,
    SystemFullProcessInformation = 148,
    SystemKernelDebuggerInformationEx = 149,
    SystemBootMetadataInformation = 150,
    SystemSoftRebootInformation = 151,
    SystemElamCertificateInformation = 152,
    SystemOfflineDumpConfigInformation = 153,
    SystemProcessorFeaturesInformation = 154,
    SystemRegistryReconciliationInformation = 155,
    SystemEdidInformation = 156,
    SystemManufacturingInformation = 157,
    SystemEnergyEstimationConfigInformation = 158,
    SystemHypervisorDetailInformation = 159,
    SystemProcessorCycleStatsInformation = 160,
    SystemVmGenerationCountInformation = 161,
    SystemTrustedPlatformModuleInformation = 162,
    SystemKernelDebuggerFlags = 163,
    SystemCodeIntegrityPolicyInformation = 164,
    SystemIsolatedUserModeInformation = 165,
    SystemHardwareSecurityTestInterfaceResultsInformation = 166,
    SystemSingleModuleInformation = 167,
    SystemAllowedCpuSetsInformation = 168,
    SystemVsmProtectionInformation = 169,
    SystemInterruptCpuSetsInformation = 170,
    SystemSecureBootPolicyFullInformation = 171,
    SystemCodeIntegrityPolicyFullInformation = 172,
    SystemAffinitizedInterruptProcessorInformation = 173,
    SystemRootSiloInformation = 174,
    SystemCpuSetInformation = 175,
    SystemCpuSetTagInformation = 176,
    SystemWin32WerStartCallout = 177,
    SystemSecureKernelProfileInformation = 178,
    SystemCodeIntegrityPlatformManifestInformation = 179,
    SystemInterruptSteeringInformation = 180,
    SystemSupportedProcessorArchitectures = 181,
    SystemMemoryUsageInformation = 182,
    SystemCodeIntegrityCertificateInformation = 183,
    SystemPhysicalMemoryInformation = 184,
    SystemControlFlowTransition = 185,
    SystemKernelDebuggingAllowed = 186,
    SystemActivityModerationExeState = 187,
    SystemActivityModerationUserSettings = 188,
    SystemCodeIntegrityPoliciesFullInformation = 189,
    SystemCodeIntegrityUnlockInformation = 190,
    SystemIntegrityQuotaInformation = 191,
    SystemFlushInformation = 192,
    SystemProcessorIdleMaskInformation = 193,
    SystemSecureDumpEncryptionInformation = 194,
    SystemWriteConstraintInformation = 195,
    SystemKernelVaShadowInformation = 196,
    SystemHypervisorSharedPageInformation = 197,
    SystemFirmwareBootPerformanceInformation = 198,
    SystemCodeIntegrityVerificationInformation = 199,
    SystemFirmwarePartitionInformation = 200,
    SystemSpeculationControlInformation = 201,
    SystemDmaGuardPolicyInformation = 202,
    SystemEnclaveLaunchControlInformation = 203,
    SystemWorkloadAllowedCpuSetsInformation = 204,
    SystemCodeIntegrityUnlockModeInformation = 205,
    SystemLeapSecondInformation = 206,
    SystemFlags2Information = 207,
    SystemSecurityModelInformation = 208,
    SystemCodeIntegritySyntheticCacheInformation = 209,
    SystemFeatureConfigurationInformation = 210,
    SystemFeatureConfigurationSectionInformation = 211,
    SystemFeatureUsageSubscriptionInformation = 212,
    SystemSecureSpeculationControlInformation = 213,
    SystemSpacesBootInformation = 214,
    SystemFwRamdiskInformation = 215,
    SystemWheaIpmiHardwareInformation = 216,
    SystemDifSetRuleClassInformation = 217,
    SystemDifClearRuleClassInformation = 218,
    SystemDifApplyPluginVerificationOnDriver = 219,
    SystemDifRemovePluginVerificationOnDriver = 220,
    SystemShadowStackInformation = 221,
    SystemBuildVersionInformation = 222,
    SystemPoolLimitInformation = 223,
    SystemCodeIntegrityAddDynamicStore = 224,
    SystemCodeIntegrityClearDynamicStores = 225,
    SystemDifPoolTrackingInformation = 226,
    SystemPoolZeroingInformation = 227,
    SystemDpcWatchdogInformation = 228,
    SystemDpcWatchdogInformation2 = 229,
    SystemSupportedProcessorArchitectures2 = 230,
    SystemSingleProcessorRelationshipInformation = 231,
    SystemXfgCheckFailureInformation = 232,
    SystemIommuStateInformation = 233,
    SystemHypervisorMinrootInformation = 234,
    SystemHypervisorBootPagesInformation = 235,
    SystemPointerAuthInformation = 236,
    SystemSecureKernelDebuggerInformation = 237,
    SystemOriginalImageFeatureInformation = 238,

    SystemWineVersionInformation = 1000,

} SYSTEM_INFORMATION_CLASS, *PSYSTEM_INFORMATION_CLASS;

typedef struct _SYSTEM_CODEINTEGRITY_INFORMATION
{
    ULONG Length;
    ULONG CodeIntegrityOptions;
} SYSTEM_CODEINTEGRITY_INFORMATION, *PSYSTEM_CODEINTEGRITY_INFORMATION;
















typedef enum _THREADINFOCLASS {
    ThreadBasicInformation = 0,
    ThreadTimes,
    ThreadPriority,
    ThreadBasePriority,
    ThreadAffinityMask,
    ThreadImpersonationToken,
    ThreadDescriptorTableEntry,
    ThreadEnableAlignmentFaultFixup,
    ThreadEventPair_Reusable,
    ThreadQuerySetWin32StartAddress,
    ThreadZeroTlsCell,
    ThreadPerformanceCount,
    ThreadAmILastThread,
    ThreadIdealProcessor,
    ThreadPriorityBoost,
    ThreadSetTlsArrayAddress,
    ThreadIsIoPending,
    ThreadHideFromDebugger,
    ThreadBreakOnTermination,
    ThreadSwitchLegacyState,
    ThreadIsTerminated,
    ThreadLastSystemCall,
    ThreadIoPriority,
    ThreadCycleTime,
    ThreadPagePriority,
    ThreadActualBasePriority,
    ThreadTebInformation,
    ThreadCSwitchMon,
    ThreadCSwitchPmu,
    ThreadWow64Context,
    ThreadGroupInformation,
    ThreadUmsInformation,
    ThreadCounterProfiling,
    ThreadIdealProcessorEx,
    ThreadCpuAccountingInformation,
    ThreadSuspendCount,
    ThreadHeterogeneousCpuPolicy,
    ThreadContainerId,
    ThreadNameInformation,
    ThreadSelectedCpuSets,
    ThreadSystemThreadInformation,
    ThreadActualGroupAffinity,
    ThreadDynamicCodePolicyInfo,
    ThreadExplicitCaseSensitivity,
    ThreadWorkOnBehalfTicket,
    ThreadSubsystemInformation,
    ThreadDbgkWerReportActive,
    ThreadAttachContainer,
    ThreadManageWritesToExecutableMemory,
    ThreadPowerThrottlingState,
    ThreadWorkloadClass,
    ThreadCreateStateChange,
    ThreadApplyStateChange,
    ThreadStrongerBadHandleChecks,
    ThreadEffectiveIoPriority,
    ThreadEffectivePagePriority,
    MaxThreadInfoClass,

    ThreadWineNativeThreadName = 1000,

} THREADINFOCLASS;

typedef struct _THREAD_BASIC_INFORMATION
{
    NTSTATUS  ExitStatus;
    void*     TebBaseAddress;
    CLIENT_ID ClientId;
    ULONG_PTR AffinityMask;
    LONG      Priority;
    LONG      BasePriority;
} THREAD_BASIC_INFORMATION, *PTHREAD_BASIC_INFORMATION;

typedef struct _THREAD_DESCRIPTOR_INFORMATION
{
    DWORD       Selector;
    LDT_ENTRY   Entry;
} THREAD_DESCRIPTOR_INFORMATION, *PTHREAD_DESCRIPTOR_INFORMATION;

typedef struct _THREAD_NAME_INFORMATION
{
    UNICODE_STRING ThreadName;
} THREAD_NAME_INFORMATION, *PTHREAD_NAME_INFORMATION;

typedef struct _MANAGE_WRITES_TO_EXECUTABLE_MEMORY
{
    ULONG Version : 8;
    ULONG ProcessEnableWriteExceptions : 1;
    ULONG ThreadAllowWrites : 1;
    ULONG Spare : 22;
    void* KernelWriteToExecutableSignal;
} MANAGE_WRITES_TO_EXECUTABLE_MEMORY, *PMANAGE_WRITES_TO_EXECUTABLE_MEMORY;

typedef struct _KERNEL_USER_TIMES {
    LARGE_INTEGER  CreateTime;
    LARGE_INTEGER  ExitTime;
    LARGE_INTEGER  KernelTime;
    LARGE_INTEGER  UserTime;
} KERNEL_USER_TIMES, *PKERNEL_USER_TIMES;

typedef enum _WINSTATIONINFOCLASS {
    WinStationInformation = 8
} WINSTATIONINFOCLASS;

typedef enum _MEMORY_INFORMATION_CLASS {
    MemoryBasicInformation,
    MemoryWorkingSetInformation,
    MemoryMappedFilenameInformation,
    MemoryRegionInformation,
    MemoryWorkingSetExInformation,
    MemorySharedCommitInformation,
    MemoryImageInformation,
    MemoryRegionInformationEx,
    MemoryPrivilegedBasicInformation,
    MemoryEnclaveImageInformation,
    MemoryBasicInformationCapped,
    MemoryPhysicalContiguityInformation,
    MemoryBadInformation,
    MemoryBadInformationAllProcesses,

    MemoryWineUnixFuncs = 1000,
    MemoryWineUnixWow64Funcs,

} MEMORY_INFORMATION_CLASS;

typedef struct _MEMORY_SECTION_NAME
{
    UNICODE_STRING SectionFileName;
} MEMORY_SECTION_NAME, *PMEMORY_SECTION_NAME;

typedef union _MEMORY_WORKING_SET_EX_BLOCK {
    ULONG_PTR Flags;
    struct {
        ULONG_PTR Valid : 1;
        ULONG_PTR ShareCount : 3;
        ULONG_PTR Win32Protection : 11;
        ULONG_PTR Shared : 1;
        ULONG_PTR Node : 6;
        ULONG_PTR Locked : 1;
        ULONG_PTR LargePage : 1;
    } DUMMYSTRUCTNAME;
} MEMORY_WORKING_SET_EX_BLOCK, *PMEMORY_WORKING_SET_EX_BLOCK;

typedef struct _MEMORY_WORKING_SET_EX_INFORMATION {
    void*                       VirtualAddress;
    MEMORY_WORKING_SET_EX_BLOCK VirtualAttributes;
} MEMORY_WORKING_SET_EX_INFORMATION, *PMEMORY_WORKING_SET_EX_INFORMATION;

typedef struct _MEMORY_REGION_INFORMATION
{
    void* AllocationBase;
    ULONG AllocationProtect;
    union
    {
        ULONG RegionType;
        struct
        {
            ULONG Private : 1;
            ULONG MappedDataFile : 1;
            ULONG MappedImage : 1;
            ULONG MappedPageFile : 1;
            ULONG MappedPhysical : 1;
            ULONG DirectMapped : 1;
            ULONG Reserved : 26;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
    SIZE_T RegionSize;
    SIZE_T CommitSize;
    ULONG_PTR PartitionId;
    ULONG_PTR NodePreference;
} MEMORY_REGION_INFORMATION, *PMEMORY_REGION_INFORMATION;

typedef struct _MEMORY_IMAGE_INFORMATION
{
    void* ImageBase;
    SIZE_T SizeOfImage;
    union
    {
        ULONG ImageFlags;
        struct
        {
            ULONG ImagePartialMap : 1;
            ULONG ImageNotExecutable : 1;
            ULONG ImageSigningLevel : 4;
            ULONG Reserved : 26;
        };
    };
} MEMORY_IMAGE_INFORMATION, *PMEMORY_IMAGE_INFORMATION;

typedef enum _MUTANT_INFORMATION_CLASS
{
    MutantBasicInformation
} MUTANT_INFORMATION_CLASS, *PMUTANT_INFORMATION_CLASS;

typedef struct _MUTANT_BASIC_INFORMATION {
    LONG        CurrentCount;
    BOOL     OwnedByCaller;
    BOOL     AbandonedState;
} MUTANT_BASIC_INFORMATION, *PMUTANT_BASIC_INFORMATION;

typedef enum _TIMER_INFORMATION_CLASS
{
    TimerBasicInformation = 0
} TIMER_INFORMATION_CLASS;

typedef struct _TIMER_BASIC_INFORMATION
{
    LARGE_INTEGER RemainingTime;
    BOOL       TimerState;
} TIMER_BASIC_INFORMATION, *PTIMER_BASIC_INFORMATION;

typedef enum
{
    VmPrefetchInformation,
    VmPagePriorityInformation,
    VmCfgCallTargetInformation,
    VmPageDirtyStateInformation,
    VmImageHotPatchInformation,
    VmPhysicalContiguityInformation,
    VmVirtualMachinePrepopulateInformation,
    VmRemoveFromWorkingSetInformation,
} VIRTUAL_MEMORY_INFORMATION_CLASS, *PVIRTUAL_MEMORY_INFORMATION_CLASS;

typedef struct _MEMORY_RANGE_ENTRY
{
    void*  VirtualAddress;
    SIZE_T NumberOfBytes;
} MEMORY_RANGE_ENTRY, *PMEMORY_RANGE_ENTRY;



typedef enum
{
    INVALID_PATH = 0,
    UNC_PATH,              
    ABSOLUTE_DRIVE_PATH,   
    RELATIVE_DRIVE_PATH,   
    ABSOLUTE_PATH,         
    RELATIVE_PATH,         
    DEVICE_PATH,           
    UNC_DOT_PATH           
} DOS_PATHNAME_TYPE;







typedef struct _SYSTEM_THREAD_INFORMATION
{                                    
    LARGE_INTEGER KernelTime;          
    LARGE_INTEGER UserTime;            
    LARGE_INTEGER CreateTime;          
    DWORD         dwTickCount;         
    LPVOID        StartAddress;        
    CLIENT_ID     ClientId;            
    DWORD         dwCurrentPriority;   
    DWORD         dwBasePriority;      
    DWORD         dwContextSwitches;   
    DWORD         dwThreadState;       
    DWORD         dwWaitReason;        
    DWORD         dwUnknown;           
} SYSTEM_THREAD_INFORMATION, *PSYSTEM_THREAD_INFORMATION;

typedef struct _SYSTEM_EXTENDED_THREAD_INFORMATION
{
    SYSTEM_THREAD_INFORMATION ThreadInfo;          
    void                     *StackBase;           
    void                     *StackLimit;          
    void                     *Win32StartAddress;   
    void                     *TebBase;             
    ULONG_PTR                 Reserved2;           
    ULONG_PTR                 Reserved3;           
    ULONG_PTR                 Reserved4;           
} SYSTEM_EXTENDED_THREAD_INFORMATION, *PSYSTEM_EXTENDED_THREAD_INFORMATION;

typedef struct _IO_STATUS_BLOCK {
  union {
    NTSTATUS Status;
    void* Pointer;
  } DUMMYUNIONNAME;

  ULONG_PTR Information;
} IO_STATUS_BLOCK, *PIO_STATUS_BLOCK;

typedef void ( * PIO_APC_ROUTINE)(void*,PIO_STATUS_BLOCK,ULONG);

typedef struct _KEY_BASIC_INFORMATION {
    LARGE_INTEGER LastWriteTime;
    ULONG         TitleIndex;
    ULONG         NameLength;
    WCHAR         Name[1];
} KEY_BASIC_INFORMATION, *PKEY_BASIC_INFORMATION;

typedef struct _KEY_NODE_INFORMATION
{
    LARGE_INTEGER LastWriteTime;
    ULONG         TitleIndex;
    ULONG         ClassOffset;
    ULONG         ClassLength;
    ULONG         NameLength;
    WCHAR         Name[1];
   
} KEY_NODE_INFORMATION, *PKEY_NODE_INFORMATION;

typedef struct _KEY_FULL_INFORMATION
{
    LARGE_INTEGER LastWriteTime;
    ULONG         TitleIndex;
    ULONG         ClassOffset;
    ULONG         ClassLength;
    ULONG         SubKeys;
    ULONG         MaxNameLen;
    ULONG         MaxClassLen;
    ULONG         Values;
    ULONG         MaxValueNameLen;
    ULONG         MaxValueDataLen;
    WCHAR         Class[1];
} KEY_FULL_INFORMATION, *PKEY_FULL_INFORMATION;

typedef struct _KEY_NAME_INFORMATION {
    ULONG         NameLength;
    WCHAR         Name[1];
} KEY_NAME_INFORMATION, *PKEY_NAME_INFORMATION;

typedef struct _KEY_CACHED_INFORMATION
{
    LARGE_INTEGER LastWriteTime;
    ULONG         TitleIndex;
    ULONG         SubKeys;
    ULONG         MaxNameLen;
    ULONG         Values;
    ULONG         MaxValueNameLen;
    ULONG         MaxValueDataLen;
    ULONG         NameLength;
} KEY_CACHED_INFORMATION, *PKEY_CACHED_INFORMATION;

typedef struct _KEY_VALUE_ENTRY
{
    PUNICODE_STRING ValueName;
    ULONG           DataLength;
    ULONG           DataOffset;
    ULONG           Type;
} KEY_VALUE_ENTRY, *PKEY_VALUE_ENTRY;

typedef struct _KEY_VALUE_BASIC_INFORMATION {
    ULONG TitleIndex;
    ULONG Type;
    ULONG NameLength;
    WCHAR Name[1];
} KEY_VALUE_BASIC_INFORMATION, *PKEY_VALUE_BASIC_INFORMATION;

typedef struct _KEY_VALUE_FULL_INFORMATION {
    ULONG TitleIndex;
    ULONG Type;
    ULONG DataOffset;
    ULONG DataLength;
    ULONG NameLength;
    WCHAR Name[1];
} KEY_VALUE_FULL_INFORMATION, *PKEY_VALUE_FULL_INFORMATION;

typedef struct _KEY_VALUE_PARTIAL_INFORMATION {
    ULONG TitleIndex;
    ULONG Type;
    ULONG DataLength;
    UCHAR Data[1];
} KEY_VALUE_PARTIAL_INFORMATION, *PKEY_VALUE_PARTIAL_INFORMATION;

typedef struct _KEY_VALUE_PARTIAL_INFORMATION_ALIGN64 {
    ULONG Type;
    ULONG DataLength;
    UCHAR Data[1];
} KEY_VALUE_PARTIAL_INFORMATION_ALIGN64, *PKEY_VALUE_PARTIAL_INFORMATION_ALIGN64;

typedef enum _MEMORY_RESERVE_OBJECT_TYPE
{
    MemoryReserveObjectTypeUserApc,
    MemoryReserveObjectTypeIoCompletion
} MEMORY_RESERVE_OBJECT_TYPE, PMEMORY_RESERVE_OBJECT_TYPE;



typedef struct _OBJECT_ATTRIBUTES {
  ULONG Length;
  void* RootDirectory;
  PUNICODE_STRING ObjectName;
  ULONG Attributes;
  void* SecurityDescriptor;       
  void* SecurityQualityOfService; 
} OBJECT_ATTRIBUTES, *POBJECT_ATTRIBUTES;


typedef struct _OBJECT_HANDLE_FLAG_INFORMATION {
    BOOL Inherit;
    BOOL ProtectFromClose;
} OBJECT_HANDLE_FLAG_INFORMATION, *POBJECT_HANDLE_FLAG_INFORMATION;

typedef struct _OBJECT_BASIC_INFORMATION {
    ULONG  Attributes;
    ACCESS_MASK  GrantedAccess;
    ULONG  HandleCount;
    ULONG  PointerCount;
    ULONG  PagedPoolUsage;
    ULONG  NonPagedPoolUsage;
    ULONG  Reserved[3];
    ULONG  NameInformationLength;
    ULONG  TypeInformationLength;
    ULONG  SecurityDescriptorLength;
    LARGE_INTEGER  CreateTime;
} OBJECT_BASIC_INFORMATION, *POBJECT_BASIC_INFORMATION;

typedef struct _OBJECT_NAME_INFORMATION {
    UNICODE_STRING Name;
} OBJECT_NAME_INFORMATION, *POBJECT_NAME_INFORMATION;

typedef struct __OBJECT_TYPE_INFORMATION {
    UNICODE_STRING TypeName;
    ULONG TotalNumberOfObjects;
    ULONG TotalNumberOfHandles;
    ULONG TotalPagedPoolUsage;
    ULONG TotalNonPagedPoolUsage;
    ULONG TotalNamePoolUsage;
    ULONG TotalHandleTableUsage;
    ULONG HighWaterNumberOfObjects;
    ULONG HighWaterNumberOfHandles;
    ULONG HighWaterPagedPoolUsage;
    ULONG HighWaterNonPagedPoolUsage;
    ULONG HighWaterNamePoolUsage;
    ULONG HighWaterHandleTableUsage;
    ULONG InvalidAttributes;
    GENERIC_MAPPING GenericMapping;
    ULONG ValidAccessMask;
    BOOL SecurityRequired;
    BOOL MaintainHandleCount;
    UCHAR TypeIndex;
    CHAR ReservedByte;
    ULONG PoolType;
    ULONG DefaultPagedPoolCharge;
    ULONG DefaultNonPagedPoolCharge;
} OBJECT_TYPE_INFORMATION, *POBJECT_TYPE_INFORMATION;

typedef struct _OBJECT_TYPES_INFORMATION
{
    ULONG NumberOfTypes;
} OBJECT_TYPES_INFORMATION, *POBJECT_TYPES_INFORMATION;

typedef struct _PROCESS_BASIC_INFORMATION {

    NTSTATUS  ExitStatus;
    PEB      *PebBaseAddress;
    ULONG_PTR AffinityMask;
    LONG      BasePriority;
    ULONG_PTR UniqueProcessId;
    ULONG_PTR InheritedFromUniqueProcessId;







} PROCESS_BASIC_INFORMATION, *PPROCESS_BASIC_INFORMATION;

typedef struct _PROCESS_BASIC_INFORMATION64 {
    NTSTATUS  ExitStatus;
    UINT64    PebBaseAddress;
    UINT64    AffinityMask;
    LONG      BasePriority;
    UINT64    UniqueProcessId;
    UINT64    InheritedFromUniqueProcessId;
} PROCESS_BASIC_INFORMATION64;








typedef struct _PROCESS_PRIORITY_CLASS {
    BOOL     Foreground;
    UCHAR       PriorityClass;
} PROCESS_PRIORITY_CLASS, *PPROCESS_PRIORITY_CLASS;

typedef struct _PROCESS_CYCLE_TIME_INFORMATION {
    ULONG32   AccumulatedCycles;
    ULONG32   CurrentCycleCount;
} PROCESS_CYCLE_TIME_INFORMATION, *PPROCESS_CYCLE_TIME_INFORMATION;

typedef struct _PROCESS_STACK_ALLOCATION_INFORMATION
{
    SIZE_T ReserveSize;
    SIZE_T ZeroBits;
    void*  StackBase;
} PROCESS_STACK_ALLOCATION_INFORMATION, *PPROCESS_STACK_ALLOCATION_INFORMATION;

typedef struct _PROCESS_STACK_ALLOCATION_INFORMATION_EX
{
    ULONG PreferredNode;
    ULONG Reserved0;
    ULONG Reserved1;
    ULONG Reserved2;
    PROCESS_STACK_ALLOCATION_INFORMATION AllocInfo;
} PROCESS_STACK_ALLOCATION_INFORMATION_EX, *PPROCESS_STACK_ALLOCATION_INFORMATION_EX;

typedef NTSTATUS (NTAPI RTL_HEAP_COMMIT_ROUTINE)(void* base, void* *address, PSIZE_T size);
typedef RTL_HEAP_COMMIT_ROUTINE *PRTL_HEAP_COMMIT_ROUTINE;

typedef struct _RTL_HEAP_PARAMETERS
{
    ULONG Length;
    SIZE_T SegmentReserve;
    SIZE_T SegmentCommit;
    SIZE_T DeCommitFreeblockThreshold;
    SIZE_T DeCommitTotalFreeThreshold;
    SIZE_T MaximumAllocationSize;
    SIZE_T VirtualMemoryThreshold;
    SIZE_T InitialCommit;
    SIZE_T InitialReserve;
    PRTL_HEAP_COMMIT_ROUTINE CommitRoutine;
    SIZE_T Reserved[2];
} RTL_HEAP_PARAMETERS, *PRTL_HEAP_PARAMETERS;

typedef struct _RTL_RWLOCK {
    RTL_CRITICAL_SECTION rtlCS;

    void* hSharedReleaseSemaphore;
    UINT   uSharedWaiters;

    void* hExclusiveReleaseSemaphore;
    UINT   uExclusiveWaiters;

    INT    iNumberActive;
    void* hOwningThreadId;
    DWORD  dwTimeoutBoost;
    void*  pDebugInfo;
} RTL_RWLOCK, *LPRTL_RWLOCK;



typedef struct _SYSTEM_BASIC_INFORMATION {

    DWORD     unknown;
    ULONG     KeMaximumIncrement;
    ULONG     PageSize;
    ULONG     MmNumberOfPhysicalPages;
    ULONG     MmLowestPhysicalPage;
    ULONG     MmHighestPhysicalPage;
    ULONG_PTR AllocationGranularity;
    void*     LowestUserAddress;
    void*     HighestUserAddress;
    ULONG_PTR ActiveProcessorsAffinityMask;
    BYTE      NumberOfProcessors;





} SYSTEM_BASIC_INFORMATION, *PSYSTEM_BASIC_INFORMATION;



typedef struct _SYSTEM_CPU_INFORMATION {
    USHORT ProcessorArchitecture;
    USHORT ProcessorLevel;
    USHORT ProcessorRevision;
    USHORT MaximumProcessors;
    ULONG  ProcessorFeatureBits;
} SYSTEM_CPU_INFORMATION, *PSYSTEM_CPU_INFORMATION;



























































typedef struct _SYSTEM_PROCESSOR_FEATURES_INFORMATION
{
    ULONG32 ProcessorFeatureBits;
    ULONG32 Reserved[3];
} SYSTEM_PROCESSOR_FEATURES_INFORMATION, *PSYSTEM_PROCESSOR_FEATURES_INFORMATION;




typedef struct _SYSTEM_PERFORMANCE_INFORMATION {
    LARGE_INTEGER IdleTime;
    LARGE_INTEGER ReadTransferCount;
    LARGE_INTEGER WriteTransferCount;
    LARGE_INTEGER OtherTransferCount;
    ULONG ReadOperationCount;
    ULONG WriteOperationCount;
    ULONG OtherOperationCount;
    ULONG AvailablePages;
    ULONG TotalCommittedPages;
    ULONG TotalCommitLimit;
    ULONG PeakCommitment;
    ULONG PageFaults;
    ULONG WriteCopyFaults;
    ULONG TransitionFaults;
    ULONG Reserved1;
    ULONG DemandZeroFaults;
    ULONG PagesRead;
    ULONG PageReadIos;
    ULONG Reserved2[2];
    ULONG PagefilePagesWritten;
    ULONG PagefilePageWriteIos;
    ULONG MappedFilePagesWritten;
    ULONG MappedFilePageWriteIos;
    ULONG PagedPoolUsage;
    ULONG NonPagedPoolUsage;
    ULONG PagedPoolAllocs;
    ULONG PagedPoolFrees;
    ULONG NonPagedPoolAllocs;
    ULONG NonPagedPoolFrees;
    ULONG TotalFreeSystemPtes;
    ULONG SystemCodePage;
    ULONG TotalSystemDriverPages;
    ULONG TotalSystemCodePages;
    ULONG SmallNonPagedLookasideListAllocateHits;
    ULONG SmallPagedLookasideListAllocateHits;
    ULONG Reserved3;
    ULONG MmSystemCachePage;
    ULONG PagedPoolPage;
    ULONG SystemDriverPage;
    ULONG FastReadNoWait;
    ULONG FastReadWait;
    ULONG FastReadResourceMiss;
    ULONG FastReadNotPossible;
    ULONG FastMdlReadNoWait;
    ULONG FastMdlReadWait;
    ULONG FastMdlReadResourceMiss;
    ULONG FastMdlReadNotPossible;
    ULONG MapDataNoWait;
    ULONG MapDataWait;
    ULONG MapDataNoWaitMiss;
    ULONG MapDataWaitMiss;
    ULONG PinMappedDataCount;
    ULONG PinReadNoWait;
    ULONG PinReadWait;
    ULONG PinReadNoWaitMiss;
    ULONG PinReadWaitMiss;
    ULONG CopyReadNoWait;
    ULONG CopyReadWait;
    ULONG CopyReadNoWaitMiss;
    ULONG CopyReadWaitMiss;
    ULONG MdlReadNoWait;
    ULONG MdlReadWait;
    ULONG MdlReadNoWaitMiss;
    ULONG MdlReadWaitMiss;
    ULONG ReadAheadIos;
    ULONG LazyWriteIos;
    ULONG LazyWritePages;
    ULONG DataFlushes;
    ULONG DataPages;
    ULONG ContextSwitches;
    ULONG FirstLevelTbFills;
    ULONG SecondLevelTbFills;
    ULONG SystemCalls;
} SYSTEM_PERFORMANCE_INFORMATION, *PSYSTEM_PERFORMANCE_INFORMATION;



typedef struct _SYSTEM_TIMEOFDAY_INFORMATION {

    LARGE_INTEGER BootTime;
    LARGE_INTEGER SystemTime;
    LARGE_INTEGER TimeZoneBias;
    ULONG TimeZoneId;
    ULONG Reserved;
    ULONG32 BootTimeBias;
    ULONG32 SleepTimeBias;



} SYSTEM_TIMEOFDAY_INFORMATION, *PSYSTEM_TIMEOFDAY_INFORMATION; 



typedef struct _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION {
    LARGE_INTEGER IdleTime;
    LARGE_INTEGER KernelTime;
    LARGE_INTEGER UserTime;
    LARGE_INTEGER Reserved1[2];
    ULONG Reserved2;
} SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION, *PSYSTEM_PROCESSOR_PERFORMANCE_INFORMATION;



typedef struct _SYSTEM_DRIVER_INFORMATION {
    void* pvAddress;
    DWORD dwUnknown1;
    DWORD dwUnknown2;
    DWORD dwEntryIndex;
    DWORD dwUnknown3;
    char szName[MAX_PATH + 1];
} SYSTEM_DRIVER_INFORMATION, *PSYSTEM_DRIVER_INFORMATION;



typedef struct _SYSTEM_HANDLE_ENTRY {
    ULONG  OwnerPid;
    BYTE   ObjectType;
    BYTE   HandleFlags;
    USHORT HandleValue;
    void*  ObjectPointer;
    ULONG  AccessMask;
} SYSTEM_HANDLE_ENTRY, *PSYSTEM_HANDLE_ENTRY;

typedef struct _SYSTEM_HANDLE_INFORMATION {
    ULONG               Count;
    SYSTEM_HANDLE_ENTRY Handle[1];
} SYSTEM_HANDLE_INFORMATION, *PSYSTEM_HANDLE_INFORMATION;

typedef struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX
{
    void *Object;
    ULONG_PTR UniqueProcessId;
    ULONG_PTR HandleValue;
    ULONG GrantedAccess;
    USHORT CreatorBackTraceIndex;
    USHORT ObjectTypeIndex;
    ULONG HandleAttributes;
    ULONG Reserved;
} SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX;

typedef struct _SYSTEM_HANDLE_INFORMATION_EX
{
    ULONG_PTR NumberOfHandles;
    ULONG_PTR Reserved;
    SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX Handles[1];
} SYSTEM_HANDLE_INFORMATION_EX;



typedef struct _SYSTEM_CACHE_INFORMATION {
    SIZE_T CurrentSize;
    SIZE_T PeakSize;
    ULONG PageFaultCount;
    SIZE_T MinimumWorkingSet;
    SIZE_T MaximumWorkingSet;
    SIZE_T CurrentSizeIncludingTransitionInPages;
    SIZE_T PeakSizeIncludingTransitionInPages;
    ULONG TransitionRePurposeCount;
    ULONG Flags;
} SYSTEM_CACHE_INFORMATION, *PSYSTEM_CACHE_INFORMATION;



typedef struct _SYSTEM_INTERRUPT_INFORMATION {
    ULONG ContextSwitches;
    ULONG DpcCount;
    ULONG DpcRate;
    ULONG TimeIncrement;
    ULONG DpcBypassCount;
    ULONG ApcBypassCount;
} SYSTEM_INTERRUPT_INFORMATION, *PSYSTEM_INTERRUPT_INFORMATION;

typedef struct _SYSTEM_CONFIGURATION_INFO {
    union {
        ULONG	OemId;
        struct {
	    WORD ProcessorArchitecture;
	    WORD Reserved;
	} tag1;
    } tag2;
    ULONG PageSize;
    void* MinimumApplicationAddress;
    void* MaximumApplicationAddress;
    ULONG ActiveProcessorMask;
    ULONG NumberOfProcessors;
    ULONG ProcessorType;
    ULONG AllocationGranularity;
    WORD  ProcessorLevel;
    WORD  ProcessorRevision;
} SYSTEM_CONFIGURATION_INFO, *PSYSTEM_CONFIGURATION_INFO;

typedef struct _SYSTEM_EXCEPTION_INFORMATION {
    BYTE Reserved1[16];
} SYSTEM_EXCEPTION_INFORMATION, *PSYSTEM_EXCEPTION_INFORMATION;

typedef struct _SYSTEM_LOOKASIDE_INFORMATION {
    BYTE Reserved1[32];
} SYSTEM_LOOKASIDE_INFORMATION, *PSYSTEM_LOOKASIDE_INFORMATION;

typedef struct _SYSTEM_KERNEL_DEBUGGER_INFORMATION {
	BOOL  DebuggerEnabled;
	BOOL  DebuggerNotPresent;
} SYSTEM_KERNEL_DEBUGGER_INFORMATION, *PSYSTEM_KERNEL_DEBUGGER_INFORMATION;

typedef struct _SYSTEM_KERNEL_DEBUGGER_INFORMATION_EX {
    BOOL  DebuggerAllowed;
    BOOL  DebuggerEnabled;
    BOOL  DebuggerPresent;
} SYSTEM_KERNEL_DEBUGGER_INFORMATION_EX, *PSYSTEM_KERNEL_DEBUGGER_INFORMATION_EX;

typedef struct _VM_COUNTERS
{
    SIZE_T PeakVirtualSize;
    SIZE_T VirtualSize;
    ULONG PageFaultCount;
    SIZE_T PeakWorkingSetSize;
    SIZE_T WorkingSetSize;
    SIZE_T QuotaPeakPagedPoolUsage;
    SIZE_T QuotaPagedPoolUsage;
    SIZE_T QuotaPeakNonPagedPoolUsage;
    SIZE_T QuotaNonPagedPoolUsage;
    SIZE_T PagefileUsage;
    SIZE_T PeakPagefileUsage;
} VM_COUNTERS, *PVM_COUNTERS;

typedef struct _VM_COUNTERS_EX
{
    SIZE_T PeakVirtualSize;
    SIZE_T VirtualSize;
    ULONG PageFaultCount;
    SIZE_T PeakWorkingSetSize;
    SIZE_T WorkingSetSize;
    SIZE_T QuotaPeakPagedPoolUsage;
    SIZE_T QuotaPagedPoolUsage;
    SIZE_T QuotaPeakNonPagedPoolUsage;
    SIZE_T QuotaNonPagedPoolUsage;
    SIZE_T PagefileUsage;
    SIZE_T PeakPagefileUsage;
    SIZE_T PrivateUsage;
} VM_COUNTERS_EX, *PVM_COUNTERS_EX;

typedef struct _SYSTEM_PROCESS_INFORMATION {

    ULONG NextEntryOffset;             
    DWORD dwThreadCount;               
    LARGE_INTEGER WorkingSetPrivateSize; 
    ULONG HardFaultCount;              
    ULONG NumberOfThreadsHighWatermark;
    ULONG32 CycleTime;               
    LARGE_INTEGER CreationTime;        
    LARGE_INTEGER UserTime;            
    LARGE_INTEGER KernelTime;          
    UNICODE_STRING ProcessName;        
    DWORD dwBasePriority;              
    void* UniqueProcessId;            
    void* ParentProcessId;            
    ULONG HandleCount;                 
    ULONG SessionId;                   
    ULONG_PTR UniqueProcessKey;        
    VM_COUNTERS_EX vmCounters;         
    IO_COUNTERS ioCounters;            
    SYSTEM_THREAD_INFORMATION ti[1];   













} SYSTEM_PROCESS_INFORMATION, *PSYSTEM_PROCESS_INFORMATION;

typedef struct _SYSTEM_REGISTRY_QUOTA_INFORMATION {
    ULONG RegistryQuotaAllowed;
    ULONG RegistryQuotaUsed;
    void* Reserved1;
} SYSTEM_REGISTRY_QUOTA_INFORMATION, *PSYSTEM_REGISTRY_QUOTA_INFORMATION;

typedef struct _SYSTEM_TIME_ADJUSTMENT_QUERY {
    ULONG   TimeAdjustment;
    ULONG   TimeIncrement;
    BOOL TimeAdjustmentDisabled;
} SYSTEM_TIME_ADJUSTMENT_QUERY, *PSYSTEM_TIME_ADJUSTMENT_QUERY;

typedef struct _SYSTEM_TIME_ADJUSTMENT {
    ULONG   TimeAdjustment;
    BOOL TimeAdjustmentDisabled;
} SYSTEM_TIME_ADJUSTMENT, *PSYSTEM_TIME_ADJUSTMENT;

typedef enum _SYSTEM_FIRMWARE_TABLE_ACTION
{
    SystemFirmwareTable_Enumerate = 0,
    SystemFirmwareTable_Get = 1
} SYSTEM_FIRMWARE_TABLE_ACTION, *PSYSTEM_FIRMWARE_TABLE_ACTION;



typedef struct _SYSTEM_FIRMWARE_TABLE_INFORMATION
{
    ULONG ProviderSignature;
    SYSTEM_FIRMWARE_TABLE_ACTION Action;
    ULONG TableID;
    ULONG TableBufferLength;
    UCHAR TableBuffer[1];
} SYSTEM_FIRMWARE_TABLE_INFORMATION, *PSYSTEM_FIRMWARE_TABLE_INFORMATION;

typedef struct _SYSTEM_PROCESS_ID_INFORMATION
{
    ULONG_PTR ProcessId;
    UNICODE_STRING ImageName;
} SYSTEM_PROCESS_ID_INFORMATION, *PSYSTEM_PROCESS_ID_INFORMATION;

typedef struct _TIME_FIELDS
{   CSHORT Year;
    CSHORT Month;
    CSHORT Day;
    CSHORT Hour;
    CSHORT Minute;
    CSHORT Second;
    CSHORT Milliseconds;
    CSHORT Weekday;
} TIME_FIELDS, *PTIME_FIELDS;

typedef struct _WINSTATIONINFORMATIONW {
  BYTE Reserved2[70];
  ULONG LogonId;
  BYTE Reserved3[1140];
} WINSTATIONINFORMATIONW, *PWINSTATIONINFORMATIONW;

typedef BOOL ( * PWINSTATIONQUERYINFORMATIONW)(void*,ULONG,WINSTATIONINFOCLASS,void*,ULONG,PULONG);

typedef struct _LDR_RESOURCE_INFO
{
    ULONG_PTR Type;
    ULONG_PTR Name;
    ULONG Language;
} LDR_RESOURCE_INFO, *PLDR_RESOURCE_INFO;




typedef struct _DEBUG_BUFFER {
  void* SectionHandle;
  void*  SectionBase;
  void*  RemoteSectionBase;
  ULONG  SectionBaseDelta;
  void* EventPairHandle;
  SIZE_T Unknown[2];
  void* RemoteThreadHandle;
  ULONG  InfoClassMask;
  SIZE_T SizeOfInfo;
  SIZE_T AllocatedSize;
  ULONG  SectionSize;
  void*  ModuleInformation;
  void*  BackTraceInformation;
  void*  HeapInformation;
  void*  LockInformation;
  void*  Reserved[8];
} DEBUG_BUFFER, *PDEBUG_BUFFER;








typedef struct _DEBUG_MODULE_INFORMATION {
  ULONG  Reserved[2];
  ULONG  Base;
  ULONG  Size;
  ULONG  Flags;
  USHORT Index;
  USHORT Unknown;
  USHORT LoadCount;
  USHORT ModuleNameOffset;
  CHAR   ImageName[256];
} DEBUG_MODULE_INFORMATION, *PDEBUG_MODULE_INFORMATION;

typedef struct _DEBUG_HEAP_INFORMATION {
  ULONG  Base;
  ULONG  Flags;
  USHORT Granularity;
  USHORT Unknown;
  ULONG  Allocated;
  ULONG  Committed;
  ULONG  TagCount;
  ULONG  BlockCount;
  ULONG  Reserved[7];
  void*  Tags;
  void*  Blocks;
} DEBUG_HEAP_INFORMATION, *PDEBUG_HEAP_INFORMATION;

typedef struct _DEBUG_LOCK_INFORMATION {
  void*  Address;
  USHORT Type;
  USHORT CreatorBackTraceIndex;
  ULONG  OwnerThreadId;
  ULONG  ActiveCount;
  ULONG  ContentionCount;
  ULONG  EntryCount;
  ULONG  RecursionCount;
  ULONG  NumberOfSharedWaiters;
  ULONG  NumberOfExclusiveWaiters;
} DEBUG_LOCK_INFORMATION, *PDEBUG_LOCK_INFORMATION;

typedef struct _PORT_MESSAGE_HEADER {
  USHORT DataSize;
  USHORT MessageSize;
  USHORT MessageType;
  USHORT VirtualRangesOffset;
  CLIENT_ID ClientId;
  ULONG MessageId;
  ULONG SectionSize;
} PORT_MESSAGE_HEADER, *PPORT_MESSAGE_HEADER, PORT_MESSAGE, *PPORT_MESSAGE;

typedef unsigned short RTL_ATOM, *PRTL_ATOM;

typedef enum _ATOM_INFORMATION_CLASS {
   AtomBasicInformation         = 0,
   AtomTableInformation         = 1,
} ATOM_INFORMATION_CLASS;

typedef struct _ATOM_BASIC_INFORMATION {
   USHORT       ReferenceCount;
   USHORT       Pinned;
   USHORT       NameLength;
   WCHAR        Name[1];
} ATOM_BASIC_INFORMATION, *PATOM_BASIC_INFORMATION;


typedef struct _RTL_HANDLE
{
    struct _RTL_HANDLE * Next;
} RTL_HANDLE;


typedef struct _RTL_HANDLE_TABLE
{
    ULONG MaxHandleCount;  
    ULONG HandleSize;      
    ULONG Unused[2];       
    void* NextFree;        
    void* FirstHandle;     
    void* ReservedMemory;  
    void* MaxHandle;       
} RTL_HANDLE_TABLE;

typedef struct _RTL_ATOM_TABLE_ENTRY
{
    struct _RTL_ATOM_TABLE_ENTRY *HashLink;
    WORD                          HandleIndex;
    WORD                          Atom;
    WORD                          ReferenceCount;
    UCHAR                         Flags;
    UCHAR                         NameLength;
    WCHAR                         Name[1];
} RTL_ATOM_TABLE_ENTRY, *PRTL_ATOM_TABLE_ENTRY;

typedef struct _RTL_ATOM_TABLE
{
    ULONG                 Signature;
    RTL_CRITICAL_SECTION  CriticalSection;
    RTL_HANDLE_TABLE      HandleTable;
    ULONG                 NumberOfBuckets;
    RTL_ATOM_TABLE_ENTRY *Buckets[1];
} *RTL_ATOM_TABLE, **PRTL_ATOM_TABLE;


































































































typedef void (void * *PNTAPCFUNC)(ULONG_PTR,ULONG_PTR,ULONG_PTR); 
typedef void (void * *PRTL_THREAD_START_ROUTINE)(LPVOID); 
typedef DWORD (void * *PRTL_WORK_ITEM_ROUTINE)(LPVOID); 
typedef void (NTAPI *RTL_WAITORTIMERCALLBACKFUNC)(void*,BOOL); 


































































































typedef NTSTATUS ( *PRTL_QUERY_REGISTRY_ROUTINE)( PCWSTR ValueName,
                                                        ULONG  ValueType,
                                                        void*  ValueData,
                                                        ULONG  ValueLength,
                                                        void*  Context,
                                                        void*  EntryContext);

typedef struct _RTL_QUERY_REGISTRY_TABLE
{
  PRTL_QUERY_REGISTRY_ROUTINE  QueryRoutine;
  ULONG  Flags;
  wchar_t  Name;
  void*  EntryContext;
  ULONG  DefaultType;
  void*  DefaultData;
  ULONG  DefaultLength;
} RTL_QUERY_REGISTRY_TABLE, *PRTL_QUERY_REGISTRY_TABLE;

typedef struct _KEY_MULTIPLE_VALUE_INFORMATION
{
  PUNICODE_STRING ValueName;
  ULONG DataLength;
  ULONG DataOffset;
  ULONG Type;
} KEY_MULTIPLE_VALUE_INFORMATION, *PKEY_MULTIPLE_VALUE_INFORMATION;

typedef VOID (void * *PRTL_OVERLAPPED_COMPLETION_ROUTINE)(DWORD,DWORD,LPVOID);

typedef VOID (void * *PTIMER_APC_ROUTINE) ( void*, ULONG, LONG );

typedef enum _EVENT_INFORMATION_CLASS {
  EventBasicInformation
} EVENT_INFORMATION_CLASS, *PEVENT_INFORMATION_CLASS;

typedef struct _EVENT_BASIC_INFORMATION {
  EVENT_TYPE EventType;
  LONG EventState;
} EVENT_BASIC_INFORMATION, *PEVENT_BASIC_INFORMATION;

typedef enum _SEMAPHORE_INFORMATION_CLASS {
  SemaphoreBasicInformation
} SEMAPHORE_INFORMATION_CLASS, *PSEMAPHORE_INFORMATION_CLASS;

typedef struct _SEMAPHORE_BASIC_INFORMATION {
  ULONG CurrentCount;
  ULONG MaximumCount;
} SEMAPHORE_BASIC_INFORMATION, *PSEMAPHORE_BASIC_INFORMATION;

typedef enum _SECTION_INFORMATION_CLASS
{
  SectionBasicInformation,
  SectionImageInformation,
  SectionRelocationInformation,
  SectionOriginalBaseInformation,
  SectionInternalImageInformation
} SECTION_INFORMATION_CLASS;

typedef struct _SECTION_BASIC_INFORMATION {
  void* BaseAddress;
  ULONG Attributes;
  LARGE_INTEGER Size;
} SECTION_BASIC_INFORMATION, *PSECTION_BASIC_INFORMATION;

typedef struct _SECTION_IMAGE_INFORMATION {
  void* TransferAddress;
  ULONG ZeroBits;
  SIZE_T MaximumStackSize;
  SIZE_T CommittedStackSize;
  ULONG SubSystemType;
  USHORT MinorSubsystemVersion;
  USHORT MajorSubsystemVersion;
  USHORT MajorOperatingSystemVersion;
  USHORT MinorOperatingSystemVersion;
  USHORT ImageCharacteristics;
  USHORT DllCharacteristics;
  USHORT Machine;
  BOOL ImageContainsCode;
  union
  {
      UCHAR ImageFlags;
      struct
      {
          UCHAR ComPlusNativeReady        : 1;
          UCHAR ComPlusILOnly             : 1;
          UCHAR ImageDynamicallyRelocated : 1;
          UCHAR ImageMappedFlat           : 1;
          UCHAR BaseBelow4gb              : 1;
          UCHAR ComPlusPrefer32bit        : 1;
          UCHAR Reserved                  : 2;
      } DUMMYSTRUCTNAME;
  } DUMMYUNIONNAME;
  ULONG LoaderFlags;
  ULONG ImageFileSize;
  ULONG CheckSum;
} SECTION_IMAGE_INFORMATION, *PSECTION_IMAGE_INFORMATION;

typedef struct _LPC_SECTION_WRITE {
  ULONG Length;
  void* SectionHandle;
  ULONG SectionOffset;
  ULONG ViewSize;
  void* ViewBase;
  void* TargetViewBase;
} LPC_SECTION_WRITE, *PLPC_SECTION_WRITE;

typedef struct _LPC_SECTION_READ {
  ULONG Length;
  ULONG ViewSize;
  void* ViewBase;
} LPC_SECTION_READ, *PLPC_SECTION_READ;

typedef struct _LPC_MESSAGE {
  USHORT DataSize;
  USHORT MessageSize;
  USHORT MessageType;
  USHORT VirtualRangesOffset;
  CLIENT_ID ClientId;
  ULONG_PTR MessageId;
  ULONG_PTR SectionSize;
  UCHAR Data[ANYSIZE_ARRAY];
} LPC_MESSAGE, *PLPC_MESSAGE;

typedef struct _RTL_USER_PROCESS_INFORMATION
{
  ULONG Length;
  void* Process;
  void* Thread;
  CLIENT_ID ClientId;
  SECTION_IMAGE_INFORMATION ImageInformation;
} RTL_USER_PROCESS_INFORMATION, *PRTL_USER_PROCESS_INFORMATION;

typedef enum _SHUTDOWN_ACTION {
  ShutdownNoReboot,
  ShutdownReboot,
  ShutdownPowerOff
} SHUTDOWN_ACTION, *PSHUTDOWN_ACTION;

typedef enum _KPROFILE_SOURCE {
  ProfileTime,
  ProfileAlignmentFixup,
  ProfileTotalIssues,
  ProfilePipelineDry,
  ProfileLoadInstructions,
  ProfilePipelineFrozen,
  ProfileBranchInstructions,
  ProfileTotalNonissues,
  ProfileDcacheMisses,
  ProfileIcacheMisses,
  ProfileCacheMisses,
  ProfileBranchMispredictions,
  ProfileStoreInstructions,
  ProfileFpInstructions,
  ProfileIntegerInstructions,
  Profile2Issue,
  Profile3Issue,
  Profile4Issue,
  ProfileSpecialInstructions,
  ProfileTotalCycles,
  ProfileIcacheIssues,
  ProfileDcacheAccesses,
  ProfileMemoryBarrierCycles,
  ProfileLoadLinkedIssues,
  ProfileMaximum
} KPROFILE_SOURCE, *PKPROFILE_SOURCE;

typedef struct _DIRECTORY_BASIC_INFORMATION {
  UNICODE_STRING ObjectName;
  UNICODE_STRING ObjectTypeName;
} DIRECTORY_BASIC_INFORMATION, *PDIRECTORY_BASIC_INFORMATION;

typedef struct _INITIAL_TEB {
    void *OldStackBase;
    void *OldStackLimit;
    void *StackBase;
    void *StackLimit;
    void *DeallocationStack;
} INITIAL_TEB, *PINITIAL_TEB;

typedef enum _PORT_INFORMATION_CLASS {
  PortNoInformation
} PORT_INFORMATION_CLASS, *PPORT_INFORMATION_CLASS;

typedef enum _IO_COMPLETION_INFORMATION_CLASS {
  IoCompletionBasicInformation
} IO_COMPLETION_INFORMATION_CLASS, *PIO_COMPLETION_INFORMATION_CLASS;

typedef struct _FILE_COMPLETION_INFORMATION {
    void* CompletionPort;
    ULONG_PTR CompletionKey;
} FILE_COMPLETION_INFORMATION, *PFILE_COMPLETION_INFORMATION;





typedef struct _FILE_IO_COMPLETION_INFORMATION {
    ULONG_PTR CompletionKey;
    ULONG_PTR CompletionValue;
    IO_STATUS_BLOCK IoStatusBlock;
} FILE_IO_COMPLETION_INFORMATION, *PFILE_IO_COMPLETION_INFORMATION;

typedef enum _HARDERROR_RESPONSE_OPTION {
  OptionAbortRetryIgnore,
  OptionOk,
  OptionOkCancel,
  OptionRetryCancel,
  OptionYesNo,
  OptionYesNoCancel,
  OptionShutdownSystem
} HARDERROR_RESPONSE_OPTION, *PHARDERROR_RESPONSE_OPTION;

typedef enum _HARDERROR_RESPONSE {
  ResponseReturnToCaller,
  ResponseNotHandled,
  ResponseAbort,
  ResponseCancel,
  ResponseIgnore,
  ResponseNo,
  ResponseOk,
  ResponseRetry,
  ResponseYes
} HARDERROR_RESPONSE, *PHARDERROR_RESPONSE;

typedef enum _SYSDBG_COMMAND {
  SysDbgQueryModuleInformation,
  SysDbgQueryTraceInformation,
  SysDbgSetTracepoint,
  SysDbgSetSpecialCall,
  SysDbgClearSpecialCalls,
  SysDbgQuerySpecialCalls,
  SysDbgBreakPoint,
  SysDbgQueryVersion,
  SysDbgReadVirtual,
  SysDbgWriteVirtual,
  SysDbgReadPhysical,
  SysDbgWritePhysical,
  SysDbgReadControlSpace,
  SysDbgWriteControlSpace,
  SysDbgReadIoSpace,
  SysDbgWriteIoSpace,
  SysDbgReadMsr,
  SysDbgWriteMsr,
  SysDbgReadBusData,
  SysDbgWriteBusData,
  SysDbgCheckLowMemory,
  SysDbgEnableKernelDebugger,
  SysDbgDisableKernelDebugger,
  SysDbgGetAutoKdEnable,
  SysDbgSetAutoKdEnable,
  SysDbgGetPrintBufferSize,
  SysDbgSetPrintBufferSize,
  SysDbgGetKdUmExceptionEnable,
  SysDbgSetKdUmExceptionEnable,
  SysDbgGetTriageDump,
  SysDbgGetKdBlockEnable,
  SysDbgSetKdBlockEnable,
  SysDbgRegisterForUmBreakInfo,
  SysDbgGetUmBreakPid,
  SysDbgClearUmBreakPid,
  SysDbgGetUmAttachPid,
  SysDbgClearUmAttachPid,
  SysDbgGetLiveKernelDump,
  SysDbgKdPullRemoteFile,
  SysDbgMaxInfoClass
} SYSDBG_COMMAND, *PSYSDBG_COMMAND;

typedef struct _CPTABLEINFO
{
    USHORT  CodePage;
    USHORT  MaximumCharacterSize;
    USHORT  DefaultChar;
    USHORT  UniDefaultChar;
    USHORT  TransDefaultChar;
    USHORT  TransUniDefaultChar;
    USHORT  DBCSCodePage;
    UCHAR   LeadByte[12];
    USHORT *MultiByteTable;
    void   *WideCharTable;
    USHORT *DBCSRanges;
    USHORT *DBCSOffsets;
} CPTABLEINFO, *PCPTABLEINFO;

typedef struct _NLSTABLEINFO
{
    CPTABLEINFO OemTableInfo;
    CPTABLEINFO AnsiTableInfo;
    USHORT     *UpperCaseTable;
    USHORT     *LowerCaseTable;
} NLSTABLEINFO, *PNLSTABLEINFO;







typedef struct _LDR_SERVICE_TAG_RECORD
{
    struct _LDR_SERVICE_TAG_RECORD *Next;
    ULONG ServiceTag;
} LDR_SERVICE_TAG_RECORD, *PLDR_SERVICE_TAG_RECORD;

typedef struct _LDRP_CSLIST
{
    SINGLE_LIST_ENTRY *Tail;
} LDRP_CSLIST, *PLDRP_CSLIST;

typedef struct _LDR_DEPENDENCY
{
    SINGLE_LIST_ENTRY dependency_to_entry;
    struct _LDR_DDAG_NODE *dependency_to;
    SINGLE_LIST_ENTRY dependency_from_entry;
    struct _LDR_DDAG_NODE *dependency_from;
} LDR_DEPENDENCY, *PLDR_DEPENDENCY;

typedef enum _LDR_DDAG_STATE
{
    LdrModulesMerged = -5,
    LdrModulesInitError = -4,
    LdrModulesSnapError = -3,
    LdrModulesUnloaded = -2,
    LdrModulesUnloading = -1,
    LdrModulesPlaceHolder = 0,
    LdrModulesMapping = 1,
    LdrModulesMapped = 2,
    LdrModulesWaitingForDependencies = 3,
    LdrModulesSnapping = 4,
    LdrModulesSnapped = 5,
    LdrModulesCondensed = 6,
    LdrModulesReadyToInit = 7,
    LdrModulesInitializing = 8,
    LdrModulesReadyToRun = 9,
} LDR_DDAG_STATE;

typedef struct _LDR_DDAG_NODE
{
    struct list Modules;
    LDR_SERVICE_TAG_RECORD *ServiceTagList;
    LONG LoadCount;
    ULONG LoadWhileUnloadingCount;
    ULONG LowestLink;
    LDRP_CSLIST Dependencies;
    LDRP_CSLIST IncomingDependencies;
    LDR_DDAG_STATE State;
    SINGLE_LIST_ENTRY CondenseLink;
    ULONG PreorderNumber;
} LDR_DDAG_NODE, *PLDR_DDAG_NODE;

typedef enum _LDR_DLL_LOAD_REASON
{
    LoadReasonStaticDependency,
    LoadReasonStaticForwarderDependency,
    LoadReasonDynamicForwarderDependency,
    LoadReasonDelayloadDependency,
    LoadReasonDynamicLoad,
    LoadReasonAsImageLoad,
    LoadReasonAsDataLoad,
    LoadReasonUnknown = -1
} LDR_DLL_LOAD_REASON, *PLDR_DLL_LOAD_REASON;

typedef struct _LDR_DATA_TABLE_ENTRY
{
    struct list          InLoadOrderLinks;
    struct list          InMemoryOrderLinks;
    struct list          InInitializationOrderLinks;
    void*               DllBase;
    void*               EntryPoint;
    ULONG               SizeOfImage;
    UNICODE_STRING      FullDllName;
    UNICODE_STRING      BaseDllName;
    ULONG               Flags;
    SHORT               LoadCount;
    SHORT               TlsIndex;
    struct list          HashLinks;
    ULONG               TimeDateStamp;
    void*              ActivationContext;
    void*               Lock;
    LDR_DDAG_NODE*      DdagNode;
    struct list          NodeModuleLink;
    struct _LDRP_LOAD_CONTEXT *LoadContext;
    void*               ParentDllBase;
    void*               SwitchBackContext;
    RTL_BALANCED_NODE   BaseAddressIndexNode;
    RTL_BALANCED_NODE   MappingInfoIndexNode;
    ULONG_PTR           OriginalBase;
    LARGE_INTEGER       LoadTime;
    ULONG               BaseNameHashValue;
    LDR_DLL_LOAD_REASON LoadReason;
    ULONG               ImplicitPathOptions;
    ULONG               ReferenceCount;
} LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;

typedef struct _LDR_DLL_LOADED_NOTIFICATION_DATA
{
    ULONG Flags;
    const UNICODE_STRING *FullDllName;
    const UNICODE_STRING *BaseDllName;
    void *DllBase;
    ULONG SizeOfImage;
} LDR_DLL_LOADED_NOTIFICATION_DATA, *PLDR_DLL_LOADED_NOTIFICATION_DATA;

typedef struct _LDR_DLL_UNLOADED_NOTIFICATION_DATA
{
    ULONG Flags;
    const UNICODE_STRING *FullDllName;
    const UNICODE_STRING *BaseDllName;
    void *DllBase;
    ULONG SizeOfImage;
} LDR_DLL_UNLOADED_NOTIFICATION_DATA, *PLDR_DLL_UNLOADED_NOTIFICATION_DATA;

typedef union _LDR_DLL_NOTIFICATION_DATA
{
    LDR_DLL_LOADED_NOTIFICATION_DATA Loaded;
    LDR_DLL_UNLOADED_NOTIFICATION_DATA Unloaded;
} LDR_DLL_NOTIFICATION_DATA, *PLDR_DLL_NOTIFICATION_DATA;

typedef void (void * *PLDR_DLL_NOTIFICATION_FUNCTION)(ULONG, LDR_DLL_NOTIFICATION_DATA*, void*);



























typedef struct _RTL_PROCESS_MODULE_INFORMATION
{
    void*               Section;                        
    void*               MappedBaseAddress;              
    void*               ImageBaseAddress;               
    ULONG               ImageSize;                      
    ULONG               Flags;                          
    WORD                LoadOrderIndex;                 
    WORD                InitOrderIndex;                 
    WORD                LoadCount;                      
    WORD                NameOffset;                     
    BYTE                Name[256];  
} RTL_PROCESS_MODULE_INFORMATION, *PRTL_PROCESS_MODULE_INFORMATION;

typedef struct _RTL_PROCESS_MODULES
{
    ULONG               ModulesCount;
    RTL_PROCESS_MODULE_INFORMATION Modules[1]; 
} RTL_PROCESS_MODULES, *PRTL_PROCESS_MODULES;













typedef struct _RTL_PROCESS_MODULE_INFORMATION_EX
{
    USHORT NextOffset;
    RTL_PROCESS_MODULE_INFORMATION BaseInfo;
    ULONG ImageCheckSum;
    ULONG TimeDateStamp;
    void *DefaultBase;
} RTL_PROCESS_MODULE_INFORMATION_EX;































typedef LONG (void * *PRTL_EXCEPTION_FILTER)(PEXCEPTION_POINTERS);

typedef void (void * *PTP_IO_CALLBACK)(PTP_CALLBACK_INSTANCE,void*,void*,IO_STATUS_BLOCK*,PTP_IO);





typedef enum _PS_ATTRIBUTE_NUM
{
    PsAttributeParentProcess,
    PsAttributeDebugPort,
    PsAttributeToken,
    PsAttributeClientId,
    PsAttributeTebAddress,
    PsAttributeImageName,
    PsAttributeImageInfo,
    PsAttributeMemoryReserve,
    PsAttributePriorityClass,
    PsAttributeErrorMode,
    PsAttributeStdHandleInfo,
    PsAttributeHandleList,
    PsAttributeGroupAffinity,
    PsAttributePreferredNode,
    PsAttributeIdealProcessor,
    PsAttributeUmsThread,
    PsAttributeMitigationOptions,
    PsAttributeProtectionLevel,
    PsAttributeSecureProcess,
    PsAttributeJobList,
    PsAttributeChildProcessPolicy,
    PsAttributeAllApplicationPackagesPolicy,
    PsAttributeWin32kFilter,
    PsAttributeSafeOpenPromptOriginClaim,
    PsAttributeBnoIsolation,
    PsAttributeDesktopAppPolicy,
    PsAttributeChpe,
    PsAttributeMitigationAuditOptions,
    PsAttributeMachineType,
    PsAttributeComponentFilter,
    PsAttributeEnableOptionalXStateFeatures,
    PsAttributeMax
} PS_ATTRIBUTE_NUM;
































typedef struct _PS_ATTRIBUTE
{
    ULONG_PTR Attribute;
    SIZE_T    Size;
    union
    {
        ULONG_PTR Value;
        void     *ValuePtr;
    };
    SIZE_T *ReturnLength;
} PS_ATTRIBUTE;

typedef struct _PS_ATTRIBUTE_LIST
{
    SIZE_T       TotalLength;
    PS_ATTRIBUTE Attributes[1];
} PS_ATTRIBUTE_LIST, *PPS_ATTRIBUTE_LIST;

typedef enum _PS_CREATE_STATE
{
    PsCreateInitialState,
    PsCreateFailOnFileOpen,
    PsCreateFailOnSectionCreate,
    PsCreateFailExeFormat,
    PsCreateFailMachineMismatch,
    PsCreateFailExeName,
    PsCreateSuccess,
    PsCreateMaximumStates
} PS_CREATE_STATE;

typedef struct _PS_CREATE_INFO
{
    SIZE_T Size;
    PS_CREATE_STATE State;
    union
    {
        struct
        {
            union
            {
                ULONG InitFlags;
                struct
                {
                    UCHAR WriteOutputOnExit : 1;
                    UCHAR DetectManifest : 1;
                    UCHAR IFEOSkipDebugger : 1;
                    UCHAR IFEODoNotPropagateKeyState : 1;
                    UCHAR SpareBits1 : 4;
                    UCHAR SpareBits2 : 8;
                    USHORT ProhibitedImageCharacteristics : 16;
                };
            };
            ACCESS_MASK AdditionalFileAccess;
        } InitState;
        struct
        {
            void* FileHandle;
        } FailSection;
        struct
        {
            USHORT DllCharacteristics;
        } ExeFormat;
        struct
        {
            void* IFEOKey;
        } ExeName;
        struct
        {
            union
            {
                ULONG OutputFlags;
                struct
                {
                    UCHAR ProtectedProcess : 1;
                    UCHAR AddressSpaceOverride : 1;
                    UCHAR DevOverrideEnabled : 1;
                    UCHAR ManifestDetected : 1;
                    UCHAR ProtectedProcessLight : 1;
                    UCHAR SpareBits1 : 3;
                    UCHAR SpareBits2 : 8;
                    USHORT SpareBits3 : 16;
                };
            };
            void* FileHandle;
            void* SectionHandle;
            ULONG32 UserProcessParametersNative;
            ULONG UserProcessParametersWow64;
            ULONG CurrentParameterFlags;
            ULONG32 PebAddressNative;
            ULONG PebAddressWow64;
            ULONG32 ManifestAddress;
            ULONG ManifestSize;
        } SuccessState;
    };
} PS_CREATE_INFO, *PPS_CREATE_INFO;

typedef struct _DBGKM_EXCEPTION
{
    EXCEPTION_RECORD ExceptionRecord;
    ULONG FirstChance;
} DBGKM_EXCEPTION, *PDBGKM_EXCEPTION;

typedef struct _DBGKM_CREATE_THREAD
{
    ULONG SubSystemKey;
    void* StartAddress;
} DBGKM_CREATE_THREAD, *PDBGKM_CREATE_THREAD;

typedef struct _DBGKM_CREATE_PROCESS
{
    ULONG SubSystemKey;
    void* FileHandle;
    void* BaseOfImage;
    ULONG DebugInfoFileOffset;
    ULONG DebugInfoSize;
    DBGKM_CREATE_THREAD InitialThread;
} DBGKM_CREATE_PROCESS, *PDBGKM_CREATE_PROCESS;

typedef struct _DBGKM_EXIT_THREAD
{
    NTSTATUS ExitStatus;
} DBGKM_EXIT_THREAD, *PDBGKM_EXIT_THREAD;

typedef struct _DBGKM_EXIT_PROCESS
{
    NTSTATUS ExitStatus;
} DBGKM_EXIT_PROCESS, *PDBGKM_EXIT_PROCESS;

typedef struct _DBGKM_LOAD_DLL
{
    void* FileHandle;
    void* BaseOfDll;
    ULONG DebugInfoFileOffset;
    ULONG DebugInfoSize;
    void* NamePointer;
} DBGKM_LOAD_DLL, *PDBGKM_LOAD_DLL;

typedef struct _DBGKM_UNLOAD_DLL
{
    void* BaseAddress;
} DBGKM_UNLOAD_DLL, *PDBGKM_UNLOAD_DLL;

typedef enum _DBG_STATE
{
    DbgIdle,
    DbgReplyPending,
    DbgCreateThreadStateChange,
    DbgCreateProcessStateChange,
    DbgExitThreadStateChange,
    DbgExitProcessStateChange,
    DbgExceptionStateChange,
    DbgBreakpointStateChange,
    DbgSingleStepStateChange,
    DbgLoadDllStateChange,
    DbgUnloadDllStateChange
} DBG_STATE, *PDBG_STATE;

typedef struct _DBGUI_CREATE_THREAD
{
    void* HandleToThread;
    DBGKM_CREATE_THREAD NewThread;
} DBGUI_CREATE_THREAD, *PDBGUI_CREATE_THREAD;

typedef struct _DBGUI_CREATE_PROCESS
{
    void* HandleToProcess;
    void* HandleToThread;
    DBGKM_CREATE_PROCESS NewProcess;
} DBGUI_CREATE_PROCESS, *PDBGUI_CREATE_PROCESS;

typedef struct _DBGUI_WAIT_STATE_CHANGE
{
    DBG_STATE NewState;
    CLIENT_ID AppClientId;
    union
    {
        DBGKM_EXCEPTION Exception;
        DBGUI_CREATE_THREAD CreateThread;
        DBGUI_CREATE_PROCESS CreateProcessInfo;
        DBGKM_EXIT_THREAD ExitThread;
        DBGKM_EXIT_PROCESS ExitProcess;
        DBGKM_LOAD_DLL LoadDll;
        DBGKM_UNLOAD_DLL UnloadDll;
    } StateInfo;
} DBGUI_WAIT_STATE_CHANGE, *PDBGUI_WAIT_STATE_CHANGE;

struct _DEBUG_EVENT;









typedef enum _DEBUGOBJECTINFOCLASS
{
    DebugObjectKillProcessOnExitInformation = 1,
    MaxDebugObjectInfoClass
} DEBUGOBJECTINFOCLASS, *PDEBUGOBJECTINFOCLASS;


typedef struct _WOW64_CPURESERVED
{
    USHORT          Flags;
    USHORT          Machine;
    
    
} WOW64_CPURESERVED, *PWOW64_CPURESERVED;



typedef struct _WOW64_CPU_AREA_INFO
{
    void              *Context;
    void              *ContextEx;
    void              *ContextFlagsLocation;
    WOW64_CPURESERVED *CpuReserved;
    ULONG              ContextFlag;
    USHORT             Machine;
} WOW64_CPU_AREA_INFO, *PWOW64_CPU_AREA_INFO;

typedef struct _WOW64INFO
{
    ULONG     NativeSystemPageSize;
    ULONG     CpuFlags;
    ULONG     Wow64ExecuteFlags;
    ULONG     unknown;
    ULONG32 SectionHandle;
    ULONG32 CrossProcessWorkList;
    USHORT    NativeMachineType;
    USHORT    EmulatedMachineType;
} WOW64INFO;
C_ASSERT( sizeof(WOW64INFO) == 40 );





void *     Wow64AllocateTemp(SIZE_T);
void       Wow64ApcRoutine(ULONG_PTR,ULONG_PTR,ULONG_PTR,CONTEXT*);
NTSTATUS   Wow64KiUserCallbackDispatcher(ULONG,void*,ULONG,void**,ULONG*);
void       Wow64PassExceptionToGuest(EXCEPTION_POINTERS*);
void       Wow64PrepareForException(EXCEPTION_RECORD*,CONTEXT*);
void       Wow64ProcessPendingCrossProcessItems(void);
NTSTATUS   Wow64RaiseException(int,EXCEPTION_RECORD*);
NTSTATUS   Wow64SystemServiceEx(UINT,UINT*);




typedef struct
{
    ULONG   version;
    ULONG   unknown1[3];
    ULONG64 unknown2;
    ULONG64 pLdrInitializeThunk;
    ULONG64 pKiUserExceptionDispatcher;
    ULONG64 pKiUserApcDispatcher;
    ULONG64 pKiUserCallbackDispatcher;
    ULONG64 pRtlUserThreadStart;
    ULONG64 pRtlpQueryProcessDebugInformationRemote;
    ULONG64 ntdll_handle;
    ULONG64 pLdrSystemDllInitBlock;
    ULONG64 pRtlpFreezeTimeBias;
} SYSTEM_DLL_INIT_BLOCK;


typedef struct
{
    ULONG_PTR *ServiceTable;
    ULONG_PTR *CounterTable;
    ULONG_PTR  ServiceLimit;
    BYTE      *ArgumentTable;
} SYSTEM_SERVICE_TABLE;



typedef struct _API_SET_NAMESPACE
{
    ULONG Version;
    ULONG Size;
    ULONG Flags;
    ULONG Count;
    ULONG EntryOffset;
    ULONG HashOffset;
    ULONG HashFactor;
} API_SET_NAMESPACE;

typedef struct _API_SET_HASH_ENTRY
{
    ULONG Hash;
    ULONG Index;
} API_SET_HASH_ENTRY;

typedef struct _API_SET_NAMESPACE_ENTRY
{
    ULONG Flags;
    ULONG NameOffset;
    ULONG NameLength;
    ULONG HashedLength;
    ULONG ValueOffset;
    ULONG ValueCount;
} API_SET_NAMESPACE_ENTRY;

typedef struct _API_SET_VALUE_ENTRY
{
    ULONG Flags;
    ULONG NameOffset;
    ULONG NameLength;
    ULONG ValueOffset;
    ULONG ValueLength;
} API_SET_VALUE_ENTRY;

typedef enum _KCONTINUE_TYPE
{
    KCONTINUE_UNWIND,
    KCONTINUE_RESUME,
    KCONTINUE_LONGJUMP,
    KCONTINUE_SET,
    KCONTINUE_LAST,
} KCONTINUE_TYPE;

typedef struct _KCONTINUE_ARGUMENT
{
    KCONTINUE_TYPE ContinueType;
    ULONG          ContinueFlags;
    ULONG32      Reserved[2];
} KCONTINUE_ARGUMENT, *PKCONTINUE_ARGUMENT;













NTSYSAPI NTSTATUS   ApiSetQueryApiSetPresence(const UNICODE_STRING*,BOOL*);
NTSYSAPI NTSTATUS   ApiSetQueryApiSetPresenceEx(const UNICODE_STRING*,BOOL*,BOOL*);
NTSYSAPI void       DbgBreakPoint(void);
NTSYSAPI NTSTATUS  DbgPrint(LPCSTR fmt, ...);
NTSYSAPI NTSTATUS  DbgPrintEx(ULONG iComponentId, ULONG Level, LPCSTR fmt, ...);
NTSYSAPI NTSTATUS   DbgUiConnectToDbg(void);
NTSYSAPI NTSTATUS   DbgUiContinue(CLIENT_ID*,NTSTATUS);
NTSYSAPI NTSTATUS   DbgUiConvertStateChangeStructure(DBGUI_WAIT_STATE_CHANGE*,struct _DEBUG_EVENT*);
NTSYSAPI NTSTATUS   DbgUiDebugActiveProcess(void*);
NTSYSAPI void*     DbgUiGetThreadDebugObject(void);
NTSYSAPI NTSTATUS   DbgUiIssueRemoteBreakin(void*);
NTSYSAPI void       DbgUiRemoteBreakin(void*);
NTSYSAPI void       DbgUiSetThreadDebugObject(void*);
NTSYSAPI NTSTATUS   DbgUiStopDebugging(void*);
NTSYSAPI NTSTATUS   DbgUiWaitStateChange(DBGUI_WAIT_STATE_CHANGE*,LARGE_INTEGER*);
NTSYSAPI void       DbgUserBreakPoint(void);
NTSYSAPI NTSTATUS   LdrAccessResource(HMODULE,const IMAGE_RESOURCE_DATA_ENTRY*,void**,PULONG);
NTSYSAPI NTSTATUS   LdrAddDllDirectory(const UNICODE_STRING*,void**);
NTSYSAPI NTSTATUS   LdrAddRefDll(ULONG,HMODULE);
NTSYSAPI NTSTATUS   LdrDisableThreadCalloutsForDll(HMODULE);
NTSYSAPI NTSTATUS   LdrFindEntryForAddress(const void*, PLDR_DATA_TABLE_ENTRY*);
NTSYSAPI NTSTATUS   LdrFindResourceDirectory_U(HMODULE,const LDR_RESOURCE_INFO*,ULONG,const IMAGE_RESOURCE_DIRECTORY**);
NTSYSAPI NTSTATUS   LdrFindResource_U(HMODULE,const LDR_RESOURCE_INFO*,ULONG,const IMAGE_RESOURCE_DATA_ENTRY**);
NTSYSAPI NTSTATUS   LdrGetDllDirectory(UNICODE_STRING*);
NTSYSAPI NTSTATUS   LdrGetDllFullName(HMODULE, UNICODE_STRING*);
NTSYSAPI NTSTATUS   LdrGetDllHandle(LPCWSTR, ULONG, const UNICODE_STRING*, HMODULE*);
NTSYSAPI NTSTATUS   LdrGetDllHandleEx(ULONG, LPCWSTR, ULONG *, const UNICODE_STRING*, HMODULE*);
NTSYSAPI NTSTATUS   LdrGetDllPath(PCWSTR,ULONG,wchar_t*,wchar_t*);
NTSYSAPI NTSTATUS   LdrGetProcedureAddress(HMODULE, const ANSI_STRING*, ULONG, void**);
NTSYSAPI NTSTATUS   LdrLoadDll(LPCWSTR, DWORD, const UNICODE_STRING*, HMODULE*);
NTSYSAPI NTSTATUS   LdrLockLoaderLock(ULONG,ULONG*,ULONG_PTR*);
IMAGE_BASE_RELOCATION *  LdrProcessRelocationBlock(void*,UINT,USHORT*,INT_PTR);
NTSYSAPI NTSTATUS   LdrQueryImageFileExecutionOptions(const UNICODE_STRING*,LPCWSTR,ULONG,void*,ULONG,ULONG*);
NTSYSAPI NTSTATUS   LdrQueryProcessModuleInformation(RTL_PROCESS_MODULES*, ULONG, ULONG*);
NTSYSAPI NTSTATUS   LdrRegisterDllNotification(ULONG,PLDR_DLL_NOTIFICATION_FUNCTION,void*,void**);
NTSYSAPI NTSTATUS   LdrRemoveDllDirectory(void*);
NTSYSAPI NTSTATUS   LdrSetDefaultDllDirectories(ULONG);
NTSYSAPI NTSTATUS   LdrSetDllDirectory(const UNICODE_STRING*);
NTSYSAPI void       LdrShutdownProcess(void);
NTSYSAPI void       LdrShutdownThread(void);
NTSYSAPI NTSTATUS   LdrUnloadDll(HMODULE);
NTSYSAPI NTSTATUS   LdrUnlockLoaderLock(ULONG,ULONG_PTR);
NTSYSAPI NTSTATUS   LdrUnregisterDllNotification(void*);
NTSYSAPI NTSTATUS   NtAcceptConnectPort(PHANDLE,ULONG,PLPC_MESSAGE,BOOL,PLPC_SECTION_WRITE,PLPC_SECTION_READ);
NTSYSAPI NTSTATUS   NtAccessCheck(PSECURITY_DESCRIPTOR,void*,ACCESS_MASK,PGENERIC_MAPPING,PPRIVILEGE_SET,PULONG,PULONG,NTSTATUS*);
NTSYSAPI NTSTATUS   NtAccessCheckAndAuditAlarm(PUNICODE_STRING,void*,PUNICODE_STRING,PUNICODE_STRING,PSECURITY_DESCRIPTOR,ACCESS_MASK,PGENERIC_MAPPING,BOOL,PACCESS_MASK,PBOOLEAN,PBOOLEAN);
NTSYSAPI NTSTATUS   NtAddAtom(const WCHAR*,ULONG,RTL_ATOM*);
NTSYSAPI NTSTATUS   NtAdjustGroupsToken(void*,BOOL,PTOKEN_GROUPS,ULONG,PTOKEN_GROUPS,PULONG);
NTSYSAPI NTSTATUS   NtAdjustPrivilegesToken(void*,BOOL,PTOKEN_PRIVILEGES,DWORD,PTOKEN_PRIVILEGES,PDWORD);
NTSYSAPI NTSTATUS   NtAlertResumeThread(void*,PULONG);
NTSYSAPI NTSTATUS   NtAlertThread(void* ThreadHandle);
NTSYSAPI NTSTATUS   NtAlertThreadByThreadId(void*);
NTSYSAPI NTSTATUS   NtAllocateLocallyUniqueId(PLUID lpLuid);
NTSYSAPI NTSTATUS   NtAllocateReserveObject(void* *handle,const OBJECT_ATTRIBUTES *attr,MEMORY_RESERVE_OBJECT_TYPE type);
NTSYSAPI NTSTATUS   NtAllocateUuids(PULARGE_INTEGER,PULONG,PULONG,PUCHAR);
NTSYSAPI NTSTATUS   NtAllocateVirtualMemory(void*,void**,ULONG_PTR,SIZE_T*,ULONG,ULONG);
NTSYSAPI NTSTATUS   NtAllocateVirtualMemoryEx(void*,void**,SIZE_T*,ULONG,ULONG,MEM_EXTENDED_PARAMETER*,ULONG);
NTSYSAPI NTSTATUS   NtAreMappedFilesTheSame(void*,void*);
NTSYSAPI NTSTATUS   NtAssignProcessToJobObject(void*,void*);
NTSYSAPI NTSTATUS   NtCallbackReturn(void*,ULONG,NTSTATUS);
NTSYSAPI NTSTATUS   NtCancelIoFile(void*,PIO_STATUS_BLOCK);
NTSYSAPI NTSTATUS   NtCancelIoFileEx(void*,PIO_STATUS_BLOCK,PIO_STATUS_BLOCK);
NTSYSAPI NTSTATUS   NtCancelSynchronousIoFile(void*,PIO_STATUS_BLOCK,PIO_STATUS_BLOCK);
NTSYSAPI NTSTATUS   NtCancelTimer(void*, BOOL*);
NTSYSAPI NTSTATUS   NtClearEvent(void*);
NTSYSAPI NTSTATUS   NtClose(void*);
NTSYSAPI NTSTATUS   NtCloseObjectAuditAlarm(PUNICODE_STRING,void*,BOOL);
NTSYSAPI NTSTATUS   NtCommitTransaction(void*,BOOL);
NTSYSAPI NTSTATUS   NtCompareObjects(void*,void*);
NTSYSAPI NTSTATUS   NtCompareTokens(void*,void*,BOOL*);
NTSYSAPI NTSTATUS   NtCompleteConnectPort(void*);
NTSYSAPI NTSTATUS   NtConnectPort(PHANDLE,PUNICODE_STRING,PSECURITY_QUALITY_OF_SERVICE,PLPC_SECTION_WRITE,PLPC_SECTION_READ,PULONG,void*,PULONG);
NTSYSAPI NTSTATUS   NtContinue(PCONTEXT,BOOL);
NTSYSAPI NTSTATUS   NtContinueEx(CONTEXT*,KCONTINUE_ARGUMENT*);
NTSYSAPI NTSTATUS   NtCreateDebugObject(void**,ACCESS_MASK,OBJECT_ATTRIBUTES*,ULONG);
NTSYSAPI NTSTATUS   NtCreateDirectoryObject(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES);
NTSYSAPI NTSTATUS   NtCreateEvent(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES *,EVENT_TYPE,BOOL);
NTSYSAPI NTSTATUS   NtCreateEventPair(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES);
NTSYSAPI NTSTATUS   NtCreateFile(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,PIO_STATUS_BLOCK,PLARGE_INTEGER,ULONG,ULONG,ULONG,ULONG,void*,ULONG);
NTSYSAPI NTSTATUS   NtCreateIoCompletion(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,ULONG);
NTSYSAPI NTSTATUS   NtCreateJobObject(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
NTSYSAPI NTSTATUS   NtCreateKey(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*,ULONG,const UNICODE_STRING*,ULONG,PULONG);
NTSYSAPI NTSTATUS   NtCreateKeyTransacted(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*,ULONG,const UNICODE_STRING*,ULONG,void*,ULONG*);
NTSYSAPI NTSTATUS   NtCreateKeyedEvent(void**,ACCESS_MASK,const OBJECT_ATTRIBUTES*,ULONG);
NTSYSAPI NTSTATUS   NtCreateLowBoxToken(void**,void*,ACCESS_MASK,OBJECT_ATTRIBUTES*,SID*,ULONG,SID_AND_ATTRIBUTES*,ULONG,void**);
NTSYSAPI NTSTATUS   NtCreateMailslotFile(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,PIO_STATUS_BLOCK,ULONG,ULONG,ULONG,PLARGE_INTEGER);
NTSYSAPI NTSTATUS   NtCreateMutant(void**,ACCESS_MASK,const OBJECT_ATTRIBUTES*,BOOL);
NTSYSAPI NTSTATUS   NtCreateNamedPipeFile(PHANDLE,ULONG,POBJECT_ATTRIBUTES,PIO_STATUS_BLOCK,ULONG,ULONG,ULONG,ULONG,ULONG,ULONG,ULONG,ULONG,ULONG,PLARGE_INTEGER);
NTSYSAPI NTSTATUS   NtCreatePagingFile(PUNICODE_STRING,PLARGE_INTEGER,PLARGE_INTEGER,PLARGE_INTEGER);
NTSYSAPI NTSTATUS   NtCreatePort(PHANDLE,POBJECT_ATTRIBUTES,ULONG,ULONG,PULONG);
NTSYSAPI NTSTATUS   NtCreateProcess(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,void*,BOOL,void*,void*,void*);
NTSYSAPI NTSTATUS   NtCreateProfile(PHANDLE,void*,void*,ULONG,ULONG,void*,ULONG,KPROFILE_SOURCE,KAFFINITY);
NTSYSAPI NTSTATUS   NtCreateSection(void**,ACCESS_MASK,const OBJECT_ATTRIBUTES*,const LARGE_INTEGER*,ULONG,ULONG,void*);
NTSYSAPI NTSTATUS   NtCreateSemaphore(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*,LONG,LONG);
NTSYSAPI NTSTATUS   NtCreateSymbolicLinkObject(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,PUNICODE_STRING);
NTSYSAPI NTSTATUS   NtCreateThread(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,void*,PCLIENT_ID,PCONTEXT,PINITIAL_TEB,BOOL);
NTSYSAPI NTSTATUS   NtCreateThreadEx(void**,ACCESS_MASK,OBJECT_ATTRIBUTES*,void*,PRTL_THREAD_START_ROUTINE,void*,ULONG,ULONG_PTR,SIZE_T,SIZE_T,PS_ATTRIBUTE_LIST*);
NTSYSAPI NTSTATUS   NtCreateTimer(void**, ACCESS_MASK, const OBJECT_ATTRIBUTES*, TIMER_TYPE);
NTSYSAPI NTSTATUS   NtCreateToken(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,TOKEN_TYPE,PLUID,PLARGE_INTEGER,PTOKEN_USER,PTOKEN_GROUPS,PTOKEN_PRIVILEGES,PTOKEN_OWNER,PTOKEN_PRIMARY_GROUP,PTOKEN_DEFAULT_DACL,PTOKEN_SOURCE);
NTSYSAPI NTSTATUS   NtCreateTransaction(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,LPGUID,void*,ULONG,ULONG,ULONG,PLARGE_INTEGER,PUNICODE_STRING);
NTSYSAPI NTSTATUS   NtCreateUserProcess(void**,void**,ACCESS_MASK,ACCESS_MASK,OBJECT_ATTRIBUTES*,OBJECT_ATTRIBUTES*,ULONG,ULONG,RTL_USER_PROCESS_PARAMETERS*,PS_CREATE_INFO*,PS_ATTRIBUTE_LIST*);
NTSYSAPI NTSTATUS   NtDebugActiveProcess(void*,void*);
NTSYSAPI NTSTATUS   NtDebugContinue(void*,CLIENT_ID*,NTSTATUS);
NTSYSAPI NTSTATUS   NtDelayExecution(BOOL,const LARGE_INTEGER*);
NTSYSAPI NTSTATUS   NtDeleteAtom(RTL_ATOM);
NTSYSAPI NTSTATUS   NtDeleteFile(POBJECT_ATTRIBUTES);
NTSYSAPI NTSTATUS   NtDeleteKey(void*);
NTSYSAPI NTSTATUS   NtDeleteValueKey(void*,const UNICODE_STRING *);
NTSYSAPI NTSTATUS   NtDeviceIoControlFile(void*,void*,PIO_APC_ROUTINE,void*,PIO_STATUS_BLOCK,ULONG,void*,ULONG,void*,ULONG);
NTSYSAPI NTSTATUS   NtDisplayString(PUNICODE_STRING);
NTSYSAPI NTSTATUS   NtDuplicateObject(void*,void*,void*,PHANDLE,ACCESS_MASK,ULONG,ULONG);
NTSYSAPI NTSTATUS   NtDuplicateToken(void*,ACCESS_MASK,POBJECT_ATTRIBUTES,BOOL,TOKEN_TYPE,PHANDLE);
NTSYSAPI NTSTATUS   NtEnumerateKey(void*,ULONG,KEY_INFORMATION_CLASS,void *,DWORD,DWORD *);
NTSYSAPI NTSTATUS   NtEnumerateValueKey(void*,ULONG,KEY_VALUE_INFORMATION_CLASS,void*,ULONG,PULONG);
NTSYSAPI NTSTATUS   NtExtendSection(void*,PLARGE_INTEGER);
NTSYSAPI NTSTATUS   NtFilterToken(void*,ULONG,TOKEN_GROUPS*,TOKEN_PRIVILEGES*,TOKEN_GROUPS*,void**);
NTSYSAPI NTSTATUS   NtFindAtom(const WCHAR*,ULONG,RTL_ATOM*);
NTSYSAPI NTSTATUS   NtFlushBuffersFile(void*,IO_STATUS_BLOCK*);
NTSYSAPI NTSTATUS   NtFlushBuffersFileEx(void*,ULONG,void*,ULONG,IO_STATUS_BLOCK*);
NTSYSAPI NTSTATUS   NtFlushInstructionCache(void*,LPCVOID,SIZE_T);
NTSYSAPI NTSTATUS   NtFlushKey(void*);
NTSYSAPI NTSTATUS   NtFlushProcessWriteBuffers(void);
NTSYSAPI NTSTATUS   NtFlushVirtualMemory(void*,LPCVOID*,SIZE_T*,ULONG);
NTSYSAPI NTSTATUS   NtFlushWriteBuffer(VOID);
NTSYSAPI NTSTATUS   NtFreeVirtualMemory(void*,void**,SIZE_T*,ULONG);
NTSYSAPI NTSTATUS   NtFsControlFile(void*,void*,PIO_APC_ROUTINE,void*,PIO_STATUS_BLOCK,ULONG,void*,ULONG,void*,ULONG);
NTSYSAPI NTSTATUS   NtGetContextThread(void*,CONTEXT*);
NTSYSAPI ULONG      NtGetCurrentProcessorNumber(void);
NTSYSAPI NTSTATUS   NtGetNextThread(void*,void*,ACCESS_MASK,ULONG,ULONG,void**);
NTSYSAPI NTSTATUS   NtGetNlsSectionPtr(ULONG,ULONG,void*,void**,SIZE_T*);
NTSYSAPI NTSTATUS   NtGetPlugPlayEvent(ULONG,ULONG,void*,ULONG);
NTSYSAPI ULONG      NtGetTickCount(VOID);
NTSYSAPI NTSTATUS   NtGetWriteWatch(void*,ULONG,void*,SIZE_T,void**,ULONG_PTR*,ULONG*);
NTSYSAPI NTSTATUS   NtImpersonateAnonymousToken(void*);
NTSYSAPI NTSTATUS   NtImpersonateClientOfPort(void*,PPORT_MESSAGE);
NTSYSAPI NTSTATUS   NtImpersonateThread(void*,void*,PSECURITY_QUALITY_OF_SERVICE);
NTSYSAPI NTSTATUS   NtInitializeNlsFiles(void**,LCID*,LARGE_INTEGER*);
NTSYSAPI NTSTATUS   NtInitializeRegistry(BOOL);
NTSYSAPI NTSTATUS   NtInitiatePowerAction(POWER_ACTION,SYSTEM_POWER_STATE,ULONG,BOOL);
NTSYSAPI NTSTATUS   NtIsProcessInJob(void*,void*);
NTSYSAPI NTSTATUS   NtListenPort(void*,PLPC_MESSAGE);
NTSYSAPI NTSTATUS   NtLoadDriver(const UNICODE_STRING *);
NTSYSAPI NTSTATUS   NtLoadKey(const OBJECT_ATTRIBUTES *,OBJECT_ATTRIBUTES *);
NTSYSAPI NTSTATUS   NtLoadKey2(const OBJECT_ATTRIBUTES *,OBJECT_ATTRIBUTES *,ULONG);
NTSYSAPI NTSTATUS   NtLoadKeyEx(const OBJECT_ATTRIBUTES *,OBJECT_ATTRIBUTES *,ULONG,void*,void*,ACCESS_MASK,void* *,IO_STATUS_BLOCK *);
NTSYSAPI NTSTATUS   NtLockFile(void*,void*,PIO_APC_ROUTINE,void*,PIO_STATUS_BLOCK,PLARGE_INTEGER,PLARGE_INTEGER,ULONG*,BOOL,BOOL);
NTSYSAPI NTSTATUS   NtLockVirtualMemory(void*,void**,SIZE_T*,ULONG);
NTSYSAPI NTSTATUS   NtMakePermanentObject(void*);
NTSYSAPI NTSTATUS   NtMakeTemporaryObject(void*);
NTSYSAPI NTSTATUS   NtMapViewOfSection(void*,void*,void**,ULONG_PTR,SIZE_T,const LARGE_INTEGER*,SIZE_T*,SECTION_INHERIT,ULONG,ULONG);
NTSYSAPI NTSTATUS   NtMapViewOfSectionEx(void*,void*,void**,const LARGE_INTEGER*,SIZE_T*,ULONG,ULONG,MEM_EXTENDED_PARAMETER*,ULONG);
NTSYSAPI NTSTATUS   NtNotifyChangeDirectoryFile(void*,void*,PIO_APC_ROUTINE,void*,PIO_STATUS_BLOCK,void*,ULONG,ULONG,BOOL);
NTSYSAPI NTSTATUS   NtNotifyChangeKey(void*,void*,PIO_APC_ROUTINE,void*,PIO_STATUS_BLOCK,ULONG,BOOL,void*,ULONG,BOOL);
NTSYSAPI NTSTATUS   NtNotifyChangeMultipleKeys(void*,ULONG,OBJECT_ATTRIBUTES*,void*,PIO_APC_ROUTINE,void*,PIO_STATUS_BLOCK,ULONG,BOOL,void*,ULONG,BOOL);
NTSYSAPI NTSTATUS   NtOpenDirectoryObject(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
NTSYSAPI NTSTATUS   NtOpenEvent(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES *);
NTSYSAPI NTSTATUS   NtOpenEventPair(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
NTSYSAPI NTSTATUS   NtOpenFile(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES,PIO_STATUS_BLOCK,ULONG,ULONG);
NTSYSAPI NTSTATUS   NtOpenIoCompletion(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
NTSYSAPI NTSTATUS   NtOpenJobObject(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
NTSYSAPI NTSTATUS   NtOpenKey(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES *);
NTSYSAPI NTSTATUS   NtOpenKeyEx(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*,ULONG);
NTSYSAPI NTSTATUS   NtOpenKeyTransacted(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*,void*);
NTSYSAPI NTSTATUS   NtOpenKeyTransactedEx(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*,ULONG,void*);
NTSYSAPI NTSTATUS   NtOpenKeyedEvent(void**,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
NTSYSAPI NTSTATUS   NtOpenMutant(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
NTSYSAPI NTSTATUS   NtOpenObjectAuditAlarm(PUNICODE_STRING,PHANDLE,PUNICODE_STRING,PUNICODE_STRING,PSECURITY_DESCRIPTOR,void*,ACCESS_MASK,ACCESS_MASK,PPRIVILEGE_SET,BOOL,BOOL,PBOOLEAN);
NTSYSAPI NTSTATUS   NtOpenProcess(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*,const CLIENT_ID*);
NTSYSAPI NTSTATUS   NtOpenProcessToken(void*,DWORD,void* *);
NTSYSAPI NTSTATUS   NtOpenProcessTokenEx(void*,DWORD,DWORD,void* *);
NTSYSAPI NTSTATUS   NtOpenSection(void**,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
NTSYSAPI NTSTATUS   NtOpenSemaphore(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
NTSYSAPI NTSTATUS   NtOpenSymbolicLinkObject(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*);
NTSYSAPI NTSTATUS   NtOpenThread(void**,ACCESS_MASK,const OBJECT_ATTRIBUTES*,const CLIENT_ID*);
NTSYSAPI NTSTATUS   NtOpenThreadToken(void*,DWORD,BOOL,void* *);
NTSYSAPI NTSTATUS   NtOpenThreadTokenEx(void*,DWORD,BOOL,DWORD,void* *);
NTSYSAPI NTSTATUS   NtOpenTimer(void**, ACCESS_MASK, const OBJECT_ATTRIBUTES*);
NTSYSAPI NTSTATUS   NtPowerInformation(POWER_INFORMATION_LEVEL,void*,ULONG,void*,ULONG);
NTSYSAPI NTSTATUS   NtPrivilegeCheck(void*,PPRIVILEGE_SET,PBOOLEAN);
NTSYSAPI NTSTATUS   NtPrivilegeObjectAuditAlarm(PUNICODE_STRING,void*,void*,ULONG,PPRIVILEGE_SET,BOOL);
NTSYSAPI NTSTATUS   NtPrivilegedServiceAuditAlarm(PUNICODE_STRING,PUNICODE_STRING,void*,PPRIVILEGE_SET,BOOL);
NTSYSAPI NTSTATUS   NtProtectVirtualMemory(void*,void**,SIZE_T*,ULONG,ULONG*);
NTSYSAPI NTSTATUS   NtPulseEvent(void*,LONG*);
NTSYSAPI NTSTATUS   NtQueueApcThread(void*,PNTAPCFUNC,ULONG_PTR,ULONG_PTR,ULONG_PTR);
NTSYSAPI NTSTATUS   NtQueueApcThreadEx(void*,void*,PNTAPCFUNC,ULONG_PTR,ULONG_PTR,ULONG_PTR);
NTSYSAPI NTSTATUS   NtQueryAttributesFile(const OBJECT_ATTRIBUTES*,FILE_BASIC_INFORMATION*);
NTSYSAPI NTSTATUS   NtQueryDefaultLocale(BOOL,LCID*);
NTSYSAPI NTSTATUS   NtQueryDefaultUILanguage(LANGID*);
NTSYSAPI NTSTATUS   NtQueryDirectoryFile(void*,void*,PIO_APC_ROUTINE,void*,PIO_STATUS_BLOCK,void*,ULONG,FILE_INFORMATION_CLASS,BOOL,PUNICODE_STRING,BOOL);
NTSYSAPI NTSTATUS   NtQueryDirectoryObject(void*,PDIRECTORY_BASIC_INFORMATION,ULONG,BOOL,BOOL,PULONG,PULONG);
NTSYSAPI NTSTATUS   NtQueryEaFile(void*,PIO_STATUS_BLOCK,void*,ULONG,BOOL,void*,ULONG,PULONG,BOOL);
NTSYSAPI NTSTATUS   NtQueryEvent(void*,EVENT_INFORMATION_CLASS,void*,ULONG,PULONG);
NTSYSAPI NTSTATUS   NtQueryFullAttributesFile(const OBJECT_ATTRIBUTES*,FILE_NETWORK_OPEN_INFORMATION*);
NTSYSAPI NTSTATUS   NtQueryInformationAtom(RTL_ATOM,ATOM_INFORMATION_CLASS,void*,ULONG,ULONG*);
NTSYSAPI NTSTATUS   NtQueryInformationFile(void*,PIO_STATUS_BLOCK,void*,ULONG,FILE_INFORMATION_CLASS);
NTSYSAPI NTSTATUS   NtQueryInformationJobObject(void*,JOBOBJECTINFOCLASS,void*,ULONG,PULONG);
NTSYSAPI NTSTATUS   NtQueryInformationPort(void*,PORT_INFORMATION_CLASS,void*,ULONG,PULONG);
NTSYSAPI NTSTATUS   NtQueryInformationProcess(void*,PROCESSINFOCLASS,void*,ULONG,PULONG);
NTSYSAPI NTSTATUS   NtQueryInformationThread(void*,THREADINFOCLASS,void*,ULONG,PULONG);
NTSYSAPI NTSTATUS   NtQueryInformationToken(void*,TOKEN_INFORMATION_CLASS,void*,ULONG,PULONG);
NTSYSAPI NTSTATUS   NtQueryInstallUILanguage(LANGID*);
NTSYSAPI NTSTATUS   NtQueryIntervalProfile(KPROFILE_SOURCE,PULONG);
NTSYSAPI NTSTATUS   NtQueryIoCompletion(void*,IO_COMPLETION_INFORMATION_CLASS,void*,ULONG,PULONG);
NTSYSAPI NTSTATUS   NtQueryKey(void*,KEY_INFORMATION_CLASS,void *,DWORD,DWORD *);
NTSYSAPI NTSTATUS   NtQueryMultipleValueKey(void*,PKEY_MULTIPLE_VALUE_INFORMATION,ULONG,void*,ULONG,PULONG);
NTSYSAPI NTSTATUS   NtQueryMutant(void*,MUTANT_INFORMATION_CLASS,void*,ULONG,PULONG);
NTSYSAPI NTSTATUS   NtQueryObject(void*, OBJECT_INFORMATION_CLASS, void*, ULONG, PULONG);
NTSYSAPI NTSTATUS   NtQueryOpenSubKeys(POBJECT_ATTRIBUTES,PULONG);
NTSYSAPI NTSTATUS   NtQueryPerformanceCounter(PLARGE_INTEGER, PLARGE_INTEGER);
NTSYSAPI NTSTATUS   NtQuerySecurityObject(void*,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,ULONG,PULONG);
NTSYSAPI NTSTATUS   NtQuerySection(void*,SECTION_INFORMATION_CLASS,void*,SIZE_T,SIZE_T*);
NTSYSAPI NTSTATUS   NtQuerySemaphore(void*,SEMAPHORE_INFORMATION_CLASS,void*,ULONG,PULONG);
NTSYSAPI NTSTATUS   NtQuerySymbolicLinkObject(void*,PUNICODE_STRING,PULONG);
NTSYSAPI NTSTATUS   NtQuerySystemEnvironmentValue(PUNICODE_STRING,PWCHAR,ULONG,PULONG);
NTSYSAPI NTSTATUS   NtQuerySystemEnvironmentValueEx(PUNICODE_STRING,GUID*,void*,ULONG*,ULONG*);
NTSYSAPI NTSTATUS   NtQuerySystemInformation(SYSTEM_INFORMATION_CLASS,void*,ULONG,PULONG);
NTSYSAPI NTSTATUS   NtQuerySystemInformationEx(SYSTEM_INFORMATION_CLASS,void*,ULONG,void*,ULONG,ULONG*);
NTSYSAPI NTSTATUS   NtQuerySystemTime(PLARGE_INTEGER);
NTSYSAPI NTSTATUS   NtQueryTimer(void*,TIMER_INFORMATION_CLASS,void*,ULONG,PULONG);
NTSYSAPI NTSTATUS   NtQueryTimerResolution(PULONG,PULONG,PULONG);
NTSYSAPI NTSTATUS   NtQueryValueKey(void*,const UNICODE_STRING *,KEY_VALUE_INFORMATION_CLASS,void *,DWORD,DWORD *);
NTSYSAPI NTSTATUS   NtQueryLicenseValue(const UNICODE_STRING *,ULONG *,void*,ULONG,ULONG *);
NTSYSAPI NTSTATUS   NtQueryVirtualMemory(void*,LPCVOID,MEMORY_INFORMATION_CLASS,void*,SIZE_T,SIZE_T*);
NTSYSAPI NTSTATUS   NtQueryVolumeInformationFile(void*,PIO_STATUS_BLOCK,void*,ULONG,FS_INFORMATION_CLASS);
NTSYSAPI NTSTATUS   NtRaiseException(PEXCEPTION_RECORD,PCONTEXT,BOOL);
NTSYSAPI NTSTATUS   NtRaiseHardError(NTSTATUS,ULONG,ULONG,void**,HARDERROR_RESPONSE_OPTION,PHARDERROR_RESPONSE);
NTSYSAPI NTSTATUS   NtReadFile(void*,void*,PIO_APC_ROUTINE,void*,PIO_STATUS_BLOCK,void*,ULONG,PLARGE_INTEGER,PULONG);
NTSYSAPI NTSTATUS   NtReadFileScatter(void*,void*,PIO_APC_ROUTINE,void*,PIO_STATUS_BLOCK,FILE_SEGMENT_ELEMENT*,ULONG,PLARGE_INTEGER,PULONG);
NTSYSAPI NTSTATUS   NtReadRequestData(void*,PLPC_MESSAGE,ULONG,void*,ULONG,PULONG);
NTSYSAPI NTSTATUS   NtReadVirtualMemory(void*,const void*,void*,SIZE_T,SIZE_T*);
NTSYSAPI NTSTATUS   NtRegisterThreadTerminatePort(void*);
NTSYSAPI NTSTATUS   NtReleaseKeyedEvent(void*,const void*,BOOL,const LARGE_INTEGER*);
NTSYSAPI NTSTATUS   NtReleaseMutant(void*,PLONG);
NTSYSAPI NTSTATUS   NtReleaseSemaphore(void*,ULONG,PULONG);
NTSYSAPI NTSTATUS   NtRemoveIoCompletion(void*,PULONG_PTR,PULONG_PTR,PIO_STATUS_BLOCK,PLARGE_INTEGER);
NTSYSAPI NTSTATUS   NtRemoveIoCompletionEx(void*,FILE_IO_COMPLETION_INFORMATION*,ULONG,ULONG*,LARGE_INTEGER*,BOOL);
NTSYSAPI NTSTATUS   NtRemoveProcessDebug(void*,void*);
NTSYSAPI NTSTATUS   NtRenameKey(void*,UNICODE_STRING*);
NTSYSAPI NTSTATUS   NtReplaceKey(POBJECT_ATTRIBUTES,void*,POBJECT_ATTRIBUTES);
NTSYSAPI NTSTATUS   NtReplyPort(void*,PLPC_MESSAGE);
NTSYSAPI NTSTATUS   NtReplyWaitReceivePort(void*,PULONG,PLPC_MESSAGE,PLPC_MESSAGE);
NTSYSAPI NTSTATUS   NtReplyWaitReceivePortEx(void*,void**,PPORT_MESSAGE,PPORT_MESSAGE,PLARGE_INTEGER);
NTSYSAPI NTSTATUS   NtReplyWaitReplyPort(void*,PLPC_MESSAGE);
NTSYSAPI NTSTATUS   NtRequestPort(void*,PLPC_MESSAGE);
NTSYSAPI NTSTATUS   NtRequestWaitReplyPort(void*,PLPC_MESSAGE,PLPC_MESSAGE);
NTSYSAPI NTSTATUS   NtResetEvent(void*,LONG*);
NTSYSAPI NTSTATUS   NtResetWriteWatch(void*,void*,SIZE_T);
NTSYSAPI NTSTATUS   NtRestoreKey(void*,void*,ULONG);
NTSYSAPI NTSTATUS   NtResumeProcess(void*);
NTSYSAPI NTSTATUS   NtResumeThread(void*,PULONG);
NTSYSAPI NTSTATUS   NtRollbackTransaction(void*,BOOL);
NTSYSAPI NTSTATUS   NtSaveKey(void*,void*);
NTSYSAPI NTSTATUS   NtSecureConnectPort(PHANDLE,PUNICODE_STRING,PSECURITY_QUALITY_OF_SERVICE,PLPC_SECTION_WRITE,PSID,PLPC_SECTION_READ,PULONG,void*,PULONG);
NTSYSAPI NTSTATUS   NtSetContextThread(void*,const CONTEXT*);
NTSYSAPI NTSTATUS   NtSetDebugFilterState(ULONG,ULONG,BOOL);
NTSYSAPI NTSTATUS   NtSetDefaultHardErrorPort(void*);
NTSYSAPI NTSTATUS   NtSetDefaultLocale(BOOL,LCID);
NTSYSAPI NTSTATUS   NtSetDefaultUILanguage(LANGID);
NTSYSAPI NTSTATUS   NtSetEaFile(void*,PIO_STATUS_BLOCK,void*,ULONG);
NTSYSAPI NTSTATUS   NtSetEvent(void*,LONG*);
NTSYSAPI NTSTATUS   NtSetHighEventPair(void*);
NTSYSAPI NTSTATUS   NtSetHighWaitLowEventPair(void*);
NTSYSAPI NTSTATUS   NtSetHighWaitLowThread(VOID);
NTSYSAPI NTSTATUS   NtSetInformationDebugObject(void*,DEBUGOBJECTINFOCLASS,void*,ULONG,ULONG*);
NTSYSAPI NTSTATUS   NtSetInformationFile(void*,PIO_STATUS_BLOCK,void*,ULONG,FILE_INFORMATION_CLASS);
NTSYSAPI NTSTATUS   NtSetInformationJobObject(void*,JOBOBJECTINFOCLASS,void*,ULONG);
NTSYSAPI NTSTATUS   NtSetInformationKey(void*,const int,void*,ULONG);
NTSYSAPI NTSTATUS   NtSetInformationObject(void*, OBJECT_INFORMATION_CLASS, void*, ULONG);
NTSYSAPI NTSTATUS   NtSetInformationProcess(void*,PROCESSINFOCLASS,void*,ULONG);
NTSYSAPI NTSTATUS   NtSetInformationThread(void*,THREADINFOCLASS,LPCVOID,ULONG);
NTSYSAPI NTSTATUS   NtSetInformationToken(void*,TOKEN_INFORMATION_CLASS,void*,ULONG);
NTSYSAPI NTSTATUS   NtSetInformationVirtualMemory(void*,VIRTUAL_MEMORY_INFORMATION_CLASS,ULONG_PTR,PMEMORY_RANGE_ENTRY,void*,ULONG);
NTSYSAPI NTSTATUS   NtSetIntervalProfile(ULONG,KPROFILE_SOURCE);
NTSYSAPI NTSTATUS   NtSetIoCompletion(void*,ULONG_PTR,ULONG_PTR,NTSTATUS,SIZE_T);
NTSYSAPI NTSTATUS   NtSetIoCompletionEx(void*,void*,ULONG_PTR,ULONG_PTR,NTSTATUS,SIZE_T);
NTSYSAPI NTSTATUS   NtSetLdtEntries(ULONG,LDT_ENTRY,ULONG,LDT_ENTRY);
NTSYSAPI NTSTATUS   NtSetLowEventPair(void*);
NTSYSAPI NTSTATUS   NtSetLowWaitHighEventPair(void*);
NTSYSAPI NTSTATUS   NtSetLowWaitHighThread(VOID);
NTSYSAPI NTSTATUS   NtSetSecurityObject(void*,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR);
NTSYSAPI NTSTATUS   NtSetSystemEnvironmentValue(PUNICODE_STRING,PUNICODE_STRING);
NTSYSAPI NTSTATUS   NtSetSystemInformation(SYSTEM_INFORMATION_CLASS,void*,ULONG);
NTSYSAPI NTSTATUS   NtSetSystemPowerState(POWER_ACTION,SYSTEM_POWER_STATE,ULONG);
NTSYSAPI NTSTATUS   NtSetSystemTime(const LARGE_INTEGER*,LARGE_INTEGER*);
NTSYSAPI NTSTATUS   NtSetThreadExecutionState(EXECUTION_STATE,EXECUTION_STATE*);
NTSYSAPI NTSTATUS   NtSetTimer(void*, const LARGE_INTEGER*, PTIMER_APC_ROUTINE, void*, BOOL, ULONG, BOOL*);
NTSYSAPI NTSTATUS   NtSetTimerResolution(ULONG,BOOL,PULONG);
NTSYSAPI NTSTATUS   NtSetValueKey(void*,const UNICODE_STRING *,ULONG,ULONG,const void *,ULONG);
NTSYSAPI NTSTATUS   NtSetVolumeInformationFile(void*,PIO_STATUS_BLOCK,void*,ULONG,FS_INFORMATION_CLASS);
NTSYSAPI NTSTATUS   NtSignalAndWaitForSingleObject(void*,void*,BOOL,const LARGE_INTEGER*);
NTSYSAPI NTSTATUS   NtShutdownSystem(SHUTDOWN_ACTION);
NTSYSAPI NTSTATUS   NtStartProfile(void*);
NTSYSAPI NTSTATUS   NtStopProfile(void*);
NTSYSAPI NTSTATUS   NtSuspendProcess(void*);
NTSYSAPI NTSTATUS   NtSuspendThread(void*,PULONG);
NTSYSAPI NTSTATUS   NtSystemDebugControl(SYSDBG_COMMAND,void*,ULONG,void*,ULONG,PULONG);
NTSYSAPI NTSTATUS   NtTerminateJobObject(void*,NTSTATUS);
NTSYSAPI NTSTATUS   NtTerminateProcess(void*,LONG);
NTSYSAPI NTSTATUS   NtTerminateThread(void*,LONG);
NTSYSAPI NTSTATUS   NtTestAlert(VOID);
NTSYSAPI NTSTATUS   NtTraceControl(ULONG,void*,ULONG,void*,ULONG,ULONG*);
NTSYSAPI NTSTATUS   NtUnloadDriver(const UNICODE_STRING *);
NTSYSAPI NTSTATUS   NtUnloadKey(POBJECT_ATTRIBUTES);
NTSYSAPI NTSTATUS   NtUnloadKeyEx(POBJECT_ATTRIBUTES,void*);
NTSYSAPI NTSTATUS   NtUnlockFile(void*,PIO_STATUS_BLOCK,PLARGE_INTEGER,PLARGE_INTEGER,PULONG);
NTSYSAPI NTSTATUS   NtUnlockVirtualMemory(void*,void**,SIZE_T*,ULONG);
NTSYSAPI NTSTATUS   NtUnmapViewOfSection(void*,void*);
NTSYSAPI NTSTATUS   NtUnmapViewOfSectionEx(void*,void*,ULONG);
NTSYSAPI NTSTATUS   NtVdmControl(ULONG,void*);
NTSYSAPI NTSTATUS   NtWaitForAlertByThreadId(const void*,const LARGE_INTEGER*);
NTSYSAPI NTSTATUS   NtWaitForDebugEvent(void*,BOOL,LARGE_INTEGER*,DBGUI_WAIT_STATE_CHANGE*);
NTSYSAPI NTSTATUS   NtWaitForKeyedEvent(void*,const void*,BOOL,const LARGE_INTEGER*);
NTSYSAPI NTSTATUS   NtWaitForSingleObject(void*,BOOL,const LARGE_INTEGER*);
NTSYSAPI NTSTATUS   NtWaitForMultipleObjects(ULONG,const void**,BOOL,BOOL,const LARGE_INTEGER*);
NTSYSAPI NTSTATUS   NtWaitHighEventPair(void*);
NTSYSAPI NTSTATUS   NtWaitLowEventPair(void*);
NTSYSAPI NTSTATUS   NtWriteFile(void*,void*,PIO_APC_ROUTINE,void*,PIO_STATUS_BLOCK,const void*,ULONG,PLARGE_INTEGER,PULONG);
NTSYSAPI NTSTATUS   NtWriteFileGather(void*,void*,PIO_APC_ROUTINE,void*,PIO_STATUS_BLOCK,FILE_SEGMENT_ELEMENT*,ULONG,PLARGE_INTEGER,PULONG);
NTSYSAPI NTSTATUS   NtWriteRequestData(void*,PLPC_MESSAGE,ULONG,void*,ULONG,PULONG);
NTSYSAPI NTSTATUS   NtWriteVirtualMemory(void*,void*,const void*,SIZE_T,SIZE_T*);
NTSYSAPI NTSTATUS   NtYieldExecution(void);
NTSYSAPI NTSTATUS   RtlAbsoluteToSelfRelativeSD(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR,PULONG);
NTSYSAPI void       RtlAcquirePebLock(void);
NTSYSAPI BYTE       RtlAcquireResourceExclusive(LPRTL_RWLOCK,BYTE);
NTSYSAPI BYTE       RtlAcquireResourceShared(LPRTL_RWLOCK,BYTE);
NTSYSAPI void       RtlAcquireSRWLockExclusive(RTL_SRWLOCK*);
NTSYSAPI void       RtlAcquireSRWLockShared(RTL_SRWLOCK*);
NTSYSAPI NTSTATUS   RtlActivateActivationContext(DWORD,void*,ULONG_PTR*);
NTSYSAPI NTSTATUS   RtlActivateActivationContextEx(ULONG,TEB*,void*,ULONG_PTR*);
NTSYSAPI NTSTATUS   RtlAddAccessAllowedAce(PACL,DWORD,DWORD,PSID);
NTSYSAPI NTSTATUS   RtlAddAccessAllowedAceEx(PACL,DWORD,DWORD,DWORD,PSID);
NTSYSAPI NTSTATUS   RtlAddAccessAllowedObjectAce(PACL,DWORD,DWORD,DWORD,GUID*,GUID*,PSID);
NTSYSAPI NTSTATUS   RtlAddAccessDeniedAce(PACL,DWORD,DWORD,PSID);
NTSYSAPI NTSTATUS   RtlAddAccessDeniedAceEx(PACL,DWORD,DWORD,DWORD,PSID);
NTSYSAPI NTSTATUS   RtlAddAccessDeniedObjectAce(PACL,DWORD,DWORD,DWORD,GUID*,GUID*,PSID);
NTSYSAPI NTSTATUS   RtlAddAce(PACL,DWORD,DWORD,PACE_HEADER,DWORD);
NTSYSAPI NTSTATUS   RtlAddAtomToAtomTable(RTL_ATOM_TABLE,const WCHAR*,RTL_ATOM*);
NTSYSAPI NTSTATUS   RtlAddAuditAccessAce(PACL,DWORD,DWORD,PSID,BOOL,BOOL);
NTSYSAPI NTSTATUS   RtlAddAuditAccessAceEx(PACL,DWORD,DWORD,DWORD,PSID,BOOL,BOOL);
NTSYSAPI NTSTATUS   RtlAddAuditAccessObjectAce(PACL,DWORD,DWORD,DWORD,GUID*,GUID*,PSID,BOOL,BOOL);
NTSYSAPI NTSTATUS   RtlAddMandatoryAce(PACL,DWORD,DWORD,DWORD,DWORD,PSID);
NTSYSAPI NTSTATUS   RtlAddProcessTrustLabelAce(PACL,DWORD,DWORD,PSID,DWORD,DWORD);
NTSYSAPI void       RtlAddRefActivationContext(void*);
NTSYSAPI void*      RtlAddVectoredContinueHandler(ULONG,PVECTORED_EXCEPTION_HANDLER);
NTSYSAPI void*      RtlAddVectoredExceptionHandler(ULONG,PVECTORED_EXCEPTION_HANDLER);
NTSYSAPI void*      RtlAddressInSectionTable(const IMAGE_NT_HEADERS*,HMODULE,DWORD);
NTSYSAPI NTSTATUS   RtlAdjustPrivilege(ULONG,BOOL,BOOL,PBOOLEAN);
NTSYSAPI NTSTATUS   RtlAllocateAndInitializeSid(PSID_IDENTIFIER_AUTHORITY,BYTE,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,PSID *);
NTSYSAPI RTL_HANDLE *  RtlAllocateHandle(RTL_HANDLE_TABLE *,ULONG *);
NTSYSAPI BOOL    RtlFreeHeap(void*,ULONG,void*);
NTSYSAPI void*      RtlAllocateHeap(void*,ULONG,SIZE_T) __WINE_ALLOC_SIZE(3) __WINE_DEALLOC(RtlFreeHeap,3) __WINE_MALLOC;
NTSYSAPI WCHAR      RtlAnsiCharToUnicodeChar(LPSTR *);
NTSYSAPI DWORD      RtlAnsiStringToUnicodeSize(const STRING *);
NTSYSAPI NTSTATUS   RtlAnsiStringToUnicodeString(PUNICODE_STRING,PCANSI_STRING,BOOL);
NTSYSAPI NTSTATUS   RtlAppendAsciizToString(STRING *,LPCSTR);
NTSYSAPI NTSTATUS   RtlAppendStringToString(STRING *,const STRING *);
NTSYSAPI NTSTATUS   RtlAppendUnicodeStringToString(UNICODE_STRING *,const UNICODE_STRING *);
NTSYSAPI NTSTATUS   RtlAppendUnicodeToString(UNICODE_STRING *,LPCWSTR);
NTSYSAPI BOOL    RtlAreAllAccessesGranted(ACCESS_MASK,ACCESS_MASK);
NTSYSAPI BOOL    RtlAreAnyAccessesGranted(ACCESS_MASK,ACCESS_MASK);
NTSYSAPI BOOL    RtlAreBitsSet(PCRTL_BITMAP,ULONG,ULONG);
NTSYSAPI BOOL    RtlAreBitsClear(PCRTL_BITMAP,ULONG,ULONG);
NTSYSAPI NTSTATUS   RtlCharToInteger(PCSZ,ULONG,PULONG);
NTSYSAPI NTSTATUS   RtlCheckRegistryKey(ULONG, wchar_t);
NTSYSAPI void       RtlClearAllBits(PRTL_BITMAP);
NTSYSAPI void       RtlClearBits(PRTL_BITMAP,ULONG,ULONG);
NTSYSAPI ULONG      RtlCompactHeap(void*,ULONG);
NTSYSAPI LONG       RtlCompareUnicodeString(const UNICODE_STRING*,const UNICODE_STRING*,BOOL);
NTSYSAPI LONG       RtlCompareUnicodeStrings(const WCHAR*,SIZE_T,const WCHAR*,SIZE_T,BOOL);
NTSYSAPI NTSTATUS   RtlCompressBuffer(USHORT,PUCHAR,ULONG,PUCHAR,ULONG,ULONG,PULONG,void*);
NTSYSAPI DWORD      RtlComputeCrc32(DWORD,const BYTE*,INT);
NTSYSAPI NTSTATUS   RtlConvertSidToUnicodeString(PUNICODE_STRING,PSID,BOOL);
NTSYSAPI NTSTATUS   RtlConvertToAutoInheritSecurityObject(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR*,GUID*,BOOL,PGENERIC_MAPPING);
NTSYSAPI NTSTATUS   RtlCopyContext(CONTEXT*,DWORD,CONTEXT*);
NTSYSAPI NTSTATUS   RtlCopyExtendedContext(CONTEXT_EX*,ULONG,CONTEXT_EX*);
NTSYSAPI void       RtlCopyLuid(PLUID,const LUID*);
NTSYSAPI void       RtlCopyLuidAndAttributesArray(ULONG,const LUID_AND_ATTRIBUTES*,PLUID_AND_ATTRIBUTES);
NTSYSAPI NTSTATUS   RtlCopySecurityDescriptor(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR);
NTSYSAPI BOOL    RtlCopySid(DWORD,PSID,PSID);
NTSYSAPI void       RtlCopyUnicodeString(UNICODE_STRING*,const UNICODE_STRING*);
NTSYSAPI NTSTATUS   RtlCreateAcl(PACL,DWORD,DWORD);
NTSYSAPI NTSTATUS   RtlCreateActivationContext(void**,const void*);
NTSYSAPI NTSTATUS   RtlCreateAtomTable(ULONG,RTL_ATOM_TABLE*);
NTSYSAPI NTSTATUS   RtlCreateEnvironment(BOOL, wchar_t*);
NTSYSAPI void*     RtlCreateHeap(ULONG,void*,SIZE_T,SIZE_T,void*,PRTL_HEAP_PARAMETERS);
NTSYSAPI NTSTATUS   RtlCreateProcessParameters(RTL_USER_PROCESS_PARAMETERS**,const UNICODE_STRING*,const UNICODE_STRING*,const UNICODE_STRING*,const UNICODE_STRING*,wchar_t,const UNICODE_STRING*,const UNICODE_STRING*,const UNICODE_STRING*,const UNICODE_STRING*);
NTSYSAPI NTSTATUS   RtlCreateProcessParametersEx(RTL_USER_PROCESS_PARAMETERS**,const UNICODE_STRING*,const UNICODE_STRING*,const UNICODE_STRING*,const UNICODE_STRING*,wchar_t,const UNICODE_STRING*,const UNICODE_STRING*,const UNICODE_STRING*,const UNICODE_STRING*,ULONG);
NTSYSAPI PDEBUG_BUFFER  RtlCreateQueryDebugBuffer(ULONG,BOOL);
NTSYSAPI NTSTATUS   RtlCreateRegistryKey(ULONG,wchar_t);
NTSYSAPI NTSTATUS   RtlCreateSecurityDescriptor(PSECURITY_DESCRIPTOR,DWORD);
NTSYSAPI NTSTATUS   RtlCreateTimer(void*,void**,RTL_WAITORTIMERCALLBACKFUNC, void*, DWORD, DWORD, ULONG);
NTSYSAPI NTSTATUS   RtlCreateTimerQueue(PHANDLE);
NTSYSAPI BOOL    RtlCreateUnicodeString(PUNICODE_STRING,LPCWSTR);
NTSYSAPI BOOL    RtlCreateUnicodeStringFromAsciiz(PUNICODE_STRING,LPCSTR);
NTSYSAPI NTSTATUS   RtlCreateUserProcess(UNICODE_STRING*,ULONG,RTL_USER_PROCESS_PARAMETERS*,SECURITY_DESCRIPTOR*,SECURITY_DESCRIPTOR*,void*,BOOL,void*,void*,RTL_USER_PROCESS_INFORMATION*);
NTSYSAPI NTSTATUS   RtlCreateUserStack(SIZE_T,SIZE_T,ULONG,SIZE_T,SIZE_T,INITIAL_TEB*);
NTSYSAPI NTSTATUS   RtlCreateUserThread(void*,SECURITY_DESCRIPTOR*,BOOL,ULONG,SIZE_T,SIZE_T,PRTL_THREAD_START_ROUTINE,void*,void**,CLIENT_ID*);
NTSYSAPI NTSTATUS   RtlCustomCPToUnicodeN(CPTABLEINFO*,WCHAR*,DWORD,DWORD*,const char*,DWORD);
NTSYSAPI PRTL_USER_PROCESS_PARAMETERS  RtlDeNormalizeProcessParams(RTL_USER_PROCESS_PARAMETERS*);
NTSYSAPI void       RtlDeactivateActivationContext(DWORD,ULONG_PTR);
NTSYSAPI void*      RtlDecodePointer(void*);
NTSYSAPI NTSTATUS   RtlDecompressBuffer(USHORT,PUCHAR,ULONG,PUCHAR,ULONG,PULONG);
NTSYSAPI NTSTATUS   RtlDecompressFragment(USHORT,PUCHAR,ULONG,PUCHAR,ULONG,ULONG,PULONG,void*);
NTSYSAPI NTSTATUS   RtlDefaultNpAcl(PACL*);
NTSYSAPI NTSTATUS   RtlDeleteAce(PACL,DWORD);
NTSYSAPI NTSTATUS   RtlDeleteAtomFromAtomTable(RTL_ATOM_TABLE,RTL_ATOM);
NTSYSAPI NTSTATUS   RtlDeleteCriticalSection(RTL_CRITICAL_SECTION *);
NTSYSAPI NTSTATUS   RtlDeleteRegistryValue(ULONG, PCWSTR, PCWSTR);
NTSYSAPI void       RtlDeleteResource(LPRTL_RWLOCK);
NTSYSAPI NTSTATUS   RtlDeleteSecurityObject(PSECURITY_DESCRIPTOR*);
NTSYSAPI NTSTATUS   RtlDeleteTimer(void*, void*, void*);
NTSYSAPI NTSTATUS   RtlDeleteTimerQueueEx(void*, void*);
NTSYSAPI PRTL_USER_PROCESS_PARAMETERS  RtlDeNormalizeProcessParams(RTL_USER_PROCESS_PARAMETERS*);
NTSYSAPI NTSTATUS   RtlDeregisterWait(void*);
NTSYSAPI NTSTATUS   RtlDeregisterWaitEx(void*,void*);
NTSYSAPI NTSTATUS   RtlDestroyAtomTable(RTL_ATOM_TABLE);
NTSYSAPI NTSTATUS   RtlDestroyEnvironment(wchar_t);
NTSYSAPI NTSTATUS   RtlDestroyHandleTable(RTL_HANDLE_TABLE *);
NTSYSAPI void*     RtlDestroyHeap(void*);
NTSYSAPI void       RtlDestroyProcessParameters(RTL_USER_PROCESS_PARAMETERS*);
NTSYSAPI NTSTATUS   RtlDestroyQueryDebugBuffer(PDEBUG_BUFFER);
NTSYSAPI DOS_PATHNAME_TYPE  RtlDetermineDosPathNameType_U(PCWSTR);
NTSYSAPI BOOL    RtlDllShutdownInProgress(void);
NTSYSAPI BOOL    RtlDoesFileExists_U(LPCWSTR);
NTSYSAPI BOOL    RtlDosPathNameToNtPathName_U(PCWSTR,PUNICODE_STRING,wchar_t*,CURDIR*);
NTSYSAPI NTSTATUS   RtlDosPathNameToNtPathName_U_WithStatus(PCWSTR,PUNICODE_STRING,wchar_t*,CURDIR*);
NTSYSAPI BOOL    RtlDosPathNameToRelativeNtPathName_U(PCWSTR,PUNICODE_STRING,wchar_t*,RTL_RELATIVE_NAME*);
NTSYSAPI NTSTATUS   RtlDosPathNameToRelativeNtPathName_U_WithStatus(PCWSTR,PUNICODE_STRING,wchar_t*,RTL_RELATIVE_NAME*);
NTSYSAPI ULONG      RtlDosSearchPath_U(LPCWSTR, LPCWSTR, LPCWSTR, ULONG, LPWSTR, LPWSTR*);
NTSYSAPI WCHAR      RtlDowncaseUnicodeChar(WCHAR);
NTSYSAPI NTSTATUS   RtlDowncaseUnicodeString(UNICODE_STRING*,const UNICODE_STRING*,BOOL);
NTSYSAPI void       RtlDumpResource(LPRTL_RWLOCK);
NTSYSAPI NTSTATUS   RtlDuplicateUnicodeString(int,const UNICODE_STRING*,UNICODE_STRING*);
NTSYSAPI NTSTATUS   RtlEmptyAtomTable(RTL_ATOM_TABLE,BOOL);
NTSYSAPI void*      RtlEncodePointer(void*);
NTSYSAPI NTSTATUS   RtlEnterCriticalSection(RTL_CRITICAL_SECTION *);
NTSYSAPI void       RtlEraseUnicodeString(UNICODE_STRING*);
NTSYSAPI NTSTATUS   RtlEqualComputerName(const UNICODE_STRING*,const UNICODE_STRING*);
NTSYSAPI NTSTATUS   RtlEqualDomainName(const UNICODE_STRING*,const UNICODE_STRING*);
NTSYSAPI BOOL    RtlEqualLuid(const LUID*,const LUID*);
NTSYSAPI BOOL       RtlEqualPrefixSid(PSID,PSID);
NTSYSAPI BOOL       RtlEqualSid(PSID,PSID);
NTSYSAPI BOOL    RtlEqualUnicodeString(const UNICODE_STRING*,const UNICODE_STRING*,BOOL);
NTSYSAPI void       RtlEraseUnicodeString(UNICODE_STRING*);
NTSYSAPI void      DECLSPEC_NORETURN  RtlExitUserProcess(ULONG);
NTSYSAPI void      DECLSPEC_NORETURN  RtlExitUserThread(ULONG);
NTSYSAPI NTSTATUS   RtlExpandEnvironmentStrings(const WCHAR*,WCHAR*,SIZE_T,WCHAR*,SIZE_T,SIZE_T*);
NTSYSAPI NTSTATUS   RtlExpandEnvironmentStrings_U(PCWSTR, const UNICODE_STRING*, UNICODE_STRING*, ULONG*);
NTSYSAPI NTSTATUS   RtlFindActivationContextSectionString(ULONG,const GUID*,ULONG,const UNICODE_STRING*,void*);
NTSYSAPI NTSTATUS   RtlFindActivationContextSectionGuid(ULONG,const GUID*,ULONG,const GUID*,void*);
NTSYSAPI NTSTATUS   RtlFindCharInUnicodeString(int,const UNICODE_STRING*,const UNICODE_STRING*,USHORT*);
NTSYSAPI ULONG      RtlFindClearBits(PCRTL_BITMAP,ULONG,ULONG);
NTSYSAPI ULONG      RtlFindClearBitsAndSet(PRTL_BITMAP,ULONG,ULONG);
NTSYSAPI ULONG      RtlFindClearRuns(PCRTL_BITMAP,PRTL_BITMAP_RUN,ULONG,BOOL);
NTSYSAPI void *     RtlFindExportedRoutineByName(HMODULE,const char*);
NTSYSAPI ULONG      RtlFindLastBackwardRunSet(PCRTL_BITMAP,ULONG,PULONG);
NTSYSAPI ULONG      RtlFindLastBackwardRunClear(PCRTL_BITMAP,ULONG,PULONG);
NTSYSAPI CCHAR      RtlFindLeastSignificantBit(ULONG32);
NTSYSAPI ULONG      RtlFindLongestRunSet(PCRTL_BITMAP,PULONG);
NTSYSAPI ULONG      RtlFindLongestRunClear(PCRTL_BITMAP,PULONG);
NTSYSAPI NTSTATUS   RtlFindMessage(HMODULE,ULONG,ULONG,ULONG,const MESSAGE_RESOURCE_ENTRY**);
NTSYSAPI CCHAR      RtlFindMostSignificantBit(ULONG32);
NTSYSAPI ULONG      RtlFindNextForwardRunSet(PCRTL_BITMAP,ULONG,PULONG);
NTSYSAPI ULONG      RtlFindNextForwardRunClear(PCRTL_BITMAP,ULONG,PULONG);
NTSYSAPI ULONG      RtlFindSetBits(PCRTL_BITMAP,ULONG,ULONG);
NTSYSAPI ULONG      RtlFindSetBitsAndClear(PRTL_BITMAP,ULONG,ULONG);
NTSYSAPI ULONG      RtlFindSetRuns(PCRTL_BITMAP,PRTL_BITMAP_RUN,ULONG,BOOL);
NTSYSAPI BOOL    RtlFirstFreeAce(PACL,PACE_HEADER *);
NTSYSAPI NTSTATUS   RtlFlsAlloc(void *,ULONG *);
NTSYSAPI NTSTATUS   RtlFlsFree(ULONG);
NTSYSAPI NTSTATUS   RtlFlsGetValue(ULONG,void **);
NTSYSAPI NTSTATUS   RtlFlsSetValue(ULONG,void *);
NTSYSAPI NTSTATUS   RtlFormatCurrentUserKeyPath(PUNICODE_STRING);

NTSYSAPI NTSTATUS   RtlFormatMessage(LPCWSTR,ULONG,BOOL,BOOL,BOOL,va_list *,LPWSTR,ULONG,ULONG*);
NTSYSAPI NTSTATUS   RtlFormatMessageEx(LPCWSTR,ULONG,BOOL,BOOL,BOOL,va_list *,LPWSTR,ULONG,ULONG*,ULONG);

NTSYSAPI void       RtlFreeActivationContextStack(ACTIVATION_CONTEXT_STACK *);
NTSYSAPI void       RtlFreeAnsiString(PANSI_STRING);
NTSYSAPI BOOL    RtlFreeHandle(RTL_HANDLE_TABLE *,RTL_HANDLE *);
NTSYSAPI void       RtlFreeOemString(POEM_STRING);
NTSYSAPI DWORD      RtlFreeSid(PSID);
NTSYSAPI void       RtlFreeThreadActivationContextStack(void);
NTSYSAPI void       RtlFreeUnicodeString(PUNICODE_STRING);
NTSYSAPI void       RtlFreeUserStack(void*);
NTSYSAPI NTSTATUS   RtlGUIDFromString(PUNICODE_STRING,GUID*);
NTSYSAPI NTSTATUS   RtlGetAce(PACL,DWORD,LPVOID *);
NTSYSAPI NTSTATUS   RtlGetActiveActivationContext(void**);
NTSYSAPI NTSTATUS   RtlGetCompressionWorkSpaceSize(USHORT,PULONG,PULONG);
NTSYSAPI NTSTATUS   RtlGetControlSecurityDescriptor(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR_CONTROL,LPDWORD);
NTSYSAPI ULONG      RtlGetCurrentDirectory_U(ULONG, LPWSTR);
NTSYSAPI PEB *      RtlGetCurrentPeb(void);
NTSYSAPI void       RtlGetCurrentProcessorNumberEx(PROCESSOR_NUMBER*);
NTSYSAPI void*     RtlGetCurrentTransaction(void);
NTSYSAPI NTSTATUS   RtlGetDaclSecurityDescriptor(PSECURITY_DESCRIPTOR,PBOOLEAN,PACL *,PBOOLEAN);
NTSYSAPI ULONG64    RtlGetEnabledExtendedFeatures(ULONG64);
NTSYSAPI NTSTATUS   RtlGetExePath(PCWSTR,wchar_t*);
NTSYSAPI NTSTATUS   RtlGetExtendedContextLength(ULONG,ULONG*);
NTSYSAPI NTSTATUS   RtlGetExtendedContextLength2(ULONG,ULONG*,ULONG64);
NTSYSAPI ULONG64    RtlGetExtendedFeaturesMask(CONTEXT_EX*);
NTSYSAPI TEB_ACTIVE_FRAME *  RtlGetFrame(void);
NTSYSAPI ULONG      RtlGetFullPathName_U(PCWSTR,ULONG,wchar_t,wchar_t*);
NTSYSAPI NTSTATUS   RtlGetGroupSecurityDescriptor(PSECURITY_DESCRIPTOR,PSID *,PBOOLEAN);
NTSYSAPI NTSTATUS   RtlGetLastNtStatus(void);
NTSYSAPI DWORD      RtlGetLastWin32Error(void);
NTSYSAPI NTSTATUS   RtlGetLocaleFileMappingAddress(void**,LCID*,LARGE_INTEGER*);
NTSYSAPI DWORD      RtlGetLongestNtPathLength(void);
NTSYSAPI NTSTATUS   RtlGetNativeSystemInformation(SYSTEM_INFORMATION_CLASS,void*,ULONG,ULONG*);
NTSYSAPI ULONG      RtlGetNtGlobalFlags(void);
NTSYSAPI BOOL    RtlGetNtProductType(LPDWORD);
NTSYSAPI void       RtlGetNtVersionNumbers(LPDWORD,LPDWORD,LPDWORD);
NTSYSAPI NTSTATUS   RtlGetOwnerSecurityDescriptor(PSECURITY_DESCRIPTOR,PSID *,PBOOLEAN);
NTSYSAPI ULONG      RtlGetProcessHeaps(ULONG,void**);
NTSYSAPI NTSTATUS   RtlGetProcessPreferredUILanguages(DWORD,ULONG*,WCHAR*,ULONG*);
NTSYSAPI BOOL    RtlGetProductInfo(DWORD,DWORD,DWORD,DWORD,PDWORD);
NTSYSAPI NTSTATUS   RtlGetSaclSecurityDescriptor(PSECURITY_DESCRIPTOR,PBOOLEAN,PACL *,PBOOLEAN);
NTSYSAPI NTSTATUS   RtlGetSearchPath(wchar_t*);
NTSYSAPI NTSTATUS   RtlGetSystemPreferredUILanguages(DWORD,ULONG,ULONG*,WCHAR*,ULONG*);
NTSYSAPI LONG32   RtlGetSystemTimePrecise(void);
NTSYSAPI DWORD      RtlGetThreadErrorMode(void);
NTSYSAPI NTSTATUS   RtlGetThreadPreferredUILanguages(DWORD,ULONG*,WCHAR*,ULONG*);
NTSYSAPI BOOL    RtlGetUserInfoHeap(void*,ULONG,void*,void**,ULONG*);
NTSYSAPI NTSTATUS   RtlGetUserPreferredUILanguages(DWORD,ULONG,ULONG*,WCHAR*,ULONG*);
NTSYSAPI NTSTATUS   RtlGetVersion(RTL_OSVERSIONINFOEXW*);
NTSYSAPI NTSTATUS   RtlHashUnicodeString(const UNICODE_STRING*,BOOL,ULONG,ULONG*);
NTSYSAPI PSID_IDENTIFIER_AUTHORITY  RtlIdentifierAuthoritySid(PSID);
NTSYSAPI NTSTATUS   RtlIdnToAscii(DWORD,const WCHAR*,INT,WCHAR*,INT*);
NTSYSAPI NTSTATUS   RtlIdnToNameprepUnicode(DWORD,const WCHAR*,INT,WCHAR*,INT*);
NTSYSAPI NTSTATUS   RtlIdnToUnicode(DWORD,const WCHAR*,INT,WCHAR*,INT*);
NTSYSAPI void*      RtlImageDirectoryEntryToData(HMODULE,BOOL,WORD,ULONG *);
NTSYSAPI PIMAGE_NT_HEADERS  RtlImageNtHeader(HMODULE);
NTSYSAPI PIMAGE_SECTION_HEADER  RtlImageRvaToSection(const IMAGE_NT_HEADERS *,HMODULE,DWORD);
NTSYSAPI void*      RtlImageRvaToVa(const IMAGE_NT_HEADERS *,HMODULE,DWORD,IMAGE_SECTION_HEADER **);
NTSYSAPI NTSTATUS   RtlImpersonateSelf(SECURITY_IMPERSONATION_LEVEL);
NTSYSAPI void       RtlInitAnsiString(PANSI_STRING,PCSZ);
NTSYSAPI NTSTATUS   RtlInitAnsiStringEx(PANSI_STRING,PCSZ);
NTSYSAPI void       RtlInitCodePageTable(USHORT*,CPTABLEINFO*);
NTSYSAPI void       RtlInitNlsTables(USHORT*,USHORT*,USHORT*,NLSTABLEINFO*);
NTSYSAPI void       RtlInitString(PSTRING,PCSZ);
NTSYSAPI void       RtlInitUnicodeString(PUNICODE_STRING,PCWSTR);
NTSYSAPI NTSTATUS   RtlInitUnicodeStringEx(PUNICODE_STRING,PCWSTR);
NTSYSAPI void       RtlInitializeBitMap(PRTL_BITMAP,PULONG,ULONG);
NTSYSAPI void       RtlInitializeConditionVariable(RTL_CONDITION_VARIABLE *);
NTSYSAPI NTSTATUS   RtlInitializeCriticalSection(RTL_CRITICAL_SECTION *);
NTSYSAPI NTSTATUS   RtlInitializeCriticalSectionAndSpinCount(RTL_CRITICAL_SECTION *,ULONG);
NTSYSAPI NTSTATUS   RtlInitializeCriticalSectionEx(RTL_CRITICAL_SECTION *,ULONG,ULONG);
NTSYSAPI NTSTATUS   RtlInitializeExtendedContext(void*,ULONG,CONTEXT_EX**);
NTSYSAPI NTSTATUS   RtlInitializeExtendedContext2(void*,ULONG,CONTEXT_EX**,ULONG64);
NTSYSAPI void       RtlInitializeHandleTable(ULONG,ULONG,RTL_HANDLE_TABLE *);
NTSYSAPI NTSTATUS   RtlInitializeNtUserPfn(const void*,ULONG,const void*,ULONG,const void*,ULONG);
NTSYSAPI void       RtlInitializeResource(LPRTL_RWLOCK);
NTSYSAPI void       RtlInitializeSRWLock(RTL_SRWLOCK*);
NTSYSAPI NTSTATUS   RtlInitializeSid(PSID,PSID_IDENTIFIER_AUTHORITY,BYTE);
NTSYSAPI NTSTATUS   RtlInt64ToUnicodeString(ULONG32,ULONG,UNICODE_STRING *);
NTSYSAPI NTSTATUS   RtlIntegerToChar(ULONG,ULONG,ULONG,PCHAR);
NTSYSAPI NTSTATUS   RtlIntegerToUnicodeString(ULONG,ULONG,UNICODE_STRING *);
NTSYSAPI BOOL    RtlIsActivationContextActive(void*);
NTSYSAPI BOOL       RtlIsCriticalSectionLocked(RTL_CRITICAL_SECTION *);
NTSYSAPI BOOL       RtlIsCriticalSectionLockedByThread(RTL_CRITICAL_SECTION *);
NTSYSAPI BOOL    RtlIsCurrentProcess(void*);
NTSYSAPI BOOL    RtlIsCurrentThread(void*);
NTSYSAPI ULONG      RtlIsDosDeviceName_U(PCWSTR);
NTSYSAPI BOOL    RtlIsNameLegalDOS8Dot3(const UNICODE_STRING*,POEM_STRING,PBOOLEAN);
NTSYSAPI NTSTATUS   RtlIsNormalizedString(ULONG,const WCHAR*,INT,BOOL*);
NTSYSAPI BOOL    RtlIsProcessorFeaturePresent(UINT);
NTSYSAPI BOOL    RtlIsTextUnicode(LPCVOID,INT,INT *);
NTSYSAPI BOOL    RtlIsValidHandle(const RTL_HANDLE_TABLE *, const RTL_HANDLE *);
NTSYSAPI BOOL    RtlIsValidIndexHandle(const RTL_HANDLE_TABLE *, ULONG Index, RTL_HANDLE **);
NTSYSAPI BOOL    RtlIsValidLocaleName(const WCHAR*,ULONG);
NTSYSAPI NTSTATUS   RtlLcidToLocaleName(LCID,UNICODE_STRING*,ULONG,BOOL);
NTSYSAPI NTSTATUS   RtlLeaveCriticalSection(RTL_CRITICAL_SECTION *);
NTSYSAPI DWORD      RtlLengthRequiredSid(DWORD);
NTSYSAPI ULONG      RtlLengthSecurityDescriptor(PSECURITY_DESCRIPTOR);
NTSYSAPI DWORD      RtlLengthSid(PSID);
NTSYSAPI NTSTATUS   RtlLocalTimeToSystemTime(const LARGE_INTEGER*,PLARGE_INTEGER);
NTSYSAPI NTSTATUS   RtlLocaleNameToLcid(const WCHAR*,LCID*,ULONG);
NTSYSAPI void *     RtlLocateExtendedFeature(CONTEXT_EX*,ULONG,ULONG*);
NTSYSAPI void *     RtlLocateExtendedFeature2(CONTEXT_EX*,ULONG,XSTATE_CONFIGURATION*,ULONG*);
NTSYSAPI void *     RtlLocateLegacyContext(CONTEXT_EX*,ULONG*);
NTSYSAPI BOOL    RtlLockHeap(void*);
NTSYSAPI NTSTATUS   RtlLookupAtomInAtomTable(RTL_ATOM_TABLE,const WCHAR*,RTL_ATOM*);
NTSYSAPI NTSTATUS   RtlMakeSelfRelativeSD(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR,LPDWORD);
NTSYSAPI NTSTATUS   RtlMultiByteToUnicodeN(LPWSTR,DWORD,LPDWORD,LPCSTR,DWORD);
NTSYSAPI NTSTATUS   RtlMultiByteToUnicodeSize(DWORD*,LPCSTR,ULONG);
NTSYSAPI NTSTATUS   RtlNewSecurityObject(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR*,BOOL,void*,PGENERIC_MAPPING);
NTSYSAPI NTSTATUS   RtlNewSecurityObjectEx(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR*,GUID*,BOOL,ULONG,void*,PGENERIC_MAPPING);
NTSYSAPI NTSTATUS   RtlNewSecurityObjectWithMultipleInheritance(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR*,
    GUID **,ULONG,BOOL,ULONG,void*,PGENERIC_MAPPING);
NTSYSAPI PRTL_USER_PROCESS_PARAMETERS  RtlNormalizeProcessParams(RTL_USER_PROCESS_PARAMETERS*);
NTSYSAPI NTSTATUS   RtlNormalizeString(ULONG,const WCHAR*,INT,WCHAR*,INT*);
NTSYSAPI ULONG      RtlNtStatusToDosError(NTSTATUS);
NTSYSAPI ULONG      RtlNtStatusToDosErrorNoTeb(NTSTATUS);
NTSYSAPI ULONG      RtlNumberOfSetBits(PCRTL_BITMAP);
NTSYSAPI ULONG      RtlNumberOfClearBits(PCRTL_BITMAP);
NTSYSAPI ULONG      RtlOemStringToUnicodeSize(const STRING*);
NTSYSAPI NTSTATUS   RtlOemStringToUnicodeString(UNICODE_STRING*,const STRING*,BOOL);
NTSYSAPI NTSTATUS   RtlOemToUnicodeN(LPWSTR,DWORD,LPDWORD,LPCSTR,DWORD);
NTSYSAPI NTSTATUS   RtlOpenCurrentUser(ACCESS_MASK,PHANDLE);
NTSYSAPI NTSTATUS   RtlPinAtomInAtomTable(RTL_ATOM_TABLE,RTL_ATOM);
NTSYSAPI void       RtlPopFrame(TEB_ACTIVE_FRAME*);
NTSYSAPI BOOL    RtlPrefixString(const STRING*,const STRING*,BOOL);
NTSYSAPI void       RtlProcessFlsData(void*,ULONG);
NTSYSAPI void       RtlPushFrame(TEB_ACTIVE_FRAME*);
NTSYSAPI NTSTATUS   RtlQueryActivationContextApplicationSettings(DWORD,void*,const WCHAR*,const WCHAR*,WCHAR*,SIZE_T,SIZE_T*);
NTSYSAPI NTSTATUS   RtlQueryAtomInAtomTable(RTL_ATOM_TABLE,RTL_ATOM,ULONG*,ULONG*,WCHAR*,ULONG*);
NTSYSAPI NTSTATUS   RtlQueryDynamicTimeZoneInformation(RTL_DYNAMIC_TIME_ZONE_INFORMATION*);
NTSYSAPI NTSTATUS   RtlQueryEnvironmentVariable(WCHAR*,const WCHAR*,SIZE_T,WCHAR*,SIZE_T,SIZE_T*);
NTSYSAPI NTSTATUS   RtlQueryEnvironmentVariable_U(wchar_t,PUNICODE_STRING,PUNICODE_STRING);
NTSYSAPI NTSTATUS   RtlQueryHeapInformation(void*,HEAP_INFORMATION_CLASS,void*,SIZE_T,PSIZE_T);
NTSYSAPI NTSTATUS   RtlQueryInformationAcl(PACL,LPVOID,DWORD,ACL_INFORMATION_CLASS);
NTSYSAPI NTSTATUS   RtlQueryInformationActivationContext(ULONG,void*,void*,ULONG,void*,SIZE_T,SIZE_T*);
NTSYSAPI NTSTATUS   RtlQueryPackageIdentity(void*,WCHAR*,SIZE_T*,WCHAR*,SIZE_T*,BOOL*);
NTSYSAPI BOOL       RtlQueryPerformanceCounter(LARGE_INTEGER*);
NTSYSAPI BOOL       RtlQueryPerformanceFrequency(LARGE_INTEGER*);
NTSYSAPI NTSTATUS   RtlQueryProcessDebugInformation(ULONG,ULONG,PDEBUG_BUFFER);
NTSYSAPI NTSTATUS   RtlQueryRegistryValues(ULONG, PCWSTR, PRTL_QUERY_REGISTRY_TABLE, void*, void*);
NTSYSAPI NTSTATUS   RtlQueryTimeZoneInformation(RTL_TIME_ZONE_INFORMATION*);
NTSYSAPI BOOL       RtlQueryUnbiasedInterruptTime(ULONG32*);
NTSYSAPI NTSTATUS   RtlQueueWorkItem(PRTL_WORK_ITEM_ROUTINE,void*,ULONG);
NTSYSAPI void      DECLSPEC_NORETURN  RtlRaiseStatus(NTSTATUS);
NTSYSAPI ULONG      RtlRandom(PULONG);
NTSYSAPI ULONG      RtlRandomEx(PULONG);
NTSYSAPI void       RtlRbInsertNodeEx(RTL_RB_TREE*,RTL_BALANCED_NODE*,BOOL,RTL_BALANCED_NODE*);
NTSYSAPI void       RtlRbRemoveNode(RTL_RB_TREE*,RTL_BALANCED_NODE*);
NTSYSAPI void*      RtlReAllocateHeap(void*,ULONG,void*,SIZE_T) __WINE_ALLOC_SIZE(4) __WINE_DEALLOC(RtlFreeHeap,3);
NTSYSAPI NTSTATUS   RtlRegisterWait(PHANDLE,void*,RTL_WAITORTIMERCALLBACKFUNC,void*,ULONG,ULONG);
NTSYSAPI void       RtlReleaseActivationContext(void*);
NTSYSAPI void       RtlReleasePath(wchar_t);
NTSYSAPI void       RtlReleasePebLock(void);
NTSYSAPI void       RtlReleaseRelativeName(RTL_RELATIVE_NAME*);
NTSYSAPI void       RtlReleaseResource(LPRTL_RWLOCK);
NTSYSAPI void       RtlReleaseSRWLockExclusive(RTL_SRWLOCK*);
NTSYSAPI void       RtlReleaseSRWLockShared(RTL_SRWLOCK*);
NTSYSAPI ULONG      RtlRemoveVectoredContinueHandler(void*);
NTSYSAPI ULONG      RtlRemoveVectoredExceptionHandler(void*);
NTSYSAPI NTSTATUS   RtlRetrieveNtUserPfn(const void**,const void**,const void**);
NTSYSAPI NTSTATUS   RtlResetNtUserPfn(void);
NTSYSAPI void       RtlResetRtlTranslations(const NLSTABLEINFO*);
NTSYSAPI void       RtlRestoreLastWin32Error(DWORD);
NTSYSAPI void       RtlSecondsSince1970ToTime(DWORD,LARGE_INTEGER *);
NTSYSAPI void       RtlSecondsSince1980ToTime(DWORD,LARGE_INTEGER *);
NTSYSAPI NTSTATUS   RtlSelfRelativeToAbsoluteSD(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR,PDWORD,PACL,PDWORD,PACL,PDWORD,PSID,PDWORD,PSID,PDWORD);
NTSYSAPI void       RtlSetAllBits(PRTL_BITMAP);
NTSYSAPI void       RtlSetBits(PRTL_BITMAP,ULONG,ULONG);
NTSYSAPI NTSTATUS   RtlSetControlSecurityDescriptor(PSECURITY_DESCRIPTOR,SECURITY_DESCRIPTOR_CONTROL,SECURITY_DESCRIPTOR_CONTROL);
NTSYSAPI ULONG      RtlSetCriticalSectionSpinCount(RTL_CRITICAL_SECTION*,ULONG);
NTSYSAPI NTSTATUS   RtlSetCurrentDirectory_U(const UNICODE_STRING*);
NTSYSAPI void       RtlSetCurrentEnvironment(wchar_t, wchar_t*);
NTSYSAPI BOOL       RtlSetCurrentTransaction(void*);
NTSYSAPI NTSTATUS   RtlSetDaclSecurityDescriptor(PSECURITY_DESCRIPTOR,BOOL,PACL,BOOL);
NTSYSAPI NTSTATUS   RtlSetEnvironmentVariable(wchar_t*,PUNICODE_STRING,PUNICODE_STRING);
NTSYSAPI void       RtlSetExtendedFeaturesMask(CONTEXT_EX*,ULONG64);
NTSYSAPI NTSTATUS   RtlSetGroupSecurityDescriptor(PSECURITY_DESCRIPTOR,PSID,BOOL);
NTSYSAPI NTSTATUS   RtlSetHeapInformation(void*,HEAP_INFORMATION_CLASS,void*,SIZE_T);
NTSYSAPI NTSTATUS   RtlSetIoCompletionCallback(void*,PRTL_OVERLAPPED_COMPLETION_ROUTINE,ULONG);
NTSYSAPI void       RtlSetLastWin32Error(DWORD);
NTSYSAPI void       RtlSetLastWin32ErrorAndNtStatusFromNtStatus(NTSTATUS);
NTSYSAPI NTSTATUS   RtlSetOwnerSecurityDescriptor(PSECURITY_DESCRIPTOR,PSID,BOOL);
NTSYSAPI NTSTATUS   RtlSetProcessPreferredUILanguages(DWORD,PCZZWSTR,ULONG*);
NTSYSAPI NTSTATUS   RtlSetSaclSecurityDescriptor(PSECURITY_DESCRIPTOR,BOOL,PACL,BOOL);
NTSYSAPI NTSTATUS   RtlSetSearchPathMode(ULONG);
NTSYSAPI NTSTATUS   RtlSetThreadErrorMode(DWORD,LPDWORD);
NTSYSAPI NTSTATUS   RtlSetThreadPreferredUILanguages(DWORD,PCZZWSTR,ULONG*);
NTSYSAPI NTSTATUS   RtlSetTimeZoneInformation(const RTL_TIME_ZONE_INFORMATION*);
NTSYSAPI void       RtlSetUnhandledExceptionFilter(PRTL_EXCEPTION_FILTER);
NTSYSAPI BOOL    RtlSetUserFlagsHeap(void*,ULONG,void*,ULONG,ULONG);
NTSYSAPI BOOL    RtlSetUserValueHeap(void*,ULONG,void*,void*);
NTSYSAPI SIZE_T     RtlSizeHeap(void*,ULONG,const void*);
NTSYSAPI NTSTATUS   RtlSleepConditionVariableCS(RTL_CONDITION_VARIABLE*,RTL_CRITICAL_SECTION*,const LARGE_INTEGER*);
NTSYSAPI NTSTATUS   RtlSleepConditionVariableSRW(RTL_CONDITION_VARIABLE*,RTL_SRWLOCK*,const LARGE_INTEGER*,ULONG);
NTSYSAPI NTSTATUS   RtlStringFromGUID(REFGUID,PUNICODE_STRING);
NTSYSAPI LPDWORD    RtlSubAuthoritySid(PSID,DWORD);
NTSYSAPI LPBYTE     RtlSubAuthorityCountSid(PSID);
NTSYSAPI NTSTATUS   RtlSystemTimeToLocalTime(const LARGE_INTEGER*,PLARGE_INTEGER);
NTSYSAPI BOOL    RtlTimeFieldsToTime(PTIME_FIELDS,PLARGE_INTEGER);
NTSYSAPI void       RtlTimeToElapsedTimeFields(const LARGE_INTEGER *,PTIME_FIELDS);
NTSYSAPI BOOL    RtlTimeToSecondsSince1970(const LARGE_INTEGER *,LPDWORD);
NTSYSAPI BOOL    RtlTimeToSecondsSince1980(const LARGE_INTEGER *,LPDWORD);
NTSYSAPI void       RtlTimeToTimeFields(const LARGE_INTEGER*,PTIME_FIELDS);
NTSYSAPI BOOL    RtlTryAcquireSRWLockExclusive(RTL_SRWLOCK *);
NTSYSAPI BOOL    RtlTryAcquireSRWLockShared(RTL_SRWLOCK *);
NTSYSAPI BOOL       RtlTryEnterCriticalSection(RTL_CRITICAL_SECTION *);
NTSYSAPI NTSTATUS   RtlUTF8ToUnicodeN(WCHAR*,DWORD,DWORD*,const char*,DWORD);
NTSYSAPI DWORD      RtlUnicodeStringToAnsiSize(const UNICODE_STRING*);
NTSYSAPI NTSTATUS   RtlUnicodeStringToAnsiString(PANSI_STRING,PCUNICODE_STRING,BOOL);
NTSYSAPI NTSTATUS   RtlUnicodeStringToInteger(const UNICODE_STRING *,ULONG,ULONG *);
NTSYSAPI DWORD      RtlUnicodeStringToOemSize(const UNICODE_STRING*);
NTSYSAPI NTSTATUS   RtlUnicodeStringToOemString(POEM_STRING,PCUNICODE_STRING,BOOL);
NTSYSAPI NTSTATUS   RtlUnicodeToCustomCPN(CPTABLEINFO*,char*,DWORD,DWORD*,const WCHAR*,DWORD);
NTSYSAPI NTSTATUS   RtlUnicodeToMultiByteN(LPSTR,DWORD,LPDWORD,LPCWSTR,DWORD);
NTSYSAPI NTSTATUS   RtlUnicodeToMultiByteSize(PULONG,PCWSTR,ULONG);
NTSYSAPI NTSTATUS   RtlUnicodeToOemN(LPSTR,DWORD,LPDWORD,LPCWSTR,DWORD);
NTSYSAPI NTSTATUS   RtlUnicodeToUTF8N(LPSTR,DWORD,LPDWORD,LPCWSTR,DWORD);
NTSYSAPI ULONG      RtlUniform(PULONG);
NTSYSAPI BOOL    RtlUnlockHeap(void*);
NTSYSAPI WCHAR      RtlUpcaseUnicodeChar(WCHAR);
NTSYSAPI NTSTATUS   RtlUpcaseUnicodeStringToAnsiString(STRING*,const UNICODE_STRING*,BOOL);
NTSYSAPI NTSTATUS   RtlUpcaseUnicodeStringToCountedOemString(STRING*,const UNICODE_STRING*,BOOL);
NTSYSAPI NTSTATUS   RtlUpcaseUnicodeStringToOemString(STRING*,const UNICODE_STRING*,BOOL);
NTSYSAPI NTSTATUS   RtlUpcaseUnicodeToCustomCPN(CPTABLEINFO*,char*,DWORD,DWORD*,const WCHAR*,DWORD);
NTSYSAPI NTSTATUS   RtlUpcaseUnicodeToMultiByteN(LPSTR,DWORD,LPDWORD,LPCWSTR,DWORD);
NTSYSAPI NTSTATUS   RtlUpcaseUnicodeToOemN(LPSTR,DWORD,LPDWORD,LPCWSTR,DWORD);
NTSYSAPI NTSTATUS   RtlUpdateTimer(void*, void*, DWORD, DWORD);
NTSYSAPI void       RtlUserThreadStart(PRTL_THREAD_START_ROUTINE,void*);
NTSYSAPI BOOL    RtlValidAcl(PACL);
NTSYSAPI BOOL    RtlValidRelativeSecurityDescriptor(PSECURITY_DESCRIPTOR,ULONG,SECURITY_INFORMATION);
NTSYSAPI BOOL    RtlValidSecurityDescriptor(PSECURITY_DESCRIPTOR);
NTSYSAPI BOOL    RtlValidSid(PSID);
NTSYSAPI BOOL    RtlValidateHeap(void*,ULONG,LPCVOID);
NTSYSAPI NTSTATUS   RtlVerifyVersionInfo(const RTL_OSVERSIONINFOEXW*,DWORD,DWORDLONG);
NTSYSAPI NTSTATUS   RtlWaitOnAddress(const void *,const void *,SIZE_T,const LARGE_INTEGER *);
NTSYSAPI void       RtlWakeAddressAll(const void *);
NTSYSAPI void       RtlWakeAddressSingle(const void *);
NTSYSAPI void       RtlWakeAllConditionVariable(RTL_CONDITION_VARIABLE *);
NTSYSAPI void       RtlWakeConditionVariable(RTL_CONDITION_VARIABLE *);
NTSYSAPI NTSTATUS   RtlWalkHeap(void*,void*);
NTSYSAPI NTSTATUS   RtlWow64EnableFsRedirection(BOOL);
NTSYSAPI NTSTATUS   RtlWow64EnableFsRedirectionEx(ULONG,ULONG*);
NTSYSAPI USHORT     RtlWow64GetCurrentMachine(void);
NTSYSAPI NTSTATUS   RtlWow64GetProcessMachines(void*,USHORT*,USHORT*);
NTSYSAPI NTSTATUS   RtlWow64GetSharedInfoProcess(void*,BOOL*,WOW64INFO*);
NTSYSAPI NTSTATUS   RtlWow64IsWowGuestMachineSupported(USHORT,BOOL*);
NTSYSAPI NTSTATUS   RtlWriteRegistryValue(ULONG,PCWSTR,PCWSTR,ULONG,void*,ULONG);
NTSYSAPI NTSTATUS   RtlZombifyActivationContext(void*);
NTSYSAPI NTSTATUS   RtlpNtCreateKey(PHANDLE,ACCESS_MASK,const OBJECT_ATTRIBUTES*,ULONG,const UNICODE_STRING*,ULONG,PULONG);
NTSYSAPI NTSTATUS   RtlpNtEnumerateSubKey(void*,UNICODE_STRING *, ULONG);
NTSYSAPI NTSTATUS   RtlpNtMakeTemporaryKey(void*);
NTSYSAPI NTSTATUS   RtlpNtOpenKey(PHANDLE,ACCESS_MASK,OBJECT_ATTRIBUTES*);
NTSYSAPI NTSTATUS   RtlpNtSetValueKey(void*,ULONG,const void*,ULONG);
NTSYSAPI NTSTATUS   RtlpWaitForCriticalSection(RTL_CRITICAL_SECTION *);
NTSYSAPI NTSTATUS   RtlpUnWaitCriticalSection(RTL_CRITICAL_SECTION *);
NTSYSAPI NTSTATUS   TpAllocCleanupGroup(TP_CLEANUP_GROUP **);
NTSYSAPI NTSTATUS   TpAllocIoCompletion(TP_IO **,void*,PTP_IO_CALLBACK,void *,TP_CALLBACK_ENVIRON *);
NTSYSAPI NTSTATUS   TpAllocPool(TP_POOL **,void*);
NTSYSAPI NTSTATUS   TpAllocTimer(TP_TIMER **,PTP_TIMER_CALLBACK,void*,TP_CALLBACK_ENVIRON *);
NTSYSAPI NTSTATUS   TpAllocWait(TP_WAIT **,PTP_WAIT_CALLBACK,void*,TP_CALLBACK_ENVIRON *);
NTSYSAPI NTSTATUS   TpAllocWork(TP_WORK **,PTP_WORK_CALLBACK,void*,TP_CALLBACK_ENVIRON *);
NTSYSAPI void       TpCallbackLeaveCriticalSectionOnCompletion(TP_CALLBACK_INSTANCE *,RTL_CRITICAL_SECTION *);
NTSYSAPI NTSTATUS   TpCallbackMayRunLong(TP_CALLBACK_INSTANCE *);
NTSYSAPI void       TpCallbackReleaseMutexOnCompletion(TP_CALLBACK_INSTANCE *,void*);
NTSYSAPI void       TpCallbackReleaseSemaphoreOnCompletion(TP_CALLBACK_INSTANCE *,void*,DWORD);
NTSYSAPI void       TpCallbackSetEventOnCompletion(TP_CALLBACK_INSTANCE *,void*);
NTSYSAPI void       TpCallbackUnloadDllOnCompletion(TP_CALLBACK_INSTANCE *,HMODULE);
NTSYSAPI void       TpCancelAsyncIoOperation(TP_IO *);
NTSYSAPI void       TpDisassociateCallback(TP_CALLBACK_INSTANCE *);
NTSYSAPI BOOL       TpIsTimerSet(TP_TIMER *);
NTSYSAPI void       TpPostWork(TP_WORK *);
NTSYSAPI NTSTATUS   TpQueryPoolStackInformation(TP_POOL *, TP_POOL_STACK_INFORMATION *stack_info);
NTSYSAPI void       TpReleaseCleanupGroup(TP_CLEANUP_GROUP *);
NTSYSAPI void       TpReleaseCleanupGroupMembers(TP_CLEANUP_GROUP *,BOOL,void*);
NTSYSAPI void       TpReleaseIoCompletion(TP_IO *);
NTSYSAPI void       TpReleasePool(TP_POOL *);
NTSYSAPI void       TpReleaseTimer(TP_TIMER *);
NTSYSAPI void       TpReleaseWait(TP_WAIT *);
NTSYSAPI void       TpReleaseWork(TP_WORK *);
NTSYSAPI void       TpSetPoolMaxThreads(TP_POOL *,DWORD);
NTSYSAPI BOOL       TpSetPoolMinThreads(TP_POOL *,DWORD);
NTSYSAPI NTSTATUS   TpSetPoolStackInformation(TP_POOL *, TP_POOL_STACK_INFORMATION *stack_info);
NTSYSAPI void       TpSetTimer(TP_TIMER *, LARGE_INTEGER *,LONG,LONG);
NTSYSAPI void       TpSetWait(TP_WAIT *,void*,LARGE_INTEGER *);
NTSYSAPI NTSTATUS   TpSimpleTryPost(PTP_SIMPLE_CALLBACK,void*,TP_CALLBACK_ENVIRON *);
NTSYSAPI void       TpStartAsyncIoOperation(TP_IO *);
NTSYSAPI void       TpWaitForIoCompletion(TP_IO *,BOOL);
NTSYSAPI void       TpWaitForTimer(TP_TIMER *,BOOL);
NTSYSAPI void       TpWaitForWait(TP_WAIT *,BOOL);
NTSYSAPI void       TpWaitForWork(TP_WORK *,BOOL);

NTSYSAPI NTSTATUS   vDbgPrintEx(ULONG,ULONG,LPCSTR,va_list);
NTSYSAPI NTSTATUS   vDbgPrintExWithPrefix(LPCSTR,ULONG,ULONG,LPCSTR,va_list);

















NTSYSAPI NTSTATUS   NtWow64AllocateVirtualMemory64(void*,ULONG64*,ULONG64,ULONG64*,ULONG,ULONG);
NTSYSAPI NTSTATUS   NtWow64GetNativeSystemInformation(SYSTEM_INFORMATION_CLASS,void*,ULONG,ULONG*);
NTSYSAPI NTSTATUS   NtWow64IsProcessorFeaturePresent(UINT);
NTSYSAPI NTSTATUS   NtWow64QueryInformationProcess64(void*,PROCESSINFOCLASS,void*,ULONG,ULONG*);
NTSYSAPI NTSTATUS   NtWow64ReadVirtualMemory64(void*,ULONG64,void*,ULONG64,ULONG64*);
NTSYSAPI NTSTATUS   NtWow64WriteVirtualMemory64(void*,ULONG64,const void*,ULONG64,ULONG64*);
NTSYSAPI LONG32   RtlConvertLongToLargeInteger(LONG);
NTSYSAPI ULONG32  RtlConvertUlongToLargeInteger(ULONG);
NTSYSAPI LONG32   RtlEnlargedIntegerMultiply(INT,INT);
NTSYSAPI ULONG32  RtlEnlargedUnsignedMultiply(UINT,UINT);
NTSYSAPI UINT       RtlEnlargedUnsignedDivide(ULONG32,UINT,UINT *);
NTSYSAPI LONG32   RtlExtendedMagicDivide(LONG32,LONG32,INT);
NTSYSAPI LONG32   RtlExtendedIntegerMultiply(LONG32,INT);
NTSYSAPI LONG32   RtlExtendedLargeIntegerDivide(LONG32,INT,INT *);
NTSYSAPI LONG32   RtlInterlockedCompareExchange64(LONG32*,LONG32,LONG32);
NTSYSAPI LONG32   RtlLargeIntegerAdd(LONG32,LONG32);
NTSYSAPI LONG32   RtlLargeIntegerArithmeticShift(LONG32,INT);
NTSYSAPI LONG32   RtlLargeIntegerNegate(LONG32);
NTSYSAPI LONG32   RtlLargeIntegerShiftLeft(LONG32,INT);
NTSYSAPI LONG32   RtlLargeIntegerShiftRight(LONG32,INT);
NTSYSAPI LONG32   RtlLargeIntegerSubtract(LONG32,LONG32);
NTSYSAPI NTSTATUS   RtlLargeIntegerToChar(const ULONG32 *,ULONG,ULONG,PCHAR);




NTSYSAPI NTSTATUS  wine_nt_to_unix_file_name( const OBJECT_ATTRIBUTES *attr, char *nameA, ULONG *size,
                                                    UINT disposition );
NTSYSAPI NTSTATUS  wine_unix_to_nt_file_name( const char *name, WCHAR *buffer, ULONG *size );



























static inline BOOL RtlCheckBit(PCRTL_BITMAP lpBits, ULONG ulBit)
{
    if (lpBits && ulBit < lpBits->SizeOfBitMap &&
        lpBits->Buffer[ulBit >> 5] & (1 << (ulBit & 31)))
        return 1;
    return 0;
}




static inline USHORT RtlUshortByteSwap(USHORT s)
{
    return (s >> 8) | (s << 8);
}
static inline ULONG RtlUlongByteSwap(ULONG i)
{
    return ((ULONG)RtlUshortByteSwap((USHORT)i) << 16) | RtlUshortByteSwap((USHORT)(i >> 16));
}
static inline ULONG32 RtlUlonglongByteSwap(ULONG32 i)
{
    return ((ULONG32)RtlUlongByteSwap((ULONG)i) << 32) | RtlUlongByteSwap((ULONG)(i >> 32));
}







static inline PLIST_ENTRY RemoveHeadList(PLIST_ENTRY le)
{
    PLIST_ENTRY f, b, e;

    e = le->Flink;
    f = le->Flink->Flink;
    b = le->Flink->Blink;
    f->Blink = b;
    b->Flink = f;

    if (e != le) e->Flink = e->Blink = ((void*)0);
    return e;
}
static inline PLIST_ENTRY RemoveTailList(PLIST_ENTRY le)
{
    PLIST_ENTRY f, b, e;

    e = le->Blink;
    f = le->Blink->Flink;
    b = le->Blink->Blink;
    f->Blink = b;
    b->Flink = f;

    if (e != le) e->Flink = e->Blink = ((void*)0);
    return e;
}






NTSYSAPI NTSTATUS  __wine_unix_spawnvp( char * const argv[], int wait );



typedef struct
{
    void           *unknown;    
    UNICODE_STRING *exe_name;   

    
    UNICODE_STRING  exe_str;    
    CURDIR          curdir;     
    WCHAR           curdir_buffer[MAX_PATH];
} WIN16_SUBSYSTEM_TIB;



typedef struct
{
    UINT   sname;                  
    UINT   sopentypelanguagetag;   
    USHORT ilanguage;              
    USHORT unique_lcid;            
    USHORT idigits;                
    USHORT inegnumber;             
    USHORT icurrdigits;            
    USHORT icurrency;              
    USHORT inegcurr;               
    USHORT ilzero;                 
    USHORT inotneutral;            
    USHORT ifirstdayofweek;        
    USHORT ifirstweekofyear;       
    USHORT icountry;               
    USHORT imeasure;               
    USHORT idigitsubstitution;     
    UINT   sgrouping;              
    UINT   smongrouping;           
    UINT   slist;                  
    UINT   sdecimal;               
    UINT   sthousand;              
    UINT   scurrency;              
    UINT   smondecimalsep;         
    UINT   smonthousandsep;        
    UINT   spositivesign;          
    UINT   snegativesign;          
    UINT   s1159;                  
    UINT   s2359;                  
    UINT   snativedigits;          
    UINT   stimeformat;            
    UINT   sshortdate;             
    UINT   slongdate;              
    UINT   syearmonth;             
    UINT   sduration;              
    USHORT idefaultlanguage;       
    USHORT idefaultansicodepage;   
    USHORT idefaultcodepage;       
    USHORT idefaultmaccodepage;    
    USHORT idefaultebcdiccodepage; 
    USHORT old_geoid;              
    USHORT ipapersize;             
    BYTE   islamic_cal[2];         
    UINT   scalendartype;          
    UINT   sabbrevlangname;        
    UINT   siso639langname;        
    UINT   senglanguage;           
    UINT   snativelangname;        
    UINT   sengcountry;            
    UINT   snativectryname;        
    UINT   sabbrevctryname;        
    UINT   siso3166ctryname;       
    UINT   sintlsymbol;            
    UINT   sengcurrname;           
    UINT   snativecurrname;        
    UINT   fontsignature;          
    UINT   siso639langname2;       
    UINT   siso3166ctryname2;      
    UINT   sparent;                
    UINT   sdayname;               
    UINT   sabbrevdayname;         
    UINT   smonthname;             
    UINT   sabbrevmonthname;       
    UINT   sgenitivemonth;         
    UINT   sabbrevgenitivemonth;   
    UINT   calnames;               
    UINT   customsorts;            
    USHORT inegativepercent;       
    USHORT ipositivepercent;       
    USHORT unknown1;               
    USHORT ireadinglayout;         
    USHORT unknown2[2];            
    UINT   unused1;                
    UINT   sengdisplayname;        
    UINT   snativedisplayname;     
    UINT   spercent;               
    UINT   snan;                   
    UINT   sposinfinity;           
    UINT   sneginfinity;           
    UINT   unused2;                
    UINT   serastring;             
    UINT   sabbreverastring;       
    UINT   unused3;                
    UINT   sconsolefallbackname;   
    UINT   sshorttime;             
    UINT   sshortestdayname;       
    UINT   unused4;                
    UINT   ssortlocale;            
    UINT   skeyboardstoinstall;    
    UINT   sscripts;               
    UINT   srelativelongdate;      
    UINT   igeoid;                 
    UINT   sshortestam;            
    UINT   sshortestpm;            
    UINT   smonthday;              
    UINT   keyboard_layout;        
} NLS_LOCALE_DATA;

typedef struct
{
    UINT   id;                     
    USHORT idx;                    
    USHORT name;                   
} NLS_LOCALE_LCID_INDEX;

typedef struct
{
    USHORT name;                   
    USHORT idx;                    
    UINT   id;                     
} NLS_LOCALE_LCNAME_INDEX;

typedef struct
{
    UINT   offset;                 
    UINT   unknown1;               
    UINT   version;                
    UINT   magic;                  
    UINT   unknown2[3];            
    USHORT header_size;            
    USHORT nb_lcids;               
    USHORT nb_locales;             
    USHORT locale_size;            
    UINT   locales_offset;         
    USHORT nb_lcnames;             
    USHORT pad;                    
    UINT   lcids_offset;           
    UINT   lcnames_offset;         
    UINT   unknown3;               
    USHORT nb_calendars;           
    USHORT calendar_size;          
    UINT   calendars_offset;       
    UINT   strings_offset;         
    USHORT unknown4[4];            
} NLS_LOCALE_HEADER;








# 36 "include/winnt.h" 2

# 1 "include/wine/list.h" 1
























# 1 "include/../tools/tools.h" 1




























# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/limits.h" 1 3






# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/crtdefs.h" 1 3










# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/corecrt.h" 1 3










# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/_mingw.h" 1 3










# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/_mingw_mac.h" 1



























































































   

     






























































































































































































































#pragma push_macro("__has_builtin")















































































#pragma pop_macro("__has_builtin")









# 11 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/_mingw.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/_mingw_secapi.h" 1





 



































































# 12 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/_mingw.h" 2















































































































































































































































































# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/vadefs.h" 1 3









# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/_mingw.h" 1 3
























































































































































































































































































































































































































































































































































































































































































# 10 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/vadefs.h" 2


































































































# 283 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/_mingw.h" 2






































































































































































































































































































































































const char *__mingw_get_crt_info (void);























# 11 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/corecrt.h" 2


























typedef unsigned int size_t;









typedef int ssize_t;




typedef size_t rsize_t;











typedef int intptr_t;












typedef unsigned int uintptr_t;












typedef int ptrdiff_t;















typedef unsigned short wint_t;
typedef unsigned short wctype_t;





typedef int errno_t;




typedef long __time32_t;




 typedef __int64 __time64_t;














typedef __time64_t time_t;



































































































































































































































































































struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct *pthreadlocinfo;
typedef struct threadmbcinfostruct *pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct {
  pthreadlocinfo locinfo;
  pthreadmbcinfo mbcinfo;
} _locale_tstruct,*_locale_t;



typedef struct tagLC_ID {
  unsigned short wLanguage;
  unsigned short wCountry;
  unsigned short wCodePage;
} LC_ID,*LPLC_ID;




typedef struct threadlocaleinfostruct {

  const unsigned short *_locale_pctype;
  int _locale_mb_cur_max;
  unsigned int _locale_lc_codepage;

























} threadlocinfo;









# 1 "include/winapifamily.h" 1 3






























































# 492 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/corecrt.h" 2













# 11 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/crtdefs.h" 2


# 7 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/limits.h" 2

















































































































# 29 "include/../tools/tools.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdarg.h" 1 3












































































































































# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/_mingw_stdarg.h" 1 3














# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/vadefs.h" 1 3











































































































# 15 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/_mingw_stdarg.h" 2
























# 141 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdarg.h" 2

# 30 "include/../tools/tools.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdio.h" 1 3









# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/corecrt_stdio_config.h" 1 3










# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/corecrt.h" 1 3
























































































































































































































































































































































































































































































































# 11 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/corecrt_stdio_config.h" 2




















# 10 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdio.h" 2


#pragma pack(push,_CRT_PACKING)


#pragma push_macro("snprintf")


#pragma push_macro("vsnprintf")


#pragma push_macro("snwprintf")


#pragma push_macro("vsnwprintf")













  struct _iobuf {

    void *_Placeholder;










  };
  typedef struct _iobuf FILE;




















































# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/_mingw_off_t.h" 1 3




  typedef long _off_t;

  typedef long off32_t;





   typedef long long _off64_t;

   typedef long long off64_t;










typedef off32_t off_t;






# 100 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdio.h" 2

do_not_use_this_in_wine   FILE * __acrt_iob_func(unsigned index);









extern FILE (* __imp__iob )[];	











   typedef __int64 fpos_t;











































extern
    
  int  __mingw_sscanf(const char *  _Src,const char *  _Format,...);
extern
    
  int  __mingw_vsscanf (const char *  _Str,const char *  Format,va_list argp);
extern
    
  int  __mingw_scanf(const char *  _Format,...);
extern
    
  int  __mingw_vscanf(const char *  Format, va_list argp);
extern
    
  int  __mingw_fscanf(FILE *  _File,const char *  _Format,...);
extern
    
  int  __mingw_vfscanf (FILE *  fp, const char *  Format,va_list argp);

extern
    
  int  __mingw_vsnprintf(char *  _DstBuf,size_t _MaxCount,const char *  _Format,
                               va_list _ArgList);
extern
    
  int  __mingw_snprintf(char *  s, size_t n, const char *   format, ...);
extern
    
  int  __mingw_printf(const char *  , ... ) ;
extern
    
  int  __mingw_vprintf (const char *  , va_list) ;
extern
    
  int  __mingw_fprintf (FILE *  , const char *  , ...) ;
extern
    
  int  __mingw_vfprintf (FILE *  , const char *  , va_list) ;
extern
    
  int  __mingw_sprintf (char *  , const char *  , ...) ;
extern
    
  int  __mingw_vsprintf (char *  , const char *  , va_list) ;
extern
    
  int  __mingw_asprintf(char **  , const char *  , ...) ;
extern
    
  int  __mingw_vasprintf(char **  , const char *  , va_list) ;

extern
    
  int  __ms_sscanf(const char *  _Src,const char *  _Format,...);
extern
    
  int  __ms_scanf(const char *  _Format,...);
extern
    
  int  __ms_fscanf(FILE *  _File,const char *  _Format,...);

extern
    
  int  __ms_printf(const char *  , ... ) ;
extern
    
  int  __ms_vprintf (const char *  , va_list) ;
extern
    
  int  __ms_fprintf (FILE *  , const char *  , ...) ;
extern
    
  int  __ms_vfprintf (FILE *  , const char *  , va_list) ;
extern
    
  int  __ms_sprintf (char *  , const char *  , ...) ;
extern
    
  int  __ms_vsprintf (char *  , const char *  , va_list) ;


  int  __stdio_common_vsprintf(unsigned __int64 options, char *str, size_t len, const char *format, _locale_t locale, va_list valist);
  int  __stdio_common_vfprintf(unsigned __int64 options, FILE *file, const char *format, _locale_t locale, va_list valist);
  int  __stdio_common_vsscanf(unsigned __int64 options, const char *input, size_t length, const char *format, _locale_t locale, va_list valist);
  int  __stdio_common_vfscanf(unsigned __int64 options, FILE *file, const char *format, _locale_t locale, va_list valist);


































































































































































































































































   
  int  fprintf(FILE *  _File,const char *  _Format,...);
   
  int  printf(const char *  _Format,...);
   
  int  sprintf(char *  _Dest,const char *  _Format,...) ;

   
  int  vfprintf(FILE *  _File,const char *  _Format,va_list _ArgList);
   
  int  vprintf(const char *  _Format,va_list _ArgList);
   
  int  vsprintf(char *  _Dest,const char *  _Format,va_list _Args) ;

  
   
  int  fscanf(FILE *  _File,const char *  _Format,...);
  
   
  int  scanf(const char *  _Format,...);
  
   
  int  sscanf(const char *  _Src,const char *  _Format,...);







   
  int vfscanf (FILE *__stream,  const char *__format, __builtin_va_list __local_argv);

   
  int vsscanf (const char *  __source, const char *  __format, __builtin_va_list __local_argv);
   
  int vscanf(const char *__format,  __builtin_va_list __local_argv);







































































  do_not_use_this_in_wine   int  _filbuf(FILE *_File);
  do_not_use_this_in_wine   int  _flsbuf(int _Ch,FILE *_File);



  do_not_use_this_in_wine   FILE * _fsopen(const char *_Filename,const char *_Mode,int _ShFlag);

  void  clearerr(FILE *_File);
  int  fclose(FILE *_File);
  do_not_use_this_in_wine   int  _fcloseall(void);



  do_not_use_this_in_wine   FILE * _fdopen(int _FileHandle,const char *_Mode);

  int  feof(FILE *_File);
  int  ferror(FILE *_File);
  int  fflush(FILE *_File);
  int  fgetc(FILE *_File);
  do_not_use_this_in_wine   int  _fgetchar(void);
  int  fgetpos(FILE *  _File ,fpos_t *  _Pos); 
  int  fgetpos64(FILE *  _File ,fpos_t *  _Pos); 
  char * fgets(char *  _Buf,int _MaxCount,FILE *  _File);
  do_not_use_this_in_wine   int  _fileno(FILE *_File);



  do_not_use_this_in_wine   char * _tempnam(const char *_DirName,const char *_FilePrefix);
  do_not_use_this_in_wine   int  _flushall(void);
  FILE * fopen(const char *  _Filename,const char *  _Mode) ;
  FILE *fopen64(const char *  filename,const char *   mode);
  int  fputc(int _Ch,FILE *_File);
  do_not_use_this_in_wine   int  _fputchar(int _Ch);
  int  fputs(const char *  _Str,FILE *  _File);
  size_t  fread(void *  _DstBuf,size_t _ElementSize,size_t _Count,FILE *  _File);
  FILE * freopen(const char *  _Filename,const char *  _Mode,FILE *  _File) ;
  int  fsetpos(FILE *_File,const fpos_t *_Pos);
  int  fsetpos64(FILE *_File,const fpos_t *_Pos); 
  int  fseek(FILE *_File,long _Offset,int _Origin);
  long  ftell(FILE *_File);

  
   
  do_not_use_this_in_wine   int  _fseeki64(FILE *_File,__int64 _Offset,int _Origin);
  do_not_use_this_in_wine   __int64  _ftelli64(FILE *_File);

  static  int fseeko(FILE *_File, _off_t _Offset, int _Origin) {
    return fseek(_File, _Offset, _Origin);
  }
  static  int fseeko64(FILE *_File, _off64_t _Offset, int _Origin) {
    return _fseeki64(_File, _Offset, _Origin);
  }
  static  _off_t ftello(FILE *_File) {
    return ftell(_File);
  }
  static  _off64_t ftello64(FILE *_File) {
    return _ftelli64(_File);
  }






















  size_t  fwrite(const void *  _Str,size_t _Size,size_t _Count,FILE *  _File);
  int  getc(FILE *_File);
  int  getchar(void);
  do_not_use_this_in_wine   int  _getmaxstdio(void);
  char * gets(char *_Buffer)
    ;
  int  _getw(FILE *_File);


  void  perror(const char *_ErrMsg);


  do_not_use_this_in_wine   int  _pclose(FILE *_File);
  do_not_use_this_in_wine   FILE * _popen(const char *_Command,const char *_Mode);





  int  putc(int _Ch,FILE *_File);
  int  putchar(int _Ch);
  int  puts(const char *_Str);
  do_not_use_this_in_wine   int  _putw(int _Word,FILE *_File);


  int  remove(const char *_Filename);
  int  rename(const char *_OldFilename,const char *_NewFilename);
  do_not_use_this_in_wine   int  _unlink(const char *_Filename);

  int  unlink(const char *_Filename) ;


  void  rewind(FILE *_File);
  do_not_use_this_in_wine   int  _rmtmp(void);
  void  setbuf(FILE *  _File,char *  _Buffer) ;
  do_not_use_this_in_wine   int  _setmaxstdio(int _Max);
  do_not_use_this_in_wine   unsigned int  _set_output_format(unsigned int _Format);
  do_not_use_this_in_wine   unsigned int  _get_output_format(void);
  int  setvbuf(FILE *  _File,char *  _Buf,int _Mode,size_t _Size);

  
   
  int  _scprintf(const char *  _Format,...);
   
  int  _snscanf(const char *  _Src,size_t _MaxCount,const char *  _Format,...) ;







  
    
  do_not_use_this_in_wine   int  _vscprintf(const char *  _Format,va_list _ArgList);
  FILE * tmpfile(void) ;
  char * tmpnam(char *_Buffer);
  int  ungetc(int _Ch,FILE *_File);


   
  int  _vsnprintf(char *  _Dest,size_t _Count,const char *  _Format,va_list _Args) ;
   
  int  _snprintf(char *  _Dest,size_t _Count,const char *  _Format,...) ;






















































   
  int vsnprintf (char *  __stream, size_t __n, const char *  __format, va_list __local_argv);

   
  int snprintf (char *  __stream, size_t __n, const char *  __format, ...);







































































































































































  do_not_use_this_in_wine   int  _set_printf_count_output(int _Value);
  do_not_use_this_in_wine   int  _get_printf_count_output(void);




 
  int  __mingw_swscanf(const wchar_t *  _Src,const wchar_t *  _Format,...);
 
  int  __mingw_vswscanf (const wchar_t *  _Str,const wchar_t *  Format,va_list argp);
 
  int  __mingw_wscanf(const wchar_t *  _Format,...);
 
  int  __mingw_vwscanf(const wchar_t *  Format, va_list argp);
 
  int  __mingw_fwscanf(FILE *  _File,const wchar_t *  _Format,...);
 
  int  __mingw_vfwscanf (FILE *  fp, const wchar_t *  Format,va_list argp);

 
  int  __mingw_fwprintf(FILE *  _File,const wchar_t *  _Format,...);
 
  int  __mingw_wprintf(const wchar_t *  _Format,...);

  int  __mingw_vfwprintf(FILE *  _File,const wchar_t *  _Format,va_list _ArgList);
 
  int  __mingw_vwprintf(const wchar_t *  _Format,va_list _ArgList);
 
  int  __mingw_snwprintf (wchar_t *  s, size_t n, const wchar_t *  format, ...);
 
  int  __mingw_vsnwprintf (wchar_t *  , size_t, const wchar_t *  , va_list);
 
  int  __mingw_swprintf(wchar_t *  , const wchar_t *  , ...);
 
  int  __mingw_vswprintf(wchar_t *  , const wchar_t *  ,va_list);

 
  int  __ms_swscanf(const wchar_t *  _Src,const wchar_t *  _Format,...);
 
  int  __ms_wscanf(const wchar_t *  _Format,...);
 
  int  __ms_fwscanf(FILE *  _File,const wchar_t *  _Format,...);

 
  int  __ms_fwprintf(FILE *  _File,const wchar_t *  _Format,...);
 
  int  __ms_wprintf(const wchar_t *  _Format,...);

  int  __ms_vfwprintf(FILE *  _File,const wchar_t *  _Format,va_list _ArgList);
 
  int  __ms_vwprintf(const wchar_t *  _Format,va_list _ArgList);
 
  int  __ms_swprintf(wchar_t *  , const wchar_t *  , ...);
 
  int  __ms_vswprintf(wchar_t *  , const wchar_t *  ,va_list);


  int  __stdio_common_vswprintf(unsigned __int64 options, wchar_t *str, size_t len, const wchar_t *format, _locale_t locale, va_list valist);
  int  __stdio_common_vfwprintf(unsigned __int64 options, FILE *file, const wchar_t *format, _locale_t locale, va_list valist);
  int  __stdio_common_vswscanf(unsigned __int64 options, const wchar_t *input, size_t length, const wchar_t *format, _locale_t locale, va_list valist);
  int  __stdio_common_vfwscanf(unsigned __int64 options, FILE *file, const wchar_t *format, _locale_t locale, va_list valist);
















































































































































  static  
  int  fwscanf(FILE *  _File,const wchar_t *  _Format,...)
  {
    __builtin_va_list __ap;
    int __ret;
    __builtin_va_start(__ap, _Format);
    __ret = __stdio_common_vfwscanf(0x0002ULL, _File, _Format, ((void*)0), __ap);
    __builtin_va_end(__ap);
    return __ret;
  }
  static  
  int  swscanf(const wchar_t *  _Src,const wchar_t *  _Format,...)
  {
    __builtin_va_list __ap;
    int __ret;
    __builtin_va_start(__ap, _Format);
    __ret = __stdio_common_vswscanf(0x0002ULL, _Src, (size_t)-1, _Format, ((void*)0), __ap);
    __builtin_va_end(__ap);
    return __ret;
  }
  static  
  int  wscanf(const wchar_t *  _Format,...)
  {
    __builtin_va_list __ap;
    int __ret;
    __builtin_va_start(__ap, _Format);
    __ret = __stdio_common_vfwscanf(0x0002ULL, (__acrt_iob_func(0)), _Format, ((void*)0), __ap);
    __builtin_va_end(__ap);
    return __ret;
  }
  static 
  
  int vfwscanf (FILE *__stream,  const wchar_t *__format, va_list __local_argv)
  {
    return __stdio_common_vfwscanf(0x0002ULL, __stream, __format, ((void*)0), __local_argv);
  }

  static 
  
  int vswscanf (const wchar_t *  __source, const wchar_t *  __format, va_list __local_argv)
  {
    return __stdio_common_vswscanf(0x0002ULL, __source, (size_t)-1, __format, ((void*)0), __local_argv);
  }
  static 
  
  int vwscanf(const wchar_t *__format, va_list __local_argv)
  {
    return __stdio_common_vfwscanf(0x0002ULL, (__acrt_iob_func(0)), __format, ((void*)0), __local_argv);
  }

  int  fwprintf(FILE *  _File,const wchar_t *  _Format,...);
  static 
  int  wprintf(const wchar_t *  _Format,...)
  {
    __builtin_va_list __ap;
    int __ret;
    __builtin_va_start(__ap, _Format);
    __ret = __stdio_common_vfwprintf(0x0004ULL, (__acrt_iob_func(1)), _Format, ((void*)0), __ap);
    __builtin_va_end(__ap);
    return __ret;
  }
  static 
  int  vfwprintf(FILE *  _File,const wchar_t *  _Format,va_list _ArgList)
  {
    return __stdio_common_vfwprintf(0x0004ULL, _File, _Format, ((void*)0), _ArgList);
  }
  static 
  int  vwprintf(const wchar_t *  _Format,va_list _ArgList)
  {
    return __stdio_common_vfwprintf(0x0004ULL, (__acrt_iob_func(1)), _Format, ((void*)0), _ArgList);
  }














































  do_not_use_this_in_wine   FILE * _wfsopen(const wchar_t *_Filename,const wchar_t *_Mode,int _ShFlag);


  wint_t  fgetwc(FILE *_File);
  do_not_use_this_in_wine   wint_t  _fgetwchar(void);
  wint_t  fputwc(wchar_t _Ch,FILE *_File);
  do_not_use_this_in_wine   wint_t  _fputwchar(wchar_t _Ch);
  wint_t  getwc(FILE *_File);
  wint_t  getwchar(void);
  wint_t  putwc(wchar_t _Ch,FILE *_File);
  wint_t  putwchar(wchar_t _Ch);
  wint_t  ungetwc(wint_t _Ch,FILE *_File);
  wchar_t * fgetws(wchar_t *  _Dst,int _SizeInWords,FILE *  _File);
  int  fputws(const wchar_t *  _Str,FILE *  _File);
  do_not_use_this_in_wine   wchar_t * _getws(wchar_t *_String) ;
  do_not_use_this_in_wine   int  _putws(const wchar_t *_Str);


  static 
  int  _scwprintf(const wchar_t *  _Format,...)
  {
    __builtin_va_list __ap;
    int __ret;
    __builtin_va_start(__ap, _Format);
    __ret = __stdio_common_vswprintf(0x0004ULL | 0x0002ULL, ((void*)0), 0, _Format, ((void*)0), __ap);
    __builtin_va_end(__ap);
    return __ret;
  }
  int  _snwprintf(wchar_t *  _Dest,size_t _Count,const wchar_t *  _Format,...) ;
  int  _vsnwprintf(wchar_t *  _Dest,size_t _Count,const wchar_t *  _Format,va_list _Args) ;


  static 
  int snwprintf (wchar_t *  s, size_t n, const wchar_t *  format, ...)
  {
    __builtin_va_list __ap;
    int __ret;
    __builtin_va_start(__ap, format);
    __ret = __stdio_common_vswprintf(0x0004ULL | 0x0002ULL, s, n, format, ((void*)0), __ap);
    __builtin_va_end(__ap);
    return __ret;
  }
  static 
  int  vsnwprintf (wchar_t *  s, size_t n, const wchar_t *  format, va_list arg)
  {
    int __ret = __stdio_common_vswprintf(0x0004ULL, s, n, format, ((void*)0), arg);
    return __ret < 0 ? -1 : __ret;
  }


  static 
  int  _swprintf(wchar_t *  _Dest,const wchar_t *  _Format,...)
  {
    __builtin_va_list __ap;
    int __ret;
    __builtin_va_start(__ap, _Format);
    __ret = __stdio_common_vswprintf(0x0004ULL, _Dest, (size_t)-1, _Format, ((void*)0), __ap);
    __builtin_va_end(__ap);
    return __ret;
  }
  static 
  int  _vswprintf(wchar_t *  _Dest,const wchar_t *  _Format,va_list _Args)
  {
    return __stdio_common_vswprintf(0x0004ULL, _Dest, (size_t)-1, _Format, ((void*)0), _Args);
  }

  static 
  int  _vscwprintf(const wchar_t *  _Format, va_list _ArgList)
  {
      int _Result = __stdio_common_vswprintf(0x0002ULL, ((void*)0), 0, _Format, ((void*)0), _ArgList);
      return _Result < 0 ? -1 : _Result;
  }





































# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/swprintf.inl" 1 3










# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/vadefs.h" 1 3











































































































# 11 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/swprintf.inl" 2

static 
 
int vswprintf (wchar_t *__stream, size_t __count, const wchar_t *__format, __builtin_va_list __local_argv)
{
  return vsnwprintf( __stream, __count, __format, __local_argv );
}

static 
 
int swprintf (wchar_t *__stream, size_t __count, const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv;

  __builtin_va_start( __local_argv, __format );
  __retval = vswprintf( __stream, __count, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}












































# 1419 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdio.h" 2









  do_not_use_this_in_wine   wchar_t * _wtempnam(const wchar_t *_Directory,const wchar_t *_FilePrefix);
  do_not_use_this_in_wine   int  _snwscanf(const wchar_t *  _Src,size_t _MaxCount,const wchar_t *  _Format,...);
  do_not_use_this_in_wine   FILE * _wfdopen(int _FileHandle ,const wchar_t *_Mode);
  do_not_use_this_in_wine   FILE * _wfopen(const wchar_t *  _Filename,const wchar_t *  _Mode) ;
  do_not_use_this_in_wine   FILE * _wfreopen(const wchar_t *  _Filename,const wchar_t *  _Mode,FILE *  _OldFile) ;



  do_not_use_this_in_wine   void  _wperror(const wchar_t *_ErrMsg);

  do_not_use_this_in_wine   FILE * _wpopen(const wchar_t *_Command,const wchar_t *_Mode);




  do_not_use_this_in_wine   int  _wremove(const wchar_t *_Filename);
  do_not_use_this_in_wine   wchar_t * _wtmpnam(wchar_t *_Buffer);

  do_not_use_this_in_wine   wint_t  _fgetwc_nolock(FILE *_File);
  do_not_use_this_in_wine   wint_t  _fputwc_nolock(wchar_t _Ch,FILE *_File);
  do_not_use_this_in_wine   wint_t  _ungetwc_nolock(wint_t _Ch,FILE *_File);
























  do_not_use_this_in_wine   int  _fgetc_nolock(FILE *_File);
  do_not_use_this_in_wine   int  _fputc_nolock(int _Char, FILE *_File);
  do_not_use_this_in_wine   int  _getc_nolock(FILE *_File);
  do_not_use_this_in_wine   int  _putc_nolock(int _Char, FILE *_File);











  do_not_use_this_in_wine   void  _lock_file(FILE *_File);
  do_not_use_this_in_wine   void  _unlock_file(FILE *_File);

  do_not_use_this_in_wine   int  _fclose_nolock(FILE *_File);
  do_not_use_this_in_wine   int  _fflush_nolock(FILE *_File);
  do_not_use_this_in_wine   size_t  _fread_nolock(void *  _DstBuf,size_t _ElementSize,size_t _Count,FILE *  _File);
  do_not_use_this_in_wine   int  _fseek_nolock(FILE *_File,long _Offset,int _Origin);
  do_not_use_this_in_wine   long  _ftell_nolock(FILE *_File);
   do_not_use_this_in_wine   int  _fseeki64_nolock(FILE *_File,__int64 _Offset,int _Origin);
   do_not_use_this_in_wine   __int64  _ftelli64_nolock(FILE *_File);
  do_not_use_this_in_wine   size_t  _fwrite_nolock(const void *  _DstBuf,size_t _Size,size_t _Count,FILE *  _File);
  do_not_use_this_in_wine   int  _ungetc_nolock(int _Ch,FILE *_File);






  char * tempnam(const char *_Directory,const char *_FilePrefix) ;
  int  fcloseall(void) ;
  FILE * fdopen(int _FileHandle,const char *_Format) ;
  int  fgetchar(void) ;
  int  fileno(FILE *_File) ;
  int  flushall(void) ;
  int  fputchar(int _Ch) ;
  int  getw(FILE *_File) ;
  int  putw(int _Ch,FILE *_File) ;
  int  rmtmp(void) ;
















int  __mingw_str_wide_utf8 (const wchar_t * const wptr, char **mbptr, size_t * buflen);













int  __mingw_str_utf8_wide (const char *const mbptr, wchar_t ** wptr, size_t * buflen);








void  __mingw_str_free(void *ptr);






  do_not_use_this_in_wine   intptr_t  _wspawnl(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  do_not_use_this_in_wine   intptr_t  _wspawnle(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  do_not_use_this_in_wine   intptr_t  _wspawnlp(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  do_not_use_this_in_wine   intptr_t  _wspawnlpe(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  do_not_use_this_in_wine   intptr_t  _wspawnv(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList);
  do_not_use_this_in_wine   intptr_t  _wspawnve(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  do_not_use_this_in_wine   intptr_t  _wspawnvp(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList);
  do_not_use_this_in_wine   intptr_t  _wspawnvpe(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
















  do_not_use_this_in_wine   intptr_t  _spawnv(int _Mode,const char *_Filename,const char *const *_ArgList);
  do_not_use_this_in_wine   intptr_t  _spawnve(int _Mode,const char *_Filename,const char *const *_ArgList,const char *const *_Env);
  do_not_use_this_in_wine   intptr_t  _spawnvp(int _Mode,const char *_Filename,const char *const *_ArgList);
  do_not_use_this_in_wine   intptr_t  _spawnvpe(int _Mode,const char *_Filename,const char *const *_ArgList,const char *const *_Env);








#pragma pop_macro("snprintf")

#pragma pop_macro("vsnprintf")

#pragma pop_macro("snwprintf")

#pragma pop_macro("vsnwprintf")


#pragma pack(pop)


# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sec_api/stdio_s.h" 1 3









# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdio.h" 1 3






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 10 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sec_api/stdio_s.h" 2



















  do_not_use_this_in_wine   errno_t  clearerr_s(FILE *_File);

  size_t  fread_s(void *_DstBuf,size_t _DstSize,size_t _ElementSize,size_t _Count,FILE *_File);


  int  __stdio_common_vsprintf_s(unsigned __int64 _Options, char *_Str, size_t _Len, const char *_Format, _locale_t _Locale, va_list _ArgList);
  int  __stdio_common_vsprintf_p(unsigned __int64 _Options, char *_Str, size_t _Len, const char *_Format, _locale_t _Locale, va_list _ArgList);
  int  __stdio_common_vsnprintf_s(unsigned __int64 _Options, char *_Str, size_t _Len, size_t _MaxCount, const char *_Format, _locale_t _Locale, va_list _ArgList);
  int  __stdio_common_vfprintf_s(unsigned __int64 _Options, FILE *_File, const char *_Format, _locale_t _Locale, va_list _ArgList);
  int  __stdio_common_vfprintf_p(unsigned __int64 _Options, FILE *_File, const char *_Format, _locale_t _Locale, va_list _ArgList);

  static  int  _vfscanf_s_l(FILE *_File, const char *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return __stdio_common_vfscanf(0x0001ULL, _File, _Format, _Locale, _ArgList);
  }

  static  int  vfscanf_s(FILE *_File, const char *_Format, va_list _ArgList)
  {
    return _vfscanf_s_l(_File, _Format, ((void*)0), _ArgList);
  }

  static  int  _vscanf_s_l(const char *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
  }

  static  int  vscanf_s(const char *_Format, va_list _ArgList)
  {
    return _vfscanf_s_l((__acrt_iob_func(0)), _Format, ((void*)0), _ArgList);
  }

  static  int  _fscanf_s_l(FILE *_File, const char *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vfscanf_s_l(_File, _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  static  int  fscanf_s(FILE *_File, const char *_Format, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Format);
    _Ret = _vfscanf_s_l(_File, _Format, ((void*)0), _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  static  int  _scanf_s_l(const char *_Format, _locale_t _Locale ,...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  static  int  scanf_s(const char *_Format, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Format);
    _Ret = _vfscanf_s_l((__acrt_iob_func(0)), _Format, ((void*)0), _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  static  int  _vfscanf_l(FILE *_File, const char *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return __stdio_common_vfscanf(0, _File, _Format, _Locale, _ArgList);
  }

  static  int  _vscanf_l(const char *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
  }

  static  int  _fscanf_l(FILE *_File, const char *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vfscanf_l(_File, _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }
  static  int  _scanf_l(const char *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  static  int  _vsscanf_s_l(const char *_Src, const char *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return __stdio_common_vsscanf(0x0001ULL, _Src, (size_t)-1, _Format, _Locale, _ArgList);
  }
  static  int  vsscanf_s(const char *_Src, const char *_Format, va_list _ArgList)
  {
    return _vsscanf_s_l(_Src, _Format, ((void*)0), _ArgList);
  }
  static  int  _sscanf_s_l(const char *_Src, const char *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vsscanf_s_l(_Src, _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }
  static  int  sscanf_s(const char *_Src, const char *_Format, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Format);
    _Ret = _vsscanf_s_l(_Src, _Format, ((void*)0), _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  static  int  _vsscanf_l(const char *_Src, const char *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return __stdio_common_vsscanf(0, _Src, (size_t)-1, _Format, _Locale, _ArgList);
  }
  static  int  _sscanf_l(const char *_Src, const char *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vsscanf_l(_Src, _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  
  static  int  _snscanf_s_l(const char *_Src, size_t _MaxCount, const char *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = __stdio_common_vsscanf(0x0001ULL, _Src, _MaxCount, _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }
  static  int  _snscanf_s(const char *_Src, size_t _MaxCount, const char *_Format, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Format);
    _Ret = __stdio_common_vsscanf(0x0001ULL, _Src, _MaxCount, _Format, ((void*)0), _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  
  static  int  _snscanf_l(const char *_Src, size_t _MaxCount, const char *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = __stdio_common_vsscanf(0, _Src, _MaxCount, _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }


  static  int  _vfprintf_s_l(FILE *_File, const char *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return __stdio_common_vfprintf_s(0, _File, _Format, _Locale, _ArgList);
  }
  static  int  vfprintf_s(FILE *_File, const char *_Format, va_list _ArgList)
  {
    return _vfprintf_s_l(_File, _Format, ((void*)0), _ArgList);
  }
  static  int  _vprintf_s_l(const char *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
  }
  static  int  vprintf_s(const char *_Format, va_list _ArgList)
  {
    return _vfprintf_s_l((__acrt_iob_func(1)), _Format, ((void*)0), _ArgList);
  }
  static  int  _fprintf_s_l(FILE *_File, const char *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vfprintf_s_l(_File, _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }
  static  int  _printf_s_l(const char *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }
  static  int  fprintf_s(FILE *_File, const char *_Format, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Format);
    _Ret = _vfprintf_s_l(_File, _Format, ((void*)0), _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }
  static  int  printf_s(const char *_Format, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Format);
    _Ret = _vfprintf_s_l((__acrt_iob_func(1)), _Format, ((void*)0), _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  static  int  _vsnprintf_c_l(char *_DstBuf, size_t _MaxCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return __stdio_common_vsprintf(0, _DstBuf, _MaxCount, _Format, _Locale, _ArgList);
  }
  static  int  _vsnprintf_c(char *_DstBuf, size_t _MaxCount, const char *_Format, va_list _ArgList)
  {
    return _vsnprintf_c_l(_DstBuf, _MaxCount, _Format, ((void*)0), _ArgList);
  }
  static  int  _snprintf_c_l(char *_DstBuf, size_t _MaxCount, const char *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vsnprintf_c_l(_DstBuf, _MaxCount, _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }
  static  int  _snprintf_c(char *_DstBuf, size_t _MaxCount, const char *_Format, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Format);
    _Ret = _vsnprintf_c_l(_DstBuf, _MaxCount, _Format, ((void*)0), _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  static  int  _vsnprintf_s_l(char *_DstBuf, size_t _DstSize, size_t _MaxCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return __stdio_common_vsnprintf_s(0, _DstBuf, _DstSize, _MaxCount, _Format, _Locale, _ArgList);
  }
  static  int  vsnprintf_s(char *_DstBuf, size_t _DstSize, size_t _MaxCount, const char *_Format, va_list _ArgList)
  {
    return _vsnprintf_s_l(_DstBuf, _DstSize, _MaxCount, _Format, ((void*)0), _ArgList);
  }
  static  int  _vsnprintf_s(char *_DstBuf, size_t _DstSize, size_t _MaxCount, const char *_Format, va_list _ArgList)
  {
    return _vsnprintf_s_l(_DstBuf, _DstSize, _MaxCount, _Format, ((void*)0), _ArgList);
  }
  static  int  _snprintf_s_l(char *_DstBuf, size_t _DstSize, size_t _MaxCount, const char *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vsnprintf_s_l(_DstBuf, _DstSize, _MaxCount, _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }
  static  int  _snprintf_s(char *_DstBuf, size_t _DstSize, size_t _MaxCount, const char *_Format, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Format);
    _Ret = _vsnprintf_s_l(_DstBuf, _DstSize, _MaxCount, _Format, ((void*)0), _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  static  int  _vsprintf_s_l(char *_DstBuf, size_t _DstSize, const char *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return __stdio_common_vsprintf_s(0, _DstBuf, _DstSize, _Format, _Locale, _ArgList);
  }
  static  int  vsprintf_s(char *_DstBuf, size_t _Size, const char *_Format, va_list _ArgList)
  {
    return _vsprintf_s_l(_DstBuf, _Size, _Format, ((void*)0), _ArgList);
  }
  static  int  _sprintf_s_l(char *_DstBuf, size_t _DstSize, const char *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vsprintf_s_l(_DstBuf, _DstSize, _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }
  static  int  sprintf_s(char *_DstBuf, size_t _DstSize, const char *_Format, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Format);
    _Ret = _vsprintf_s_l(_DstBuf, _DstSize, _Format, ((void*)0), _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  static  int  _vfprintf_p_l(FILE *_File, const char *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return __stdio_common_vfprintf_p(0, _File, _Format, _Locale, _ArgList);
  }
  static  int  _vfprintf_p(FILE *_File, const char *_Format, va_list _ArgList)
  {
    return _vfprintf_p_l(_File, _Format, ((void*)0), _ArgList);
  }
  static  int  _vprintf_p_l(const char *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
  }
  static  int  _vprintf_p(const char *_Format, va_list _ArgList)
  {
    return _vfprintf_p_l((__acrt_iob_func(1)), _Format, ((void*)0), _ArgList);
  }
  static  int  _fprintf_p_l(FILE *_File, const char *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = __stdio_common_vfprintf_p(0, _File, _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }
  static  int  _fprintf_p(FILE *_File, const char *_Format, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Format);
    _Ret = _vfprintf_p_l(_File, _Format, ((void*)0), _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }
  static  int  _printf_p_l(const char *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }
  static  int  _printf_p(const char *_Format, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Format);
    _Ret = _vfprintf_p_l((__acrt_iob_func(1)), _Format, ((void*)0), _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  static  int  _vsprintf_p_l(char *_DstBuf, size_t _MaxCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return __stdio_common_vsprintf_p(0, _DstBuf, _MaxCount, _Format, _Locale, _ArgList);
  }
  static  int  _vsprintf_p(char *_Dst, size_t _MaxCount, const char *_Format, va_list _ArgList)
  {
    return _vsprintf_p_l(_Dst, _MaxCount, _Format, ((void*)0), _ArgList);
  }
  static  int  _sprintf_p_l(char *_DstBuf, size_t _MaxCount, const char *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vsprintf_p_l(_DstBuf, _MaxCount, _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }
  static  int  _sprintf_p(char *_Dst, size_t _MaxCount, const char *_Format, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Format);
    _Ret = _vsprintf_p_l(_Dst, _MaxCount, _Format, ((void*)0), _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  static  int  _vscprintf_p_l(const char *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return __stdio_common_vsprintf_p(0x0002ULL, ((void*)0), 0, _Format, _Locale, _ArgList);
  }
  static  int  _vscprintf_p(const char *_Format, va_list _ArgList)
  {
    return _vscprintf_p_l(_Format, ((void*)0), _ArgList);
  }
  static  int  _scprintf_p_l(const char *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vscprintf_p_l(_Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }
  static  int  _scprintf_p(const char *_Format, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Format);
    _Ret = _vscprintf_p_l(_Format, ((void*)0), _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  static  int  _vfprintf_l(FILE *_File, const char *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return __stdio_common_vfprintf(0, _File, _Format, _Locale, _ArgList);
  }
  static  int  _vprintf_l(const char *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
  }
  static  int  _fprintf_l(FILE *_File, const char *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vfprintf_l(_File, _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }
  static  int  _printf_l(const char *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  static  int  _vsnprintf_l(char *_DstBuf, size_t _MaxCount, const char *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return __stdio_common_vsprintf(0x0001ULL, _DstBuf, _MaxCount, _Format, _Locale, _ArgList);
  }
  static  int  _snprintf_l(char *_DstBuf, size_t _MaxCount, const char *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vsnprintf_l(_DstBuf, _MaxCount, _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }
  static  int  _vsprintf_l(char *_DstBuf, const char *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return _vsnprintf_l(_DstBuf, (size_t)-1, _Format, _Locale, _ArgList);
  }
  static  int  _sprintf_l(char *_DstBuf, const char *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vsprintf_l(_DstBuf, _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  static  int  _vscprintf_l(const char *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return __stdio_common_vsprintf(0x0002ULL, ((void*)0), 0, _Format, _Locale, _ArgList);
  }
  static  int  _scprintf_l(const char *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vscprintf_l(_Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }





































































  
  
  
  
  

  do_not_use_this_in_wine   errno_t  fopen_s(FILE **_File,const char *_Filename,const char *_Mode);
  do_not_use_this_in_wine   errno_t  freopen_s(FILE** _File, const char *_Filename, const char *_Mode, FILE *_Stream);

  do_not_use_this_in_wine   char*  gets_s(char*,rsize_t);
  

  do_not_use_this_in_wine   errno_t  tmpfile_s(FILE **_File);

  do_not_use_this_in_wine   errno_t  tmpnam_s(char*,rsize_t);
  




  do_not_use_this_in_wine   wchar_t * _getws_s(wchar_t *_Str,size_t _SizeInWords);
  


  int  __stdio_common_vswprintf_s(unsigned __int64 _Options, wchar_t *_Str, size_t _Len, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList);
  int  __stdio_common_vsnwprintf_s(unsigned __int64 _Options, wchar_t *_Str, size_t _Len, size_t _MaxCount, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList);
  int  __stdio_common_vfwprintf_s(unsigned __int64 _Options, FILE *_File, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList);

  static  int  _vfwscanf_s_l(FILE *_File, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return __stdio_common_vfwscanf(0x0002ULL | 0x0001ULL, _File, _Format, _Locale, _ArgList);
  }

  static  int  vfwscanf_s(FILE* _File, const wchar_t *_Format, va_list _ArgList)
  {
    return _vfwscanf_s_l(_File, _Format, ((void*)0), _ArgList);
  }

  static  int  _vwscanf_s_l(const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
  }

  static  int  vwscanf_s(const wchar_t *_Format, va_list _ArgList)
  {
    return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, ((void*)0), _ArgList);
  }

  static  int  _fwscanf_s_l(FILE *_File, const wchar_t *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vfwscanf_s_l(_File, _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  static  int  fwscanf_s(FILE *_File, const wchar_t *_Format, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Format);
    _Ret = _vfwscanf_s_l(_File, _Format, ((void*)0), _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  static  int  _wscanf_s_l(const wchar_t *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  static  int  wscanf_s(const wchar_t *_Format, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Format);
    _Ret = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, ((void*)0), _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  static  int  _vswscanf_s_l(const wchar_t *_Src, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return __stdio_common_vswscanf(0x0002ULL | 0x0001ULL, _Src, (size_t)-1, _Format, _Locale, _ArgList);
  }

  static  int  vswscanf_s(const wchar_t *_Src, const wchar_t *_Format, va_list _ArgList)
  {
    return _vswscanf_s_l(_Src, _Format, ((void*)0), _ArgList);
  }

  static  int  _swscanf_s_l(const wchar_t *_Src, const wchar_t *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vswscanf_s_l(_Src, _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }
  static  int  swscanf_s(const wchar_t *_Src, const wchar_t *_Format, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Format);
    _Ret = _vswscanf_s_l(_Src, _Format, ((void*)0), _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  static  int  _vsnwscanf_s_l(const wchar_t *_Src, size_t _MaxCount, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return __stdio_common_vswscanf(0x0002ULL | 0x0001ULL, _Src, _MaxCount, _Format, _Locale, _ArgList);
  }
  static  int  _snwscanf_s_l(const wchar_t *_Src, size_t _MaxCount, const wchar_t *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vsnwscanf_s_l(_Src, _MaxCount, _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }
  static  int  _snwscanf_s(const wchar_t *_Src, size_t _MaxCount, const wchar_t *_Format, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Format);
    _Ret = _vsnwscanf_s_l(_Src, _MaxCount, _Format, ((void*)0), _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  static  int  _vfwprintf_s_l(FILE *_File, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return __stdio_common_vfwprintf_s(0x0004ULL, _File, _Format, _Locale, _ArgList);
  }
  static  int  _vwprintf_s_l(const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
  }
  static  int  vfwprintf_s(FILE *_File, const wchar_t *_Format, va_list _ArgList)
  {
    return _vfwprintf_s_l(_File, _Format, ((void*)0), _ArgList);
  }
  static  int  vwprintf_s(const wchar_t *_Format, va_list _ArgList)
  {
    return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, ((void*)0), _ArgList);
  }
  static  int  _fwprintf_s_l(FILE *_File, const wchar_t *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vfwprintf_s_l(_File, _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }
  static  int  _wprintf_s_l(const wchar_t *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }
  static  int  fwprintf_s(FILE *_File, const wchar_t *_Format, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Format);
    _Ret = _vfwprintf_s_l(_File, _Format, ((void*)0), _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }
  static  int  wprintf_s(const wchar_t *_Format, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Format);
    _Ret = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, ((void*)0), _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  static  int  _vswprintf_s_l(wchar_t *_DstBuf, size_t _DstSize, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return __stdio_common_vswprintf_s(0x0004ULL, _DstBuf, _DstSize, _Format, _Locale, _ArgList);
  }
  static  int  vswprintf_s(wchar_t *_DstBuf, size_t _DstSize, const wchar_t *_Format, va_list _ArgList)
  {
    return _vswprintf_s_l(_DstBuf, _DstSize, _Format, ((void*)0), _ArgList);
  }
  static  int  _swprintf_s_l(wchar_t *_DstBuf, size_t _DstSize, const wchar_t *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vswprintf_s_l(_DstBuf, _DstSize, _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }
  static  int  swprintf_s(wchar_t *_DstBuf, size_t _DstSize, const wchar_t *_Format, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Format);
    _Ret = _vswprintf_s_l(_DstBuf, _DstSize, _Format, ((void*)0), _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

  static  int  _vsnwprintf_s_l(wchar_t *_DstBuf, size_t _DstSize, size_t _MaxCount, const wchar_t *_Format, _locale_t _Locale, va_list _ArgList)
  {
    return __stdio_common_vsnwprintf_s(0x0004ULL, _DstBuf, _DstSize, _MaxCount, _Format, _Locale, _ArgList);
  }
  static  int  _vsnwprintf_s(wchar_t *_DstBuf, size_t _DstSize, size_t _MaxCount, const wchar_t *_Format, va_list _ArgList)
  {
    return _vsnwprintf_s_l(_DstBuf, _DstSize, _MaxCount, _Format, ((void*)0), _ArgList);
  }
  static  int  _snwprintf_s_l(wchar_t *_DstBuf, size_t _DstSize, size_t _MaxCount, const wchar_t *_Format, _locale_t _Locale, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Locale);
    _Ret = _vsnwprintf_s_l(_DstBuf, _DstSize, _MaxCount, _Format, _Locale, _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }
  static  int  _snwprintf_s(wchar_t *_DstBuf, size_t _DstSize, size_t _MaxCount, const wchar_t *_Format, ...)
  {
    __builtin_va_list _ArgList;
    int _Ret;
    __builtin_va_start(_ArgList, _Format);
    _Ret = _vsnwprintf_s_l(_DstBuf, _DstSize, _MaxCount, _Format, ((void*)0), _ArgList);
    __builtin_va_end(_ArgList);
    return _Ret;
  }

































  
  
  
  

  do_not_use_this_in_wine   errno_t  _wfopen_s(FILE **_File,const wchar_t *_Filename,const wchar_t *_Mode);
  do_not_use_this_in_wine   errno_t  _wfreopen_s(FILE **_File,const wchar_t *_Filename,const wchar_t *_Mode,FILE *_OldFile);

  do_not_use_this_in_wine   errno_t  _wtmpnam_s(wchar_t *_DstBuf,size_t _SizeInWords);
  








































  do_not_use_this_in_wine   size_t  _fread_nolock_s(void *_DstBuf,size_t _DstSize,size_t _ElementSize,size_t _Count,FILE *_File);






# 1605 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdio.h" 2


# 31 "include/../tools/tools.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdlib.h" 1 3









# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/corecrt.h" 1 3
























































































































































































































































































































































































































































































































# 10 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdlib.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/corecrt_wstdlib.h" 1 3









# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/corecrt.h" 1 3
























































































































































































































































































































































































































































































































# 10 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/corecrt_wstdlib.h" 2





  do_not_use_this_in_wine   errno_t  _itow_s (int _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  

  do_not_use_this_in_wine   errno_t  _ltow_s (long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  

  do_not_use_this_in_wine   errno_t  _ultow_s (unsigned long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  

  do_not_use_this_in_wine   errno_t  _wgetenv_s(size_t *_ReturnSize,wchar_t *_DstBuf,size_t _DstSizeInWords,const wchar_t *_VarName);
  

  do_not_use_this_in_wine   errno_t  _wdupenv_s(wchar_t **_Buffer,size_t *_BufferSizeInWords,const wchar_t *_VarName);
  do_not_use_this_in_wine   errno_t  _i64tow_s(__int64 _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  do_not_use_this_in_wine   errno_t  _ui64tow_s(unsigned __int64 _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);

  do_not_use_this_in_wine   errno_t  _wmakepath_s(wchar_t *_PathResult,size_t _SizeInWords,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);
  

  do_not_use_this_in_wine   errno_t  _wputenv_s(const wchar_t *_Name,const wchar_t *_Value);

  do_not_use_this_in_wine   errno_t  _wsearchenv_s(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath,size_t _SizeInWords);
  

  do_not_use_this_in_wine   errno_t  _wsplitpath_s(const wchar_t *_FullPath,wchar_t *_Drive,size_t _DriveSizeInWords,wchar_t *_Dir,size_t _DirSizeInWords,wchar_t *_Filename,size_t _FilenameSizeInWords,wchar_t *_Ext,size_t _ExtSizeInWords);
  






# 11 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdlib.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/limits.h" 1 3






# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/crtdefs.h" 1 3












# 7 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/limits.h" 2

















































































































# 12 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdlib.h" 2















#pragma pack(push,_CRT_PACKING)























  typedef int ( *_onexit_t)(void);









  typedef struct _div_t {
    int quot;
    int rem;
  } div_t;

  typedef struct _ldiv_t {
    long quot;
    long rem;
  } ldiv_t;






#pragma pack(4)
  typedef struct {
    unsigned char ld[10];
  } _LDOUBLE;

#pragma pack()



  typedef struct {
    double x;
  } _CRT_DOUBLE;

  typedef struct {
    float f;
  } _CRT_FLOAT;


#pragma push_macro("long")


  typedef struct {
    long double x;
  } _LONGDOUBLE;


#pragma pop_macro("long")


#pragma pack(4)
  typedef struct {
    unsigned char ld12[12];
  } _LDBL12;

#pragma pack()

















do_not_use_this_in_wine   int  ___mb_cur_max_func(void);





















  typedef void ( *_purecall_handler)(void);

  do_not_use_this_in_wine   _purecall_handler  _set_purecall_handler(_purecall_handler _Handler);
  do_not_use_this_in_wine   _purecall_handler  _get_purecall_handler(void);

  typedef void ( *_invalid_parameter_handler)(const wchar_t *,const wchar_t *,const wchar_t *,unsigned int,uintptr_t);
  do_not_use_this_in_wine   _invalid_parameter_handler  _set_invalid_parameter_handler(_invalid_parameter_handler _Handler);
  do_not_use_this_in_wine   _invalid_parameter_handler  _get_invalid_parameter_handler(void);



  do_not_use_this_in_wine   extern int * _errno(void);

  errno_t  _set_errno(int _Value);
  errno_t  _get_errno(int *_Value);

  do_not_use_this_in_wine   unsigned long * __doserrno(void);

  errno_t  _set_doserrno(unsigned long _Value);
  errno_t  _get_doserrno(unsigned long *_Value);





  do_not_use_this_in_wine   char ** __sys_errlist(void);
  do_not_use_this_in_wine   int * __sys_nerr(void);








  

  do_not_use_this_in_wine   char *** __p___argv(void);
  do_not_use_this_in_wine   int * __p__fmode(void);

  do_not_use_this_in_wine   int * __p___argc(void);
  do_not_use_this_in_wine   wchar_t *** __p___wargv(void);
  do_not_use_this_in_wine   char *** __p__environ(void);
  do_not_use_this_in_wine   wchar_t *** __p__wenviron(void);
  do_not_use_this_in_wine   char ** __p__pgmptr(void);
  do_not_use_this_in_wine   wchar_t ** __p__wpgmptr(void);


  errno_t  _get_pgmptr(char **_Value);
  errno_t  _get_wpgmptr(wchar_t **_Value);
  do_not_use_this_in_wine   errno_t  _set_fmode(int _Mode);
  do_not_use_this_in_wine   errno_t  _get_fmode(int *_PMode);















































































































































































  errno_t  _get_osplatform(unsigned int *_Value);
  errno_t  _get_osver(unsigned int *_Value);
  errno_t  _get_winver(unsigned int *_Value);
  errno_t  _get_winmajor(unsigned int *_Value);
  errno_t  _get_winminor(unsigned int *_Value);













  void   exit(int _Code) ;
  void   _exit(int _Code) ;

  void   quick_exit(int _Code) ;



  
  void  _Exit(int) ;

  extern __inline__  void   _Exit(int status)
  {  _exit(status); }




#pragma push_macro("abort")

  void   abort(void);

#pragma pop_macro("abort")



  do_not_use_this_in_wine   unsigned int  _set_abort_behavior(unsigned int _Flags,unsigned int _Mask);



  int  abs(int _X);
  long  labs(long _X);


   __int64  _abs64(__int64);






  int  atexit(void ( *)(void));

  int  at_quick_exit(void ( *)(void));



  double  atof(const char *_String);
  double  _atof_l(const char *_String,_locale_t _Locale);

  int  atoi(const char *_Str);
  do_not_use_this_in_wine   int  _atoi_l(const char *_Str,_locale_t _Locale);
  long  atol(const char *_Str);
  do_not_use_this_in_wine   long  _atol_l(const char *_Str,_locale_t _Locale);


  void * bsearch(const void *_Key,const void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int ( *_PtFuncCompare)(const void *,const void *));
  void  qsort(void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int ( *_PtFuncCompare)(const void *,const void *));

  unsigned short  _byteswap_ushort(unsigned short _Short);
  unsigned long  _byteswap_ulong (unsigned long _Long);
   unsigned __int64  _byteswap_uint64(unsigned __int64 _Int64);
  div_t  div(int _Numerator,int _Denominator);
  char * getenv(const char *_VarName) ;
  do_not_use_this_in_wine   char * _itoa(int _Value,char *_Dest,int _Radix);
   do_not_use_this_in_wine   char * _i64toa(__int64 _Val,char *_DstBuf,int _Radix) ;
   do_not_use_this_in_wine   char * _ui64toa(unsigned __int64 _Val,char *_DstBuf,int _Radix) ;
   do_not_use_this_in_wine   __int64  _atoi64(const char *_String);
   do_not_use_this_in_wine   __int64  _atoi64_l(const char *_String,_locale_t _Locale);
   do_not_use_this_in_wine   __int64  _strtoi64(const char *_String,char **_EndPtr,int _Radix);
   do_not_use_this_in_wine   __int64  _strtoi64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
   do_not_use_this_in_wine   unsigned __int64  _strtoui64(const char *_String,char **_EndPtr,int _Radix);
   do_not_use_this_in_wine   unsigned __int64  _strtoui64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  ldiv_t  ldiv(long _Numerator,long _Denominator);
  do_not_use_this_in_wine   char * _ltoa(long _Value,char *_Dest,int _Radix) ;
  int  mblen(const char *_Ch,size_t _MaxCount);
  do_not_use_this_in_wine   int  _mblen_l(const char *_Ch,size_t _MaxCount,_locale_t _Locale);
  do_not_use_this_in_wine   size_t  _mbstrlen(const char *_Str);
  do_not_use_this_in_wine   size_t  _mbstrlen_l(const char *_Str,_locale_t _Locale);
  do_not_use_this_in_wine   size_t  _mbstrnlen(const char *_Str,size_t _MaxCount);
  do_not_use_this_in_wine   size_t  _mbstrnlen_l(const char *_Str,size_t _MaxCount,_locale_t _Locale);
  int  mbtowc(wchar_t *  _DstCh,const char *  _SrcCh,size_t _SrcSizeInBytes);
  do_not_use_this_in_wine   int  _mbtowc_l(wchar_t *  _DstCh,const char *  _SrcCh,size_t _SrcSizeInBytes,_locale_t _Locale);
  size_t  mbstowcs(wchar_t *  _Dest,const char *  _Source,size_t _MaxCount);
  do_not_use_this_in_wine   size_t  _mbstowcs_l(wchar_t *  _Dest,const char *  _Source,size_t _MaxCount,_locale_t _Locale);
  int  mkstemp(char *template_name);
  int  rand(void);
  do_not_use_this_in_wine   int  _set_error_mode(int _Mode);
  void  srand(unsigned int _Seed);


























  double   strtod(const char *  _Str,char **  _EndPtr);
  float   strtof(const char *  nptr, char **  endptr);

  long double   strtold(const char *  , char **  );

  
  extern double  
  __strtod (const char *  , char ** );







  float  __mingw_strtof (const char * , char ** );
  double  __mingw_strtod (const char * , char ** );
  long double  __mingw_strtold(const char * , char ** );

  do_not_use_this_in_wine   float  _strtof_l(const char *  _Str,char **  _EndPtr,_locale_t _Locale);
  do_not_use_this_in_wine   double  _strtod_l(const char *  _Str,char **  _EndPtr,_locale_t _Locale);
  long  strtol(const char *  _Str,char **  _EndPtr,int _Radix);
  do_not_use_this_in_wine   long  _strtol_l(const char *  _Str,char **  _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long  strtoul(const char *  _Str,char **  _EndPtr,int _Radix);
  do_not_use_this_in_wine   unsigned long  _strtoul_l(const char *  _Str,char **  _EndPtr,int _Radix,_locale_t _Locale);


  int  system(const char *_Command);

  do_not_use_this_in_wine   char * _ultoa(unsigned long _Value,char *_Dest,int _Radix) ;
  int  wctomb(char *_MbCh,wchar_t _WCh) ;
  do_not_use_this_in_wine   int  _wctomb_l(char *_MbCh,wchar_t _WCh,_locale_t _Locale) ;
  size_t  wcstombs(char *  _Dest,const wchar_t *  _Source,size_t _MaxCount) ;
  do_not_use_this_in_wine   size_t  _wcstombs_l(char *  _Dest,const wchar_t *  _Source,size_t _MaxCount,_locale_t _Locale) ;



  void * calloc(size_t _NumOfElements,size_t _SizeOfElements);
  void  free(void *_Memory);
  void * malloc(size_t _Size);
  void * realloc(void *_Memory,size_t _NewSize);
  do_not_use_this_in_wine   void  _aligned_free(void *_Memory);
  do_not_use_this_in_wine   void * _aligned_malloc(size_t _Size,size_t _Alignment);
  do_not_use_this_in_wine   void * _aligned_offset_malloc(size_t _Size,size_t _Alignment,size_t _Offset);
  do_not_use_this_in_wine   void * _aligned_realloc(void *_Memory,size_t _Size,size_t _Alignment);
  do_not_use_this_in_wine   void * _aligned_offset_realloc(void *_Memory,size_t _Size,size_t _Alignment,size_t _Offset);

  do_not_use_this_in_wine   void * _recalloc(void *_Memory,size_t _Count,size_t _Size);
  do_not_use_this_in_wine   void * _aligned_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment);
  do_not_use_this_in_wine   void * _aligned_offset_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment,size_t _Offset);
  do_not_use_this_in_wine   size_t  _aligned_msize(void *_Memory,size_t _Alignment,size_t _Offset);






  do_not_use_this_in_wine   wchar_t * _itow(int _Value,wchar_t *_Dest,int _Radix) ;
  do_not_use_this_in_wine   wchar_t * _ltow(long _Value,wchar_t *_Dest,int _Radix) ;
  do_not_use_this_in_wine   wchar_t * _ultow(unsigned long _Value,wchar_t *_Dest,int _Radix) ;

  double  __mingw_wcstod(const wchar_t *  _Str,wchar_t **  _EndPtr);
  float  __mingw_wcstof(const wchar_t *  nptr, wchar_t **  endptr);
  long double  __mingw_wcstold(const wchar_t * , wchar_t ** );












  double  wcstod(const wchar_t *  _Str,wchar_t **  _EndPtr);
  float  wcstof(const wchar_t *  nptr, wchar_t **  endptr);


  long double  wcstold(const wchar_t * , wchar_t ** );

  do_not_use_this_in_wine   double  _wcstod_l(const wchar_t *  _Str,wchar_t **  _EndPtr,_locale_t _Locale);
  do_not_use_this_in_wine   float  _wcstof_l(const wchar_t *  _Str,wchar_t **  _EndPtr,_locale_t _Locale);
  long  wcstol(const wchar_t *  _Str,wchar_t **  _EndPtr,int _Radix);
  do_not_use_this_in_wine   long  _wcstol_l(const wchar_t *  _Str,wchar_t **  _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long  wcstoul(const wchar_t *  _Str,wchar_t **  _EndPtr,int _Radix);
  do_not_use_this_in_wine   unsigned long  _wcstoul_l(const wchar_t *  _Str,wchar_t **  _EndPtr,int _Radix,_locale_t _Locale);
  do_not_use_this_in_wine   wchar_t * _wgetenv(const wchar_t *_VarName) ;


  do_not_use_this_in_wine   int  _wsystem(const wchar_t *_Command);

  do_not_use_this_in_wine   double  _wtof(const wchar_t *_Str);
  do_not_use_this_in_wine   double  _wtof_l(const wchar_t *_Str,_locale_t _Locale);
  do_not_use_this_in_wine   int  _wtoi(const wchar_t *_Str);
  do_not_use_this_in_wine   int  _wtoi_l(const wchar_t *_Str,_locale_t _Locale);
  do_not_use_this_in_wine   long  _wtol(const wchar_t *_Str);
  do_not_use_this_in_wine   long  _wtol_l(const wchar_t *_Str,_locale_t _Locale);

   do_not_use_this_in_wine   wchar_t * _i64tow(__int64 _Val,wchar_t *_DstBuf,int _Radix) ;
   do_not_use_this_in_wine   wchar_t * _ui64tow(unsigned __int64 _Val,wchar_t *_DstBuf,int _Radix) ;
   do_not_use_this_in_wine   __int64  _wtoi64(const wchar_t *_Str);
   do_not_use_this_in_wine   __int64  _wtoi64_l(const wchar_t *_Str,_locale_t _Locale);
   do_not_use_this_in_wine   __int64  _wcstoi64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
   do_not_use_this_in_wine   __int64  _wcstoi64_l(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);
   do_not_use_this_in_wine   unsigned __int64  _wcstoui64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
   do_not_use_this_in_wine   unsigned __int64  _wcstoui64_l(const wchar_t *_Str ,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);


  do_not_use_this_in_wine   int  _putenv(const char *_EnvString);
  do_not_use_this_in_wine   int  _wputenv(const wchar_t *_EnvString);



  do_not_use_this_in_wine   char * _fullpath(char *_FullPath,const char *_Path,size_t _SizeInBytes);
  do_not_use_this_in_wine   char * _ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  do_not_use_this_in_wine   char * _fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  do_not_use_this_in_wine   char * _gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  do_not_use_this_in_wine   int  _atodbl(_CRT_DOUBLE *_Result,char *_Str);
  do_not_use_this_in_wine   int  _atoldbl(_LDOUBLE *_Result,char *_Str);
  do_not_use_this_in_wine   int  _atoflt(_CRT_FLOAT *_Result,char *_Str);
  do_not_use_this_in_wine   int  _atodbl_l(_CRT_DOUBLE *_Result,char *_Str,_locale_t _Locale);
  do_not_use_this_in_wine   int  _atoldbl_l(_LDOUBLE *_Result,char *_Str,_locale_t _Locale);
  do_not_use_this_in_wine   int  _atoflt_l(_CRT_FLOAT *_Result,char *_Str,_locale_t _Locale);















unsigned long  _lrotl(unsigned long,int);
unsigned long  _lrotr(unsigned long,int);





  do_not_use_this_in_wine   void  _makepath(char *_Path,const char *_Drive,const char *_Dir,const char *_Filename,const char *_Ext);
  _onexit_t  _onexit(_onexit_t _Func);






#pragma push_macro ("_rotr64")

#pragma push_macro ("_rotl64")


   unsigned __int64  _rotl64(unsigned __int64 _Val,int _Shift);
   unsigned __int64  _rotr64(unsigned __int64 Value,int Shift);

#pragma pop_macro ("_rotl64")

#pragma pop_macro ("_rotr64")

#pragma push_macro ("_rotr")

#pragma push_macro ("_rotl")


  unsigned int  _rotr(unsigned int _Val,int _Shift);
  unsigned int  _rotl(unsigned int _Val,int _Shift);

#pragma pop_macro ("_rotl")

#pragma pop_macro ("_rotr")
   unsigned __int64  _rotr64(unsigned __int64 _Val,int _Shift);
  do_not_use_this_in_wine   void  _searchenv(const char *_Filename,const char *_EnvVar,char *_ResultPath) ;
  do_not_use_this_in_wine   void  _splitpath(const char *_FullPath,char *_Drive,char *_Dir,char *_Filename,char *_Ext) ;
  do_not_use_this_in_wine   void  _swab(char *_Buf1,char *_Buf2,int _SizeInBytes);



  do_not_use_this_in_wine   wchar_t * _wfullpath(wchar_t *_FullPath,const wchar_t *_Path,size_t _SizeInWords);
  do_not_use_this_in_wine   void  _wmakepath(wchar_t *_ResultPath,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);




  do_not_use_this_in_wine   void  _wsearchenv(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath) ;
  do_not_use_this_in_wine   void  _wsplitpath(const wchar_t *_FullPath,wchar_t *_Drive,wchar_t *_Dir,wchar_t *_Filename,wchar_t *_Ext) ;


  do_not_use_this_in_wine   void  _beep(unsigned _Frequency,unsigned _Duration) ;
  
  do_not_use_this_in_wine   void  _seterrormode(int _Mode) ;
  do_not_use_this_in_wine   void  _sleep(unsigned long _Duration) ;




















  char * ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  char * fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  char * gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  char * itoa(int _Val,char *_DstBuf,int _Radix) ;
  char * ltoa(long _Val,char *_DstBuf,int _Radix) ;
  int  putenv(const char *_EnvString) ;



  void  swab(char *_Buf1,char *_Buf2,int _SizeInBytes) ;


  char * ultoa(unsigned long _Val,char *_Dstbuf,int _Radix) ;
  _onexit_t  onexit(_onexit_t _Func);





  typedef struct {  long long quot, rem; } lldiv_t;

   lldiv_t  lldiv(long long, long long);

   long long  llabs(long long);

   extern __inline__ long long  llabs(long long _j) { return (_j >= 0 ? _j : -_j); }


   long long   strtoll(const char * , char ** __restrict, int);
   unsigned long long   strtoull(const char * , char ** , int);

  
   long long   atoll (const char *);


   long long   wtoll (const wchar_t *);
   char * lltoa (long long, char *, int);
   char * ulltoa (unsigned long long , char *, int);
   wchar_t * lltow (long long, wchar_t *, int);
   wchar_t * ulltow (unsigned long long, wchar_t *, int);

  

   extern __inline__ char * lltoa (long long _n, char * _c, int _i) { return _i64toa (_n, _c, _i); }
   extern __inline__ char * ulltoa (unsigned long long _n, char * _c, int _i) { return _ui64toa (_n, _c, _i); }
   extern __inline__ long long   wtoll (const wchar_t * _w) { return _wtoi64 (_w); }
   extern __inline__ wchar_t * lltow (long long _n, wchar_t * _w, int _i) { return _i64tow (_n, _w, _i); }
   extern __inline__ wchar_t * ulltow (unsigned long long _n, wchar_t * _w, int _i) { return _ui64tow (_n, _w, _i); }










#pragma pack(pop)


# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sec_api/stdlib_s.h" 1 3









# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdlib.h" 1 3




































































































































































































































































































































































































































































































































































































































































































































































































# 10 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sec_api/stdlib_s.h" 2





  do_not_use_this_in_wine   void *  bsearch_s(const void *_Key,const void *_Base,rsize_t _NumOfElements,rsize_t _SizeOfElements,int ( * _PtFuncCompare)(void *, const void *, const void *), void *_Context);
  do_not_use_this_in_wine   errno_t  _dupenv_s(char **_PBuffer,size_t *_PBufferSizeInBytes,const char *_VarName);
  do_not_use_this_in_wine   errno_t  getenv_s(size_t *_ReturnSize,char *_DstBuf,rsize_t _DstSize,const char *_VarName);
  
  do_not_use_this_in_wine   errno_t  _itoa_s(int _Value,char *_DstBuf,size_t _Size,int _Radix);
  
  do_not_use_this_in_wine   errno_t  _i64toa_s(__int64 _Val,char *_DstBuf,size_t _Size,int _Radix);
  do_not_use_this_in_wine   errno_t  _ui64toa_s(unsigned __int64 _Val,char *_DstBuf,size_t _Size,int _Radix);
  do_not_use_this_in_wine   errno_t  _ltoa_s(long _Val,char *_DstBuf,size_t _Size,int _Radix);
  
  do_not_use_this_in_wine   errno_t  mbstowcs_s(size_t *_PtNumOfCharConverted,wchar_t *_DstBuf,size_t _SizeInWords,const char *_SrcBuf,size_t _MaxCount);
  
  do_not_use_this_in_wine   errno_t  _mbstowcs_s_l(size_t *_PtNumOfCharConverted,wchar_t *_DstBuf,size_t _SizeInWords,const char *_SrcBuf,size_t _MaxCount,_locale_t _Locale);
  
  do_not_use_this_in_wine   errno_t  _ultoa_s(unsigned long _Val,char *_DstBuf,size_t _Size,int _Radix);
  
  do_not_use_this_in_wine   errno_t  wctomb_s(int *_SizeConverted,char *_MbCh,rsize_t _SizeInBytes,wchar_t _WCh);
  do_not_use_this_in_wine   errno_t  _wctomb_s_l(int *_SizeConverted,char *_MbCh,size_t _SizeInBytes,wchar_t _WCh,_locale_t _Locale);
  do_not_use_this_in_wine   errno_t  wcstombs_s(size_t *_PtNumOfCharConverted,char *_Dst,size_t _DstSizeInBytes,const wchar_t *_Src,size_t _MaxCountInBytes);
  
  do_not_use_this_in_wine   errno_t  _wcstombs_s_l(size_t *_PtNumOfCharConverted,char *_Dst,size_t _DstSizeInBytes,const wchar_t *_Src,size_t _MaxCountInBytes,_locale_t _Locale);
  


  do_not_use_this_in_wine   errno_t  _ecvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDights,int *_PtDec,int *_PtSign);
  do_not_use_this_in_wine   errno_t  _fcvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDec,int *_PtDec,int *_PtSign);
  do_not_use_this_in_wine   errno_t  _gcvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDigits);
  do_not_use_this_in_wine   errno_t  _makepath_s(char *_PathResult,size_t _Size,const char *_Drive,const char *_Dir,const char *_Filename,const char *_Ext);
  
  do_not_use_this_in_wine   errno_t  _putenv_s(const char *_Name,const char *_Value);
  do_not_use_this_in_wine   errno_t  _searchenv_s(const char *_Filename,const char *_EnvVar,char *_ResultPath,size_t _SizeInBytes);

  do_not_use_this_in_wine   errno_t  _splitpath_s(const char *_FullPath,char *_Drive,size_t _DriveSize,char *_Dir,size_t _DirSize,char *_Filename,size_t _FilenameSize,char *_Ext,size_t _ExtSize);
  



  do_not_use_this_in_wine   void  qsort_s(void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int ( *_PtFuncCompare)(void *,const void *,const void *),void *_Context);









# 770 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdlib.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/malloc.h" 1 3









# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/crtdefs.h" 1 3












# 10 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/malloc.h" 2


#pragma pack(push,_CRT_PACKING)

































 
  typedef struct _heapinfo {
    int *_pentry;
    size_t _size;
    int _useflag;
  } _HEAPINFO;


  extern unsigned int _amblksiz;























void * __mingw_aligned_malloc (size_t _Size, size_t _Alignment);
void __mingw_aligned_free (void *_Memory);
void * __mingw_aligned_offset_realloc (void *_Memory, size_t _Size, size_t _Alignment, size_t _Offset);
void * __mingw_aligned_realloc (void *_Memory, size_t _Size, size_t _Offset);









  do_not_use_this_in_wine   int  _resetstkoflw (void);

  do_not_use_this_in_wine   unsigned long  _set_malloc_crt_max_wait(unsigned long _NewValue);

  do_not_use_this_in_wine   void * _expand(void *_Memory,size_t _NewSize);
  do_not_use_this_in_wine   size_t  _msize(void *_Memory);




  void * _alloca(size_t _Size) ;

  do_not_use_this_in_wine   size_t  _get_sbh_threshold(void);
  do_not_use_this_in_wine   int  _set_sbh_threshold(size_t _NewValue);
  do_not_use_this_in_wine   errno_t  _set_amblksiz(size_t _Value);
  do_not_use_this_in_wine   errno_t  _get_amblksiz(size_t *_Value);
  do_not_use_this_in_wine   int  _heapadd(void *_Memory,size_t _Size);
  do_not_use_this_in_wine   int  _heapchk(void);
  do_not_use_this_in_wine   int  _heapmin(void);
  do_not_use_this_in_wine   int  _heapset(unsigned int _Fill);
  do_not_use_this_in_wine   int  _heapwalk(_HEAPINFO *_EntryInfo);
  do_not_use_this_in_wine   size_t  _heapused(size_t *_Used,size_t *_Commit);
  do_not_use_this_in_wine   intptr_t  _get_heap_handle(void);












  static __inline void *_MarkAllocaS(void *_Ptr,unsigned int _Marker) {
    if(_Ptr) {
      *((unsigned int*)_Ptr) = _Marker;
      _Ptr = (char*)_Ptr + _ALLOCA_S_MARKER_SIZE;
    }
    return _Ptr;
  }












  static __inline void  _freea(void *_Memory) {
    unsigned int _Marker;
    if(_Memory) {
      _Memory = (char*)_Memory - _ALLOCA_S_MARKER_SIZE;
      _Marker = *(unsigned int *)_Memory;
      if(_Marker==0xDDDD) {
	free(_Memory);
      }





    }
  }
































#pragma pack(pop)


# 771 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdlib.h" 2


# 32 "include/../tools/tools.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/string.h" 1 3









# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/crtdefs.h" 1 3












# 10 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/string.h" 2



































  do_not_use_this_in_wine   void * _memccpy(void *_Dst,const void *_Src,int _Val,size_t _MaxCount);
  _CONST_RETURN void * memchr(const void *_Buf ,int _Val,size_t _MaxCount);
  do_not_use_this_in_wine   int  _memicmp(const void *_Buf1,const void *_Buf2,size_t _Size);
  do_not_use_this_in_wine   int  _memicmp_l(const void *_Buf1,const void *_Buf2,size_t _Size,_locale_t _Locale);
  int  memcmp(const void *_Buf1,const void *_Buf2,size_t _Size);
  void *  memcpy(void *  _Dst,const void *  _Src,size_t _Size) ;
  do_not_use_this_in_wine   errno_t  memcpy_s (void *_dest,size_t _numberOfElements,const void *_src,size_t _count);
  void *  mempcpy (void *_Dst, const void *_Src, size_t _Size);
  void *  memset(void *_Dst,int _Val,size_t _Size);

  void *  memccpy(void *_Dst,const void *_Src,int _Val,size_t _Size) ;
  int  memicmp(const void *_Buf1,const void *_Buf2,size_t _Size) ;


  char *  _strset(char *_Str,int _Val) ;
  char *  _strset_l(char *_Str,int _Val,_locale_t _Locale) ;
  char *  strcpy(char *  _Dest,const char *  _Source);
  char *  strcat(char *  _Dest,const char *  _Source);
  int  strcmp(const char *_Str1,const char *_Str2);
  size_t  strlen(const char *_Str);
  size_t  strnlen(const char *_Str,size_t _MaxCount);
  void * memmove(void *_Dst,const void *_Src,size_t _Size) ;
  do_not_use_this_in_wine   char * _strdup(const char *_Src);
  _CONST_RETURN char * strchr(const char *_Str,int _Val);
  do_not_use_this_in_wine   int  _stricmp(const char *_Str1,const char *_Str2);
  do_not_use_this_in_wine   int  _strcmpi(const char *_Str1,const char *_Str2);
  do_not_use_this_in_wine   int  _stricmp_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  int  strcoll(const char *_Str1,const char *_Str2);
  do_not_use_this_in_wine   int  _strcoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  do_not_use_this_in_wine   int  _stricoll(const char *_Str1,const char *_Str2);
  do_not_use_this_in_wine   int  _stricoll_l(const char *_Str1,const char *_Str2,_locale_t _Locale);
  do_not_use_this_in_wine   int  _strncoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
  do_not_use_this_in_wine   int  _strncoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  do_not_use_this_in_wine   int  _strnicoll (const char *_Str1,const char *_Str2,size_t _MaxCount);
  do_not_use_this_in_wine   int  _strnicoll_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  size_t  strcspn(const char *_Str,const char *_Control);
  do_not_use_this_in_wine   char * _strerror(const char *_ErrMsg) ;
  char * strerror(int) ;
  do_not_use_this_in_wine   char * _strlwr(char *_String) ;
  char *strlwr_l(char *_String,_locale_t _Locale) ;
  char * strncat(char *  _Dest,const char *  _Source,size_t _Count) ;
  int  strncmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
  do_not_use_this_in_wine   int  _strnicmp(const char *_Str1,const char *_Str2,size_t _MaxCount);
  do_not_use_this_in_wine   int  _strnicmp_l(const char *_Str1,const char *_Str2,size_t _MaxCount,_locale_t _Locale);
  char *strncpy(char *  _Dest,const char *  _Source,size_t _Count) ;
  do_not_use_this_in_wine   char * _strnset(char *_Str,int _Val,size_t _MaxCount) ;
  do_not_use_this_in_wine   char * _strnset_l(char *str,int c,size_t count,_locale_t _Locale) ;
  _CONST_RETURN char * strpbrk(const char *_Str,const char *_Control);
  _CONST_RETURN char * strrchr(const char *_Str,int _Ch);
  do_not_use_this_in_wine   char * _strrev(char *_Str);
  size_t  strspn(const char *_Str,const char *_Control);
  _CONST_RETURN char * strstr(const char *_Str,const char *_SubStr);
  char * strtok(char *  _Str,const char *  _Delim) ;

#pragma push_macro("strtok_r")

  char *strtok_r(char *  _Str, const char *  _Delim, char **  __last);

#pragma pop_macro("strtok_r")
  do_not_use_this_in_wine   char * _strupr(char *_String) ;
  do_not_use_this_in_wine   char *_strupr_l(char *_String,_locale_t _Locale) ;
  size_t  strxfrm(char *  _Dst,const char *  _Src,size_t _MaxCount);
  do_not_use_this_in_wine   size_t  _strxfrm_l(char *  _Dst,const char *  _Src,size_t _MaxCount,_locale_t _Locale);


  char * strdup(const char *_Src) ;
  int  strcmpi(const char *_Str1,const char *_Str2) ;
  int  stricmp(const char *_Str1,const char *_Str2) ;
  char * strlwr(char *_Str) ;
  int  strnicmp(const char *_Str1,const char *_Str,size_t _MaxCount) ;
  int  strncasecmp (const char *, const char *, size_t);
  int  strcasecmp (const char *, const char *);

  extern __inline__ int  strncasecmp (const char *__sz1, const char *__sz2, size_t __sizeMaxCompare) { return _strnicmp (__sz1, __sz2, __sizeMaxCompare); }
  extern __inline__ int  strcasecmp (const char *__sz1, const char *__sz2) { return _stricmp (__sz1, __sz2); }




  char * strnset(char *_Str,int _Val,size_t _MaxCount) ;
  char * strrev(char *_Str) ;
  char * strset(char *_Str,int _Val) ;
  char * strupr(char *_Str) ;





  do_not_use_this_in_wine   wchar_t * _wcsdup(const wchar_t *_Str);
  wchar_t * wcscat(wchar_t *  _Dest,const wchar_t *  _Source) ;
  _CONST_RETURN wchar_t * wcschr(const wchar_t *_Str,wchar_t _Ch);
  int  wcscmp(const wchar_t *_Str1,const wchar_t *_Str2);
  wchar_t * wcscpy(wchar_t *  _Dest,const wchar_t *  _Source) ;
  size_t  wcscspn(const wchar_t *_Str,const wchar_t *_Control);
  size_t  wcslen(const wchar_t *_Str);
  size_t  wcsnlen(const wchar_t *_Src,size_t _MaxCount);
  wchar_t *wcsncat(wchar_t *  _Dest,const wchar_t *  _Source,size_t _Count) ;
  int  wcsncmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  wchar_t *wcsncpy(wchar_t *  _Dest,const wchar_t *  _Source,size_t _Count) ;
  wchar_t * _wcsncpy_l(wchar_t *  _Dest,const wchar_t *  _Source,size_t _Count,_locale_t _Locale) ;
  _CONST_RETURN wchar_t * wcspbrk(const wchar_t *_Str,const wchar_t *_Control);
  _CONST_RETURN wchar_t * wcsrchr(const wchar_t *_Str,wchar_t _Ch);
  size_t  wcsspn(const wchar_t *_Str,const wchar_t *_Control);
  _CONST_RETURN wchar_t * wcsstr(const wchar_t *_Str,const wchar_t *_SubStr);

  wchar_t * wcstok(wchar_t *  _Str,const wchar_t *  _Delim,wchar_t **_Ptr) ;



  do_not_use_this_in_wine   wchar_t * _wcserror(int _ErrNum) ;
  do_not_use_this_in_wine   wchar_t * __wcserror(const wchar_t *_Str) ;
  do_not_use_this_in_wine   int  _wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2);
  do_not_use_this_in_wine   int  _wcsicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  do_not_use_this_in_wine   int  _wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  do_not_use_this_in_wine   int  _wcsnicmp_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  do_not_use_this_in_wine   wchar_t * _wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  do_not_use_this_in_wine   wchar_t * _wcsrev(wchar_t *_Str);
  do_not_use_this_in_wine   wchar_t * _wcsset(wchar_t *_Str,wchar_t _Val) ;
  do_not_use_this_in_wine   wchar_t * _wcslwr(wchar_t *_String) ;
  do_not_use_this_in_wine   wchar_t *_wcslwr_l(wchar_t *_String,_locale_t _Locale) ;
  do_not_use_this_in_wine   wchar_t * _wcsupr(wchar_t *_String) ;
  do_not_use_this_in_wine   wchar_t *_wcsupr_l(wchar_t *_String,_locale_t _Locale) ;
  size_t  wcsxfrm(wchar_t *  _Dst,const wchar_t *  _Src,size_t _MaxCount);
  do_not_use_this_in_wine   size_t  _wcsxfrm_l(wchar_t *  _Dst,const wchar_t *  _Src,size_t _MaxCount,_locale_t _Locale);
  int  wcscoll(const wchar_t *_Str1,const wchar_t *_Str2);
  do_not_use_this_in_wine   int  _wcscoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  do_not_use_this_in_wine   int  _wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2);
  do_not_use_this_in_wine   int  _wcsicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,_locale_t _Locale);
  do_not_use_this_in_wine   int  _wcsncoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  do_not_use_this_in_wine   int  _wcsncoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);
  do_not_use_this_in_wine   int  _wcsnicoll(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount);
  do_not_use_this_in_wine   int  _wcsnicoll_l(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount,_locale_t _Locale);


  wchar_t * wcsdup(const wchar_t *_Str) ;

  int  wcsicmp(const wchar_t *_Str1,const wchar_t *_Str2) ;
  int  wcsnicmp(const wchar_t *_Str1,const wchar_t *_Str2,size_t _MaxCount) ;
  wchar_t * wcsnset(wchar_t *_Str,wchar_t _Val,size_t _MaxCount) ;
  wchar_t * wcsrev(wchar_t *_Str) ;
  wchar_t * wcsset(wchar_t *_Str,wchar_t _Val) ;
  wchar_t * wcslwr(wchar_t *_Str) ;
  wchar_t * wcsupr(wchar_t *_Str) ;
  int  wcsicoll(const wchar_t *_Str1,const wchar_t *_Str2) ;








# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sec_api/string_s.h" 1 3









# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/string.h" 1 3

































































































































































































































































































# 10 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sec_api/string_s.h" 2














  do_not_use_this_in_wine   errno_t  _strset_s(char *_Dst,size_t _DstSize,int _Value);
  
  do_not_use_this_in_wine   errno_t  _strerror_s(char *_Buf,size_t _SizeInBytes,const char *_ErrMsg);
  
  do_not_use_this_in_wine   errno_t  strerror_s(char *_Buf,size_t _SizeInBytes,int _ErrNum);
  
  do_not_use_this_in_wine   errno_t  _strlwr_s(char *_Str,size_t _Size);
  
  do_not_use_this_in_wine   errno_t  _strlwr_s_l(char *_Str,size_t _Size,_locale_t _Locale);
  
  do_not_use_this_in_wine   errno_t  _strnset_s(char *_Str,size_t _Size,int _Val,size_t _MaxCount);
  
  do_not_use_this_in_wine   errno_t  _strupr_s(char *_Str,size_t _Size);
  
  do_not_use_this_in_wine   errno_t  _strupr_s_l(char *_Str,size_t _Size,_locale_t _Locale);
  

  do_not_use_this_in_wine   errno_t  strncat_s(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount);
  
  do_not_use_this_in_wine   errno_t  _strncat_s_l(char *_Dst,size_t _DstSizeInChars,const char *_Src,size_t _MaxCount,_locale_t _Locale);
  
  do_not_use_this_in_wine   errno_t  strcpy_s(char *_Dst, rsize_t _SizeInBytes, const char *_Src);
  
  do_not_use_this_in_wine   errno_t  strncpy_s(char *_Dst, size_t _DstSizeInChars, const char *_Src, size_t _MaxCount);
  
  do_not_use_this_in_wine   errno_t  _strncpy_s_l(char *_Dst, size_t _DstSizeInChars, const char *_Src, size_t _MaxCount, _locale_t _Locale);
  
  do_not_use_this_in_wine   char * strtok_s(char *_Str,const char *_Delim,char **_Context);
  do_not_use_this_in_wine   char * _strtok_s_l(char *_Str,const char *_Delim,char **_Context,_locale_t _Locale);
  do_not_use_this_in_wine   errno_t  strcat_s(char *_Dst, rsize_t _SizeInBytes, const char * _Src);
  

  __forceinline size_t  strnlen_s(const char * _src, size_t _count) {
    return _src ? strnlen(_src, _count) : 0;
  }

  do_not_use_this_in_wine   errno_t  memmove_s(void *_dest,size_t _numberOfElements,const void *_src,size_t _count);


  do_not_use_this_in_wine   wchar_t * wcstok_s(wchar_t *_Str,const wchar_t *_Delim,wchar_t **_Context);
  do_not_use_this_in_wine   errno_t  _wcserror_s(wchar_t *_Buf,size_t _SizeInWords,int _ErrNum);
  
  do_not_use_this_in_wine   errno_t  __wcserror_s(wchar_t *_Buffer,size_t _SizeInWords,const wchar_t *_ErrMsg);
  do_not_use_this_in_wine   errno_t  _wcsnset_s(wchar_t *_Dst,size_t _DstSizeInWords,wchar_t _Val,size_t _MaxCount);
  do_not_use_this_in_wine   errno_t  _wcsset_s(wchar_t *_Str,size_t _SizeInWords,wchar_t _Val);
  do_not_use_this_in_wine   errno_t  _wcslwr_s(wchar_t *_Str,size_t _SizeInWords);
  
  do_not_use_this_in_wine   errno_t  _wcslwr_s_l(wchar_t *_Str,size_t _SizeInWords,_locale_t _Locale);
  
  do_not_use_this_in_wine   errno_t  _wcsupr_s(wchar_t *_Str,size_t _Size);
  
  do_not_use_this_in_wine   errno_t  _wcsupr_s_l(wchar_t *_Str,size_t _Size,_locale_t _Locale);
  

  do_not_use_this_in_wine   errno_t  wcscpy_s(wchar_t *_Dst, rsize_t _SizeInWords, const wchar_t *_Src);
  
  do_not_use_this_in_wine   errno_t  wcscat_s(wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t *_Src);
  

  do_not_use_this_in_wine   errno_t  wcsncat_s(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount);
  
  do_not_use_this_in_wine   errno_t  _wcsncat_s_l(wchar_t *_Dst,size_t _DstSizeInChars,const wchar_t *_Src,size_t _MaxCount,_locale_t _Locale);
  
  do_not_use_this_in_wine   errno_t  wcsncpy_s(wchar_t *_Dst, size_t _DstSizeInChars, const wchar_t *_Src, size_t _MaxCount);
  
  do_not_use_this_in_wine   errno_t  _wcsncpy_s_l(wchar_t *_Dst, size_t _DstSizeInChars, const wchar_t *_Src, size_t _MaxCount, _locale_t _Locale);
  
  do_not_use_this_in_wine   wchar_t * _wcstok_s_l(wchar_t *_Str,const wchar_t *_Delim,wchar_t **_Context,_locale_t _Locale);
  do_not_use_this_in_wine   errno_t  _wcsset_s_l(wchar_t *_Str,size_t _SizeInChars,wchar_t _Val,_locale_t _Locale);
  
  do_not_use_this_in_wine   errno_t  _wcsnset_s_l(wchar_t *_Str,size_t _SizeInChars,wchar_t _Val, size_t _Count,_locale_t _Locale);
  

  __forceinline size_t  wcsnlen_s(const wchar_t * _src, size_t _count) {
    return _src ? wcsnlen(_src, _count) : 0;
  }






# 195 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/string.h" 2































































































# 33 "include/../tools/tools.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sys/types.h" 1 3













# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/crtdefs.h" 1 3












# 14 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sys/types.h" 2





























typedef unsigned short _ino_t;

typedef unsigned short ino_t;





typedef unsigned int _dev_t;

typedef unsigned int dev_t;






typedef int	_pid_t;







typedef _pid_t	pid_t;





typedef unsigned short _mode_t;


typedef _mode_t	mode_t;




# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/_mingw_off_t.h" 1 3
































# 82 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sys/types.h" 2


typedef unsigned int useconds_t;




struct timespec {
  time_t  tv_sec;	
  long    tv_nsec;	
};

struct itimerspec {
  struct timespec  it_interval;	
  struct timespec  it_value;	
};








typedef unsigned long	_sigset_t;









# 34 "include/../tools/tools.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sys/stat.h" 1 3













# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/crtdefs.h" 1 3












# 14 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sys/stat.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/io.h" 1 3









# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/crtdefs.h" 1 3












# 10 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/io.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/string.h" 1 3

































































































































































































































































































# 11 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/io.h" 2











#pragma pack(push,_CRT_PACKING)





do_not_use_this_in_wine   char*  _getcwd (char*, int);

  typedef unsigned long _fsize_t;





  struct _finddata32_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    _fsize_t size;
    char name[260];
  };

  struct _finddata32i64_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
     __int64 size;
    char name[260];
  };

  struct _finddata64i32_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    _fsize_t size;
    char name[260];
  };

  struct __finddata64_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
     __int64 size;
    char name[260];
  };
























  struct _wfinddata32_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    _fsize_t size;
    wchar_t name[260];
  };

  struct _wfinddata32i64_t {
    unsigned attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
     __int64 size;
    wchar_t name[260];
  };

  struct _wfinddata64i32_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    _fsize_t size;
    wchar_t name[260];
  };

  struct _wfinddata64_t {
    unsigned attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
     __int64 size;
    wchar_t name[260];
  };


















































# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/_mingw_off_t.h" 1 3
































# 179 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/io.h" 2

  






  do_not_use_this_in_wine   int  _access(const char *_Filename,int _AccessMode);
  do_not_use_this_in_wine   errno_t  _access_s(const char *_Filename,int _AccessMode);
  do_not_use_this_in_wine   int  _chmod(const char *_Filename,int _Mode);
  do_not_use_this_in_wine   int  _chsize(int _FileHandle,long _Size) ;
  do_not_use_this_in_wine   errno_t  _chsize_s (int _FileHandle,__int64 _Size);
  do_not_use_this_in_wine   int  _close(int _FileHandle);
  do_not_use_this_in_wine   int  _commit(int _FileHandle);
  do_not_use_this_in_wine   int  _creat(const char *_Filename,int _PermissionMode) ;
  do_not_use_this_in_wine   int  _dup(int _FileHandle);
  do_not_use_this_in_wine   int  _dup2(int _FileHandleSrc,int _FileHandleDst);
  do_not_use_this_in_wine   int  _eof(int _FileHandle);
  do_not_use_this_in_wine   long  _filelength(int _FileHandle);
  do_not_use_this_in_wine   intptr_t  _findfirst32(const char *_Filename,struct _finddata32_t *_FindData);
  do_not_use_this_in_wine   int  _findnext32(intptr_t _FindHandle,struct _finddata32_t *_FindData);
  do_not_use_this_in_wine   int  _findclose(intptr_t _FindHandle);
  do_not_use_this_in_wine   int  _isatty(int _FileHandle);
  do_not_use_this_in_wine   int  _locking(int _FileHandle,int _LockMode,long _NumOfBytes);
  do_not_use_this_in_wine   long  _lseek(int _FileHandle,long _Offset,int _Origin);
  _off64_t lseek64(int fd,_off64_t offset, int whence);
  do_not_use_this_in_wine   char * _mktemp(char *_TemplateName) ;
  do_not_use_this_in_wine   errno_t  _mktemp_s (char *_TemplateName,size_t _Size);

  do_not_use_this_in_wine   int  _pipe(int *_PtHandles,unsigned int _PipeSize,int _TextMode);

  do_not_use_this_in_wine   int  _read(int _FileHandle,void *_DstBuf,unsigned int _MaxCharCount);











  do_not_use_this_in_wine   int  _setmode(int _FileHandle,int _Mode);
  do_not_use_this_in_wine   long  _tell(int _FileHandle);
  do_not_use_this_in_wine   int  _umask(int _Mode) ;
  do_not_use_this_in_wine   errno_t  _umask_s (int _NewMode,int *_OldMode);
  do_not_use_this_in_wine   int  _write(int _FileHandle,const void *_Buf,unsigned int _MaxCharCount);

   do_not_use_this_in_wine   __int64  _filelengthi64(int _FileHandle);
  do_not_use_this_in_wine   intptr_t  _findfirst32i64(const char *_Filename,struct _finddata32i64_t *_FindData);
  do_not_use_this_in_wine   intptr_t  _findfirst64(const char *_Filename,struct __finddata64_t *_FindData);



  intptr_t  _findfirst64i32(const char *_Filename,struct _finddata64i32_t *_FindData);

  extern __inline__ intptr_t  _findfirst64i32(const char *_Filename,struct _finddata64i32_t *_FindData)
  {
    struct __finddata64_t fd;
    intptr_t ret = _findfirst64(_Filename,&fd);
    if (ret == -1) {
      memset(_FindData,0,sizeof(struct _finddata64i32_t));
      return -1;
    }
    _FindData->attrib=fd.attrib;
    _FindData->time_create=fd.time_create;
    _FindData->time_access=fd.time_access;
    _FindData->time_write=fd.time_write;
    _FindData->size=(_fsize_t) fd.size;
    strncpy(_FindData->name,fd.name,260);
    return ret;
  }

  do_not_use_this_in_wine   int  _findnext32i64(intptr_t _FindHandle,struct _finddata32i64_t *_FindData);
  do_not_use_this_in_wine   int  _findnext64(intptr_t _FindHandle,struct __finddata64_t *_FindData);
  int  _findnext64i32(intptr_t _FindHandle,struct _finddata64i32_t *_FindData);

  extern __inline__ int  _findnext64i32(intptr_t _FindHandle,struct _finddata64i32_t *_FindData)
  {
    struct __finddata64_t fd;
    int __ret = _findnext64(_FindHandle,&fd);
    if (__ret == -1) {
      memset(_FindData,0,sizeof(struct _finddata64i32_t));
      return -1;
    }
    _FindData->attrib=fd.attrib;
    _FindData->time_create=fd.time_create;
    _FindData->time_access=fd.time_access;
    _FindData->time_write=fd.time_write;
    _FindData->size=(_fsize_t) fd.size;
    strncpy(_FindData->name,fd.name,260);
    return __ret;
  }

   __int64  _lseeki64(int _FileHandle,__int64 _Offset,int _Origin);
   __int64  _telli64(int _FileHandle);



  int  chdir (const char *) ;
  char * getcwd (char *, int) ;
  int  mkdir (const char *) ;
  char * mktemp(char *) ;
  int  rmdir (const char*) ;
  int  chmod (const char *, int) ;



  do_not_use_this_in_wine   errno_t  _sopen_s(int *_FileHandle,const char *_Filename,int _OpenFlag,int _ShareFlag,int _PermissionMode);

  do_not_use_this_in_wine   int  _open(const char *_Filename,int _OpenFlag,...) ;
  do_not_use_this_in_wine   int  _sopen(const char *_Filename,int _OpenFlag,int _ShareFlag,...) ;



  do_not_use_this_in_wine   int  _waccess(const wchar_t *_Filename,int _AccessMode);
  do_not_use_this_in_wine   errno_t  _waccess_s (const wchar_t *_Filename,int _AccessMode);
  do_not_use_this_in_wine   int  _wchmod(const wchar_t *_Filename,int _Mode);
  do_not_use_this_in_wine   int  _wcreat(const wchar_t *_Filename,int _PermissionMode) ;
  do_not_use_this_in_wine   intptr_t  _wfindfirst32(const wchar_t *_Filename,struct _wfinddata32_t *_FindData);
  do_not_use_this_in_wine   int  _wfindnext32(intptr_t _FindHandle,struct _wfinddata32_t *_FindData);
  do_not_use_this_in_wine   int  _wunlink(const wchar_t *_Filename);
  do_not_use_this_in_wine   int  _wrename(const wchar_t *_OldFilename,const wchar_t *_NewFilename);
  do_not_use_this_in_wine   wchar_t * _wmktemp(wchar_t *_TemplateName) ;
  do_not_use_this_in_wine   errno_t  _wmktemp_s (wchar_t *_TemplateName, size_t _SizeInWords);

  do_not_use_this_in_wine   intptr_t  _wfindfirst32i64(const wchar_t *_Filename,struct _wfinddata32i64_t *_FindData);
  intptr_t  _wfindfirst64i32(const wchar_t *_Filename,struct _wfinddata64i32_t *_FindData);
  do_not_use_this_in_wine   intptr_t  _wfindfirst64(const wchar_t *_Filename,struct _wfinddata64_t *_FindData);
  do_not_use_this_in_wine   int  _wfindnext32i64(intptr_t _FindHandle,struct _wfinddata32i64_t *_FindData);
  int  _wfindnext64i32(intptr_t _FindHandle,struct _wfinddata64i32_t *_FindData);
  do_not_use_this_in_wine   int  _wfindnext64(intptr_t _FindHandle,struct _wfinddata64_t *_FindData);

  do_not_use_this_in_wine   errno_t  _wsopen_s(int *_FileHandle,const wchar_t *_Filename,int _OpenFlag,int _ShareFlag,int _PermissionFlag);

  do_not_use_this_in_wine   int  _wopen(const wchar_t *_Filename,int _OpenFlag,...) ;
  do_not_use_this_in_wine   int  _wsopen(const wchar_t *_Filename,int _OpenFlag,int _ShareFlag,...) ;



  int  __lock_fhandle(int _Filehandle);
  void  _unlock_fhandle(int _Filehandle);
  do_not_use_this_in_wine   intptr_t  _get_osfhandle(int _FileHandle);
  do_not_use_this_in_wine   int  _open_osfhandle(intptr_t _OSFileHandle,int _Flags);


  int  access(const char *_Filename,int _AccessMode) ;
  int  chmod(const char *_Filename,int _AccessMode) ;
  int  chsize(int _FileHandle,long _Size) ;
  int  close(int _FileHandle) ;
  int  creat(const char *_Filename,int _PermissionMode) ;
  int  dup(int _FileHandle) ;
  int  dup2(int _FileHandleSrc,int _FileHandleDst) ;
  int  eof(int _FileHandle) ;
  long  filelength(int _FileHandle) ;
  int  isatty(int _FileHandle) ;
  int  locking(int _FileHandle,int _LockMode,long _NumOfBytes) ;
  long  lseek(int _FileHandle,long _Offset,int _Origin) ;
  char * mktemp(char *_TemplateName)  ;
  int  open(const char *_Filename,int _OpenFlag,...)  ;
  int  read(int _FileHandle,void *_DstBuf,unsigned int _MaxCharCount)  ;
  int  setmode(int _FileHandle,int _Mode) ;
  int  sopen(const char *_Filename,int _OpenFlag,int _ShareFlag,...) ;
  long  tell(int _FileHandle) ;
  int  umask(int _Mode) ;
  int  write(int _Filehandle,const void *_Buf,unsigned int _MaxCharCount) ;


















































































































































#pragma pack(pop)



# 15 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sys/stat.h" 2


#pragma pack(push,_CRT_PACKING)










# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sys/types.h" 1 3



















































































































# 27 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sys/stat.h" 2
































# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/_mingw_stat64.h" 1 3
























  struct _stat32 {
    _dev_t st_dev;
   _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
  };


  struct stat {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    time_t st_atime;
    time_t st_mtime;
    time_t st_ctime;
  };


  struct _stat32i64 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
     __int64 st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
  };

  struct _stat64i32 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
  };

  struct _stat64 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
     __int64 st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
  };







# 59 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sys/stat.h" 2










  do_not_use_this_in_wine   int  _fstat32(int _FileDes,struct _stat32 *_Stat);
  do_not_use_this_in_wine   int  _stat32(const char *_Name,struct _stat32 *_Stat);
  do_not_use_this_in_wine   int  _fstat64(int _FileDes,struct _stat64 *_Stat);
  do_not_use_this_in_wine   int  _fstat32i64(int _FileDes,struct _stat32i64 *_Stat);
  int  _fstat64i32(int _FileDes,struct _stat64i32 *_Stat);

  extern __inline__ int  _fstat64i32(int _FileDes,struct _stat64i32 *_Stat)
  {
    struct _stat64 st;
    int __ret=_fstat64(_FileDes,&st);
    if (__ret == -1) {
      memset(_Stat,0,sizeof(struct _stat64i32));
      return -1;
    }
    _Stat->st_dev=st.st_dev;
    _Stat->st_ino=st.st_ino;
    _Stat->st_mode=st.st_mode;
    _Stat->st_nlink=st.st_nlink;
    _Stat->st_uid=st.st_uid;
    _Stat->st_gid=st.st_gid;
    _Stat->st_rdev=st.st_rdev;
    _Stat->st_size=(_off_t) st.st_size;
    _Stat->st_atime=st.st_atime;
    _Stat->st_mtime=st.st_mtime;
    _Stat->st_ctime=st.st_ctime;
    return __ret;
  }

  do_not_use_this_in_wine   int  _stat64(const char *_Name,struct _stat64 *_Stat);
  do_not_use_this_in_wine   int  _stat32i64(const char *_Name,struct _stat32i64 *_Stat);
  int  _stat64i32(const char *_Name,struct _stat64i32 *_Stat);

  extern __inline__ int  _stat64i32(const char *_Name,struct _stat64i32 *_Stat)
  {
    struct _stat64 st;
    int __ret=_stat64(_Name,&st);
    if (__ret == -1) {
      memset(_Stat,0,sizeof(struct _stat64i32));
      return -1;
    }
    _Stat->st_dev=st.st_dev;
    _Stat->st_ino=st.st_ino;
    _Stat->st_mode=st.st_mode;
    _Stat->st_nlink=st.st_nlink;
    _Stat->st_uid=st.st_uid;
    _Stat->st_gid=st.st_gid;
    _Stat->st_rdev=st.st_rdev;
    _Stat->st_size=(_off_t) st.st_size;
    _Stat->st_atime=st.st_atime;
    _Stat->st_mtime=st.st_mtime;
    _Stat->st_ctime=st.st_ctime;
    return __ret;
  }




  do_not_use_this_in_wine   int  _wstat32(const wchar_t *_Name,struct _stat32 *_Stat);
  do_not_use_this_in_wine   int  _wstat32i64(const wchar_t *_Name,struct _stat32i64 *_Stat);
  int  _wstat64i32(const wchar_t *_Name,struct _stat64i32 *_Stat);
  do_not_use_this_in_wine   int  _wstat64(const wchar_t *_Name,struct _stat64 *_Stat);












































int  fstat(int _Desc,struct stat *_Stat);

  static  int  stat(const char *_Filename,struct stat *_Stat)
  {
    return _stat64i32(_Filename, (struct _stat64i32 *)_Stat);
  }
  static  int  wstat(const wchar_t *_Filename,struct stat *_Stat)
  {
    return _wstat64i32(_Filename, (struct _stat64i32 *)_Stat);
  }





































extern __inline__ int 
 fstat(int _Desc,struct stat *_Stat) {
  struct _stat64 st;
  int __ret=_fstat64(_Desc,&st);
  if (__ret == -1) {
    memset(_Stat,0,sizeof(struct stat));
    return -1;
  }
  

  _Stat->st_dev=st.st_dev;
  _Stat->st_ino=st.st_ino;
  _Stat->st_mode=st.st_mode;
  _Stat->st_nlink=st.st_nlink;
  _Stat->st_uid=st.st_uid;
  _Stat->st_gid=st.st_gid;
  _Stat->st_rdev=st.st_rdev;
  _Stat->st_size=(_off_t) st.st_size;
  _Stat->st_atime=st.st_atime;
  _Stat->st_mtime=st.st_mtime;
  _Stat->st_ctime=st.st_ctime;
  return __ret;
}













































#pragma pack(pop)



# 35 "include/../tools/tools.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/signal.h" 1 3









# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/crtdefs.h" 1 3












# 10 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/signal.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/pthread_signal.h" 1 3





























# 11 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/signal.h" 2







  typedef int sig_atomic_t;





























  typedef	void (*__p_sig_fn_t)(int);








  extern void ** __pxcptinfoptrs(void);


  __p_sig_fn_t  signal(int _SigNum,__p_sig_fn_t _Func);
  int  raise(int _SigNum);





# 36 "include/../tools/tools.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/fcntl.h" 1 3






# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/crtdefs.h" 1 3












# 7 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/fcntl.h" 2


# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/io.h" 1 3















































































































































































































































































































































































































































































































# 9 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/fcntl.h" 2












































# 37 "include/../tools/tools.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/time.h" 1 3









# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/crtdefs.h" 1 3












# 10 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/time.h" 2
















# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sys/timeb.h" 1 3









# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/crtdefs.h" 1 3












# 10 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sys/timeb.h" 2






#pragma pack(push,_CRT_PACKING)





































  struct __timeb32 {
    __time32_t time;
    unsigned short millitm;
    short timezone;
    short dstflag;
  };


  struct timeb {
    time_t time;
    unsigned short millitm;
    short timezone;
    short dstflag;
  };


  struct __timeb64 {
    __time64_t time;
    unsigned short millitm;
    short timezone;
    short dstflag;
  };



  do_not_use_this_in_wine   void  _ftime64(struct __timeb64 *_Time);
  do_not_use_this_in_wine   void  _ftime32(struct __timeb32 *_Time);









struct _timespec32 {
  __time32_t tv_sec;
  long tv_nsec;
};

struct _timespec64 {
  __time64_t tv_sec;
  long tv_nsec;
};















  void  ftime (struct timeb *);


  

  extern __inline__ void  ftime(struct timeb *_Tmb) {
    _ftime64((struct __timeb64 *)_Tmb);
  }













#pragma pack(pop)


# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sec_api/sys/timeb_s.h" 1 3










# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sys/timeb.h" 1 3








































































































































# 11 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sec_api/sys/timeb_s.h" 2





  do_not_use_this_in_wine   errno_t  _ftime32_s(struct __timeb32 *_Time);
  do_not_use_this_in_wine   errno_t  _ftime64_s(struct __timeb64 *_Time);












# 136 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sys/timeb.h" 2

# 26 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/time.h" 2


#pragma pack(push,_CRT_PACKING)



































  typedef long clock_t;




































  struct tm {
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
  };









  do_not_use_this_in_wine   int * __daylight(void);
  do_not_use_this_in_wine   long * __dstbias(void);
  do_not_use_this_in_wine   long * __timezone(void);
  do_not_use_this_in_wine   char ** __tzname(void);





















  do_not_use_this_in_wine   errno_t  _get_daylight(int *_Daylight);
  do_not_use_this_in_wine   errno_t  _get_dstbias(long *_Daylight_savings_bias);
  do_not_use_this_in_wine   errno_t  _get_timezone(long *_Timezone);
  do_not_use_this_in_wine   errno_t  _get_tzname(size_t *_ReturnValue,char *_Buffer,size_t _SizeInBytes,int _Index);
  char * asctime(const struct tm *_Tm) ;
  do_not_use_this_in_wine   errno_t  asctime_s (char *_Buf,size_t _SizeInWords,const struct tm *_Tm);
  do_not_use_this_in_wine   char * _ctime32(const __time32_t *_Time) ;
  do_not_use_this_in_wine   errno_t  _ctime32_s (char *_Buf,size_t _SizeInBytes,const __time32_t *_Time);
  clock_t  clock(void);
  do_not_use_this_in_wine   double  _difftime32(__time32_t _Time1,__time32_t _Time2);
  do_not_use_this_in_wine   struct tm * _gmtime32(const __time32_t *_Time) ;
  do_not_use_this_in_wine   errno_t  _gmtime32_s (struct tm *_Tm,const __time32_t *_Time);
  do_not_use_this_in_wine   struct tm * _localtime32(const __time32_t *_Time) ;
  do_not_use_this_in_wine   errno_t  _localtime32_s (struct tm *_Tm,const __time32_t *_Time);
  size_t  strftime(char *  _Buf,size_t _SizeInBytes,const char *  _Format,const struct tm *  _Tm) ;
  do_not_use_this_in_wine   size_t  _strftime_l(char *  _Buf,size_t _Max_size,const char *  _Format,const struct tm *  _Tm,_locale_t _Locale);
  do_not_use_this_in_wine   char * _strdate(char *_Buffer) ;
  do_not_use_this_in_wine   errno_t  _strdate_s (char *_Buf,size_t _SizeInBytes);
  
  do_not_use_this_in_wine   char * _strtime(char *_Buffer) ;
  do_not_use_this_in_wine   errno_t  _strtime_s (char *_Buf ,size_t _SizeInBytes);
  
  do_not_use_this_in_wine   __time32_t  _time32(__time32_t *_Time);

  do_not_use_this_in_wine   int  _timespec32_get(struct _timespec32 *_Ts, int _Base);

  do_not_use_this_in_wine   __time32_t  _mktime32(struct tm *_Tm);
  do_not_use_this_in_wine   __time32_t  _mkgmtime32(struct tm *_Tm);








  void  _tzset(void);


  do_not_use_this_in_wine   double  _difftime64(__time64_t _Time1,__time64_t _Time2);
  do_not_use_this_in_wine   char * _ctime64(const __time64_t *_Time) ;
  do_not_use_this_in_wine   errno_t  _ctime64_s (char *_Buf,size_t _SizeInBytes,const __time64_t *_Time);
  do_not_use_this_in_wine   struct tm * _gmtime64(const __time64_t *_Time) ;
  do_not_use_this_in_wine   errno_t  _gmtime64_s (struct tm *_Tm,const __time64_t *_Time);
  do_not_use_this_in_wine   struct tm * _localtime64(const __time64_t *_Time) ;
  do_not_use_this_in_wine   errno_t  _localtime64_s (struct tm *_Tm,const __time64_t *_Time);
  do_not_use_this_in_wine   __time64_t  _mktime64(struct tm *_Tm);
  do_not_use_this_in_wine   __time64_t  _mkgmtime64(struct tm *_Tm);
  do_not_use_this_in_wine   __time64_t  _time64(__time64_t *_Time);

  do_not_use_this_in_wine   int  _timespec64_get(struct _timespec64 *_Ts, int _Base);

  unsigned  _getsystime(struct tm *_Tm);
  unsigned  _setsystime(struct tm *_Tm,unsigned _MilliSec);


  do_not_use_this_in_wine   wchar_t * _wasctime(const struct tm *_Tm);
  do_not_use_this_in_wine   errno_t  _wasctime_s (wchar_t *_Buf,size_t _SizeInWords,const struct tm *_Tm);
  wchar_t * _wctime32(const __time32_t *_Time) ;
  do_not_use_this_in_wine   errno_t  _wctime32_s (wchar_t *_Buf,size_t _SizeInWords,const __time32_t *_Time);
  size_t  wcsftime(wchar_t *  _Buf,size_t _SizeInWords,const wchar_t *  _Format,const struct tm *  _Tm);
  do_not_use_this_in_wine   size_t  _wcsftime_l(wchar_t *  _Buf,size_t _SizeInWords,const wchar_t *  _Format,const struct tm *  _Tm,_locale_t _Locale);
  do_not_use_this_in_wine   wchar_t * _wstrdate(wchar_t *_Buffer) ;
  do_not_use_this_in_wine   errno_t  _wstrdate_s (wchar_t *_Buf,size_t _SizeInWords);
  do_not_use_this_in_wine   wchar_t * _wstrtime(wchar_t *_Buffer) ;
  do_not_use_this_in_wine   errno_t  _wstrtime_s (wchar_t *_Buf,size_t _SizeInWords);
  do_not_use_this_in_wine   wchar_t * _wctime64(const __time64_t *_Time) ;
  do_not_use_this_in_wine   errno_t  _wctime64_s (wchar_t *_Buf,size_t _SizeInWords,const __time64_t *_Time);




  wchar_t * _wctime(const time_t *_Time)  __asm__("_wctime64 "  ) ;








  errno_t  _wctime_s (wchar_t *_Buffer,size_t _SizeInWords,const time_t *_Time) __asm__("_wctime64_s "  ) ;

























time_t  time(time_t *_Time) __asm__("_time64 "  ) ;

int  timespec_get(struct timespec* _Ts, int _Base) __asm__("_timespec64_get "  ) ;

double  difftime(time_t _Time1,time_t _Time2) __asm__("_difftime64 "  ) ;
struct tm * localtime(const time_t *_Time) __asm__("_localtime64 "  ) ;
errno_t  localtime_s(struct tm *_Tm,const time_t *_Time) __asm__("_localtime64_s "  ) ;
struct tm * gmtime(const time_t *_Time) __asm__("_gmtime64 "  ) ;
errno_t  gmtime_s(struct tm *_Tm, const time_t *_Time) __asm__("_gmtime64_s "  ) ;
char * ctime(const time_t *_Time) __asm__("_ctime64 "  ) ;
errno_t  ctime_s(char *_Buf,size_t _SizeInBytes,const time_t *_Time) __asm__("_ctime64_s "  ) ;
time_t  mktime(struct tm *_Tm) __asm__("_mktime64 "  ) ;
time_t  _mkgmtime(struct tm *_Tm) __asm__("_mkgmtime64 "  ) ;
















  do_not_use_this_in_wine   extern int daylight  ;
  do_not_use_this_in_wine   extern long timezone  ;
  do_not_use_this_in_wine   extern char *tzname[2]  ;
  void  tzset(void) ;



# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/_timeval.h" 1 3









struct timeval
{
	long tv_sec;
	long tv_usec;
};









# 288 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/time.h" 2



struct timezone {
  int tz_minuteswest;
  int tz_dsttime;
};

  extern int  mingw_gettimeofday (struct timeval *p, struct timezone *z);



#pragma pack(pop)































# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/pthread_time.h" 1 3























# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sys/timeb.h" 1 3








































































































































# 24 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/pthread_time.h" 2

























typedef int clockid_t;

































#pragma push_macro("WINPTHREAD_API")





 int  nanosleep(const struct timespec *request, struct timespec *remain);

 int  clock_nanosleep(clockid_t clock_id, int flags, const struct timespec *request, struct timespec *remain);
 int  clock_getres(clockid_t clock_id, struct timespec *res);
 int  clock_gettime(clockid_t clock_id, struct timespec *tp);
 int  clock_settime(clockid_t clock_id, const struct timespec *tp);


#pragma pop_macro("WINPTHREAD_API")







# 331 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/time.h" 2




# 38 "include/../tools/tools.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/errno.h" 1 3









# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/crtdefs.h" 1 3












# 10 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/errno.h" 2








































































































































































































































# 39 "include/../tools/tools.h" 2






# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/direct.h" 1 3









# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/crtdefs.h" 1 3












# 10 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/direct.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/io.h" 1 3















































































































































































































































































































































































































































































































# 11 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/direct.h" 2


#pragma pack(push,_CRT_PACKING)







  struct _diskfree_t {
    unsigned total_clusters;
    unsigned avail_clusters;
    unsigned sectors_per_cluster;
    unsigned bytes_per_sector;
  };


  do_not_use_this_in_wine   char * _getcwd(char *_DstBuf,int _SizeInBytes);
  do_not_use_this_in_wine   char * _getdcwd(int _Drive,char *_DstBuf,int _SizeInBytes);

  char * _getdcwd_nolock(int _Drive,char *_DstBuf,int _SizeInBytes);

  do_not_use_this_in_wine   int  _chdir(const char *_Path);
  do_not_use_this_in_wine   int  _mkdir(const char *_Path);
  do_not_use_this_in_wine   int  _rmdir(const char *_Path);

  do_not_use_this_in_wine   int  _chdrive(int _Drive);
  do_not_use_this_in_wine   int  _getdrive(void);
  do_not_use_this_in_wine   unsigned long  _getdrives(void);



  do_not_use_this_in_wine   unsigned  _getdiskfree(unsigned _Drive,struct _diskfree_t *_DiskFree);





  do_not_use_this_in_wine   wchar_t * _wgetcwd(wchar_t *_DstBuf,int _SizeInWords);
  do_not_use_this_in_wine   wchar_t * _wgetdcwd(int _Drive,wchar_t *_DstBuf,int _SizeInWords);

  wchar_t * _wgetdcwd_nolock(int _Drive,wchar_t *_DstBuf,int _SizeInWords);

  do_not_use_this_in_wine   int  _wchdir(const wchar_t *_Path);
  do_not_use_this_in_wine   int  _wmkdir(const wchar_t *_Path);
  do_not_use_this_in_wine   int  _wrmdir(const wchar_t *_Path);






  char * getcwd(char *_DstBuf,int _SizeInBytes) ;
  int  chdir(const char *_Path) ;
  int  mkdir(const char *_Path) ;
  int  rmdir(const char *_Path) ;







#pragma pack(pop)

# 45 "include/../tools/tools.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/io.h" 1 3















































































































































































































































































































































































































































































































# 46 "include/../tools/tools.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/process.h" 1 3









# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/crtdefs.h" 1 3












# 10 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/process.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/corecrt_startup.h" 1 3













do_not_use_this_in_wine   char ** __p__acmdln(void);


do_not_use_this_in_wine   wchar_t ** __p__wcmdln(void);


typedef void ( *_PVFV)(void);
typedef int ( *_PIFV)(void);
typedef void ( *_PVFI)(int);

typedef struct _onexit_table_t {
    _PVFV* _first;
    _PVFV* _last;
    _PVFV* _end;
} _onexit_table_t;

typedef int ( *_onexit_t)(void);

do_not_use_this_in_wine   int  _initialize_onexit_table(_onexit_table_t*);
do_not_use_this_in_wine   int  _register_onexit_function(_onexit_table_t*,_onexit_t);
do_not_use_this_in_wine   int  _execute_onexit_table(_onexit_table_t*);
do_not_use_this_in_wine   int  _crt_atexit(_PVFV func);
do_not_use_this_in_wine   int  _crt_at_quick_exit(_PVFV func);





# 11 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/process.h" 2



# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sys/types.h" 1 3



















































































































# 14 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/process.h" 2


















  typedef void ( *_beginthread_proc_type)(void *);
  typedef unsigned ( *_beginthreadex_proc_type)(void *);

  do_not_use_this_in_wine   uintptr_t  _beginthread(_beginthread_proc_type _StartAddress,unsigned _StackSize,void *_ArgList);
  do_not_use_this_in_wine   void  _endthread(void) ;
  do_not_use_this_in_wine   uintptr_t  _beginthreadex(void *_Security,unsigned _StackSize,_beginthreadex_proc_type _StartAddress,void *_ArgList,unsigned _InitFlag,unsigned *_ThrdAddr);
  do_not_use_this_in_wine   void  _endthreadex(unsigned _Retval) ;

























  typedef void ( *_tls_callback_type)(void*,unsigned long,void*);
  do_not_use_this_in_wine   void  _register_thread_local_exe_atexit_callback(_tls_callback_type callback);

  void   _cexit(void);
  void   _c_exit(void);

  do_not_use_this_in_wine   int  _getpid(void);
  do_not_use_this_in_wine   intptr_t  _cwait(int *_TermStat,intptr_t _ProcHandle,int _Action);
  do_not_use_this_in_wine   intptr_t  _execl(const char *_Filename,const char *_ArgList,...);
  do_not_use_this_in_wine   intptr_t  _execle(const char *_Filename,const char *_ArgList,...);
  do_not_use_this_in_wine   intptr_t  _execlp(const char *_Filename,const char *_ArgList,...);
  do_not_use_this_in_wine   intptr_t  _execlpe(const char *_Filename,const char *_ArgList,...);
  do_not_use_this_in_wine   intptr_t  _execv(const char *_Filename,const char *const *_ArgList);
  do_not_use_this_in_wine   intptr_t  _execve(const char *_Filename,const char *const *_ArgList,const char *const *_Env);
  do_not_use_this_in_wine   intptr_t  _execvp(const char *_Filename,const char *const *_ArgList);
  do_not_use_this_in_wine   intptr_t  _execvpe(const char *_Filename,const char *const *_ArgList,const char *const *_Env);
  do_not_use_this_in_wine   intptr_t  _spawnl(int _Mode,const char *_Filename,const char *_ArgList,...);
  do_not_use_this_in_wine   intptr_t  _spawnle(int _Mode,const char *_Filename,const char *_ArgList,...);
  do_not_use_this_in_wine   intptr_t  _spawnlp(int _Mode,const char *_Filename,const char *_ArgList,...);
  do_not_use_this_in_wine   intptr_t  _spawnlpe(int _Mode,const char *_Filename,const char *_ArgList,...);
















  do_not_use_this_in_wine   intptr_t  _wexecl(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  do_not_use_this_in_wine   intptr_t  _wexecle(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  do_not_use_this_in_wine   intptr_t  _wexeclp(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  do_not_use_this_in_wine   intptr_t  _wexeclpe(const wchar_t *_Filename,const wchar_t *_ArgList,...);
  do_not_use_this_in_wine   intptr_t  _wexecv(const wchar_t *_Filename,const wchar_t *const *_ArgList);
  do_not_use_this_in_wine   intptr_t  _wexecve(const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  do_not_use_this_in_wine   intptr_t  _wexecvp(const wchar_t *_Filename,const wchar_t *const *_ArgList);
  do_not_use_this_in_wine   intptr_t  _wexecvpe(const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);





















  intptr_t  _loaddll(char *_Filename);
  int  _unloaddll(intptr_t _Handle);
  int ( * _getdllprocaddr(intptr_t _Handle,char *_ProcedureName,intptr_t _Ordinal))(void);





























  int  getpid(void) ;



  intptr_t  cwait(int *_TermStat,intptr_t _ProcHandle,int _Action) ;






  intptr_t  execl(const char *_Filename,const char *_ArgList,...) ;
  intptr_t  execle(const char *_Filename,const char *_ArgList,...) ;
  intptr_t  execlp(const char *_Filename,const char *_ArgList,...) ;
  intptr_t  execlpe(const char *_Filename,const char *_ArgList,...) ;

  intptr_t  spawnl(int,const char *_Filename,const char *_ArgList,...) ;
  intptr_t  spawnle(int,const char *_Filename,const char *_ArgList,...) ;
  intptr_t  spawnlp(int,const char *_Filename,const char *_ArgList,...) ;
  intptr_t  spawnlpe(int,const char *_Filename,const char *_ArgList,...) ;










  do_not_use_this_in_wine   intptr_t  execv(const char *_Filename,char *const _ArgList[]) ;
  do_not_use_this_in_wine   intptr_t  execve(const char *_Filename,char *const _ArgList[],char *const _Env[]) ;
  do_not_use_this_in_wine   intptr_t  execvp(const char *_Filename,char *const _ArgList[]) ;
  do_not_use_this_in_wine   intptr_t  execvpe(const char *_Filename,char *const _ArgList[],char *const _Env[]) ;

  do_not_use_this_in_wine   intptr_t  spawnv(int,const char *_Filename,char *const _ArgList[]) ;
  do_not_use_this_in_wine   intptr_t  spawnve(int,const char *_Filename,char *const _ArgList[],char *const _Env[]) ;
  do_not_use_this_in_wine   intptr_t  spawnvp(int,const char *_Filename,char *const _ArgList[]) ;
  do_not_use_this_in_wine   intptr_t  spawnvpe(int,const char *_Filename,char *const _ArgList[],char *const _Env[]) ;








# 47 "include/../tools/tools.h" 2













# 1 "include/windef.h" 1 3






















































































































































































































































































































































































































































# 60 "include/../tools/tools.h" 2

# 1 "include/winbase.h" 1 3






















# 1 "include/winerror.h" 1 3






















# 1 "include/specstrings.h" 1 3
























































































































































































































































































































































# 23 "include/winerror.h" 2




















































































































































































typedef long HRESULT;














































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 23 "include/winbase.h" 2






















# 1 "include/libloaderapi.h" 1 3

























typedef void *DLL_DIRECTORY_COOKIE, **PDLL_DIRECTORY_COOKIE;

DECLSPEC_IMPORT DLL_DIRECTORY_COOKIE  AddDllDirectory(const WCHAR *);
DECLSPEC_IMPORT BOOL  RemoveDllDirectory(DLL_DIRECTORY_COOKIE);
DECLSPEC_IMPORT BOOL  SetDefaultDllDirectories(DWORD);
DECLSPEC_IMPORT INT  FindStringOrdinal(DWORD, const WCHAR *, INT, const WCHAR *, INT, BOOL);






# 45 "include/winbase.h" 2

# 1 "include/processthreadsapi.h" 1 3

























typedef enum _THREAD_INFORMATION_CLASS
{
    ThreadMemoryPriority,
    ThreadAbsoluteCpuPriority,
    ThreadDynamicCodePolicy,
    ThreadPowerThrottling,
    ThreadInformationClassMax
} THREAD_INFORMATION_CLASS;

typedef struct _MEMORY_PRIORITY_INFORMATION
{
    ULONG MemoryPriority;
} MEMORY_PRIORITY_INFORMATION, *PMEMORY_PRIORITY_INFORMATION;

typedef struct _THREAD_POWER_THROTTLING_STATE
{
    ULONG Version;
    ULONG ControlMask;
    ULONG StateMask;
} THREAD_POWER_THROTTLING_STATE;

DECLSPEC_IMPORT HRESULT  GetThreadDescription(HANDLE,PWSTR *);
DECLSPEC_IMPORT HRESULT  SetThreadDescription(HANDLE,PCWSTR);
DECLSPEC_IMPORT BOOL  SetThreadInformation(HANDLE,THREAD_INFORMATION_CLASS,LPVOID,DWORD);






# 46 "include/winbase.h" 2

# 1 "include/synchapi.h" 1 3

























BOOL  WaitOnAddress(void*, void*, SIZE_T, DWORD);
void  WakeByAddressAll(void*);
void  WakeByAddressSingle(void*);






# 47 "include/winbase.h" 2

# 1 "include/threadpoolapiset.h" 1 3

























typedef void ( *PTP_WIN32_IO_CALLBACK)(PTP_CALLBACK_INSTANCE,PVOID,PVOID,ULONG,ULONG_PTR,PTP_IO);

DECLSPEC_IMPORT void         CancelThreadpoolIo(TP_IO*);
DECLSPEC_IMPORT void         CloseThreadpool(PTP_POOL);
DECLSPEC_IMPORT void         CloseThreadpoolCleanupGroup(PTP_CLEANUP_GROUP);
DECLSPEC_IMPORT void         CloseThreadpoolCleanupGroupMembers(PTP_CLEANUP_GROUP,BOOL,PVOID);
DECLSPEC_IMPORT void         CloseThreadpoolIo(TP_IO*);
DECLSPEC_IMPORT void         CloseThreadpoolTimer(PTP_TIMER);
DECLSPEC_IMPORT void         CloseThreadpoolWait(PTP_WAIT);
DECLSPEC_IMPORT void         CloseThreadpoolWork(PTP_WORK);
DECLSPEC_IMPORT TP_POOL*     CreateThreadpool(void*) __WINE_DEALLOC(CloseThreadpool);
DECLSPEC_IMPORT TP_CLEANUP_GROUP*  CreateThreadpoolCleanupGroup(void)
                                    __WINE_DEALLOC(CloseThreadpoolCleanupGroup);
DECLSPEC_IMPORT TP_IO*       CreateThreadpoolIo(HANDLE,PTP_WIN32_IO_CALLBACK,void*,TP_CALLBACK_ENVIRON*)
                              __WINE_DEALLOC(CloseThreadpoolIo);
DECLSPEC_IMPORT TP_TIMER*    CreateThreadpoolTimer(PTP_TIMER_CALLBACK,void*,TP_CALLBACK_ENVIRON*)
                              __WINE_DEALLOC(CloseThreadpoolTimer);
DECLSPEC_IMPORT TP_WAIT*     CreateThreadpoolWait(PTP_WAIT_CALLBACK,void*,TP_CALLBACK_ENVIRON*)
                              __WINE_DEALLOC(CloseThreadpoolWait);
DECLSPEC_IMPORT TP_WORK*     CreateThreadpoolWork(PTP_WORK_CALLBACK,void*,TP_CALLBACK_ENVIRON*)
                              __WINE_DEALLOC(CloseThreadpoolWork);
DECLSPEC_IMPORT void         DisassociateCurrentThreadFromCallback(PTP_CALLBACK_INSTANCE);
DECLSPEC_IMPORT void         FreeLibraryWhenCallbackReturns(PTP_CALLBACK_INSTANCE,HMODULE);
DECLSPEC_IMPORT BOOL         IsThreadpoolTimerSet(PTP_TIMER);
DECLSPEC_IMPORT void         LeaveCriticalSectionWhenCallbackReturns(PTP_CALLBACK_INSTANCE,RTL_CRITICAL_SECTION*);
DECLSPEC_IMPORT BOOL         QueryThreadpoolStackInformation(PTP_POOL,PTP_POOL_STACK_INFORMATION);
DECLSPEC_IMPORT void         ReleaseMutexWhenCallbackReturns(PTP_CALLBACK_INSTANCE,HANDLE);
DECLSPEC_IMPORT void         ReleaseSemaphoreWhenCallbackReturns(PTP_CALLBACK_INSTANCE,HANDLE,DWORD);
DECLSPEC_IMPORT void         SetEventWhenCallbackReturns(PTP_CALLBACK_INSTANCE,HANDLE);
DECLSPEC_IMPORT BOOL         SetThreadpoolStackInformation(PTP_POOL,PTP_POOL_STACK_INFORMATION);
DECLSPEC_IMPORT void         SetThreadpoolThreadMaximum(PTP_POOL,DWORD);
DECLSPEC_IMPORT BOOL         SetThreadpoolThreadMinimum(PTP_POOL,DWORD);
DECLSPEC_IMPORT void         SetThreadpoolTimer(PTP_TIMER,FILETIME*,DWORD,DWORD);
DECLSPEC_IMPORT void         SetThreadpoolWait(PTP_WAIT,HANDLE,FILETIME *);
DECLSPEC_IMPORT void         StartThreadpoolIo(TP_IO*);
DECLSPEC_IMPORT void         SubmitThreadpoolWork(PTP_WORK);
DECLSPEC_IMPORT BOOL         TrySubmitThreadpoolCallback(PTP_SIMPLE_CALLBACK,void*,TP_CALLBACK_ENVIRON*);
DECLSPEC_IMPORT void         WaitForThreadpoolIoCallbacks(TP_IO*,BOOL);
DECLSPEC_IMPORT void         WaitForThreadpoolTimerCallbacks(PTP_TIMER,BOOL);
DECLSPEC_IMPORT void         WaitForThreadpoolWaitCallbacks(PTP_WAIT,BOOL);
DECLSPEC_IMPORT void         WaitForThreadpoolWorkCallbacks(PTP_WORK,BOOL);






# 48 "include/winbase.h" 2

# 1 "include/memoryapi.h" 1 3
















typedef enum WIN32_MEMORY_INFORMATION_CLASS
{
    MemoryRegionInfo
} WIN32_MEMORY_INFORMATION_CLASS;

typedef struct WIN32_MEMORY_REGION_INFORMATION
{
    PVOID AllocationBase;
    ULONG AllocationProtect;
    union
    {
        ULONG Flags;
        struct
        {
            ULONG Private : 1;
            ULONG MappedDataFile : 1;
            ULONG MappedImage : 1;
            ULONG MappedPageFile : 1;
            ULONG MappedPhysical : 1;
            ULONG DirectMapped : 1;
            ULONG Reserved : 26;
        } ;
    } ;
    SIZE_T RegionSize;
    SIZE_T CommitSize;
} WIN32_MEMORY_REGION_INFORMATION;

DWORD  DiscardVirtualMemory(void *addr, SIZE_T size);
BOOL  QueryVirtualMemoryInformation(HANDLE process,const void *addr,
        WIN32_MEMORY_INFORMATION_CLASS info_class, void *info, SIZE_T size, SIZE_T *ret_size);
# 49 "include/winbase.h" 2

# 1 "include/realtimeapiset.h" 1 3

























DECLSPEC_IMPORT HRESULT  ConvertAuxiliaryCounterToPerformanceCounter(ULONGLONG,ULONGLONG*,ULONGLONG*);
DECLSPEC_IMPORT HRESULT  ConvertPerformanceCounterToAuxiliaryCounter(ULONGLONG,ULONGLONG*,ULONGLONG*);
DECLSPEC_IMPORT HRESULT  QueryAuxiliaryCounterFrequency(ULONGLONG*);
DECLSPEC_IMPORT BOOL     QueryIdleProcessorCycleTime(ULONG*,ULONG64*);
DECLSPEC_IMPORT BOOL     QueryIdleProcessorCycleTimeEx(USHORT,ULONG*,ULONG64*);
DECLSPEC_IMPORT VOID     QueryInterruptTime(ULONGLONG*);
DECLSPEC_IMPORT VOID     QueryInterruptTimePrecise(ULONGLONG*);
DECLSPEC_IMPORT BOOL     QueryProcessCycleTime(HANDLE,ULONG64*);
DECLSPEC_IMPORT BOOL     QueryThreadCycleTime(HANDLE,ULONG64*);
DECLSPEC_IMPORT BOOL     QueryUnbiasedInterruptTime(ULONGLONG*);
DECLSPEC_IMPORT VOID     QueryUnbiasedInterruptTimePrecise(ULONGLONG*);






# 50 "include/winbase.h" 2

  



typedef DWORD ( *LPTHREAD_START_ROUTINE)(LPVOID);

typedef VOID ( *PFIBER_START_ROUTINE)( LPVOID lpFiberParameter );
typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;



typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;

typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;



typedef RTL_SRWLOCK SRWLOCK;
typedef PRTL_SRWLOCK PSRWLOCK;



typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK;



typedef RTL_CONDITION_VARIABLE CONDITION_VARIABLE, *PCONDITION_VARIABLE;











typedef struct _EXCEPTION_DEBUG_INFO {
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
} EXCEPTION_DEBUG_INFO;

typedef struct _CREATE_THREAD_DEBUG_INFO {
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
} CREATE_THREAD_DEBUG_INFO;

typedef struct _CREATE_PROCESS_DEBUG_INFO {
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
} CREATE_PROCESS_DEBUG_INFO;

typedef struct _EXIT_THREAD_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_THREAD_DEBUG_INFO;

typedef struct _EXIT_PROCESS_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_PROCESS_DEBUG_INFO;

typedef struct _LOAD_DLL_DEBUG_INFO {
    HANDLE hFile;
    LPVOID   lpBaseOfDll;
    DWORD    dwDebugInfoFileOffset;
    DWORD    nDebugInfoSize;
    LPVOID   lpImageName;
    WORD     fUnicode;
} LOAD_DLL_DEBUG_INFO;

typedef struct _UNLOAD_DLL_DEBUG_INFO {
    LPVOID lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO;

typedef struct _OUTPUT_DEBUG_STRING_INFO {
    LPSTR lpDebugStringData;
    WORD  fUnicode;
    WORD  nDebugStringLength;
} OUTPUT_DEBUG_STRING_INFO;

typedef struct _RIP_INFO {
    DWORD dwError;
    DWORD dwType;
} RIP_INFO;

typedef struct _DEBUG_EVENT {
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union {
        EXCEPTION_DEBUG_INFO      Exception;
        CREATE_THREAD_DEBUG_INFO  CreateThread;
        CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
        EXIT_THREAD_DEBUG_INFO    ExitThread;
        EXIT_PROCESS_DEBUG_INFO   ExitProcess;
        LOAD_DLL_DEBUG_INFO       LoadDll;
        UNLOAD_DLL_DEBUG_INFO     UnloadDll;
        OUTPUT_DEBUG_STRING_INFO  DebugString;
        RIP_INFO                  RipInfo;
    } u;
} DEBUG_EVENT, *LPDEBUG_EVENT;




typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;

typedef LONG ( *PTOP_LEVEL_EXCEPTION_FILTER)(PEXCEPTION_POINTERS);
typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;


typedef struct _OFSTRUCT
{
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
} OFSTRUCT, *POFSTRUCT, *LPOFSTRUCT;


























































typedef struct _SECURITY_ATTRIBUTES
{
    DWORD   nLength;
    LPVOID  lpSecurityDescriptor;
    BOOL  bInheritHandle;
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;


# 1 "include/namespaceapi.h" 1 3



























DECLSPEC_IMPORT BOOL     AddSIDToBoundaryDescriptor(HANDLE*,PSID);
DECLSPEC_IMPORT BOOLEAN  ClosePrivateNamespace(HANDLE,ULONG);
DECLSPEC_IMPORT HANDLE   CreateBoundaryDescriptorW(LPCWSTR,ULONG);
DECLSPEC_IMPORT HANDLE   CreatePrivateNamespaceW(LPSECURITY_ATTRIBUTES,LPVOID,LPCWSTR);
DECLSPEC_IMPORT void     DeleteBoundaryDescriptor(HANDLE);
DECLSPEC_IMPORT HANDLE   OpenPrivateNamespaceW(LPVOID,LPCWSTR);






# 251 "include/winbase.h" 2












typedef struct _WIN32_FIND_DATAA
{
    DWORD     dwFileAttributes;
    FILETIME  ftCreationTime;
    FILETIME  ftLastAccessTime;
    FILETIME  ftLastWriteTime;
    DWORD     nFileSizeHigh;
    DWORD     nFileSizeLow;
    DWORD     dwReserved0;
    DWORD     dwReserved1;
    CHAR      cFileName[260];
    CHAR      cAlternateFileName[14];
} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;

typedef struct _WIN32_FIND_DATAW
{
    DWORD     dwFileAttributes;
    FILETIME  ftCreationTime;
    FILETIME  ftLastAccessTime;
    FILETIME  ftLastWriteTime;
    DWORD     nFileSizeHigh;
    DWORD     nFileSizeLow;
    DWORD     dwReserved0;
    DWORD     dwReserved1;
    WCHAR     cFileName[260];
    WCHAR     cAlternateFileName[14];
} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;





typedef enum _FINDEX_INFO_LEVELS
{
	FindExInfoStandard,
	FindExInfoBasic,
	FindExInfoMaxInfoLevel
} FINDEX_INFO_LEVELS;




typedef enum _FINDEX_SEARCH_OPS
{
	FindExSearchNameMatch,
	FindExSearchLimitToDirectories,
	FindExSearchLimitToDevices,
	FindExSearchMaxSearchOp
} FINDEX_SEARCH_OPS;

typedef struct _PROCESS_HEAP_ENTRY
{
    LPVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    union {
        struct {
            HANDLE hMem;
            DWORD dwReserved[3];
        } Block;
        struct {
            DWORD dwCommittedSize;
            DWORD dwUnCommittedSize;
            LPVOID lpFirstBlock;
            LPVOID lpLastBlock;
        } Region;
    } ;
} PROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY;













































































































































































typedef struct tagMEMORYSTATUS
{
    DWORD    dwLength;
    DWORD    dwMemoryLoad;
    SIZE_T   dwTotalPhys;
    SIZE_T   dwAvailPhys;
    SIZE_T   dwTotalPageFile;
    SIZE_T   dwAvailPageFile;
    SIZE_T   dwTotalVirtual;
    SIZE_T   dwAvailVirtual;
} MEMORYSTATUS, *LPMEMORYSTATUS;


# 1 "include/pshpack8.h" 1 3



























     













































































#pragma pack(8)


# 519 "include/winbase.h" 2
typedef struct tagMEMORYSTATUSEX {
  DWORD dwLength;
  DWORD dwMemoryLoad;
  DWORDLONG  ullTotalPhys;
  DWORDLONG  ullAvailPhys;
  DWORDLONG  ullTotalPageFile;
  DWORDLONG  ullAvailPageFile;
  DWORDLONG  ullTotalVirtual;
  DWORDLONG  ullAvailVirtual;
  DWORDLONG  ullAvailExtendedVirtual;
} MEMORYSTATUSEX, *LPMEMORYSTATUSEX;

# 1 "include/poppack.h" 1 3





























































































































































































































































#pragma pack()










# 531 "include/winbase.h" 2

typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {
    LowMemoryResourceNotification,
    HighMemoryResourceNotification
} MEMORY_RESOURCE_NOTIFICATION_TYPE;



typedef struct _SYSTEMTIME{
        WORD wYear;
        WORD wMonth;
        WORD wDayOfWeek;
        WORD wDay;
        WORD wHour;
        WORD wMinute;
        WORD wSecond;
        WORD wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;



# 1 "include/timezoneapi.h" 1 3

























typedef struct _TIME_DYNAMIC_ZONE_INFORMATION
{
    LONG       Bias;
    WCHAR      StandardName[32];
    SYSTEMTIME StandardDate;
    LONG       StandardBias;
    WCHAR      DaylightName[32];
    SYSTEMTIME DaylightDate;
    LONG       DaylightBias;
    WCHAR      TimeZoneKeyName[128];
    BOOLEAN    DynamicDaylightTimeDisabled;
} DYNAMIC_TIME_ZONE_INFORMATION, *PDYNAMIC_TIME_ZONE_INFORMATION;

typedef struct _TIME_ZONE_INFORMATION
{
    LONG       Bias;
    WCHAR      StandardName[32];
    SYSTEMTIME StandardDate;
    LONG       StandardBias;
    WCHAR      DaylightName[32];
    SYSTEMTIME DaylightDate;
    LONG       DaylightBias;
} TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION;






DECLSPEC_IMPORT DWORD  EnumDynamicTimeZoneInformation(DWORD, DYNAMIC_TIME_ZONE_INFORMATION *);
DECLSPEC_IMPORT DWORD  GetDynamicTimeZoneInformation(PDYNAMIC_TIME_ZONE_INFORMATION);
DECLSPEC_IMPORT DWORD  GetDynamicTimeZoneInformationEffectiveYears(const DYNAMIC_TIME_ZONE_INFORMATION*,DWORD*,DWORD*);
DECLSPEC_IMPORT DWORD  GetTimeZoneInformation(LPTIME_ZONE_INFORMATION);
DECLSPEC_IMPORT BOOL   GetTimeZoneInformationForYear(USHORT,DYNAMIC_TIME_ZONE_INFORMATION*,TIME_ZONE_INFORMATION*);
DECLSPEC_IMPORT BOOL   SetDynamicTimeZoneInformation(const DYNAMIC_TIME_ZONE_INFORMATION*);
DECLSPEC_IMPORT BOOL   SetTimeZoneInformation(const TIME_ZONE_INFORMATION *);
DECLSPEC_IMPORT BOOL   SystemTimeToTzSpecificLocalTime(const TIME_ZONE_INFORMATION*,const SYSTEMTIME*,LPSYSTEMTIME);
DECLSPEC_IMPORT BOOL   SystemTimeToTzSpecificLocalTimeEx(const DYNAMIC_TIME_ZONE_INFORMATION*,const SYSTEMTIME*,LPSYSTEMTIME);
DECLSPEC_IMPORT BOOL   TzSpecificLocalTimeToSystemTime(const TIME_ZONE_INFORMATION*,const SYSTEMTIME*,LPSYSTEMTIME);
DECLSPEC_IMPORT BOOL   TzSpecificLocalTimeToSystemTimeEx(const DYNAMIC_TIME_ZONE_INFORMATION*,const SYSTEMTIME*,LPSYSTEMTIME);






# 552 "include/winbase.h" 2



typedef struct _OVERLAPPED {
        ULONG_PTR Internal;
        ULONG_PTR InternalHigh;
        union {
            struct {
                DWORD Offset;
                DWORD OffsetHigh;
            } ;
            PVOID Pointer;
        } ;
        HANDLE hEvent;
} OVERLAPPED, *LPOVERLAPPED;

typedef struct _OVERLAPPED_ENTRY {
    ULONG_PTR lpCompletionKey;
    LPOVERLAPPED lpOverlapped;
    ULONG_PTR Internal;
    DWORD dwNumberOfBytesTransferred;
} OVERLAPPED_ENTRY, *LPOVERLAPPED_ENTRY;

typedef VOID ( *LPOVERLAPPED_COMPLETION_ROUTINE)(DWORD,DWORD,LPOVERLAPPED);
















typedef struct _STARTUPINFOA{
        DWORD cb;		
        LPSTR lpReserved;	
        LPSTR lpDesktop;	
        LPSTR lpTitle;		
        DWORD dwX;		
        DWORD dwY;		
        DWORD dwXSize;		
        DWORD dwYSize;		
        DWORD dwXCountChars;	
        DWORD dwYCountChars;	
        DWORD dwFillAttribute;	
        DWORD dwFlags;		
        WORD wShowWindow;	
        WORD cbReserved2;	
        BYTE *lpReserved2;	
        HANDLE hStdInput;	
        HANDLE hStdOutput;	
        HANDLE hStdError;	
} STARTUPINFOA, *LPSTARTUPINFOA;

typedef struct _STARTUPINFOW{
        DWORD cb;
        LPWSTR lpReserved;
        LPWSTR lpDesktop;
        LPWSTR lpTitle;
        DWORD dwX;
        DWORD dwY;
        DWORD dwXSize;
        DWORD dwYSize;
        DWORD dwXCountChars;
        DWORD dwYCountChars;
        DWORD dwFillAttribute;
        DWORD dwFlags;
        WORD wShowWindow;
        WORD cbReserved2;
        BYTE *lpReserved2;
        HANDLE hStdInput;
        HANDLE hStdOutput;
        HANDLE hStdError;
} STARTUPINFOW, *LPSTARTUPINFOW;




typedef struct _PROCESS_INFORMATION{
	HANDLE	hProcess;
	HANDLE	hThread;
	DWORD		dwProcessId;
	DWORD		dwThreadId;
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;


























































typedef DWORD ( *PFE_EXPORT_FUNC)(PBYTE,PVOID,ULONG);
typedef DWORD ( *PFE_IMPORT_FUNC)(PBYTE,PVOID,ULONG);









































typedef struct _BY_HANDLE_FILE_INFORMATION
{
  DWORD dwFileAttributes;
  FILETIME ftCreationTime;
  FILETIME ftLastAccessTime;
  FILETIME ftLastWriteTime;
  DWORD dwVolumeSerialNumber;
  DWORD nFileSizeHigh;
  DWORD nFileSizeLow;
  DWORD nNumberOfLinks;
  DWORD nFileIndexHigh;
  DWORD nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION ;

typedef enum _FILE_ID_TYPE {
    FileIdType,
    ObjectIdType,
    ExtendedFileIdType,
    MaximumFileIdType
} FILE_ID_TYPE, *PFILE_ID_TYPE;

typedef struct _FILE_ID_DESCRIPTOR {
    DWORD        dwSize;
    FILE_ID_TYPE Type;
    union {
        LARGE_INTEGER FileId;
        GUID          ObjectId;
    } ;
} FILE_ID_DESCRIPTOR, *LPFILE_ID_DESCRIPTOR;

typedef enum _FILE_INFO_BY_HANDLE_CLASS {
    FileBasicInfo,
    FileStandardInfo,
    FileNameInfo,
    FileRenameInfo,
    FileDispositionInfo,
    FileAllocationInfo,
    FileEndOfFileInfo,
    FileStreamInfo,
    FileCompressionInfo,
    FileAttributeTagInfo,
    FileIdBothDirectoryInfo,
    FileIdBothDirectoryRestartInfo,
    FileIoPriorityHintInfo,
    FileRemoteProtocolInfo,
    FileFullDirectoryInfo,
    FileFullDirectoryRestartInfo,
    FileStorageInfo,
    FileAlignmentInfo,
    FileIdInfo,
    FileIdExtdDirectoryInfo,
    FileIdExtdDirectoryRestartInfo,
    FileDispositionInfoEx,
    FileRenameInfoEx,
    FileCaseSensitiveInfo,
    FileNormalizedNameInfo,
    MaximumFileInfoByHandlesClass
} FILE_INFO_BY_HANDLE_CLASS, *PFILE_INFO_BY_HANDLE_CLASS;

typedef struct _FILE_ID_BOTH_DIR_INFO {
    DWORD         NextEntryOffset;
    DWORD         FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    DWORD         FileAttributes;
    DWORD         FileNameLength;
    DWORD         EaSize;
    CCHAR         ShortNameLength;
    WCHAR         ShortName[12];
    LARGE_INTEGER FileId;
    WCHAR         FileName[1];
} FILE_ID_BOTH_DIR_INFO, *PFILE_ID_BOTH_DIR_INFO;

typedef struct _FILE_BASIC_INFO {
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    DWORD         FileAttributes;
} FILE_BASIC_INFO, *PFILE_BASIC_INFO;

typedef struct _FILE_STANDARD_INFO {
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    DWORD         NumberOfLinks;
    BOOLEAN       DeletePending;
    BOOLEAN       Directory;
} FILE_STANDARD_INFO, *PFILE_STANDARD_INFO;

typedef struct _FILE_NAME_INFO {
    DWORD         FileNameLength;
    WCHAR         FileName[1];
} FILE_NAME_INFO, *PFILE_NAME_INFO;

typedef enum _PRIORITY_HINT {
    IoPriorityHintVeryLow,
    IoPriorityHintLow,
    IoPriorityHintNormal,
    MaximumIoPriorityHintType
} PRIORITY_HINT;

typedef struct _FILE_IO_PRIORITY_HINT_INFO {
    PRIORITY_HINT PriorityHint;
} FILE_IO_PRIORITY_HINT_INFO;

typedef struct _FILE_ALLOCATION_INFO {
    LARGE_INTEGER AllocationSize;
} FILE_ALLOCATION_INFO, *PFILE_ALLOCATION_INFO;

typedef struct _FILE_DISPOSITION_INFO {
    BOOLEAN DeleteFile;
} FILE_DISPOSITION_INFO, *PFILE_DISPOSITION_INFO;

typedef struct _FILE_END_OF_FILE_INFO {
    LARGE_INTEGER EndOfFile;
} FILE_END_OF_FILE_INFO, *PFILE_END_OF_FILE_INFO;

typedef struct _FILE_RENAME_INFO {
    union {
        BOOLEAN ReplaceIfExists;
        DWORD Flags;
    } ;
    HANDLE RootDirectory;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_RENAME_INFO, *PFILE_RENAME_INFO;

typedef struct _FILE_ATTRIBUTE_TAG_INFO {
    DWORD FileAttributes;
    DWORD ReparseTag;
} FILE_ATTRIBUTE_TAG_INFO, *PFILE_ATTRIBUTE_TAG_INFO;

typedef struct _FILE_COMPRESSION_INFO {
    LARGE_INTEGER CompressedFileSize;
    WORD CompressionFormat;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved[3];
} FILE_COMPRESSION_INFO, *PFILE_COMPRESSION_INFO;

typedef struct _FILE_REMOTE_PROTOCOL_INFO {
    USHORT StructureVersion;
    USHORT StructureSize;
    ULONG Protocol;
    USHORT ProtocolMajorVersion;
    USHORT ProtocolMinorVersion;
    USHORT ProtocolRevision;
    USHORT Reserved;
    ULONG Flags;
    struct {
        ULONG Reserved[8];
    } GenericReserved;
    struct {
        ULONG Reserved[16];
    } ProtocolSpecificReserved;
} FILE_REMOTE_PROTOCOL_INFO, *PFILE_REMOTE_PROTOCOL_INFO;

































typedef struct _SYSTEM_POWER_STATUS
{
  BYTE    ACLineStatus;
  BYTE    BatteryFlag;
  BYTE    BatteryLifePercent;
  BYTE    SystemStatusFlag;
  DWORD   BatteryLifeTime;
  DWORD   BatteryFullLifeTime;
} SYSTEM_POWER_STATUS, *LPSYSTEM_POWER_STATUS;



















typedef struct _SYSTEM_INFO
{
    union {
	DWORD	dwOemId; 
	struct {
		WORD wProcessorArchitecture;
		WORD wReserved;
	} ;
    } ;
    DWORD	dwPageSize;
    LPVOID	lpMinimumApplicationAddress;
    LPVOID	lpMaximumApplicationAddress;
    DWORD_PTR	dwActiveProcessorMask;
    DWORD	dwNumberOfProcessors;
    DWORD	dwProcessorType;
    DWORD	dwAllocationGranularity;
    WORD	wProcessorLevel;
    WORD	wProcessorRevision;
} SYSTEM_INFO, *LPSYSTEM_INFO;

typedef BOOL ( *ENUMRESTYPEPROCA)(HMODULE,LPSTR,LONG_PTR);
typedef BOOL ( *ENUMRESTYPEPROCW)(HMODULE,LPWSTR,LONG_PTR);
typedef BOOL ( *ENUMRESNAMEPROCA)(HMODULE,LPCSTR,LPSTR,LONG_PTR);
typedef BOOL ( *ENUMRESNAMEPROCW)(HMODULE,LPCWSTR,LPWSTR,LONG_PTR);
typedef BOOL ( *ENUMRESLANGPROCA)(HMODULE,LPCSTR,LPCSTR,WORD,LONG_PTR);
typedef BOOL ( *ENUMRESLANGPROCW)(HMODULE,LPCWSTR,LPCWSTR,WORD,LONG_PTR);





























typedef PLDT_ENTRY LPLDT_ENTRY;

typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard
} GET_FILEEX_INFO_LEVELS;

typedef struct _WIN32_FILE_ATTRIBUTES_DATA {
    DWORD    dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD    nFileSizeHigh;
    DWORD    nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;





typedef DWORD ( *LPPROGRESS_ROUTINE)(LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER,
                                           LARGE_INTEGER, DWORD, DWORD, HANDLE,
                                           HANDLE, LPVOID);

typedef DWORD ( *APPLICATION_RECOVERY_CALLBACK)(PVOID);











typedef enum _COPYFILE2_MESSAGE_TYPE
{
    COPYFILE2_CALLBACK_NONE = 0,
    COPYFILE2_CALLBACK_CHUNK_STARTED,
    COPYFILE2_CALLBACK_CHUNK_FINISHED,
    COPYFILE2_CALLBACK_STREAM_STARTED,
    COPYFILE2_CALLBACK_STREAM_FINISHED,
    COPYFILE2_CALLBACK_POLL_CONTINUE,
    COPYFILE2_CALLBACK_ERROR,
    COPYFILE2_CALLBACK_MAX,
} COPYFILE2_MESSAGE_TYPE;

typedef enum _COPYFILE2_MESSAGE_ACTION
{
    COPYFILE2_PROGRESS_CONTINUE = 0,
    COPYFILE2_PROGRESS_CANCEL,
    COPYFILE2_PROGRESS_STOP,
    COPYFILE2_PROGRESS_QUIET,
    COPYFILE2_PROGRESS_PAUSE,
} COPYFILE2_MESSAGE_ACTION;

typedef enum _COPYFILE2_COPY_PHASE
{
    COPYFILE2_PHASE_NONE = 0,
    COPYFILE2_PHASE_PREPARE_SOURCE,
    COPYFILE2_PHASE_PREPARE_DEST,
    COPYFILE2_PHASE_READ_SOURCE,
    COPYFILE2_PHASE_WRITE_DESTINATION,
    COPYFILE2_PHASE_SERVER_COPY,
    COPYFILE2_PHASE_NAMEGRAFT_COPY,
    COPYFILE2_PHASE_MAX,
} COPYFILE2_COPY_PHASE;

typedef struct COPYFILE2_MESSAGE
{
    COPYFILE2_MESSAGE_TYPE Type;
    DWORD                  dwPadding;
    union
    {
        struct
        {
            DWORD          dwStreamNumber;
            DWORD          dwReserved;
            HANDLE         hSourceFile;
            HANDLE         hDestinationFile;
            ULARGE_INTEGER uliChunkNumber;
            ULARGE_INTEGER uliChunkSize;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliTotalFileSize;
        } ChunkStarted;
        struct
        {
            DWORD          dwStreamNumber;
            DWORD          dwFlags;
            HANDLE         hSourceFile;
            HANDLE         hDestinationFile;
            ULARGE_INTEGER uliChunkNumber;
            ULARGE_INTEGER uliChunkSize;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliStreamBytesTransferred;
            ULARGE_INTEGER uliTotalFileSize;
            ULARGE_INTEGER uliTotalBytesTransferred;
        } ChunkFinished;
        struct
        {
            DWORD          dwStreamNumber;
            DWORD          dwReserved;
            HANDLE         hSourceFile;
            HANDLE         hDestinationFile;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliTotalFileSize;
        } StreamStarted;
        struct
        {
            DWORD          dwStreamNumber;
            DWORD          dwReserved;
            HANDLE         hSourceFile;
            HANDLE         hDestinationFile;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliStreamBytesTransferred;
            ULARGE_INTEGER uliTotalFileSize;
            ULARGE_INTEGER uliTotalBytesTransferred;
        } StreamFinished;
        struct
        {
            DWORD dwReserved;
        } PollContinue;
        struct
        {
            COPYFILE2_COPY_PHASE CopyPhase;
            DWORD                dwStreamNumber;
            HRESULT              hrFailure;
            DWORD                dwReserved;
            ULARGE_INTEGER       uliChunkNumber;
            ULARGE_INTEGER       uliStreamSize;
            ULARGE_INTEGER       uliStreamBytesTransferred;
            ULARGE_INTEGER       uliTotalFileSize;
            ULARGE_INTEGER       uliTotalBytesTransferred;
        } Error;
    } Info;
} COPYFILE2_MESSAGE;

typedef COPYFILE2_MESSAGE_ACTION ( *PCOPYFILE2_PROGRESS_ROUTINE)(const COPYFILE2_MESSAGE*,PVOID);

typedef struct COPYFILE2_EXTENDED_PARAMETERS
{
    DWORD                        dwSize;
    DWORD                        dwCopyFlags;
    BOOL                        *pfCancel;
    PCOPYFILE2_PROGRESS_ROUTINE  pProgressRoutine;
    PVOID                        pvCallbackContext;
} COPYFILE2_EXTENDED_PARAMETERS;



















































































































typedef struct tagACTCTXA {
    ULONG   cbSize;
    DWORD   dwFlags;
    LPCSTR  lpSource;
    USHORT  wProcessorArchitecture;
    LANGID  wLangId;
    LPCSTR  lpAssemblyDirectory;
    LPCSTR  lpResourceName;
    LPCSTR  lpApplicationName;
    HMODULE hModule;
} ACTCTXA, *PACTCTXA;

typedef struct tagACTCTXW {
    ULONG   cbSize;
    DWORD   dwFlags;
    LPCWSTR lpSource;
    USHORT  wProcessorArchitecture;
    LANGID  wLangId;
    LPCWSTR lpAssemblyDirectory;
    LPCWSTR lpResourceName;
    LPCWSTR lpApplicationName;
    HMODULE hModule;
} ACTCTXW, *PACTCTXW;




typedef const ACTCTXA *PCACTCTXA;
typedef const ACTCTXW *PCACTCTXW;


typedef struct tagACTCTX_SECTION_KEYED_DATA_2600 {
    ULONG  cbSize;
    ULONG  ulDataFormatVersion;
    PVOID  lpData;
    ULONG  ulLength;
    PVOID  lpSectionGlobalData;
    ULONG  ulSectionGlobalDataLength;
    PVOID  lpSectionBase;
    ULONG  ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG  ulAssemblyRosterIndex;
} ACTCTX_SECTION_KEYED_DATA_2600, *PACTCTX_SECTION_KEYED_DATA_2600;
typedef const ACTCTX_SECTION_KEYED_DATA_2600 *PCACTCTX_SECTION_KEYED_DATA_2600;

typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
    PVOID lpInformation;
    PVOID lpSectionBase;
    ULONG ulSectionLength;
    PVOID lpSectionGlobalDataBase;
    ULONG ulSectionGlobalDataLength;
} ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA, *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

typedef struct tagACTCTX_SECTION_KEYED_DATA {
    ULONG  cbSize;
    ULONG  ulDataFormatVersion;
    PVOID  lpData;
    ULONG  ulLength;
    PVOID  lpSectionGlobalData;
    ULONG  ulSectionGlobalDataLength;
    PVOID  lpSectionBase;
    ULONG  ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG  ulAssemblyRosterIndex;

    
    ULONG ulFlags;
    ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
} ACTCTX_SECTION_KEYED_DATA, *PACTCTX_SECTION_KEYED_DATA;
typedef const ACTCTX_SECTION_KEYED_DATA *PCACTCTX_SECTION_KEYED_DATA;

typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
    HANDLE hActCtx;
    DWORD  dwFlags;
} ACTIVATION_CONTEXT_BASIC_INFORMATION, *PACTIVATION_CONTEXT_BASIC_INFORMATION;

typedef BOOL ( *PQUERYACTCTXW_FUNC)(DWORD,HANDLE,PVOID,ULONG,PVOID,SIZE_T,SIZE_T *);

typedef struct tagCOMSTAT
{
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
} COMSTAT, *LPCOMSTAT;

typedef struct tagDCB
{
    DWORD DCBlength;
    DWORD BaudRate;
    unsigned fBinary               :1;
    unsigned fParity               :1;
    unsigned fOutxCtsFlow          :1;
    unsigned fOutxDsrFlow          :1;
    unsigned fDtrControl           :2;
    unsigned fDsrSensitivity       :1;
    unsigned fTXContinueOnXoff     :1;
    unsigned fOutX                 :1;
    unsigned fInX                  :1;
    unsigned fErrorChar            :1;
    unsigned fNull                 :1;
    unsigned fRtsControl           :2;
    unsigned fAbortOnError         :1;
    unsigned fDummy2               :17;
    WORD wReserved;
    WORD XonLim;
    WORD XoffLim;
    BYTE ByteSize;
    BYTE Parity;
    BYTE StopBits;
    char XonChar;
    char XoffChar;
    char ErrorChar;
    char EofChar;
    char EvtChar;
    WORD wReserved1;
} DCB, *LPDCB;

typedef struct tagCOMMCONFIG {
	DWORD dwSize;
	WORD  wVersion;
	WORD  wReserved;
	DCB   dcb;
	DWORD dwProviderSubType;
	DWORD dwProviderOffset;
	DWORD dwProviderSize;
	WCHAR wcProviderData[1];
} COMMCONFIG, *LPCOMMCONFIG;

typedef struct tagCOMMPROP {
	WORD  wPacketLength;
	WORD  wPacketVersion;
	DWORD dwServiceMask;
	DWORD dwReserved1;
	DWORD dwMaxTxQueue;
	DWORD dwMaxRxQueue;
	DWORD dwMaxBaud;
	DWORD dwProvSubType;
	DWORD dwProvCapabilities;
	DWORD dwSettableParams;
	DWORD dwSettableBaud;
	WORD  wSettableData;
	WORD  wSettableStopParity;
	DWORD dwCurrentTxQueue;
	DWORD dwCurrentRxQueue;
	DWORD dwProvSpec1;
	DWORD dwProvSpec2;
	WCHAR wcProvChar[1];
} COMMPROP, *LPCOMMPROP;











































































typedef struct tagCOMMTIMEOUTS {
	DWORD	ReadIntervalTimeout;
	DWORD	ReadTotalTimeoutMultiplier;
	DWORD	ReadTotalTimeoutConstant;
	DWORD	WriteTotalTimeoutMultiplier;
	DWORD	WriteTotalTimeoutConstant;
} COMMTIMEOUTS,*LPCOMMTIMEOUTS;








typedef void ( *PAPCFUNC)(ULONG_PTR);
typedef void ( *PTIMERAPCROUTINE)(LPVOID,DWORD,DWORD);

typedef enum _COMPUTER_NAME_FORMAT
{
	ComputerNameNetBIOS,
	ComputerNameDnsHostname,
	ComputerNameDnsDomain,
	ComputerNameDnsFullyQualified,
	ComputerNamePhysicalNetBIOS,
	ComputerNamePhysicalDnsHostname,
	ComputerNamePhysicalDnsDomain,
	ComputerNamePhysicalDnsFullyQualified,
	ComputerNameMax
} COMPUTER_NAME_FORMAT;










typedef struct tagHW_PROFILE_INFOA {
    DWORD dwDockInfo;
    CHAR  szHwProfileGuid[39];
    CHAR  szHwProfileName[80];
} HW_PROFILE_INFOA, *LPHW_PROFILE_INFOA;

typedef struct tagHW_PROFILE_INFOW {
    DWORD dwDockInfo;
    WCHAR szHwProfileGuid[39];
    WCHAR szHwProfileName[80];
} HW_PROFILE_INFOW, *LPHW_PROFILE_INFOW;




typedef enum _DEP_SYSTEM_POLICY_TYPE {
    AlwaysOff = 0,
    AlwaysOn = 1,
    OptIn = 2,
    OptOut = 3
} DEP_SYSTEM_POLICY_TYPE;








typedef struct _EVENTLOG_FULL_INFORMATION {
    DWORD dwFull;
} EVENTLOG_FULL_INFORMATION, *LPEVENTLOG_FULL_INFORMATION;























# 1 "include/pshpack8.h" 1 3



























     













































































#pragma pack(8)


# 1609 "include/winbase.h" 2
typedef struct _WIN32_STREAM_ID {
	DWORD   dwStreamId;
	DWORD   dwStreamAttributes;
	LARGE_INTEGER  Size;
	DWORD   dwStreamNameSize;
	WCHAR   cStreamName[ANYSIZE_ARRAY];
} WIN32_STREAM_ID, *LPWIN32_STREAM_ID;

# 1 "include/poppack.h" 1 3





























































































































































































































































#pragma pack()










# 1617 "include/winbase.h" 2

























typedef RTL_RUN_ONCE  INIT_ONCE;
typedef PRTL_RUN_ONCE PINIT_ONCE;
typedef PRTL_RUN_ONCE LPINIT_ONCE;





typedef BOOL ( *PINIT_ONCE_FN)(PINIT_ONCE,PVOID,PVOID*);

typedef struct _REASON_CONTEXT
{
    ULONG Version;
    DWORD Flags;
    union
    {
        struct
        {
            HMODULE LocalizedReasonModule;
            ULONG LocalizedReasonId;
            ULONG ReasonStringCount;
            LPWSTR *ReasonStrings;
        } Detailed;
        LPWSTR SimpleReasonString;
    } Reason;
} REASON_CONTEXT, *PREASON_CONTEXT;






typedef struct _PROC_THREAD_ATTRIBUTE_LIST
*PPROC_THREAD_ATTRIBUTE_LIST, *LPPROC_THREAD_ATTRIBUTE_LIST;






typedef enum _PROC_THREAD_ATTRIBUTE_NUM
{
    ProcThreadAttributeParentProcess = 0,
    ProcThreadAttributeExtendedFlags = 1,
    ProcThreadAttributeHandleList = 2,
    ProcThreadAttributeGroupAffinity = 3,
    ProcThreadAttributePreferredNode = 4,
    ProcThreadAttributeIdealProcessor = 5,
    ProcThreadAttributeUmsThread = 6,
    ProcThreadAttributeMitigationPolicy = 7,
    ProcThreadAttributeSecurityCapabilities = 9,
    ProcThreadAttributeProtectionLevel = 11,
    ProcThreadAttributeJobList = 13,
    ProcThreadAttributeChildProcessPolicy = 14,
    ProcThreadAttributeAllApplicationPackagesPolicy = 15,
    ProcThreadAttributeWin32kFilter = 16,
    ProcThreadAttributeSafeOpenPromptOriginClaim = 17,
    ProcThreadAttributeDesktopAppPolicy = 18,
    ProcThreadAttributePseudoConsole = 22,
    ProcThreadAttributeMitigationAuditPolicy = 24,
    ProcThreadAttributeMachineType = 25,
    ProcThreadAttributeComponentFilter = 26,
    ProcThreadAttributeEnableOptionalXStateFeatures = 27,
    ProcThreadAttributeTrustedApp = 29,
} PROC_THREAD_ATTRIBUTE_NUM;


























typedef struct _STARTUPINFOEXA
{
    STARTUPINFOA StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXA, *LPSTARTUPINFOEXA;

typedef struct _STARTUPINFOEXW
{
    STARTUPINFOW StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXW, *LPSTARTUPINFOEXW;




typedef void *PUMS_CONTEXT;
typedef void *PUMS_COMPLETION_LIST;
typedef PRTL_UMS_SCHEDULER_ENTRY_POINT PUMS_SCHEDULER_ENTRY_POINT;
typedef struct _UMS_SCHEDULER_STARTUP_INFO
{
    ULONG UmsVersion;
    PUMS_COMPLETION_LIST CompletionList;
    PUMS_SCHEDULER_ENTRY_POINT SchedulerProc;
    PVOID SchedulerParam;
} UMS_SCHEDULER_STARTUP_INFO, *PUMS_SCHEDULER_STARTUP_INFO;

typedef enum _RTL_UMS_SCHEDULER_REASON UMS_SCHEDULER_REASON;
typedef enum _RTL_UMS_THREAD_INFO_CLASS UMS_THREAD_INFO_CLASS, *PUMS_THREAD_INFO_CLASS;

typedef enum _STREAM_INFO_LEVELS
{
    FindStreamInfoStandard,
    FindStreamInfoMaxInfoLevel
} STREAM_INFO_LEVELS;

typedef struct _WIN32_FIND_STREAM_DATA {
    LARGE_INTEGER StreamSize;
    WCHAR cStreamName[MAX_PATH + 36];
} WIN32_FIND_STREAM_DATA,*PWIN32_FIND_STREAM_DATA;

typedef struct _WIN32_MEMORY_RANGE_ENTRY
{
    PVOID  VirtualAddress;
    SIZE_T NumberOfBytes;
} WIN32_MEMORY_RANGE_ENTRY, *PWIN32_MEMORY_RANGE_ENTRY;

typedef enum _MACHINE_ATTRIBUTES
{
    UserEnabled    = 0x00000001,
    KernelEnabled  = 0x00000002,
    Wow64Container = 0x00000004,
} MACHINE_ATTRIBUTES;

typedef struct _PROCESS_MACHINE_INFORMATION
{
    USHORT ProcessMachine;
    USHORT Res0;
    MACHINE_ATTRIBUTES MachineAttributes;
} PROCESS_MACHINE_INFORMATION;

typedef enum _PROCESS_INFORMATION_CLASS
{
    ProcessMemoryPriority,
    ProcessMemoryExhaustionInfo,
    ProcessAppMemoryInfo,
    ProcessInPrivateInfo,
    ProcessPowerThrottling,
    ProcessReservedValue1,
    ProcessTelemetryCoverageInfo,
    ProcessProtectionLevelInfo,
    ProcessLeapSecondInfo,
    ProcessMachineTypeInfo,
    ProcessInformationClassMax
} PROCESS_INFORMATION_CLASS;

DECLSPEC_IMPORT BOOL         ActivateActCtx(HANDLE,ULONG_PTR *);
DECLSPEC_IMPORT  BOOL         AddAccessAllowedAce(PACL,DWORD,DWORD,PSID);
DECLSPEC_IMPORT  BOOL         AddAccessAllowedAceEx(PACL,DWORD,DWORD,DWORD,PSID);
DECLSPEC_IMPORT  BOOL         AddAccessDeniedAce(PACL,DWORD,DWORD,PSID);
DECLSPEC_IMPORT  BOOL         AddAccessDeniedAceEx(PACL,DWORD,DWORD,DWORD,PSID);
DECLSPEC_IMPORT  BOOL         AddAce(PACL,DWORD,DWORD,LPVOID,DWORD);
DECLSPEC_IMPORT ATOM         AddAtomA(LPCSTR);
DECLSPEC_IMPORT ATOM         AddAtomW(LPCWSTR);

DECLSPEC_IMPORT  BOOL         AddAuditAccessAce(PACL,DWORD,DWORD,PSID,BOOL,BOOL);
DECLSPEC_IMPORT  BOOL         AddAuditAccessAceEx(PACL,DWORD,DWORD,DWORD,PSID,BOOL,BOOL);
DECLSPEC_IMPORT  BOOL         AddMandatoryAce(PACL,DWORD,DWORD,DWORD,PSID);
DECLSPEC_IMPORT VOID         AddRefActCtx(HANDLE);
DECLSPEC_IMPORT PVOID        AddVectoredExceptionHandler(ULONG,PVECTORED_EXCEPTION_HANDLER);
DECLSPEC_IMPORT  BOOL         AdjustTokenGroups(HANDLE,BOOL,PTOKEN_GROUPS,DWORD,PTOKEN_GROUPS,PDWORD);
DECLSPEC_IMPORT  BOOL         AccessCheck(PSECURITY_DESCRIPTOR,HANDLE,DWORD,PGENERIC_MAPPING,PPRIVILEGE_SET,LPDWORD,LPDWORD,LPBOOL);
DECLSPEC_IMPORT  BOOL         AccessCheckAndAuditAlarmA(LPCSTR,LPVOID,LPSTR,LPSTR,PSECURITY_DESCRIPTOR,DWORD,PGENERIC_MAPPING,BOOL,LPDWORD,LPBOOL,LPBOOL);
DECLSPEC_IMPORT  BOOL         AccessCheckAndAuditAlarmW(LPCWSTR,LPVOID,LPWSTR,LPWSTR,PSECURITY_DESCRIPTOR,DWORD,PGENERIC_MAPPING,BOOL,LPDWORD,LPBOOL,LPBOOL);

DECLSPEC_IMPORT  BOOL         AccessCheckByType(PSECURITY_DESCRIPTOR,PSID,HANDLE,DWORD,POBJECT_TYPE_LIST,DWORD,PGENERIC_MAPPING,PPRIVILEGE_SET,LPDWORD,LPDWORD,LPBOOL);
DECLSPEC_IMPORT VOID         AcquireSRWLockExclusive(PSRWLOCK);
DECLSPEC_IMPORT VOID         AcquireSRWLockShared(PSRWLOCK);
DECLSPEC_IMPORT  BOOL         AdjustTokenPrivileges(HANDLE,BOOL,PTOKEN_PRIVILEGES,DWORD,PTOKEN_PRIVILEGES,PDWORD);
DECLSPEC_IMPORT  BOOL         AllocateAndInitializeSid(PSID_IDENTIFIER_AUTHORITY,BYTE,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,PSID *);
DECLSPEC_IMPORT  BOOL         AllocateLocallyUniqueId(PLUID);
DECLSPEC_IMPORT  BOOL         AreAllAccessesGranted(DWORD,DWORD);
DECLSPEC_IMPORT  BOOL         AreAnyAccessesGranted(DWORD,DWORD);
DECLSPEC_IMPORT BOOL         AreFileApisANSI(void);
DECLSPEC_IMPORT BOOL         AssignProcessToJobObject(HANDLE,HANDLE);
DECLSPEC_IMPORT  BOOL         BackupEventLogA(HANDLE,LPCSTR);
DECLSPEC_IMPORT  BOOL         BackupEventLogW(HANDLE,LPCWSTR);

DECLSPEC_IMPORT BOOL         BackupRead(HANDLE,LPBYTE,DWORD,LPDWORD,BOOL,BOOL,LPVOID*);
DECLSPEC_IMPORT BOOL         BackupSeek(HANDLE,DWORD,DWORD,LPDWORD,LPDWORD,LPVOID*);
DECLSPEC_IMPORT BOOL         BackupWrite(HANDLE,LPBYTE,DWORD,LPDWORD,BOOL,BOOL,LPVOID*);
DECLSPEC_IMPORT BOOL         Beep(DWORD,DWORD);
DECLSPEC_IMPORT HANDLE       BeginUpdateResourceA(LPCSTR,BOOL);
DECLSPEC_IMPORT HANDLE       BeginUpdateResourceW(LPCWSTR,BOOL);

DECLSPEC_IMPORT BOOL         BindIoCompletionCallback(HANDLE,LPOVERLAPPED_COMPLETION_ROUTINE,ULONG);
DECLSPEC_IMPORT BOOL         BuildCommDCBA(LPCSTR,LPDCB);
DECLSPEC_IMPORT BOOL         BuildCommDCBW(LPCWSTR,LPDCB);

DECLSPEC_IMPORT BOOL         BuildCommDCBAndTimeoutsA(LPCSTR,LPDCB,LPCOMMTIMEOUTS);
DECLSPEC_IMPORT BOOL         BuildCommDCBAndTimeoutsW(LPCWSTR,LPDCB,LPCOMMTIMEOUTS);

DECLSPEC_IMPORT BOOL         CallNamedPipeA(LPCSTR,LPVOID,DWORD,LPVOID,DWORD,LPDWORD,DWORD);
DECLSPEC_IMPORT BOOL         CallNamedPipeW(LPCWSTR,LPVOID,DWORD,LPVOID,DWORD,LPDWORD,DWORD);

DECLSPEC_IMPORT BOOL         CancelIo(HANDLE);
DECLSPEC_IMPORT BOOL         CancelIoEx(HANDLE,LPOVERLAPPED);
DECLSPEC_IMPORT BOOL         CancelSynchronousIo(HANDLE);
DECLSPEC_IMPORT BOOL         CancelTimerQueueTimer(HANDLE,HANDLE);
DECLSPEC_IMPORT BOOL         CancelWaitableTimer(HANDLE);
DECLSPEC_IMPORT BOOL         CheckNameLegalDOS8Dot3A(const char*,char*,DWORD,BOOL*,BOOL*);
DECLSPEC_IMPORT BOOL         CheckNameLegalDOS8Dot3W(const WCHAR*, char*,DWORD,BOOL*,BOOL*);
DECLSPEC_IMPORT BOOL         CheckRemoteDebuggerPresent(HANDLE,BOOL*);
DECLSPEC_IMPORT BOOL         ChangeTimerQueueTimer(HANDLE,HANDLE,ULONG,ULONG);
DECLSPEC_IMPORT  BOOL         CheckTokenMembership(HANDLE,PSID,PBOOL);
DECLSPEC_IMPORT BOOL         ClearCommBreak(HANDLE);
DECLSPEC_IMPORT BOOL         ClearCommError(HANDLE,LPDWORD,LPCOMSTAT);
DECLSPEC_IMPORT  VOID         CloseEncryptedFileRaw(PVOID);
DECLSPEC_IMPORT  BOOL         ClearEventLogA(HANDLE,LPCSTR);
DECLSPEC_IMPORT  BOOL         ClearEventLogW(HANDLE,LPCWSTR);

DECLSPEC_IMPORT  BOOL         CloseEventLog(HANDLE);
DECLSPEC_IMPORT BOOL         CloseHandle(HANDLE);
DECLSPEC_IMPORT BOOL         CommConfigDialogA(LPCSTR,HWND,LPCOMMCONFIG);
DECLSPEC_IMPORT BOOL         CommConfigDialogW(LPCWSTR,HWND,LPCOMMCONFIG);

DECLSPEC_IMPORT BOOL         ConnectNamedPipe(HANDLE,LPOVERLAPPED);
DECLSPEC_IMPORT BOOL         ContinueDebugEvent(DWORD,DWORD,DWORD);
DECLSPEC_IMPORT HANDLE       ConvertToGlobalHandle(HANDLE hSrc);
DECLSPEC_IMPORT BOOL         CopyContext(struct CONTEXT,DWORD,CONTEXT*);
DECLSPEC_IMPORT BOOL         CopyFileA(LPCSTR,LPCSTR,BOOL);
DECLSPEC_IMPORT BOOL         CopyFileW(LPCWSTR,LPCWSTR,BOOL);

DECLSPEC_IMPORT HRESULT      CopyFile2(PCWSTR,PCWSTR,COPYFILE2_EXTENDED_PARAMETERS*);
DECLSPEC_IMPORT BOOL         CopyFileExA(LPCSTR, LPCSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL, DWORD);
DECLSPEC_IMPORT BOOL         CopyFileExW(LPCWSTR, LPCWSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL, DWORD);

DECLSPEC_IMPORT  BOOL         CopySid(DWORD,PSID,PSID);
DECLSPEC_IMPORT INT          CompareFileTime(const FILETIME*,const FILETIME*);
DECLSPEC_IMPORT BOOL         ConvertFiberToThread(void);
DECLSPEC_IMPORT LPVOID       ConvertThreadToFiber(LPVOID);
DECLSPEC_IMPORT LPVOID       ConvertThreadToFiberEx(LPVOID,DWORD);
DECLSPEC_IMPORT  BOOL         ConvertToAutoInheritPrivateObjectSecurity(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR*,GUID*,BOOL,PGENERIC_MAPPING);
DECLSPEC_IMPORT HANDLE       CreateActCtxA(PCACTCTXA);
DECLSPEC_IMPORT HANDLE       CreateActCtxW(PCACTCTXW);

DECLSPEC_IMPORT BOOL         CreateDirectoryA(LPCSTR,LPSECURITY_ATTRIBUTES);
DECLSPEC_IMPORT BOOL         CreateDirectoryW(LPCWSTR,LPSECURITY_ATTRIBUTES);

DECLSPEC_IMPORT BOOL         CreateDirectoryExA(LPCSTR,LPCSTR,LPSECURITY_ATTRIBUTES);
DECLSPEC_IMPORT BOOL         CreateDirectoryExW(LPCWSTR,LPCWSTR,LPSECURITY_ATTRIBUTES);

DECLSPEC_IMPORT HANDLE       CreateEventA(LPSECURITY_ATTRIBUTES,BOOL,BOOL,LPCSTR);
DECLSPEC_IMPORT HANDLE       CreateEventW(LPSECURITY_ATTRIBUTES,BOOL,BOOL,LPCWSTR);

DECLSPEC_IMPORT HANDLE       CreateEventExA(SECURITY_ATTRIBUTES*,LPCSTR,DWORD,DWORD);
DECLSPEC_IMPORT HANDLE       CreateEventExW(SECURITY_ATTRIBUTES*,LPCWSTR,DWORD,DWORD);

DECLSPEC_IMPORT LPVOID       CreateFiber(SIZE_T,LPFIBER_START_ROUTINE,LPVOID);
DECLSPEC_IMPORT LPVOID       CreateFiberEx(SIZE_T,SIZE_T,DWORD,LPFIBER_START_ROUTINE,LPVOID);
DECLSPEC_IMPORT HANDLE       CreateFileA(LPCSTR,DWORD,DWORD,LPSECURITY_ATTRIBUTES,DWORD,DWORD,HANDLE);
DECLSPEC_IMPORT HANDLE       CreateFileW(LPCWSTR,DWORD,DWORD,LPSECURITY_ATTRIBUTES,DWORD,DWORD,HANDLE);

DECLSPEC_IMPORT HANDLE       CreateFileMappingA(HANDLE,LPSECURITY_ATTRIBUTES,DWORD,DWORD,DWORD,LPCSTR);
DECLSPEC_IMPORT HANDLE       CreateFileMappingW(HANDLE,LPSECURITY_ATTRIBUTES,DWORD,DWORD,DWORD,LPCWSTR);

DECLSPEC_IMPORT HANDLE       CreateFileMappingFromApp(HANDLE,PSECURITY_ATTRIBUTES,ULONG,ULONG64,PCWSTR);
DECLSPEC_IMPORT HANDLE       CreateIoCompletionPort(HANDLE,HANDLE,ULONG_PTR,DWORD);
DECLSPEC_IMPORT HANDLE       CreateJobObjectA(LPSECURITY_ATTRIBUTES,LPCSTR);
DECLSPEC_IMPORT HANDLE       CreateJobObjectW(LPSECURITY_ATTRIBUTES,LPCWSTR);

DECLSPEC_IMPORT HANDLE       CreateMailslotA(LPCSTR,DWORD,DWORD,LPSECURITY_ATTRIBUTES);
DECLSPEC_IMPORT HANDLE       CreateMailslotW(LPCWSTR,DWORD,DWORD,LPSECURITY_ATTRIBUTES);

DECLSPEC_IMPORT HANDLE       CreateMemoryResourceNotification(MEMORY_RESOURCE_NOTIFICATION_TYPE);
DECLSPEC_IMPORT HANDLE       CreateMutexA(LPSECURITY_ATTRIBUTES,BOOL,LPCSTR);
DECLSPEC_IMPORT HANDLE       CreateMutexW(LPSECURITY_ATTRIBUTES,BOOL,LPCWSTR);

DECLSPEC_IMPORT HANDLE       CreateMutexExA(SECURITY_ATTRIBUTES*,LPCSTR,DWORD,DWORD);
DECLSPEC_IMPORT HANDLE       CreateMutexExW(SECURITY_ATTRIBUTES*,LPCWSTR,DWORD,DWORD);

DECLSPEC_IMPORT HANDLE       CreateNamedPipeA(LPCSTR,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,LPSECURITY_ATTRIBUTES);
DECLSPEC_IMPORT HANDLE       CreateNamedPipeW(LPCWSTR,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,LPSECURITY_ATTRIBUTES);

DECLSPEC_IMPORT BOOL         CreatePipe(PHANDLE,PHANDLE,LPSECURITY_ATTRIBUTES,DWORD);
DECLSPEC_IMPORT  BOOL         CreatePrivateObjectSecurity(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR*,BOOL,HANDLE,PGENERIC_MAPPING);
DECLSPEC_IMPORT  BOOL         CreatePrivateObjectSecurityEx(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR*,GUID*,BOOL,ULONG,HANDLE,PGENERIC_MAPPING);
DECLSPEC_IMPORT  BOOL         CreatePrivateObjectSecurityWithMultipleInheritance(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR*,GUID**,ULONG,BOOL,ULONG,HANDLE,PGENERIC_MAPPING);
DECLSPEC_IMPORT BOOL         CreateProcessA(LPCSTR,LPSTR,LPSECURITY_ATTRIBUTES,LPSECURITY_ATTRIBUTES,BOOL,DWORD,LPVOID,LPCSTR,LPSTARTUPINFOA,LPPROCESS_INFORMATION);
DECLSPEC_IMPORT BOOL         CreateProcessW(LPCWSTR,LPWSTR,LPSECURITY_ATTRIBUTES,LPSECURITY_ATTRIBUTES,BOOL,DWORD,LPVOID,LPCWSTR,LPSTARTUPINFOW,LPPROCESS_INFORMATION);

DECLSPEC_IMPORT  BOOL         CreateProcessAsUserA(HANDLE,LPCSTR,LPSTR,LPSECURITY_ATTRIBUTES,LPSECURITY_ATTRIBUTES,BOOL,DWORD,LPVOID,LPCSTR,LPSTARTUPINFOA,LPPROCESS_INFORMATION);
DECLSPEC_IMPORT  BOOL         CreateProcessAsUserW(HANDLE,LPCWSTR,LPWSTR,LPSECURITY_ATTRIBUTES,LPSECURITY_ATTRIBUTES,BOOL,DWORD,LPVOID,LPCWSTR,LPSTARTUPINFOW,LPPROCESS_INFORMATION);

DECLSPEC_IMPORT BOOL         CreateProcessInternalA(HANDLE,LPCSTR,LPSTR,LPSECURITY_ATTRIBUTES,LPSECURITY_ATTRIBUTES,BOOL,DWORD,LPVOID,LPCSTR,LPSTARTUPINFOA,LPPROCESS_INFORMATION,HANDLE*);
DECLSPEC_IMPORT BOOL         CreateProcessInternalW(HANDLE,LPCWSTR,LPWSTR,LPSECURITY_ATTRIBUTES,LPSECURITY_ATTRIBUTES,BOOL,DWORD,LPVOID,LPCWSTR,LPSTARTUPINFOW,LPPROCESS_INFORMATION,HANDLE*);

DECLSPEC_IMPORT  BOOL         CreateProcessWithLogonW(LPCWSTR,LPCWSTR,LPCWSTR,DWORD,LPCWSTR,LPWSTR,DWORD,LPVOID,LPCWSTR,LPSTARTUPINFOW,LPPROCESS_INFORMATION);
DECLSPEC_IMPORT  BOOL         CreateProcessWithTokenW(HANDLE,DWORD,LPCWSTR,LPWSTR,DWORD,void *,LPCWSTR,STARTUPINFOW *,PROCESS_INFORMATION *);
DECLSPEC_IMPORT HANDLE       CreateRemoteThread(HANDLE,LPSECURITY_ATTRIBUTES,SIZE_T,LPTHREAD_START_ROUTINE,LPVOID,DWORD,LPDWORD);
DECLSPEC_IMPORT HANDLE       CreateRemoteThreadEx(HANDLE,LPSECURITY_ATTRIBUTES,SIZE_T,LPTHREAD_START_ROUTINE,LPVOID,DWORD,LPPROC_THREAD_ATTRIBUTE_LIST,LPDWORD);
DECLSPEC_IMPORT  BOOL         CreateRestrictedToken(HANDLE,DWORD,DWORD,PSID_AND_ATTRIBUTES,DWORD,PLUID_AND_ATTRIBUTES,DWORD,PSID_AND_ATTRIBUTES,PHANDLE);
DECLSPEC_IMPORT HANDLE       CreateSemaphoreA(LPSECURITY_ATTRIBUTES,LONG,LONG,LPCSTR);
DECLSPEC_IMPORT HANDLE       CreateSemaphoreW(LPSECURITY_ATTRIBUTES,LONG,LONG,LPCWSTR);

DECLSPEC_IMPORT HANDLE       CreateSemaphoreExA(SECURITY_ATTRIBUTES*,LONG,LONG,LPCSTR,DWORD,DWORD);
DECLSPEC_IMPORT HANDLE       CreateSemaphoreExW(SECURITY_ATTRIBUTES*,LONG,LONG,LPCWSTR,DWORD,DWORD);

DECLSPEC_IMPORT BOOLEAN      CreateSymbolicLinkA(LPCSTR,LPCSTR,DWORD);
DECLSPEC_IMPORT BOOLEAN      CreateSymbolicLinkW(LPCWSTR,LPCWSTR,DWORD);

DECLSPEC_IMPORT BOOL         CreateHardLinkA(LPCSTR,LPCSTR,LPSECURITY_ATTRIBUTES);
DECLSPEC_IMPORT BOOL         CreateHardLinkW(LPCWSTR,LPCWSTR,LPSECURITY_ATTRIBUTES);

DECLSPEC_IMPORT DWORD        CreateTapePartition(HANDLE,DWORD,DWORD,DWORD);
DECLSPEC_IMPORT HANDLE       CreateThread(LPSECURITY_ATTRIBUTES,SIZE_T,LPTHREAD_START_ROUTINE,LPVOID,DWORD,LPDWORD);
DECLSPEC_IMPORT HANDLE       CreateTimerQueue(void);
DECLSPEC_IMPORT BOOL         CreateTimerQueueTimer(PHANDLE,HANDLE,WAITORTIMERCALLBACK,PVOID,DWORD,DWORD,ULONG);
DECLSPEC_IMPORT BOOL         CreateUmsCompletionList(PUMS_COMPLETION_LIST*);
DECLSPEC_IMPORT BOOL         CreateUmsThreadContext(PUMS_CONTEXT*);
DECLSPEC_IMPORT HANDLE       CreateWaitableTimerA(LPSECURITY_ATTRIBUTES,BOOL,LPCSTR);
DECLSPEC_IMPORT HANDLE       CreateWaitableTimerW(LPSECURITY_ATTRIBUTES,BOOL,LPCWSTR);

DECLSPEC_IMPORT HANDLE       CreateWaitableTimerExA(SECURITY_ATTRIBUTES*,LPCSTR,DWORD,DWORD);
DECLSPEC_IMPORT HANDLE       CreateWaitableTimerExW(SECURITY_ATTRIBUTES*,LPCWSTR,DWORD,DWORD);

DECLSPEC_IMPORT  BOOL         CreateWellKnownSid(WELL_KNOWN_SID_TYPE,PSID,PSID,DWORD*);
DECLSPEC_IMPORT BOOL         DeactivateActCtx(DWORD,ULONG_PTR);
DECLSPEC_IMPORT BOOL         DebugActiveProcess(DWORD);
DECLSPEC_IMPORT BOOL         DebugActiveProcessStop(DWORD);
DECLSPEC_IMPORT void         DebugBreak(void);
DECLSPEC_IMPORT BOOL         DebugBreakProcess(HANDLE);
DECLSPEC_IMPORT BOOL         DebugSetProcessKillOnExit(BOOL);
DECLSPEC_IMPORT void *       DecodePointer(void *);
DECLSPEC_IMPORT void *       DecodeSystemPointer(void *);
DECLSPEC_IMPORT  BOOL         DecryptFileA(LPCSTR,DWORD);
DECLSPEC_IMPORT  BOOL         DecryptFileW(LPCWSTR,DWORD);

DECLSPEC_IMPORT BOOL         DefineDosDeviceA(DWORD,LPCSTR,LPCSTR);
DECLSPEC_IMPORT BOOL         DefineDosDeviceW(DWORD,LPCWSTR,LPCWSTR);


DECLSPEC_IMPORT  BOOL         DeleteAce(PACL,DWORD);
DECLSPEC_IMPORT ATOM         DeleteAtom(ATOM);
DECLSPEC_IMPORT void         DeleteCriticalSection(CRITICAL_SECTION *lpCrit);
DECLSPEC_IMPORT void         DeleteFiber(LPVOID);
DECLSPEC_IMPORT BOOL         DeleteFileA(LPCSTR);
DECLSPEC_IMPORT BOOL         DeleteFileW(LPCWSTR);

DECLSPEC_IMPORT void         DeleteProcThreadAttributeList(struct _PROC_THREAD_ATTRIBUTE_LIST*);
DECLSPEC_IMPORT BOOL         DeleteTimerQueue(HANDLE);
DECLSPEC_IMPORT BOOL         DeleteTimerQueueEx(HANDLE,HANDLE);
DECLSPEC_IMPORT BOOL         DeleteTimerQueueTimer(HANDLE,HANDLE,HANDLE);
DECLSPEC_IMPORT BOOL         DeleteUmsCompletionList(PUMS_COMPLETION_LIST);
DECLSPEC_IMPORT BOOL         DeleteUmsThreadContext(PUMS_CONTEXT);
DECLSPEC_IMPORT BOOL         DeleteVolumeMountPointA(LPCSTR);
DECLSPEC_IMPORT BOOL         DeleteVolumeMountPointW(LPCWSTR);

DECLSPEC_IMPORT BOOL         DequeueUmsCompletionListItems(void *, DWORD, PUMS_CONTEXT *);
DECLSPEC_IMPORT  BOOL         DeregisterEventSource(HANDLE);
DECLSPEC_IMPORT  BOOL         DestroyPrivateObjectSecurity(PSECURITY_DESCRIPTOR*);
DECLSPEC_IMPORT BOOL         DeviceIoControl(HANDLE,DWORD,LPVOID,DWORD,LPVOID,DWORD,LPDWORD,LPOVERLAPPED);
DECLSPEC_IMPORT BOOL         DisableThreadLibraryCalls(HMODULE);
DECLSPEC_IMPORT BOOL         DisconnectNamedPipe(HANDLE);
DECLSPEC_IMPORT BOOL         DnsHostnameToComputerNameA(LPCSTR,LPSTR,LPDWORD);
DECLSPEC_IMPORT BOOL         DnsHostnameToComputerNameW(LPCWSTR,LPWSTR,LPDWORD);

DECLSPEC_IMPORT BOOL         DnsHostnameToComputerNameExW(LPCWSTR,LPWSTR,LPDWORD);
DECLSPEC_IMPORT BOOL         DosDateTimeToFileTime(WORD,WORD,LPFILETIME);
DECLSPEC_IMPORT BOOL         DuplicateHandle(HANDLE,HANDLE,HANDLE,HANDLE*,DWORD,BOOL,DWORD);
DECLSPEC_IMPORT  BOOL         DuplicateToken(HANDLE,SECURITY_IMPERSONATION_LEVEL,PHANDLE);
DECLSPEC_IMPORT  BOOL         DuplicateTokenEx(HANDLE,DWORD,LPSECURITY_ATTRIBUTES,SECURITY_IMPERSONATION_LEVEL,TOKEN_TYPE,PHANDLE);
DECLSPEC_IMPORT BOOL         EscapeCommFunction(HANDLE,DWORD);
DECLSPEC_IMPORT void *       EncodePointer(void *);
DECLSPEC_IMPORT void *       EncodeSystemPointer(void *);
DECLSPEC_IMPORT  BOOL         EncryptFileA(LPCSTR);
DECLSPEC_IMPORT  BOOL         EncryptFileW(LPCWSTR);

DECLSPEC_IMPORT BOOL         EndUpdateResourceA(HANDLE,BOOL);
DECLSPEC_IMPORT BOOL         EndUpdateResourceW(HANDLE,BOOL);

DECLSPEC_IMPORT void         EnterCriticalSection(CRITICAL_SECTION *lpCrit);
DECLSPEC_IMPORT BOOL         EnterUmsSchedulingMode(PUMS_SCHEDULER_STARTUP_INFO);
DECLSPEC_IMPORT BOOL         EnumResourceLanguagesA(HMODULE,LPCSTR,LPCSTR,ENUMRESLANGPROCA,LONG_PTR);
DECLSPEC_IMPORT BOOL         EnumResourceLanguagesW(HMODULE,LPCWSTR,LPCWSTR,ENUMRESLANGPROCW,LONG_PTR);

DECLSPEC_IMPORT BOOL         EnumResourceLanguagesExA(HMODULE,LPCSTR,LPCSTR,ENUMRESLANGPROCA,LONG_PTR,DWORD,LANGID);
DECLSPEC_IMPORT BOOL         EnumResourceLanguagesExW(HMODULE,LPCWSTR,LPCWSTR,ENUMRESLANGPROCW,LONG_PTR,DWORD,LANGID);

DECLSPEC_IMPORT BOOL         EnumResourceNamesA(HMODULE,LPCSTR,ENUMRESNAMEPROCA,LONG_PTR);
DECLSPEC_IMPORT BOOL         EnumResourceNamesW(HMODULE,LPCWSTR,ENUMRESNAMEPROCW,LONG_PTR);

DECLSPEC_IMPORT BOOL         EnumResourceNamesExA(HMODULE,LPCSTR,ENUMRESNAMEPROCA,LONG_PTR,DWORD,LANGID);
DECLSPEC_IMPORT BOOL         EnumResourceNamesExW(HMODULE,LPCWSTR,ENUMRESNAMEPROCW,LONG_PTR,DWORD,LANGID);

DECLSPEC_IMPORT BOOL         EnumResourceTypesA(HMODULE,ENUMRESTYPEPROCA,LONG_PTR);
DECLSPEC_IMPORT BOOL         EnumResourceTypesW(HMODULE,ENUMRESTYPEPROCW,LONG_PTR);

DECLSPEC_IMPORT BOOL         EnumResourceTypesExA(HMODULE,ENUMRESTYPEPROCA,LONG_PTR,DWORD,LANGID);
DECLSPEC_IMPORT BOOL         EnumResourceTypesExW(HMODULE,ENUMRESTYPEPROCW,LONG_PTR,DWORD,LANGID);

DECLSPEC_IMPORT  BOOL         EqualDomainSid(PSID,PSID,BOOL*);
DECLSPEC_IMPORT  BOOL         EqualSid(PSID, PSID);
DECLSPEC_IMPORT  BOOL         EqualPrefixSid(PSID,PSID);
DECLSPEC_IMPORT DWORD        EraseTape(HANDLE,DWORD,BOOL);
DECLSPEC_IMPORT VOID DECLSPEC_NORETURN  ExitProcess(DWORD);
DECLSPEC_IMPORT VOID DECLSPEC_NORETURN  ExitThread(DWORD);
DECLSPEC_IMPORT BOOL         ExecuteUmsThread(PUMS_CONTEXT);
DECLSPEC_IMPORT DWORD        ExpandEnvironmentStringsA(LPCSTR,LPSTR,DWORD);
DECLSPEC_IMPORT DWORD        ExpandEnvironmentStringsW(LPCWSTR,LPWSTR,DWORD);

DECLSPEC_IMPORT void         FatalAppExitA(UINT,LPCSTR);
DECLSPEC_IMPORT void         FatalAppExitW(UINT,LPCWSTR);
DECLSPEC_IMPORT void         FatalExit(int);

DECLSPEC_IMPORT  BOOL         FileEncryptionStatusA(LPCSTR,LPDWORD);
DECLSPEC_IMPORT  BOOL         FileEncryptionStatusW(LPCWSTR,LPDWORD);

DECLSPEC_IMPORT BOOL         FileTimeToDosDateTime(const FILETIME*,LPWORD,LPWORD);
DECLSPEC_IMPORT BOOL         FileTimeToLocalFileTime(const FILETIME*,LPFILETIME);
DECLSPEC_IMPORT BOOL         FileTimeToSystemTime(const FILETIME*,LPSYSTEMTIME);
DECLSPEC_IMPORT BOOL         FindActCtxSectionStringA(DWORD,const GUID *,ULONG,LPCSTR,PACTCTX_SECTION_KEYED_DATA);
DECLSPEC_IMPORT BOOL         FindActCtxSectionStringW(DWORD,const GUID *,ULONG,LPCWSTR,PACTCTX_SECTION_KEYED_DATA);

DECLSPEC_IMPORT BOOL         FindActCtxSectionGuid(DWORD,const GUID *,ULONG,const GUID *,PACTCTX_SECTION_KEYED_DATA);
DECLSPEC_IMPORT ATOM         FindAtomA(LPCSTR);
DECLSPEC_IMPORT ATOM         FindAtomW(LPCWSTR);

DECLSPEC_IMPORT BOOL         FindClose(HANDLE);
DECLSPEC_IMPORT HANDLE       FindFirstChangeNotificationA(LPCSTR,BOOL,DWORD);
DECLSPEC_IMPORT HANDLE       FindFirstChangeNotificationW(LPCWSTR,BOOL,DWORD);

DECLSPEC_IMPORT HANDLE       FindFirstFileA(LPCSTR,LPWIN32_FIND_DATAA);
DECLSPEC_IMPORT HANDLE       FindFirstFileW(LPCWSTR,LPWIN32_FIND_DATAW);

DECLSPEC_IMPORT HANDLE       FindFirstFileExA(LPCSTR,FINDEX_INFO_LEVELS,LPVOID,FINDEX_SEARCH_OPS,LPVOID,DWORD);
DECLSPEC_IMPORT HANDLE       FindFirstFileExW(LPCWSTR,FINDEX_INFO_LEVELS,LPVOID,FINDEX_SEARCH_OPS,LPVOID,DWORD);

DECLSPEC_IMPORT  BOOL         FindFirstFreeAce(PACL,LPVOID*);
DECLSPEC_IMPORT HANDLE       FindFirstStreamW(LPCWSTR,STREAM_INFO_LEVELS,void*,DWORD);
DECLSPEC_IMPORT BOOL         FindNextChangeNotification(HANDLE);
DECLSPEC_IMPORT BOOL         FindNextFileA(HANDLE,LPWIN32_FIND_DATAA);
DECLSPEC_IMPORT BOOL         FindNextFileW(HANDLE,LPWIN32_FIND_DATAW);

DECLSPEC_IMPORT BOOL         FindNextStreamW(HANDLE,void*);
DECLSPEC_IMPORT BOOL         FindCloseChangeNotification(HANDLE);
DECLSPEC_IMPORT HRSRC        FindResourceA(HMODULE,LPCSTR,LPCSTR);
DECLSPEC_IMPORT HRSRC        FindResourceW(HMODULE,LPCWSTR,LPCWSTR);

DECLSPEC_IMPORT HRSRC        FindResourceExA(HMODULE,LPCSTR,LPCSTR,WORD);
DECLSPEC_IMPORT HRSRC        FindResourceExW(HMODULE,LPCWSTR,LPCWSTR,WORD);

DECLSPEC_IMPORT HANDLE       FindFirstVolumeA(LPSTR,DWORD);
DECLSPEC_IMPORT HANDLE       FindFirstVolumeW(LPWSTR,DWORD);

DECLSPEC_IMPORT HANDLE       FindFirstVolumeMountPointA(LPCSTR,LPSTR,DWORD);
DECLSPEC_IMPORT HANDLE       FindFirstVolumeMountPointW(LPCWSTR,LPWSTR,DWORD);

DECLSPEC_IMPORT BOOL         FindNextVolumeA(HANDLE,LPSTR,DWORD);
DECLSPEC_IMPORT BOOL         FindNextVolumeW(HANDLE,LPWSTR,DWORD);

DECLSPEC_IMPORT BOOL         FindNextVolumeMountPointA(HANDLE,LPSTR,DWORD);
DECLSPEC_IMPORT BOOL         FindNextVolumeMountPointW(HANDLE,LPWSTR,DWORD);

DECLSPEC_IMPORT BOOL         FindVolumeClose(HANDLE);
DECLSPEC_IMPORT BOOL         FindVolumeMountPointClose(HANDLE);
DECLSPEC_IMPORT DWORD        FlsAlloc(PFLS_CALLBACK_FUNCTION);
DECLSPEC_IMPORT BOOL         FlsFree(DWORD);
DECLSPEC_IMPORT PVOID        FlsGetValue(DWORD);
DECLSPEC_IMPORT BOOL         FlsSetValue(DWORD,PVOID);
DECLSPEC_IMPORT BOOL         FlushFileBuffers(HANDLE);
DECLSPEC_IMPORT BOOL         FlushInstructionCache(HANDLE,LPCVOID,SIZE_T);
DECLSPEC_IMPORT VOID         FlushProcessWriteBuffers(void);
DECLSPEC_IMPORT BOOL         FlushViewOfFile(LPCVOID,SIZE_T);

DECLSPEC_IMPORT DWORD        FormatMessageA(DWORD,LPCVOID,DWORD,DWORD,LPSTR,DWORD,va_list*);
DECLSPEC_IMPORT DWORD        FormatMessageW(DWORD,LPCVOID,DWORD,DWORD,LPWSTR,DWORD,va_list*);


DECLSPEC_IMPORT BOOL         FreeEnvironmentStringsA(LPSTR);
DECLSPEC_IMPORT BOOL         FreeEnvironmentStringsW(LPWSTR);

DECLSPEC_IMPORT BOOL         FreeLibrary(HMODULE);
DECLSPEC_IMPORT VOID DECLSPEC_NORETURN  FreeLibraryAndExitThread(HINSTANCE,DWORD);


DECLSPEC_IMPORT BOOL         FreeResource(HGLOBAL);
DECLSPEC_IMPORT  PVOID        FreeSid(PSID);
DECLSPEC_IMPORT  BOOL         GetAce(PACL,DWORD,LPVOID*);
DECLSPEC_IMPORT  BOOL         GetAclInformation(PACL,LPVOID,DWORD,ACL_INFORMATION_CLASS);
DECLSPEC_IMPORT DWORD        GetActiveProcessorCount(WORD);
DECLSPEC_IMPORT HRESULT      GetApplicationRestartSettings(HANDLE,WCHAR*,DWORD*,DWORD*);
DECLSPEC_IMPORT UINT         GetAtomNameA(ATOM,LPSTR,INT);
DECLSPEC_IMPORT UINT         GetAtomNameW(ATOM,LPWSTR,INT);

DECLSPEC_IMPORT BOOL         GetBinaryTypeA( LPCSTR lpApplicationName, LPDWORD lpBinaryType );
DECLSPEC_IMPORT BOOL         GetBinaryTypeW( LPCWSTR lpApplicationName, LPDWORD lpBinaryType );

DECLSPEC_IMPORT BOOL         GetCurrentActCtx(HANDLE *);
DECLSPEC_IMPORT BOOL         GetCommConfig(HANDLE,LPCOMMCONFIG,LPDWORD);
DECLSPEC_IMPORT BOOL         GetCommMask(HANDLE,LPDWORD);
DECLSPEC_IMPORT BOOL         GetCommModemStatus(HANDLE,LPDWORD);
DECLSPEC_IMPORT BOOL         GetCommProperties(HANDLE,LPCOMMPROP);
DECLSPEC_IMPORT BOOL         GetCommState(HANDLE,LPDCB);
DECLSPEC_IMPORT BOOL         GetCommTimeouts(HANDLE,LPCOMMTIMEOUTS);
DECLSPEC_IMPORT LPSTR        GetCommandLineA(void);
DECLSPEC_IMPORT LPWSTR       GetCommandLineW(void);

DECLSPEC_IMPORT DWORD        GetCompressedFileSizeA(LPCSTR,LPDWORD);
DECLSPEC_IMPORT DWORD        GetCompressedFileSizeW(LPCWSTR,LPDWORD);

DECLSPEC_IMPORT BOOL         GetComputerNameA(LPSTR,LPDWORD);
DECLSPEC_IMPORT BOOL         GetComputerNameW(LPWSTR,LPDWORD);

DECLSPEC_IMPORT BOOL         GetComputerNameExA(COMPUTER_NAME_FORMAT,LPSTR,LPDWORD);
DECLSPEC_IMPORT BOOL         GetComputerNameExW(COMPUTER_NAME_FORMAT,LPWSTR,LPDWORD);

DECLSPEC_IMPORT UINT         GetCurrentDirectoryA(UINT,LPSTR);
DECLSPEC_IMPORT UINT         GetCurrentDirectoryW(UINT,LPWSTR);

DECLSPEC_IMPORT  BOOL         GetCurrentHwProfileA(LPHW_PROFILE_INFOA);
DECLSPEC_IMPORT  BOOL         GetCurrentHwProfileW(LPHW_PROFILE_INFOW);

DECLSPEC_IMPORT DWORD        GetCurrentProcessorNumber(void);
DECLSPEC_IMPORT VOID         GetCurrentProcessorNumberEx(PPROCESSOR_NUMBER);

DECLSPEC_IMPORT PUMS_CONTEXT  GetCurrentUmsThread(void);
DECLSPEC_IMPORT BOOL         GetDefaultCommConfigA(LPCSTR,LPCOMMCONFIG,LPDWORD);
DECLSPEC_IMPORT BOOL         GetDefaultCommConfigW(LPCWSTR,LPCOMMCONFIG,LPDWORD);

DECLSPEC_IMPORT BOOL         GetDevicePowerState(HANDLE,BOOL*);
DECLSPEC_IMPORT BOOL         GetDiskFreeSpaceA(LPCSTR,LPDWORD,LPDWORD,LPDWORD,LPDWORD);
DECLSPEC_IMPORT BOOL         GetDiskFreeSpaceW(LPCWSTR,LPDWORD,LPDWORD,LPDWORD,LPDWORD);

DECLSPEC_IMPORT BOOL         GetDiskFreeSpaceExA(LPCSTR,PULARGE_INTEGER,PULARGE_INTEGER,PULARGE_INTEGER);
DECLSPEC_IMPORT BOOL         GetDiskFreeSpaceExW(LPCWSTR,PULARGE_INTEGER,PULARGE_INTEGER,PULARGE_INTEGER);

DECLSPEC_IMPORT DWORD        GetDllDirectoryA(DWORD,LPSTR);
DECLSPEC_IMPORT DWORD        GetDllDirectoryW(DWORD,LPWSTR);

DECLSPEC_IMPORT UINT         GetDriveTypeA(LPCSTR);
DECLSPEC_IMPORT UINT         GetDriveTypeW(LPCWSTR);

DECLSPEC_IMPORT DWORD64      GetEnabledXStateFeatures(void);
DECLSPEC_IMPORT LPSTR        GetEnvironmentStringsA(void);
DECLSPEC_IMPORT LPWSTR       GetEnvironmentStringsW(void);

DECLSPEC_IMPORT DWORD        GetEnvironmentVariableA(LPCSTR,LPSTR,DWORD);
DECLSPEC_IMPORT DWORD        GetEnvironmentVariableW(LPCWSTR,LPWSTR,DWORD);

DECLSPEC_IMPORT UINT         GetErrorMode(void);
DECLSPEC_IMPORT  BOOL         GetEventLogInformation(HANDLE,DWORD,LPVOID,DWORD,LPDWORD);
DECLSPEC_IMPORT BOOL         GetExitCodeProcess(HANDLE,LPDWORD);
DECLSPEC_IMPORT BOOL         GetExitCodeThread(HANDLE,LPDWORD);
DECLSPEC_IMPORT DWORD        GetFileAttributesA(LPCSTR);
DECLSPEC_IMPORT DWORD        GetFileAttributesW(LPCWSTR);

DECLSPEC_IMPORT BOOL         GetFileAttributesExA(LPCSTR,GET_FILEEX_INFO_LEVELS,LPVOID);
DECLSPEC_IMPORT BOOL         GetFileAttributesExW(LPCWSTR,GET_FILEEX_INFO_LEVELS,LPVOID);

DECLSPEC_IMPORT BOOL         GetFileInformationByHandle(HANDLE,BY_HANDLE_FILE_INFORMATION*);
DECLSPEC_IMPORT BOOL         GetFileInformationByHandleEx(HANDLE,FILE_INFO_BY_HANDLE_CLASS,LPVOID,DWORD);
DECLSPEC_IMPORT DWORD        GetFinalPathNameByHandleA(HANDLE,LPSTR,DWORD,DWORD);
DECLSPEC_IMPORT DWORD        GetFinalPathNameByHandleW(HANDLE,LPWSTR,DWORD,DWORD);

DECLSPEC_IMPORT  BOOL         GetFileSecurityA(LPCSTR,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,DWORD,LPDWORD);
DECLSPEC_IMPORT  BOOL         GetFileSecurityW(LPCWSTR,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,DWORD,LPDWORD);

DECLSPEC_IMPORT DWORD        GetFileSize(HANDLE,LPDWORD);
DECLSPEC_IMPORT BOOL         GetFileSizeEx(HANDLE,PLARGE_INTEGER);
DECLSPEC_IMPORT BOOL         GetFileTime(HANDLE,LPFILETIME,LPFILETIME,LPFILETIME);
DECLSPEC_IMPORT DWORD        GetFileType(HANDLE);
DECLSPEC_IMPORT BOOL         GetFirmwareType(PFIRMWARE_TYPE);

DECLSPEC_IMPORT DWORD        GetFullPathNameA(LPCSTR,DWORD,LPSTR,LPSTR*);
DECLSPEC_IMPORT DWORD        GetFullPathNameW(LPCWSTR,DWORD,LPWSTR,LPWSTR*);

DECLSPEC_IMPORT BOOL         GetHandleInformation(HANDLE,LPDWORD);
DECLSPEC_IMPORT  BOOL         GetKernelObjectSecurity(HANDLE,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,DWORD,LPDWORD);
DECLSPEC_IMPORT  DWORD        GetLengthSid(PSID);
DECLSPEC_IMPORT VOID         GetLocalTime(LPSYSTEMTIME);
DECLSPEC_IMPORT DWORD        GetLogicalDrives(void);
DECLSPEC_IMPORT UINT         GetLogicalDriveStringsA(UINT,LPSTR);
DECLSPEC_IMPORT UINT         GetLogicalDriveStringsW(UINT,LPWSTR);

DECLSPEC_IMPORT DWORD        GetLongPathNameA(LPCSTR,LPSTR,DWORD);
DECLSPEC_IMPORT DWORD        GetLongPathNameW(LPCWSTR,LPWSTR,DWORD);

DECLSPEC_IMPORT BOOL         GetMailslotInfo(HANDLE,LPDWORD,LPDWORD,LPDWORD,LPDWORD);
DECLSPEC_IMPORT DWORD        GetMaximumProcessorCount(WORD);
DECLSPEC_IMPORT DWORD        GetModuleFileNameA(HMODULE,LPSTR,DWORD);
DECLSPEC_IMPORT DWORD        GetModuleFileNameW(HMODULE,LPWSTR,DWORD);

DECLSPEC_IMPORT HMODULE      GetModuleHandleA(LPCSTR);
DECLSPEC_IMPORT HMODULE      GetModuleHandleW(LPCWSTR);

DECLSPEC_IMPORT BOOL         GetModuleHandleExA(DWORD,LPCSTR,HMODULE*);
DECLSPEC_IMPORT BOOL         GetModuleHandleExW(DWORD,LPCWSTR,HMODULE*);

DECLSPEC_IMPORT BOOL         GetNamedPipeClientProcessId(HANDLE,PULONG);
DECLSPEC_IMPORT BOOL         GetNamedPipeClientSessionId(HANDLE,PULONG);
DECLSPEC_IMPORT BOOL         GetNamedPipeHandleStateA(HANDLE,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPSTR,DWORD);
DECLSPEC_IMPORT BOOL         GetNamedPipeHandleStateW(HANDLE,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPWSTR,DWORD);

DECLSPEC_IMPORT BOOL         GetNamedPipeInfo(HANDLE,LPDWORD,LPDWORD,LPDWORD,LPDWORD);
DECLSPEC_IMPORT BOOL         GetNamedPipeServerProcessId(HANDLE,PULONG);
DECLSPEC_IMPORT BOOL         GetNamedPipeServerSessionId(HANDLE,PULONG);
DECLSPEC_IMPORT VOID         GetNativeSystemInfo(LPSYSTEM_INFO);
DECLSPEC_IMPORT PUMS_CONTEXT  GetNextUmsListItem(PUMS_CONTEXT);
DECLSPEC_IMPORT BOOL         GetNumaAvailableMemoryNode(UCHAR,PULONGLONG);
DECLSPEC_IMPORT BOOL         GetNumaAvailableMemoryNodeEx(USHORT,PULONGLONG);
DECLSPEC_IMPORT BOOL         GetNumaNodeProcessorMaskEx(USHORT,PGROUP_AFFINITY);
DECLSPEC_IMPORT BOOL         GetNumaProcessorNode(UCHAR,PUCHAR);
DECLSPEC_IMPORT BOOL         GetNumaProcessorNodeEx(PPROCESSOR_NUMBER,PUSHORT);
DECLSPEC_IMPORT BOOL         GetNumaProximityNode(ULONG,PUCHAR);
DECLSPEC_IMPORT BOOL         GetNumaProximityNodeEx(ULONG,PUSHORT);
DECLSPEC_IMPORT  BOOL         GetNumberOfEventLogRecords(HANDLE,PDWORD);
DECLSPEC_IMPORT  BOOL         GetOldestEventLogRecord(HANDLE,PDWORD);
DECLSPEC_IMPORT BOOL         GetOverlappedResult(HANDLE,LPOVERLAPPED,LPDWORD,BOOL);
DECLSPEC_IMPORT BOOL         GetOverlappedResultEx(HANDLE,OVERLAPPED*,DWORD*,DWORD,BOOL);
DECLSPEC_IMPORT DWORD        GetPriorityClass(HANDLE);
DECLSPEC_IMPORT  BOOL         GetPrivateObjectSecurity(PSECURITY_DESCRIPTOR,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,DWORD,PDWORD);
DECLSPEC_IMPORT UINT         GetPrivateProfileIntA(LPCSTR,LPCSTR,INT,LPCSTR);
DECLSPEC_IMPORT UINT         GetPrivateProfileIntW(LPCWSTR,LPCWSTR,INT,LPCWSTR);

DECLSPEC_IMPORT INT          GetPrivateProfileSectionA(LPCSTR,LPSTR,DWORD,LPCSTR);
DECLSPEC_IMPORT INT          GetPrivateProfileSectionW(LPCWSTR,LPWSTR,DWORD,LPCWSTR);

DECLSPEC_IMPORT DWORD        GetPrivateProfileSectionNamesA(LPSTR,DWORD,LPCSTR);
DECLSPEC_IMPORT DWORD        GetPrivateProfileSectionNamesW(LPWSTR,DWORD,LPCWSTR);

DECLSPEC_IMPORT INT          GetPrivateProfileStringA(LPCSTR,LPCSTR,LPCSTR,LPSTR,UINT,LPCSTR);
DECLSPEC_IMPORT INT          GetPrivateProfileStringW(LPCWSTR,LPCWSTR,LPCWSTR,LPWSTR,UINT,LPCWSTR);

DECLSPEC_IMPORT BOOL         GetPrivateProfileStructA(LPCSTR,LPCSTR,LPVOID,UINT,LPCSTR);
DECLSPEC_IMPORT BOOL         GetPrivateProfileStructW(LPCWSTR,LPCWSTR,LPVOID,UINT,LPCWSTR);

DECLSPEC_IMPORT FARPROC      GetProcAddress(HMODULE,LPCSTR);
DECLSPEC_IMPORT BOOL         GetProcessAffinityMask(HANDLE,PDWORD_PTR,PDWORD_PTR);
DECLSPEC_IMPORT BOOL         GetLogicalProcessorInformation(PSYSTEM_LOGICAL_PROCESSOR_INFORMATION,PDWORD);
DECLSPEC_IMPORT BOOL         GetLogicalProcessorInformationEx(LOGICAL_PROCESSOR_RELATIONSHIP,PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX,PDWORD);
DECLSPEC_IMPORT DWORD        GetProcessHeaps(DWORD,PHANDLE);
DECLSPEC_IMPORT DWORD        GetProcessId(HANDLE);
DECLSPEC_IMPORT DWORD        GetProcessIdOfThread(HANDLE);
DECLSPEC_IMPORT BOOL         GetProcessInformation(HANDLE,PROCESS_INFORMATION_CLASS,void*,DWORD);
DECLSPEC_IMPORT BOOL         GetProcessIoCounters(HANDLE,PIO_COUNTERS);
DECLSPEC_IMPORT BOOL         GetProcessPriorityBoost(HANDLE,PBOOL);
DECLSPEC_IMPORT BOOL         GetProcessShutdownParameters(LPDWORD,LPDWORD);
DECLSPEC_IMPORT BOOL         GetProcessTimes(HANDLE,LPFILETIME,LPFILETIME,LPFILETIME,LPFILETIME);
DECLSPEC_IMPORT DWORD        GetProcessVersion(DWORD);
DECLSPEC_IMPORT BOOL         GetProcessWorkingSetSize(HANDLE,PSIZE_T,PSIZE_T);
DECLSPEC_IMPORT BOOL         GetProcessWorkingSetSizeEx(HANDLE,SIZE_T*,SIZE_T*,DWORD*);
DECLSPEC_IMPORT BOOL         GetProductInfo(DWORD,DWORD,DWORD,DWORD,PDWORD);
DECLSPEC_IMPORT UINT         GetProfileIntA(LPCSTR,LPCSTR,INT);
DECLSPEC_IMPORT UINT         GetProfileIntW(LPCWSTR,LPCWSTR,INT);

DECLSPEC_IMPORT INT          GetProfileSectionA(LPCSTR,LPSTR,DWORD);
DECLSPEC_IMPORT INT          GetProfileSectionW(LPCWSTR,LPWSTR,DWORD);

DECLSPEC_IMPORT INT          GetProfileStringA(LPCSTR,LPCSTR,LPCSTR,LPSTR,UINT);
DECLSPEC_IMPORT INT          GetProfileStringW(LPCWSTR,LPCWSTR,LPCWSTR,LPWSTR,UINT);

DECLSPEC_IMPORT BOOL         GetQueuedCompletionStatus(HANDLE,LPDWORD,PULONG_PTR,LPOVERLAPPED*,DWORD);
DECLSPEC_IMPORT BOOL         GetQueuedCompletionStatusEx(HANDLE,OVERLAPPED_ENTRY*,ULONG,ULONG*,DWORD,BOOL);
DECLSPEC_IMPORT  BOOL         GetSecurityDescriptorControl(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR_CONTROL,LPDWORD);
DECLSPEC_IMPORT  BOOL         GetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR,LPBOOL,PACL *,LPBOOL);
DECLSPEC_IMPORT  BOOL         GetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR,PSID *,LPBOOL);
DECLSPEC_IMPORT  DWORD        GetSecurityDescriptorLength(PSECURITY_DESCRIPTOR);
DECLSPEC_IMPORT  BOOL         GetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR,PSID *,LPBOOL);
DECLSPEC_IMPORT  BOOL         GetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR,LPBOOL,PACL *,LPBOOL);
DECLSPEC_IMPORT  PSID_IDENTIFIER_AUTHORITY  GetSidIdentifierAuthority(PSID);
DECLSPEC_IMPORT  DWORD        GetSidLengthRequired(BYTE);
DECLSPEC_IMPORT  PDWORD       GetSidSubAuthority(PSID,DWORD);
DECLSPEC_IMPORT  PUCHAR       GetSidSubAuthorityCount(PSID);
DECLSPEC_IMPORT DWORD        GetShortPathNameA(LPCSTR,LPSTR,DWORD);
DECLSPEC_IMPORT DWORD        GetShortPathNameW(LPCWSTR,LPWSTR,DWORD);

DECLSPEC_IMPORT VOID         GetStartupInfoA(LPSTARTUPINFOA);
DECLSPEC_IMPORT VOID         GetStartupInfoW(LPSTARTUPINFOW);

DECLSPEC_IMPORT HANDLE       GetStdHandle(DWORD);
DECLSPEC_IMPORT BOOL         GetSystemCpuSetInformation(SYSTEM_CPU_SET_INFORMATION*,ULONG,ULONG*,HANDLE,ULONG);
DECLSPEC_IMPORT UINT         GetSystemDirectoryA(LPSTR,UINT);
DECLSPEC_IMPORT UINT         GetSystemDirectoryW(LPWSTR,UINT);

DECLSPEC_IMPORT UINT         GetSystemFirmwareTable(DWORD,DWORD,PVOID,DWORD);
DECLSPEC_IMPORT VOID         GetSystemInfo(LPSYSTEM_INFO);
DECLSPEC_IMPORT BOOL         GetSystemPowerStatus(LPSYSTEM_POWER_STATUS);
DECLSPEC_IMPORT BOOL         GetSystemRegistryQuota(PDWORD,PDWORD);
DECLSPEC_IMPORT VOID         GetSystemTime(LPSYSTEMTIME);
DECLSPEC_IMPORT BOOL         GetSystemTimeAdjustment(PDWORD,PDWORD,PBOOL);
DECLSPEC_IMPORT VOID         GetSystemTimeAsFileTime(LPFILETIME);
DECLSPEC_IMPORT VOID         GetSystemTimePreciseAsFileTime(LPFILETIME);
DECLSPEC_IMPORT UINT         GetSystemWindowsDirectoryA(LPSTR,UINT);
DECLSPEC_IMPORT UINT         GetSystemWindowsDirectoryW(LPWSTR,UINT);

DECLSPEC_IMPORT UINT         GetSystemWow64Directory2A(LPSTR,UINT,WORD);
DECLSPEC_IMPORT UINT         GetSystemWow64Directory2W(LPWSTR,UINT,WORD);

DECLSPEC_IMPORT UINT         GetSystemWow64DirectoryA(LPSTR,UINT);
DECLSPEC_IMPORT UINT         GetSystemWow64DirectoryW(LPWSTR,UINT);

DECLSPEC_IMPORT DWORD        GetTapeParameters(HANDLE,DWORD,LPDWORD,LPVOID);
DECLSPEC_IMPORT DWORD        GetTapePosition(HANDLE,DWORD,LPDWORD,LPDWORD,LPDWORD);
DECLSPEC_IMPORT DWORD        GetTapeStatus(HANDLE);
DECLSPEC_IMPORT UINT         GetTempFileNameA(LPCSTR,LPCSTR,UINT,LPSTR);
DECLSPEC_IMPORT UINT         GetTempFileNameW(LPCWSTR,LPCWSTR,UINT,LPWSTR);

DECLSPEC_IMPORT DWORD        GetTempPathA(DWORD,LPSTR);
DECLSPEC_IMPORT DWORD        GetTempPathW(DWORD,LPWSTR);

DECLSPEC_IMPORT BOOL         GetThreadContext(HANDLE,CONTEXT *);
DECLSPEC_IMPORT DWORD        GetThreadErrorMode(void);
DECLSPEC_IMPORT DWORD        GetThreadId(HANDLE);
DECLSPEC_IMPORT BOOL         GetThreadIOPendingFlag(HANDLE,PBOOL);
DECLSPEC_IMPORT INT          GetThreadPriority(HANDLE);
DECLSPEC_IMPORT BOOL         GetThreadPriorityBoost(HANDLE,PBOOL);
DECLSPEC_IMPORT BOOL         GetThreadSelectorEntry(HANDLE,DWORD,LPLDT_ENTRY);
DECLSPEC_IMPORT BOOL         GetThreadTimes(HANDLE,LPFILETIME,LPFILETIME,LPFILETIME,LPFILETIME);
DECLSPEC_IMPORT DWORD        GetTickCount(void);
DECLSPEC_IMPORT ULONGLONG    GetTickCount64(void);
DECLSPEC_IMPORT  BOOL         GetTokenInformation(HANDLE,TOKEN_INFORMATION_CLASS,LPVOID,DWORD,LPDWORD);
DECLSPEC_IMPORT BOOL         GetUmsCompletionListEvent(PUMS_COMPLETION_LIST, PHANDLE);
DECLSPEC_IMPORT  BOOL         GetUserNameA(LPSTR,LPDWORD);
DECLSPEC_IMPORT  BOOL         GetUserNameW(LPWSTR,LPDWORD);

DECLSPEC_IMPORT DWORD        GetVersion(void);
DECLSPEC_IMPORT BOOL         GetVersionExA(OSVERSIONINFOA*);
DECLSPEC_IMPORT BOOL         GetVersionExW(OSVERSIONINFOW*);

DECLSPEC_IMPORT BOOL         GetVolumeInformationA(LPCSTR,LPSTR,DWORD,LPDWORD,LPDWORD,LPDWORD,LPSTR,DWORD);
DECLSPEC_IMPORT BOOL         GetVolumeInformationW(LPCWSTR,LPWSTR,DWORD,LPDWORD,LPDWORD,LPDWORD,LPWSTR,DWORD);

DECLSPEC_IMPORT BOOL         GetVolumeInformationByHandleW(HANDLE,WCHAR *,DWORD,DWORD *,DWORD *,DWORD *,WCHAR *,DWORD);
DECLSPEC_IMPORT BOOL         GetVolumeNameForVolumeMountPointA(LPCSTR,LPSTR,DWORD);
DECLSPEC_IMPORT BOOL         GetVolumeNameForVolumeMountPointW(LPCWSTR,LPWSTR,DWORD);

DECLSPEC_IMPORT BOOL         GetVolumePathNameA(LPCSTR,LPSTR,DWORD);
DECLSPEC_IMPORT BOOL         GetVolumePathNameW(LPCWSTR,LPWSTR,DWORD);

DECLSPEC_IMPORT BOOL         GetVolumePathNamesForVolumeNameA(LPCSTR,LPSTR,DWORD,PDWORD);
DECLSPEC_IMPORT BOOL         GetVolumePathNamesForVolumeNameW(LPCWSTR,LPWSTR,DWORD,PDWORD);

DECLSPEC_IMPORT  BOOL         GetWindowsAccountDomainSid(PSID,PSID,DWORD*);
DECLSPEC_IMPORT UINT         GetWindowsDirectoryA(LPSTR,UINT);
DECLSPEC_IMPORT UINT         GetWindowsDirectoryW(LPWSTR,UINT);

DECLSPEC_IMPORT UINT         GetWriteWatch(DWORD,LPVOID,SIZE_T,LPVOID*,ULONG_PTR*,ULONG*);
DECLSPEC_IMPORT BOOL         GetXStateFeaturesMask(CONTEXT*,DWORD64*);
DECLSPEC_IMPORT ATOM         GlobalAddAtomA(LPCSTR);
DECLSPEC_IMPORT ATOM         GlobalAddAtomW(LPCWSTR);

DECLSPEC_IMPORT HGLOBAL      GlobalFree(HGLOBAL);
DECLSPEC_IMPORT HGLOBAL      GlobalAlloc(UINT,SIZE_T) __WINE_ALLOC_SIZE(2) __WINE_DEALLOC(GlobalFree) __WINE_MALLOC;
DECLSPEC_IMPORT SIZE_T       GlobalCompact(DWORD);
DECLSPEC_IMPORT ATOM         GlobalDeleteAtom(ATOM);
DECLSPEC_IMPORT ATOM         GlobalFindAtomA(LPCSTR);
DECLSPEC_IMPORT ATOM         GlobalFindAtomW(LPCWSTR);

DECLSPEC_IMPORT VOID         GlobalFix(HGLOBAL);
DECLSPEC_IMPORT UINT         GlobalFlags(HGLOBAL);
DECLSPEC_IMPORT UINT         GlobalGetAtomNameA(ATOM,LPSTR,INT);
DECLSPEC_IMPORT UINT         GlobalGetAtomNameW(ATOM,LPWSTR,INT);

DECLSPEC_IMPORT HGLOBAL      GlobalHandle(LPCVOID);
DECLSPEC_IMPORT LPVOID       GlobalLock(HGLOBAL);
DECLSPEC_IMPORT VOID         GlobalMemoryStatus(LPMEMORYSTATUS);
DECLSPEC_IMPORT BOOL         GlobalMemoryStatusEx(LPMEMORYSTATUSEX);
DECLSPEC_IMPORT HGLOBAL      GlobalReAlloc(HGLOBAL,SIZE_T,UINT) __WINE_ALLOC_SIZE(2) __WINE_DEALLOC(GlobalFree);
DECLSPEC_IMPORT SIZE_T       GlobalSize(HGLOBAL);
DECLSPEC_IMPORT VOID         GlobalUnfix(HGLOBAL);
DECLSPEC_IMPORT BOOL         GlobalUnlock(HGLOBAL);
DECLSPEC_IMPORT BOOL         GlobalUnWire(HGLOBAL);
DECLSPEC_IMPORT LPVOID       GlobalWire(HGLOBAL);

DECLSPEC_IMPORT BOOL         HeapFree(HANDLE,DWORD,LPVOID);
DECLSPEC_IMPORT LPVOID       HeapAlloc(HANDLE,DWORD,SIZE_T) __WINE_ALLOC_SIZE(3) __WINE_DEALLOC(HeapFree,3) __WINE_MALLOC;
DECLSPEC_IMPORT SIZE_T       HeapCompact(HANDLE,DWORD);
DECLSPEC_IMPORT HANDLE       HeapCreate(DWORD,SIZE_T,SIZE_T);
DECLSPEC_IMPORT BOOL         HeapDestroy(HANDLE);
DECLSPEC_IMPORT BOOL         HeapLock(HANDLE);
DECLSPEC_IMPORT LPVOID       HeapReAlloc(HANDLE,DWORD,LPVOID,SIZE_T) __WINE_ALLOC_SIZE(4) __WINE_DEALLOC(HeapFree,3);
DECLSPEC_IMPORT BOOL         HeapQueryInformation(HANDLE,HEAP_INFORMATION_CLASS,PVOID,SIZE_T,PSIZE_T);
DECLSPEC_IMPORT BOOL         HeapSetInformation(HANDLE,HEAP_INFORMATION_CLASS,PVOID,SIZE_T);
DECLSPEC_IMPORT SIZE_T       HeapSize(HANDLE,DWORD,LPCVOID);
DECLSPEC_IMPORT BOOL         HeapUnlock(HANDLE);
DECLSPEC_IMPORT BOOL         HeapValidate(HANDLE,DWORD,LPCVOID);
DECLSPEC_IMPORT BOOL         HeapWalk(HANDLE,LPPROCESS_HEAP_ENTRY);
DECLSPEC_IMPORT BOOL         InitAtomTable(DWORD);
DECLSPEC_IMPORT  BOOL         InitializeAcl(PACL,DWORD,DWORD);
DECLSPEC_IMPORT VOID         InitializeConditionVariable(PCONDITION_VARIABLE);
DECLSPEC_IMPORT BOOL         InitializeContext(void *,DWORD,CONTEXT **,DWORD *);
DECLSPEC_IMPORT BOOL         InitializeContext2(void *,DWORD,CONTEXT **,DWORD *,ULONG64);
DECLSPEC_IMPORT void         InitializeCriticalSection(CRITICAL_SECTION *lpCrit);
DECLSPEC_IMPORT BOOL         InitializeCriticalSectionAndSpinCount(CRITICAL_SECTION *,DWORD);
DECLSPEC_IMPORT BOOL         InitializeCriticalSectionEx(CRITICAL_SECTION *,DWORD,DWORD);
DECLSPEC_IMPORT BOOL         InitializeProcThreadAttributeList(struct _PROC_THREAD_ATTRIBUTE_LIST*,DWORD,DWORD,SIZE_T*);
DECLSPEC_IMPORT  BOOL         InitializeSecurityDescriptor(PSECURITY_DESCRIPTOR,DWORD);
DECLSPEC_IMPORT  BOOL         InitializeSid(PSID,PSID_IDENTIFIER_AUTHORITY,BYTE);
DECLSPEC_IMPORT VOID         InitializeSListHead(PSLIST_HEADER);
DECLSPEC_IMPORT VOID         InitializeSRWLock(PSRWLOCK);
DECLSPEC_IMPORT BOOL         InitOnceBeginInitialize(PINIT_ONCE, DWORD, PBOOL, PVOID*);
DECLSPEC_IMPORT BOOL         InitOnceComplete(PINIT_ONCE, DWORD, PVOID);
DECLSPEC_IMPORT BOOL         InitOnceExecuteOnce(PINIT_ONCE,PINIT_ONCE_FN,PVOID,PVOID*);
DECLSPEC_IMPORT VOID         InitOnceInitialize(PINIT_ONCE);
DECLSPEC_IMPORT PSLIST_ENTRY  InterlockedFlushSList(PSLIST_HEADER);
DECLSPEC_IMPORT PSLIST_ENTRY  InterlockedPopEntrySList(PSLIST_HEADER);
DECLSPEC_IMPORT PSLIST_ENTRY  InterlockedPushEntrySList(PSLIST_HEADER, PSLIST_ENTRY);
DECLSPEC_IMPORT BOOL         IsApiSetImplemented(LPCSTR);
DECLSPEC_IMPORT BOOL         IsBadCodePtr(FARPROC);
DECLSPEC_IMPORT BOOL         IsBadHugeReadPtr(LPCVOID,UINT_PTR);
DECLSPEC_IMPORT BOOL         IsBadHugeWritePtr(LPVOID,UINT_PTR);
DECLSPEC_IMPORT BOOL         IsBadReadPtr(LPCVOID,UINT_PTR);
DECLSPEC_IMPORT BOOL         IsBadStringPtrA(LPCSTR,UINT_PTR);
DECLSPEC_IMPORT BOOL         IsBadStringPtrW(LPCWSTR,UINT_PTR);

DECLSPEC_IMPORT BOOL         IsBadWritePtr(LPVOID,UINT_PTR);
DECLSPEC_IMPORT BOOL         IsDebuggerPresent(void);
DECLSPEC_IMPORT BOOL         IsSystemResumeAutomatic(void);
DECLSPEC_IMPORT  BOOL         IsTextUnicode(LPCVOID,INT,LPINT);
DECLSPEC_IMPORT  BOOL         IsTokenRestricted(HANDLE);
DECLSPEC_IMPORT  BOOL         IsValidAcl(PACL);
DECLSPEC_IMPORT  BOOL         IsValidSecurityDescriptor(PSECURITY_DESCRIPTOR);
DECLSPEC_IMPORT  BOOL         IsValidSid(PSID);
DECLSPEC_IMPORT  BOOL         IsWellKnownSid(PSID,WELL_KNOWN_SID_TYPE);
DECLSPEC_IMPORT BOOL         IsWow64Process(HANDLE,PBOOL);
DECLSPEC_IMPORT BOOL         IsWow64Process2(HANDLE,USHORT*,USHORT*);
DECLSPEC_IMPORT  BOOL         ImpersonateLoggedOnUser(HANDLE);
DECLSPEC_IMPORT  BOOL         ImpersonateNamedPipeClient(HANDLE);
DECLSPEC_IMPORT  BOOL         ImpersonateSelf(SECURITY_IMPERSONATION_LEVEL);
DECLSPEC_IMPORT BOOL         IsProcessInJob(HANDLE,HANDLE,PBOOL);
DECLSPEC_IMPORT BOOL         IsProcessorFeaturePresent(DWORD);
DECLSPEC_IMPORT void         LeaveCriticalSection(CRITICAL_SECTION *lpCrit);
DECLSPEC_IMPORT HMODULE      LoadLibraryA(LPCSTR);
DECLSPEC_IMPORT HMODULE      LoadLibraryW(LPCWSTR);

DECLSPEC_IMPORT HMODULE      LoadLibraryExA(LPCSTR,HANDLE,DWORD);
DECLSPEC_IMPORT HMODULE      LoadLibraryExW(LPCWSTR,HANDLE,DWORD);

DECLSPEC_IMPORT DWORD        LoadModule(LPCSTR,LPVOID);
DECLSPEC_IMPORT HMODULE      LoadPackagedLibrary(LPCWSTR,DWORD);
DECLSPEC_IMPORT HGLOBAL      LoadResource(HMODULE,HRSRC);
DECLSPEC_IMPORT HLOCAL       LocalFree(HLOCAL);
DECLSPEC_IMPORT HLOCAL       LocalAlloc(UINT,SIZE_T) __WINE_ALLOC_SIZE(2) __WINE_DEALLOC(LocalFree) __WINE_MALLOC;
DECLSPEC_IMPORT SIZE_T       LocalCompact(UINT);
DECLSPEC_IMPORT UINT         LocalFlags(HLOCAL);
DECLSPEC_IMPORT HLOCAL       LocalHandle(LPCVOID);
DECLSPEC_IMPORT LPVOID       LocalLock(HLOCAL);
DECLSPEC_IMPORT HLOCAL       LocalReAlloc(HLOCAL,SIZE_T,UINT) __WINE_ALLOC_SIZE(2) __WINE_DEALLOC(LocalFree);
DECLSPEC_IMPORT SIZE_T       LocalShrink(HGLOBAL,UINT);
DECLSPEC_IMPORT SIZE_T       LocalSize(HLOCAL);
DECLSPEC_IMPORT BOOL         LocalUnlock(HLOCAL);
DECLSPEC_IMPORT void *       LocateXStateFeature(CONTEXT *,DWORD,DWORD *);
DECLSPEC_IMPORT LPVOID       LockResource(HGLOBAL);

DECLSPEC_IMPORT  BOOL         LookupAccountNameA(LPCSTR,LPCSTR,PSID,LPDWORD,LPSTR,LPDWORD,PSID_NAME_USE);
DECLSPEC_IMPORT  BOOL         LookupAccountNameW(LPCWSTR,LPCWSTR,PSID,LPDWORD,LPWSTR,LPDWORD,PSID_NAME_USE);

DECLSPEC_IMPORT  BOOL         LookupAccountSidA(LPCSTR,PSID,LPSTR,LPDWORD,LPSTR,LPDWORD,PSID_NAME_USE);
DECLSPEC_IMPORT  BOOL         LookupAccountSidW(LPCWSTR,PSID,LPWSTR,LPDWORD,LPWSTR,LPDWORD,PSID_NAME_USE);

DECLSPEC_IMPORT  BOOL         LookupAccountSidLocalA(PSID,LPSTR,LPDWORD,LPSTR,LPDWORD,PSID_NAME_USE);
DECLSPEC_IMPORT  BOOL         LookupAccountSidLocalW(PSID,LPWSTR,LPDWORD,LPWSTR,LPDWORD,PSID_NAME_USE);

DECLSPEC_IMPORT BOOL         LocalFileTimeToFileTime(const FILETIME*,LPFILETIME);
DECLSPEC_IMPORT BOOL         LockFile(HANDLE,DWORD,DWORD,DWORD,DWORD);
DECLSPEC_IMPORT BOOL         LockFileEx(HANDLE, DWORD, DWORD, DWORD, DWORD, LPOVERLAPPED);
DECLSPEC_IMPORT  BOOL         LogonUserA(LPCSTR,LPCSTR,LPCSTR,DWORD,DWORD,PHANDLE);
DECLSPEC_IMPORT  BOOL         LogonUserW(LPCWSTR,LPCWSTR,LPCWSTR,DWORD,DWORD,PHANDLE);

DECLSPEC_IMPORT  BOOL         LookupPrivilegeDisplayNameA(LPCSTR,LPCSTR,LPSTR,LPDWORD,LPDWORD);
DECLSPEC_IMPORT  BOOL         LookupPrivilegeDisplayNameW(LPCWSTR,LPCWSTR,LPWSTR,LPDWORD,LPDWORD);

DECLSPEC_IMPORT  BOOL         LookupPrivilegeNameA(LPCSTR,PLUID,LPSTR,LPDWORD);
DECLSPEC_IMPORT  BOOL         LookupPrivilegeNameW(LPCWSTR,PLUID,LPWSTR,LPDWORD);

DECLSPEC_IMPORT  BOOL         LookupPrivilegeValueA(LPCSTR,LPCSTR,PLUID);
DECLSPEC_IMPORT  BOOL         LookupPrivilegeValueW(LPCWSTR,LPCWSTR,PLUID);

DECLSPEC_IMPORT  BOOL         MakeAbsoluteSD(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR,LPDWORD,PACL,LPDWORD,PACL,LPDWORD,PSID,LPDWORD,PSID,LPDWORD);
DECLSPEC_IMPORT void         MakeCriticalSectionGlobal(CRITICAL_SECTION *lpCrit);

DECLSPEC_IMPORT  BOOL         MakeSelfRelativeSD(PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR,LPDWORD);
DECLSPEC_IMPORT  VOID         MapGenericMask(PDWORD,PGENERIC_MAPPING);
DECLSPEC_IMPORT BOOL         MapUserPhysicalPages(PVOID,ULONG_PTR,PULONG_PTR);
DECLSPEC_IMPORT LPVOID       MapViewOfFile(HANDLE,DWORD,DWORD,DWORD,SIZE_T);
DECLSPEC_IMPORT LPVOID       MapViewOfFile3(HANDLE,HANDLE,PVOID,ULONG64,SIZE_T,ULONG,ULONG,MEM_EXTENDED_PARAMETER*,ULONG);
DECLSPEC_IMPORT LPVOID       MapViewOfFileEx(HANDLE,DWORD,DWORD,DWORD,SIZE_T,LPVOID);
DECLSPEC_IMPORT LPVOID       MapViewOfFileFromApp(HANDLE,ULONG,ULONG64,SIZE_T);
DECLSPEC_IMPORT BOOL         MoveFileA(LPCSTR,LPCSTR);
DECLSPEC_IMPORT BOOL         MoveFileW(LPCWSTR,LPCWSTR);

DECLSPEC_IMPORT BOOL         MoveFileExA(LPCSTR,LPCSTR,DWORD);
DECLSPEC_IMPORT BOOL         MoveFileExW(LPCWSTR,LPCWSTR,DWORD);

DECLSPEC_IMPORT BOOL         MoveFileTransactedA(const char*,const char*,LPPROGRESS_ROUTINE,void*,DWORD,HANDLE);
DECLSPEC_IMPORT BOOL         MoveFileTransactedW(const WCHAR*,const WCHAR*,LPPROGRESS_ROUTINE,void*,DWORD,HANDLE);

DECLSPEC_IMPORT BOOL         MoveFileWithProgressA(LPCSTR,LPCSTR,LPPROGRESS_ROUTINE,LPVOID,DWORD);
DECLSPEC_IMPORT BOOL         MoveFileWithProgressW(LPCWSTR,LPCWSTR,LPPROGRESS_ROUTINE,LPVOID,DWORD);

DECLSPEC_IMPORT INT          MulDiv(INT,INT,INT);
DECLSPEC_IMPORT BOOL         NeedCurrentDirectoryForExePathA(LPCSTR);
DECLSPEC_IMPORT BOOL         NeedCurrentDirectoryForExePathW(LPCWSTR);

DECLSPEC_IMPORT  BOOL         NotifyChangeEventLog(HANDLE,HANDLE);
DECLSPEC_IMPORT  BOOL         ObjectCloseAuditAlarmA(LPCSTR,LPVOID,BOOL);
DECLSPEC_IMPORT  BOOL         ObjectCloseAuditAlarmW(LPCWSTR,LPVOID,BOOL);

DECLSPEC_IMPORT  BOOL         ObjectDeleteAuditAlarmA(LPCSTR,LPVOID,BOOL);
DECLSPEC_IMPORT  BOOL         ObjectDeleteAuditAlarmW(LPCWSTR,LPVOID,BOOL);

DECLSPEC_IMPORT  BOOL         ObjectOpenAuditAlarmA(LPCSTR,LPVOID,LPSTR,LPSTR,PSECURITY_DESCRIPTOR,HANDLE,DWORD,DWORD,PPRIVILEGE_SET,BOOL,BOOL,LPBOOL);
DECLSPEC_IMPORT  BOOL         ObjectOpenAuditAlarmW(LPCWSTR,LPVOID,LPWSTR,LPWSTR,PSECURITY_DESCRIPTOR,HANDLE,DWORD,DWORD,PPRIVILEGE_SET,BOOL,BOOL,LPBOOL);

DECLSPEC_IMPORT  BOOL         ObjectPrivilegeAuditAlarmA(LPCSTR,LPVOID,HANDLE,DWORD,PPRIVILEGE_SET,BOOL);
DECLSPEC_IMPORT  BOOL         ObjectPrivilegeAuditAlarmW(LPCWSTR,LPVOID,HANDLE,DWORD,PPRIVILEGE_SET,BOOL);

DECLSPEC_IMPORT  HANDLE       OpenBackupEventLogA(LPCSTR,LPCSTR);
DECLSPEC_IMPORT  HANDLE       OpenBackupEventLogW(LPCWSTR,LPCWSTR);

DECLSPEC_IMPORT  DWORD        OpenEncryptedFileRawA(LPCSTR,ULONG,PVOID*);
DECLSPEC_IMPORT  DWORD        OpenEncryptedFileRawW(LPCWSTR,ULONG,PVOID*);

DECLSPEC_IMPORT HANDLE       OpenEventA(DWORD,BOOL,LPCSTR);
DECLSPEC_IMPORT HANDLE       OpenEventW(DWORD,BOOL,LPCWSTR);

DECLSPEC_IMPORT  HANDLE       OpenEventLogA(LPCSTR,LPCSTR);
DECLSPEC_IMPORT  HANDLE       OpenEventLogW(LPCWSTR,LPCWSTR);

DECLSPEC_IMPORT HFILE        OpenFile(LPCSTR,OFSTRUCT*,UINT);
DECLSPEC_IMPORT HANDLE       OpenFileMappingA(DWORD,BOOL,LPCSTR);
DECLSPEC_IMPORT HANDLE       OpenFileMappingW(DWORD,BOOL,LPCWSTR);

DECLSPEC_IMPORT HANDLE       OpenFileMappingFromApp(ULONG,BOOL,LPCWSTR);
DECLSPEC_IMPORT HANDLE       OpenJobObjectA(DWORD,BOOL,LPCSTR);
DECLSPEC_IMPORT HANDLE       OpenJobObjectW(DWORD,BOOL,LPCWSTR);

DECLSPEC_IMPORT HANDLE       OpenMutexA(DWORD,BOOL,LPCSTR);
DECLSPEC_IMPORT HANDLE       OpenMutexW(DWORD,BOOL,LPCWSTR);

DECLSPEC_IMPORT HANDLE       OpenProcess(DWORD,BOOL,DWORD);
DECLSPEC_IMPORT  BOOL         OpenProcessToken(HANDLE,DWORD,PHANDLE);
DECLSPEC_IMPORT HANDLE       OpenSemaphoreA(DWORD,BOOL,LPCSTR);
DECLSPEC_IMPORT HANDLE       OpenSemaphoreW(DWORD,BOOL,LPCWSTR);

DECLSPEC_IMPORT HANDLE       OpenThread(DWORD,BOOL,DWORD);
DECLSPEC_IMPORT  BOOL         OpenThreadToken(HANDLE,DWORD,BOOL,PHANDLE);
DECLSPEC_IMPORT HANDLE       OpenWaitableTimerA(DWORD,BOOL,LPCSTR);
DECLSPEC_IMPORT HANDLE       OpenWaitableTimerW(DWORD,BOOL,LPCWSTR);

DECLSPEC_IMPORT VOID         OutputDebugStringA(LPCSTR);
DECLSPEC_IMPORT VOID         OutputDebugStringW(LPCWSTR);

DECLSPEC_IMPORT BOOL         PeekNamedPipe(HANDLE,PVOID,DWORD,PDWORD,PDWORD,PDWORD);
DECLSPEC_IMPORT BOOL         PostQueuedCompletionStatus(HANDLE,DWORD,ULONG_PTR,LPOVERLAPPED);
DECLSPEC_IMPORT DWORD        PrepareTape(HANDLE,DWORD,BOOL);
DECLSPEC_IMPORT BOOL         ProcessIdToSessionId(DWORD,DWORD*);
DECLSPEC_IMPORT  BOOL         PrivilegeCheck(HANDLE,PPRIVILEGE_SET,LPBOOL);
DECLSPEC_IMPORT  BOOL         PrivilegedServiceAuditAlarmA(LPCSTR,LPCSTR,HANDLE,PPRIVILEGE_SET,BOOL);
DECLSPEC_IMPORT  BOOL         PrivilegedServiceAuditAlarmW(LPCWSTR,LPCWSTR,HANDLE,PPRIVILEGE_SET,BOOL);

DECLSPEC_IMPORT BOOL         PulseEvent(HANDLE);
DECLSPEC_IMPORT BOOL         PurgeComm(HANDLE,DWORD);
DECLSPEC_IMPORT BOOL         QueryActCtxSettingsW(DWORD,HANDLE,const WCHAR*,const WCHAR*,WCHAR*,SIZE_T,SIZE_T*);
DECLSPEC_IMPORT BOOL         QueryActCtxW(DWORD,HANDLE,PVOID,ULONG,PVOID,SIZE_T,SIZE_T *);
DECLSPEC_IMPORT USHORT       QueryDepthSList(PSLIST_HEADER);
DECLSPEC_IMPORT DWORD        QueryDosDeviceA(LPCSTR,LPSTR,DWORD);
DECLSPEC_IMPORT DWORD        QueryDosDeviceW(LPCWSTR,LPWSTR,DWORD);

DECLSPEC_IMPORT BOOL         QueryFullProcessImageNameA(HANDLE,DWORD,LPSTR,PDWORD);
DECLSPEC_IMPORT BOOL         QueryFullProcessImageNameW(HANDLE,DWORD,LPWSTR,PDWORD);

DECLSPEC_IMPORT BOOL         QueryInformationJobObject(HANDLE,JOBOBJECTINFOCLASS,LPVOID,DWORD,DWORD*);
DECLSPEC_IMPORT BOOL         QueryMemoryResourceNotification(HANDLE,PBOOL);
DECLSPEC_IMPORT BOOL         QueryPerformanceCounter(LARGE_INTEGER*);
DECLSPEC_IMPORT BOOL         QueryPerformanceFrequency(LARGE_INTEGER*);
DECLSPEC_IMPORT BOOL         QueryUmsThreadInformation(PUMS_CONTEXT,UMS_THREAD_INFO_CLASS,PVOID,ULONG,PULONG);
DECLSPEC_IMPORT DWORD        QueueUserAPC(PAPCFUNC,HANDLE,ULONG_PTR);
DECLSPEC_IMPORT BOOL         QueueUserWorkItem(LPTHREAD_START_ROUTINE,PVOID,ULONG);
DECLSPEC_IMPORT void         RaiseException(DWORD,DWORD,DWORD,const ULONG_PTR *);
DECLSPEC_IMPORT HANDLE       ReOpenFile(HANDLE,DWORD,DWORD,DWORD);
DECLSPEC_IMPORT  BOOL         ReadEventLogA(HANDLE,DWORD,DWORD,LPVOID,DWORD,DWORD *,DWORD *);
DECLSPEC_IMPORT  BOOL         ReadEventLogW(HANDLE,DWORD,DWORD,LPVOID,DWORD,DWORD *,DWORD *);

DECLSPEC_IMPORT BOOL         ReadDirectoryChangesW(HANDLE,LPVOID,DWORD,BOOL,DWORD,LPDWORD,LPOVERLAPPED,LPOVERLAPPED_COMPLETION_ROUTINE);
DECLSPEC_IMPORT  DWORD        ReadEncryptedFileRaw(PFE_EXPORT_FUNC,PVOID,PVOID);
DECLSPEC_IMPORT BOOL         ReadFile(HANDLE,LPVOID,DWORD,LPDWORD,LPOVERLAPPED);
DECLSPEC_IMPORT BOOL         ReadFileEx(HANDLE,LPVOID,DWORD,LPOVERLAPPED,LPOVERLAPPED_COMPLETION_ROUTINE);
DECLSPEC_IMPORT BOOL         ReadFileScatter(HANDLE,FILE_SEGMENT_ELEMENT*,DWORD,LPDWORD,LPOVERLAPPED);
DECLSPEC_IMPORT BOOL         ReadProcessMemory(HANDLE,LPCVOID,LPVOID,SIZE_T,SIZE_T*);
DECLSPEC_IMPORT  HANDLE       RegisterEventSourceA(LPCSTR,LPCSTR);
DECLSPEC_IMPORT  HANDLE       RegisterEventSourceW(LPCWSTR,LPCWSTR);

DECLSPEC_IMPORT BOOL         RegisterWaitForSingleObject(PHANDLE,HANDLE,WAITORTIMERCALLBACK,PVOID,ULONG,ULONG);
DECLSPEC_IMPORT HANDLE       RegisterWaitForSingleObjectEx(HANDLE,WAITORTIMERCALLBACK,PVOID,ULONG,ULONG);
DECLSPEC_IMPORT VOID         ReleaseActCtx(HANDLE);
DECLSPEC_IMPORT BOOL         ReleaseMutex(HANDLE);
DECLSPEC_IMPORT BOOL         ReleaseSemaphore(HANDLE,LONG,LPLONG);
DECLSPEC_IMPORT VOID         ReleaseSRWLockExclusive(PSRWLOCK);
DECLSPEC_IMPORT VOID         ReleaseSRWLockShared(PSRWLOCK);
DECLSPEC_IMPORT ULONG        RemoveVectoredExceptionHandler(PVOID);
DECLSPEC_IMPORT BOOL         ReplaceFileA(LPCSTR,LPCSTR,LPCSTR,DWORD,LPVOID,LPVOID);
DECLSPEC_IMPORT BOOL         ReplaceFileW(LPCWSTR,LPCWSTR,LPCWSTR,DWORD,LPVOID,LPVOID);

DECLSPEC_IMPORT BOOL         RemoveDirectoryA(LPCSTR);
DECLSPEC_IMPORT BOOL         RemoveDirectoryW(LPCWSTR);

DECLSPEC_IMPORT  BOOL         ReportEventA(HANDLE,WORD,WORD,DWORD,PSID,WORD,DWORD,LPCSTR *,LPVOID);
DECLSPEC_IMPORT  BOOL         ReportEventW(HANDLE,WORD,WORD,DWORD,PSID,WORD,DWORD,LPCWSTR *,LPVOID);
DECLSPEC_IMPORT BOOL         RequestDeviceWakeup(HANDLE);
DECLSPEC_IMPORT BOOL         RequestWakeupLatency(LATENCY_TIME latency);

DECLSPEC_IMPORT BOOL         ResetEvent(HANDLE);
DECLSPEC_IMPORT UINT         ResetWriteWatch(LPVOID,SIZE_T);
DECLSPEC_IMPORT DWORD        ResumeThread(HANDLE);
DECLSPEC_IMPORT  BOOL         RevertToSelf(void);
DECLSPEC_IMPORT DWORD        SearchPathA(LPCSTR,LPCSTR,LPCSTR,DWORD,LPSTR,LPSTR*);
DECLSPEC_IMPORT DWORD        SearchPathW(LPCWSTR,LPCWSTR,LPCWSTR,DWORD,LPWSTR,LPWSTR*);

DECLSPEC_IMPORT  BOOL         SetAclInformation(PACL,LPVOID,DWORD,ACL_INFORMATION_CLASS);
DECLSPEC_IMPORT BOOL         SetCachedSigningLevel(PHANDLE,ULONG,ULONG,HANDLE);
DECLSPEC_IMPORT BOOL         SetCommConfig(HANDLE,LPCOMMCONFIG,DWORD);
DECLSPEC_IMPORT BOOL         SetCommBreak(HANDLE);
DECLSPEC_IMPORT BOOL         SetCommMask(HANDLE,DWORD);
DECLSPEC_IMPORT BOOL         SetCommState(HANDLE,LPDCB);
DECLSPEC_IMPORT BOOL         SetCommTimeouts(HANDLE,LPCOMMTIMEOUTS);
DECLSPEC_IMPORT BOOL         SetComputerNameA(LPCSTR);
DECLSPEC_IMPORT BOOL         SetComputerNameW(LPCWSTR);

DECLSPEC_IMPORT BOOL         SetComputerNameExA(COMPUTER_NAME_FORMAT,LPCSTR);
DECLSPEC_IMPORT BOOL         SetComputerNameExW(COMPUTER_NAME_FORMAT,LPCWSTR);

DECLSPEC_IMPORT DWORD        SetCriticalSectionSpinCount(LPCRITICAL_SECTION,DWORD);
DECLSPEC_IMPORT BOOL         SetCurrentDirectoryA(LPCSTR);
DECLSPEC_IMPORT BOOL         SetCurrentDirectoryW(LPCWSTR);

DECLSPEC_IMPORT BOOL         SetDefaultCommConfigA(LPCSTR,LPCOMMCONFIG,DWORD);
DECLSPEC_IMPORT BOOL         SetDefaultCommConfigW(LPCWSTR,LPCOMMCONFIG,DWORD);

DECLSPEC_IMPORT BOOL         SetDllDirectoryA(LPCSTR);
DECLSPEC_IMPORT BOOL         SetDllDirectoryW(LPCWSTR);

DECLSPEC_IMPORT BOOL         SetEndOfFile(HANDLE);
DECLSPEC_IMPORT BOOL         SetEnvironmentStringsA(char *);
DECLSPEC_IMPORT BOOL         SetEnvironmentStringsW(WCHAR *);

DECLSPEC_IMPORT BOOL         SetEnvironmentVariableA(LPCSTR,LPCSTR);
DECLSPEC_IMPORT BOOL         SetEnvironmentVariableW(LPCWSTR,LPCWSTR);

DECLSPEC_IMPORT UINT         SetErrorMode(UINT);
DECLSPEC_IMPORT BOOL         SetEvent(HANDLE);
DECLSPEC_IMPORT VOID         SetFileApisToANSI(void);
DECLSPEC_IMPORT VOID         SetFileApisToOEM(void);
DECLSPEC_IMPORT BOOL         SetFileAttributesA(LPCSTR,DWORD);
DECLSPEC_IMPORT BOOL         SetFileAttributesW(LPCWSTR,DWORD);

DECLSPEC_IMPORT BOOL         SetFileCompletionNotificationModes(HANDLE,UCHAR);
DECLSPEC_IMPORT BOOL         SetFileInformationByHandle(HANDLE,FILE_INFO_BY_HANDLE_CLASS,LPVOID,DWORD);
DECLSPEC_IMPORT DWORD        SetFilePointer(HANDLE,LONG,LPLONG,DWORD);
DECLSPEC_IMPORT BOOL         SetFilePointerEx(HANDLE,LARGE_INTEGER,LARGE_INTEGER*,DWORD);
DECLSPEC_IMPORT  BOOL         SetFileSecurityA(LPCSTR,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR);
DECLSPEC_IMPORT  BOOL         SetFileSecurityW(LPCWSTR,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR);

DECLSPEC_IMPORT BOOL         SetFileTime(HANDLE,const FILETIME*,const FILETIME*,const FILETIME*);
DECLSPEC_IMPORT BOOL         SetFileValidData(HANDLE,LONGLONG);
DECLSPEC_IMPORT UINT         SetHandleCount(UINT);
DECLSPEC_IMPORT BOOL         SetHandleInformation(HANDLE,DWORD,DWORD);
DECLSPEC_IMPORT BOOL         SetInformationJobObject(HANDLE,JOBOBJECTINFOCLASS,LPVOID,DWORD);
DECLSPEC_IMPORT  BOOL         SetKernelObjectSecurity(HANDLE,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR);
DECLSPEC_IMPORT BOOL         SetLocalTime(const SYSTEMTIME*);
DECLSPEC_IMPORT BOOL         SetMailslotInfo(HANDLE,DWORD);
DECLSPEC_IMPORT BOOL         SetNamedPipeHandleState(HANDLE,LPDWORD,LPDWORD,LPDWORD);
DECLSPEC_IMPORT BOOL         SetPriorityClass(HANDLE,DWORD);
DECLSPEC_IMPORT  BOOL         SetPrivateObjectSecurity(SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR*,PGENERIC_MAPPING,HANDLE);
DECLSPEC_IMPORT  BOOL         SetPrivateObjectSecurityEx(SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,PSECURITY_DESCRIPTOR*,ULONG,PGENERIC_MAPPING,HANDLE);
DECLSPEC_IMPORT BOOL         SetProcessAffinityMask(HANDLE,DWORD_PTR);
DECLSPEC_IMPORT BOOL         SetProcessInformation(HANDLE,PROCESS_INFORMATION_CLASS,LPVOID,DWORD);
DECLSPEC_IMPORT BOOL         SetProcessPriorityBoost(HANDLE,BOOL);
DECLSPEC_IMPORT BOOL         SetProcessShutdownParameters(DWORD,DWORD);
DECLSPEC_IMPORT BOOL         SetProcessWorkingSetSize(HANDLE,SIZE_T,SIZE_T);
DECLSPEC_IMPORT BOOL         SetProcessWorkingSetSizeEx(HANDLE,SIZE_T,SIZE_T,DWORD);
DECLSPEC_IMPORT BOOL         SetSearchPathMode(DWORD);
DECLSPEC_IMPORT  BOOL         SetSecurityDescriptorControl(PSECURITY_DESCRIPTOR,SECURITY_DESCRIPTOR_CONTROL,SECURITY_DESCRIPTOR_CONTROL);
DECLSPEC_IMPORT  BOOL         SetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR,BOOL,PACL,BOOL);
DECLSPEC_IMPORT  BOOL         SetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR,PSID,BOOL);
DECLSPEC_IMPORT  BOOL         SetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR,PSID,BOOL);
DECLSPEC_IMPORT  BOOL         SetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR,BOOL,PACL,BOOL);
DECLSPEC_IMPORT BOOL         SetStdHandle(DWORD,HANDLE);
DECLSPEC_IMPORT BOOL         SetStdHandleEx(DWORD,HANDLE,HANDLE*);

DECLSPEC_IMPORT BOOL         SetSystemPowerState(BOOL,BOOL);
DECLSPEC_IMPORT BOOL         SetSystemTime(const SYSTEMTIME*);
DECLSPEC_IMPORT BOOL         SetSystemTimeAdjustment(DWORD,BOOL);
DECLSPEC_IMPORT DWORD        SetTapeParameters(HANDLE,DWORD,LPVOID);
DECLSPEC_IMPORT DWORD        SetTapePosition(HANDLE,DWORD,DWORD,DWORD,DWORD,BOOL);
DECLSPEC_IMPORT DWORD_PTR    SetThreadAffinityMask(HANDLE,DWORD_PTR);
DECLSPEC_IMPORT BOOL         SetThreadContext(HANDLE,const CONTEXT *);
DECLSPEC_IMPORT BOOL         SetThreadErrorMode(DWORD,LPDWORD);
DECLSPEC_IMPORT DWORD        SetThreadExecutionState(EXECUTION_STATE);
DECLSPEC_IMPORT DWORD        SetThreadIdealProcessor(HANDLE,DWORD);
DECLSPEC_IMPORT BOOL         SetThreadPriority(HANDLE,INT);
DECLSPEC_IMPORT BOOL         SetThreadPriorityBoost(HANDLE,BOOL);
DECLSPEC_IMPORT  BOOL         SetThreadToken(PHANDLE,HANDLE);
DECLSPEC_IMPORT HANDLE       SetTimerQueueTimer(HANDLE,WAITORTIMERCALLBACK,PVOID,DWORD,DWORD,BOOL);
DECLSPEC_IMPORT  BOOL         SetTokenInformation(HANDLE,TOKEN_INFORMATION_CLASS,LPVOID,DWORD);
DECLSPEC_IMPORT LPTOP_LEVEL_EXCEPTION_FILTER  SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER);
DECLSPEC_IMPORT BOOL         SetVolumeLabelA(LPCSTR,LPCSTR);
DECLSPEC_IMPORT BOOL         SetVolumeLabelW(LPCWSTR,LPCWSTR);

DECLSPEC_IMPORT BOOL         SetVolumeMountPointA(LPCSTR,LPCSTR);
DECLSPEC_IMPORT BOOL         SetVolumeMountPointW(LPCWSTR,LPCWSTR);

DECLSPEC_IMPORT BOOL         SetWaitableTimer(HANDLE,const LARGE_INTEGER*,LONG,PTIMERAPCROUTINE,LPVOID,BOOL);
DECLSPEC_IMPORT BOOL         SetWaitableTimerEx(HANDLE,const LARGE_INTEGER*,LONG,PTIMERAPCROUTINE,LPVOID,REASON_CONTEXT*,ULONG);
DECLSPEC_IMPORT BOOL         SetUmsThreadInformation(PUMS_CONTEXT,UMS_THREAD_INFO_CLASS,void *,ULONG);
DECLSPEC_IMPORT BOOL         SetXStateFeaturesMask(CONTEXT*, DWORD64);
DECLSPEC_IMPORT BOOL         SetupComm(HANDLE,DWORD,DWORD);
DECLSPEC_IMPORT DWORD        SignalObjectAndWait(HANDLE,HANDLE,DWORD,BOOL);
DECLSPEC_IMPORT DWORD        SizeofResource(HMODULE,HRSRC);
DECLSPEC_IMPORT VOID         Sleep(DWORD);
DECLSPEC_IMPORT BOOL         SleepConditionVariableCS(PCONDITION_VARIABLE,PCRITICAL_SECTION,DWORD);
DECLSPEC_IMPORT BOOL         SleepConditionVariableSRW(PCONDITION_VARIABLE,PSRWLOCK,DWORD,ULONG);
DECLSPEC_IMPORT DWORD        SleepEx(DWORD,BOOL);
DECLSPEC_IMPORT DWORD        SuspendThread(HANDLE);
DECLSPEC_IMPORT void         SwitchToFiber(LPVOID);
DECLSPEC_IMPORT BOOL         SwitchToThread(void);
DECLSPEC_IMPORT BOOL         SystemTimeToFileTime(const SYSTEMTIME*,LPFILETIME);
DECLSPEC_IMPORT BOOL         TerminateJobObject(HANDLE,UINT);
DECLSPEC_IMPORT BOOL         TerminateProcess(HANDLE,DWORD);
DECLSPEC_IMPORT BOOL         TerminateThread(HANDLE,DWORD);
DECLSPEC_IMPORT DWORD        TlsAlloc(void);
DECLSPEC_IMPORT BOOL         TlsFree(DWORD);
DECLSPEC_IMPORT LPVOID       TlsGetValue(DWORD);
DECLSPEC_IMPORT BOOL         TlsSetValue(DWORD,LPVOID);
DECLSPEC_IMPORT BOOL         TransactNamedPipe(HANDLE,LPVOID,DWORD,LPVOID,DWORD,LPDWORD,LPOVERLAPPED);
DECLSPEC_IMPORT BOOL         TransmitCommChar(HANDLE,CHAR);
DECLSPEC_IMPORT BOOLEAN      TryAcquireSRWLockExclusive(PSRWLOCK);
DECLSPEC_IMPORT BOOLEAN      TryAcquireSRWLockShared(PSRWLOCK);
DECLSPEC_IMPORT BOOL         TryEnterCriticalSection(CRITICAL_SECTION *lpCrit);
DECLSPEC_IMPORT LONG         UnhandledExceptionFilter(PEXCEPTION_POINTERS);
DECLSPEC_IMPORT BOOL         UnlockFile(HANDLE,DWORD,DWORD,DWORD,DWORD);
DECLSPEC_IMPORT BOOL         UnlockFileEx(HANDLE,DWORD,DWORD,DWORD,LPOVERLAPPED);


DECLSPEC_IMPORT BOOL         UnmapViewOfFile(LPCVOID);
DECLSPEC_IMPORT BOOL         UnmapViewOfFile2(HANDLE,PVOID,ULONG);
DECLSPEC_IMPORT BOOL         UnmapViewOfFileEx(PVOID,ULONG);
DECLSPEC_IMPORT BOOL         UmsThreadYield(void *);
DECLSPEC_IMPORT HRESULT      UnregisterApplicationRestart(void);
DECLSPEC_IMPORT BOOL         UnregisterWait(HANDLE);
DECLSPEC_IMPORT BOOL         UnregisterWaitEx(HANDLE,HANDLE);
DECLSPEC_IMPORT BOOL         UpdateProcThreadAttribute(struct _PROC_THREAD_ATTRIBUTE_LIST*,DWORD,DWORD_PTR,void*,SIZE_T,void*,SIZE_T*);
DECLSPEC_IMPORT BOOL         UpdateResourceA(HANDLE,LPCSTR,LPCSTR,WORD,LPVOID,DWORD);
DECLSPEC_IMPORT BOOL         UpdateResourceW(HANDLE,LPCWSTR,LPCWSTR,WORD,LPVOID,DWORD);

DECLSPEC_IMPORT BOOL         VerifyVersionInfoA(LPOSVERSIONINFOEXA,DWORD,DWORDLONG);
DECLSPEC_IMPORT BOOL         VerifyVersionInfoW(LPOSVERSIONINFOEXW,DWORD,DWORDLONG);

DECLSPEC_IMPORT LPVOID       VirtualAlloc(LPVOID,SIZE_T,DWORD,DWORD);
DECLSPEC_IMPORT LPVOID       VirtualAlloc2(HANDLE,LPVOID,SIZE_T,DWORD,DWORD,MEM_EXTENDED_PARAMETER*,ULONG);
DECLSPEC_IMPORT LPVOID       VirtualAlloc2FromApp(HANDLE,LPVOID,SIZE_T,DWORD,DWORD,MEM_EXTENDED_PARAMETER*,ULONG);
DECLSPEC_IMPORT LPVOID       VirtualAllocEx(HANDLE,LPVOID,SIZE_T,DWORD,DWORD);
DECLSPEC_IMPORT LPVOID       VirtualAllocExNuma(HANDLE,void*,SIZE_T,DWORD,DWORD,DWORD);
DECLSPEC_IMPORT LPVOID       VirtualAllocFromApp(LPVOID,SIZE_T,DWORD,DWORD);
DECLSPEC_IMPORT BOOL         VirtualFree(LPVOID,SIZE_T,DWORD);
DECLSPEC_IMPORT BOOL         VirtualFreeEx(HANDLE,LPVOID,SIZE_T,DWORD);
DECLSPEC_IMPORT BOOL         VirtualLock(LPVOID,SIZE_T);
DECLSPEC_IMPORT BOOL         VirtualProtect(LPVOID,SIZE_T,DWORD,LPDWORD);
DECLSPEC_IMPORT BOOL         VirtualProtectEx(HANDLE,LPVOID,SIZE_T,DWORD,LPDWORD);
DECLSPEC_IMPORT SIZE_T       VirtualQuery(LPCVOID,PMEMORY_BASIC_INFORMATION,SIZE_T);
DECLSPEC_IMPORT SIZE_T       VirtualQueryEx(HANDLE,LPCVOID,PMEMORY_BASIC_INFORMATION,SIZE_T);
DECLSPEC_IMPORT BOOL         VirtualUnlock(LPVOID,SIZE_T);
DECLSPEC_IMPORT DWORD        WTSGetActiveConsoleSessionId(void);
DECLSPEC_IMPORT BOOL         WaitCommEvent(HANDLE,LPDWORD,LPOVERLAPPED);
DECLSPEC_IMPORT BOOL         WaitForDebugEvent(LPDEBUG_EVENT,DWORD);
DECLSPEC_IMPORT BOOL         WaitForDebugEventEx(LPDEBUG_EVENT,DWORD);
DECLSPEC_IMPORT DWORD        WaitForMultipleObjects(DWORD,const HANDLE*,BOOL,DWORD);
DECLSPEC_IMPORT DWORD        WaitForMultipleObjectsEx(DWORD,const HANDLE*,BOOL,DWORD,BOOL);
DECLSPEC_IMPORT DWORD        WaitForSingleObject(HANDLE,DWORD);
DECLSPEC_IMPORT DWORD        WaitForSingleObjectEx(HANDLE,DWORD,BOOL);
DECLSPEC_IMPORT BOOL         WaitNamedPipeA(LPCSTR,DWORD);
DECLSPEC_IMPORT BOOL         WaitNamedPipeW(LPCWSTR,DWORD);

DECLSPEC_IMPORT VOID         WakeAllConditionVariable(PCONDITION_VARIABLE);
DECLSPEC_IMPORT VOID         WakeConditionVariable(PCONDITION_VARIABLE);
DECLSPEC_IMPORT UINT         WinExec(LPCSTR,UINT);
DECLSPEC_IMPORT BOOL         Wow64DisableWow64FsRedirection(PVOID*);
DECLSPEC_IMPORT BOOLEAN      Wow64EnableWow64FsRedirection(BOOLEAN);
DECLSPEC_IMPORT BOOL         Wow64GetThreadContext(HANDLE, WOW64_CONTEXT *);
DECLSPEC_IMPORT BOOL         Wow64GetThreadSelectorEntry(HANDLE,DWORD,WOW64_LDT_ENTRY*);
DECLSPEC_IMPORT BOOL         Wow64RevertWow64FsRedirection(PVOID);
DECLSPEC_IMPORT BOOL         Wow64SetThreadContext(HANDLE, const WOW64_CONTEXT *);
DECLSPEC_IMPORT  DWORD        WriteEncryptedFileRaw(PFE_IMPORT_FUNC,PVOID,PVOID);
DECLSPEC_IMPORT BOOL         WriteFile(HANDLE,LPCVOID,DWORD,LPDWORD,LPOVERLAPPED);
DECLSPEC_IMPORT BOOL         WriteFileEx(HANDLE,LPCVOID,DWORD,LPOVERLAPPED,LPOVERLAPPED_COMPLETION_ROUTINE);
DECLSPEC_IMPORT BOOL         WriteFileGather(HANDLE,FILE_SEGMENT_ELEMENT*,DWORD,LPDWORD,LPOVERLAPPED);
DECLSPEC_IMPORT BOOL         WritePrivateProfileSectionA(LPCSTR,LPCSTR,LPCSTR);
DECLSPEC_IMPORT BOOL         WritePrivateProfileSectionW(LPCWSTR,LPCWSTR,LPCWSTR);

DECLSPEC_IMPORT BOOL         WritePrivateProfileStringA(LPCSTR,LPCSTR,LPCSTR,LPCSTR);
DECLSPEC_IMPORT BOOL         WritePrivateProfileStringW(LPCWSTR,LPCWSTR,LPCWSTR,LPCWSTR);

DECLSPEC_IMPORT BOOL         WritePrivateProfileStructA(LPCSTR,LPCSTR,LPVOID,UINT,LPCSTR);
DECLSPEC_IMPORT BOOL         WritePrivateProfileStructW(LPCWSTR,LPCWSTR,LPVOID,UINT,LPCWSTR);

DECLSPEC_IMPORT BOOL         WriteProcessMemory(HANDLE,LPVOID,LPCVOID,SIZE_T,SIZE_T*);
DECLSPEC_IMPORT BOOL         WriteProfileSectionA(LPCSTR,LPCSTR);
DECLSPEC_IMPORT BOOL         WriteProfileSectionW(LPCWSTR,LPCWSTR);

DECLSPEC_IMPORT BOOL         WriteProfileStringA(LPCSTR,LPCSTR,LPCSTR);
DECLSPEC_IMPORT BOOL         WriteProfileStringW(LPCWSTR,LPCWSTR,LPCWSTR);

DECLSPEC_IMPORT DWORD        WriteTapemark(HANDLE,DWORD,DWORD,BOOL);

DECLSPEC_IMPORT BOOL         ZombifyActCtx(HANDLE);

DECLSPEC_IMPORT INT          lstrcmpA(LPCSTR,LPCSTR);
DECLSPEC_IMPORT INT          lstrcmpW(LPCWSTR,LPCWSTR);
DECLSPEC_IMPORT INT          lstrcmpiA(LPCSTR,LPCSTR);
DECLSPEC_IMPORT INT          lstrcmpiW(LPCWSTR,LPCWSTR);
















static inline LPWSTR  lstrcpynW( LPWSTR dst, LPCWSTR src, INT n )
{
    LPWSTR d = dst;
    LPCWSTR s = src;
    UINT count = n;

    while ((count > 1) && *s)
    {
        count--;
        *d++ = *s++;
    }
    if (count) *d = 0;
    return dst;
}

static inline LPSTR  lstrcpynA( LPSTR dst, LPCSTR src, INT n )
{
    LPSTR d = dst;
    LPCSTR s = src;
    UINT count = n;

    while ((count > 1) && *s)
    {
        count--;
        *d++ = *s++;
    }
    if (count) *d = 0;
    return dst;
}

static inline INT  lstrlenW( LPCWSTR str )
{
    const WCHAR *s = str;
    while (*s) s++;
    return s - str;
}

static inline INT  lstrlenA( LPCSTR str )
{
    return strlen( str );
}

static inline LPWSTR  lstrcpyW( LPWSTR dst, LPCWSTR src )
{
    WCHAR *p = dst;
    while ((*p++ = *src++));
    return dst;
}

static inline LPSTR  lstrcpyA( LPSTR dst, LPCSTR src )
{
    return strcpy( dst, src );
}

static inline LPWSTR  lstrcatW( LPWSTR dst, LPCWSTR src )
{
    WCHAR *p = dst;
    while (*p) p++;
    while ((*p++ = *src++));
    return dst;
}

static inline LPSTR  lstrcatA( LPSTR dst, LPCSTR src )
{
    return strcat( dst, src );
}
















DECLSPEC_IMPORT LONG         _hread(HFILE,LPVOID,LONG);
DECLSPEC_IMPORT LONG         _hwrite(HFILE,LPCSTR,LONG);
DECLSPEC_IMPORT HFILE        _lcreat(LPCSTR,INT);
DECLSPEC_IMPORT HFILE        _lclose(HFILE);
DECLSPEC_IMPORT LONG         _llseek(HFILE,LONG,INT);
DECLSPEC_IMPORT HFILE        _lopen(LPCSTR,INT);
DECLSPEC_IMPORT UINT         _lread(HFILE,LPVOID,UINT);
DECLSPEC_IMPORT UINT         _lwrite(HFILE,LPCSTR,UINT);











extern char *  wine_get_unix_file_name( const WCHAR * ) __WINE_DEALLOC(HeapFree,3) __WINE_MALLOC;
extern WCHAR *  wine_get_dos_file_name( const char * ) __WINE_DEALLOC(HeapFree,3) __WINE_MALLOC;











static FORCEINLINE HANDLE  GetCurrentProcess(void)
{
    return (HANDLE)~(ULONG_PTR)0;
}

static FORCEINLINE DWORD  GetCurrentProcessId(void)
{
    return ((ULONG)(ULONG_PTR)( ((HANDLE *)NtCurrentTeb())[8] )) ;
}

static FORCEINLINE HANDLE  GetCurrentThread(void)
{
    return (HANDLE)~(ULONG_PTR)1;
}

static FORCEINLINE DWORD  GetCurrentThreadId(void)
{
    return ((ULONG)(ULONG_PTR)( ((HANDLE *)NtCurrentTeb())[9] )) ;
}

static FORCEINLINE DWORD  GetLastError(void)
{
    return *(DWORD *)((void **)NtCurrentTeb() + 13);
}

static FORCEINLINE HANDLE  GetProcessHeap(void)
{
    return ((HANDLE **)NtCurrentTeb())[12][6];
}

static FORCEINLINE void  SetLastError( DWORD err )
{
    *(DWORD *)((void **)NtCurrentTeb() + 13) = err;
}













static FORCEINLINE HANDLE  GetCurrentProcessToken(void)
{
    return (HANDLE)~(ULONG_PTR)3;
}

static FORCEINLINE HANDLE  GetCurrentThreadToken(void)
{
    return (HANDLE)~(ULONG_PTR)4;
}

static FORCEINLINE HANDLE  GetCurrentThreadEffectiveToken(void)
{
    return (HANDLE)~(ULONG_PTR)5;
}



int  WinMain(HINSTANCE,HINSTANCE,LPSTR,int);
int  wWinMain(HINSTANCE,HINSTANCE,LPWSTR,int);



BOOL  DllMain( HINSTANCE hinst, DWORD reason, LPVOID reserved );







# 61 "include/../tools/tools.h" 2
































struct target
{
    enum { CPU_i386, CPU_x86_64, CPU_ARM, CPU_ARM64, CPU_ARM64EC } cpu;

    enum
    {
        PLATFORM_UNSPECIFIED,
        PLATFORM_APPLE,
        PLATFORM_ANDROID,
        PLATFORM_LINUX,
        PLATFORM_FREEBSD,
        PLATFORM_SOLARIS,
        PLATFORM_WINDOWS,
        PLATFORM_MINGW,
        PLATFORM_CYGWIN
    } platform;
};

static inline void *xmalloc( size_t size )
{
    void *res = malloc( size ? size : 1 );

    if (res == ((void*)0))
    {
        fprintf( (__acrt_iob_func(2)), "Virtual memory exhausted.\n" );
        exit(1);
    }
    return res;
}

static inline void *xrealloc (void *ptr, size_t size)
{
    void *res = realloc( ptr, size );

    if (size && res == ((void*)0))
    {
        fprintf( (__acrt_iob_func(2)), "Virtual memory exhausted.\n" );
        exit(1);
    }
    return res;
}

static inline char *xstrdup( const char *str )
{
    return strcpy( xmalloc( strlen(str)+1 ), str );
}

static inline int strendswith( const char *str, const char *end )
{
    int l = strlen( str );
    int m = strlen( end );
    return l >= m && !strcmp( str + l - m, end );
}

static char *strmake( const char* fmt, ... ) ;
static inline char *strmake( const char* fmt, ... )
{
    int n;
    size_t size = 100;
    va_list ap;

    for (;;)
    {
        char *p = xmalloc( size );
        _crt_va_start( ap, fmt );
	n = vsnprintf( p, size, fmt, ap );
	_crt_va_end( ap );
        if (n == -1) size *= 2;
        else if ((size_t)n >= size) size = n + 1;
        else return p;
        free( p );
    }
}



struct strarray
{
    unsigned int count;  
    unsigned int size;   
    const char **str;
};

static const struct strarray empty_strarray;

static inline void strarray_add( struct strarray *array, const char *str )
{
    if (array->count == array->size)
    {
	if (array->size) array->size *= 2;
        else array->size = 16;
	array->str = xrealloc( array->str, sizeof(array->str[0]) * array->size );
    }
    array->str[array->count++] = str;
}

static inline void strarray_addall( struct strarray *array, struct strarray added )
{
    unsigned int i;

    for (i = 0; i < added.count; i++) strarray_add( array, added.str[i] );
}

static inline int strarray_exists( const struct strarray *array, const char *str )
{
    unsigned int i;

    for (i = 0; i < array->count; i++) if (!strcmp( array->str[i], str )) return 1;
    return 0;
}

static inline void strarray_add_uniq( struct strarray *array, const char *str )
{
    if (!strarray_exists( array, str )) strarray_add( array, str );
}

static inline void strarray_addall_uniq( struct strarray *array, struct strarray added )
{
    unsigned int i;

    for (i = 0; i < added.count; i++) strarray_add_uniq( array, added.str[i] );
}

static inline struct strarray strarray_fromstring( const char *str, const char *delim )
{
    struct strarray array = empty_strarray;
    char *buf = xstrdup( str );
    const char *tok;

    for (tok = strtok( buf, delim ); tok; tok = strtok( ((void*)0), delim ))
        strarray_add( &array, xstrdup( tok ));
    free( buf );
    return array;
}

static inline struct strarray strarray_frompath( const char *path )
{
    if (!path) return empty_strarray;

    return strarray_fromstring( path, ";" );



}

static inline char *strarray_tostring( struct strarray array, const char *sep )
{
    char *str;
    unsigned int i, len = 1 + (array.count - 1) * strlen(sep);

    if (!array.count) return xstrdup("");
    for (i = 0; i < array.count; i++) len += strlen( array.str[i] );
    str = xmalloc( len );
    strcpy( str, array.str[0] );
    for (i = 1; i < array.count; i++)
    {
        strcat( str, sep );
        strcat( str, array.str[i] );
    }
    return str;
}

static inline void strarray_qsort( struct strarray *array, int (*func)(const char **, const char **) )
{
    if (array->count) qsort( array->str, array->count, sizeof(*array->str), (void *)func );
}

static inline const char *strarray_bsearch( const struct strarray *array, const char *str,
                                            int (*func)(const char **, const char **) )
{
    char **res = ((void*)0);

    if (array->count) res = bsearch( &str, array->str, array->count, sizeof(*array->str), (void *)func );
    return res ? *res : ((void*)0);
}

static inline void strarray_trace( struct strarray args )
{
    unsigned int i;

    for (i = 0; i < args.count; i++)
    {
        if (strpbrk( args.str[i], " \t\n\r")) printf( "\"%s\"", args.str[i] );
        else printf( "%s", args.str[i] );
        putchar( i < args.count - 1 ? ' ' : '\n' );
    }
}

static inline int strarray_spawn( struct strarray args )
{

    strarray_add( &args, ((void*)0) );
    return _spawnvp( 0, args.str[0], args.str );














}

static inline char *get_basename( const char *file )
{
    const char *ret = strrchr( file, '/' );
    return xstrdup( ret ? ret + 1 : file );
}

static inline char *get_basename_noext( const char *file )
{
    char *ext, *ret = get_basename( file );
    if ((ext = strrchr( ret, '.' ))) *ext = 0;
    return ret;
}

static inline char *get_dirname( const char *file )
{
    const char *end = strrchr( file, '/' );
    if (!end) return xstrdup( "." );
    if (end == file) end++;
    return strmake( "%.*s", (int)(end - file), file );
}

static inline char *replace_extension( const char *name, const char *old_ext, const char *new_ext )
{
    int name_len = strlen( name );

    if (strendswith( name, old_ext )) name_len -= strlen( old_ext );
    return strmake( "%.*s%s", name_len, name, new_ext );
}


static inline char *build_relative_path( const char *base, const char *from, const char *dest )
{
    const char *start;
    char *ret;
    unsigned int dotdots = 0;

    for (;;)
    {
        while (*from == '/') from++;
        while (*dest == '/') dest++;
        start = dest;  
        if (!*from) break;

        while (*from && *from != '/' && *from == *dest) { from++; dest++; }
        if ((!*from || *from == '/') && (!*dest || *dest == '/')) continue;

        do  
        {
            dotdots++;
            while (*from && *from != '/') from++;
            while (*from == '/') from++;
        }
        while (*from);
        break;
    }

    ret = xmalloc( strlen(base) + 3 * dotdots + strlen(start) + 2 );
    strcpy( ret, base );
    while (dotdots--) strcat( ret, "/.." );

    if (!start[0]) return ret;
    strcat( ret, "/" );
    strcat( ret, start );
    return ret;
}



extern const char *temp_dir;
extern struct strarray temp_files;

static inline char *make_temp_dir(void)
{
    unsigned int value = time(((void*)0)) + getpid();
    int count;
    char *name;
    const char *tmpdir = ((void*)0);

    for (count = 0; count < 0x8000; count++)
    {
        if (tmpdir)
            name = strmake( "%s/tmp%08x", tmpdir, value );
        else
            name = strmake( "tmp%08x", value );
        if (!mkdir( name) ) return name;
        value += 7777;
        if ((*_errno()) == 13 && !tmpdir)
        {
            if (!(tmpdir = getenv("TMPDIR"))) tmpdir = "/tmp";
        }
        free( name );
    }
    fprintf( (__acrt_iob_func(2)), "failed to create directory for temp files\n" );
    exit(1);
}

static inline char *make_temp_file( const char *prefix, const char *suffix )
{
    static unsigned int value;
    int fd, count;
    char *name;

    if (!temp_dir) temp_dir = make_temp_dir();
    if (!suffix) suffix = "";
    if (!prefix) prefix = "tmp";
    else prefix = get_basename_noext( prefix );

    for (count = 0; count < 0x8000; count++)
    {
        name = strmake( "%s/%s-%08x%s", temp_dir, prefix, value++, suffix );
        fd = open( name, 0x0002 | 0x0100 | 0x0400, 0600 );
        if (fd >= 0)
        {

            sigset_t mask_set, old_set;

            sigemptyset( &mask_set );
            sigaddset( &mask_set, SIGHUP );
            sigaddset( &mask_set, 15 );
            sigaddset( &mask_set, 2 );
            sigprocmask( SIG_BLOCK, &mask_set, &old_set );
            strarray_add( &temp_files, name );
            sigprocmask( SIG_SETMASK, &old_set, ((void*)0) );



            close( fd );
            return name;
        }
        free( name );
    }
    fprintf( (__acrt_iob_func(2)), "failed to create temp file for %s%s in %s\n", prefix, suffix, temp_dir );
    exit(1);
}

static inline void remove_temp_files(void)
{
    unsigned int i;

    for (i = 0; i < temp_files.count; i++) if (temp_files.str[i]) unlink( temp_files.str[i] );
    if (temp_dir) rmdir( temp_dir );
}


static inline void init_signals( void (*cleanup)(int) )
{
    signal( 15, cleanup );
    signal( 2, cleanup );



}


static inline void *read_file( const char *name, size_t *size )
{
    struct stat st;
    int res, fd;
    void *data;

    if ((fd = open( name, 0x0000 | 0x8000 )) == -1) return ((void*)0);
    fstat( fd, &st );
    data = xmalloc( st.st_size );
    res = read( fd, data, st.st_size );
    if (res == -1)
    {
        free( data );
        data = ((void*)0);
        *size = 0;
    }
    else *size = res;
    close( fd );
    return data;
}


static inline struct target get_default_target(void)
{
    struct target target;



    target.cpu = CPU_x86_64;









    target.platform = PLATFORM_APPLE;
















    return target;
}


static inline unsigned int get_target_ptr_size( struct target target )
{
    static const unsigned int sizes[] =
    {
        [CPU_i386]      = 4,
        [CPU_x86_64]    = 8,
        [CPU_ARM]       = 4,
        [CPU_ARM64]     = 8,
        [CPU_ARM64EC]   = 8,
    };
    return sizes[target.cpu];
}


static inline void set_target_ptr_size( struct target *target, unsigned int size )
{
    switch (target->cpu)
    {
    case CPU_i386:
        if (size == 8) target->cpu = CPU_x86_64;
        break;
    case CPU_x86_64:
        if (size == 4) target->cpu = CPU_i386;
        break;
    case CPU_ARM:
        if (size == 8) target->cpu = CPU_ARM64;
        break;
    case CPU_ARM64:
    case CPU_ARM64EC:
        if (size == 4) target->cpu = CPU_ARM;
        break;
    }
}


static inline int get_cpu_from_name( const char *name )
{
    static const struct
    {
        const char *name;
        int         cpu;
    } cpu_names[] =
    {
        { "i386",      CPU_i386 },
        { "i486",      CPU_i386 },
        { "i586",      CPU_i386 },
        { "i686",      CPU_i386 },
        { "i786",      CPU_i386 },
        { "x86_64",    CPU_x86_64 },
        { "amd64",     CPU_x86_64 },
        { "aarch64",   CPU_ARM64 },
        { "arm64ec",   CPU_ARM64EC },
        { "arm64",     CPU_ARM64 },
        { "arm",       CPU_ARM },
    };
    unsigned int i;

    for (i = 0; i < (sizeof(cpu_names) / sizeof(&((x)[0]))) ; i++)
        if (!strncmp( cpu_names[i].name, name, strlen(cpu_names[i].name) )) return cpu_names[i].cpu;
    return -1;
}


static inline int get_platform_from_name( const char *name )
{
    static const struct
    {
        const char *name;
        int         platform;
    } platform_names[] =
    {
        { "macos",       PLATFORM_APPLE },
        { "darwin",      PLATFORM_APPLE },
        { "android",     PLATFORM_ANDROID },
        { "linux",       PLATFORM_LINUX },
        { "freebsd",     PLATFORM_FREEBSD },
        { "solaris",     PLATFORM_SOLARIS },
        { "mingw32",     PLATFORM_MINGW },
        { "windows-gnu", PLATFORM_MINGW },
        { "winnt",       PLATFORM_MINGW },
        { "windows",     PLATFORM_WINDOWS },
        { "cygwin",      PLATFORM_CYGWIN },
    };
    unsigned int i;

    for (i = 0; i < (sizeof(platform_names) / sizeof(&((x)[0]))) ; i++)
        if (!strncmp( platform_names[i].name, name, strlen(platform_names[i].name) ))
            return platform_names[i].platform;
    return -1;
};


static inline const char *get_arch_dir( struct target target )
{
    static const char *cpu_names[] =
    {
        [CPU_i386]    = "i386",
        [CPU_x86_64]  = "x86_64",
        [CPU_ARM]     = "arm",
        [CPU_ARM64]   = "aarch64",
        [CPU_ARM64EC] = "aarch64",
    };

    if (!cpu_names[target.cpu]) return "";

    switch (target.platform)
    {
    case PLATFORM_WINDOWS:
    case PLATFORM_CYGWIN:
    case PLATFORM_MINGW:
        return strmake( "/%s-windows", cpu_names[target.cpu] );
    default:
        return strmake( "/%s-unix", cpu_names[target.cpu] );
    }
}

static inline int parse_target( const char *name, struct target *target )
{
    int res;
    char *p, *spec = xstrdup( name );

    

    

    if ((p = strchr( spec, '-' )))
    {
        *p++ = 0;
        if ((res = get_cpu_from_name( spec )) == -1)
        {
            free( spec );
            return 0;
        }
        target->cpu = res;
    }
    else if (!strcmp( spec, "mingw32" ))
    {
        target->cpu = CPU_i386;
        p = spec;
    }
    else
    {
        free( spec );
        return 0;
    }

    

    target->platform = PLATFORM_UNSPECIFIED;  
    for (;;)
    {
        if ((res = get_platform_from_name( p )) != -1)
        {
            target->platform = res;
            break;
        }
        if (!(p = strchr( p, '-' ))) break;
        p++;
    }

    free( spec );
    return 1;
}


static inline struct target init_argv0_target( const char *argv0 )
{
    char *name = get_basename( argv0 );
    struct target target;

    if (!strchr( name, '-' ) || !parse_target( name, &target ))
        target = get_default_target();

    free( name );
    return target;
}


static inline char *get_bindir( const char *argv0 )
{

















    char path[MAX_PATH], *p;
    GetModuleFileNameA( ((void*)0), path, ARRAYSIZE(path) );
    for (p = path; *p; p++) if (*p == '\\') *p = '/';
    return get_dirname( path );

}































static inline const char *get_nlsdir( const char *bindir, const char *srcdir )
{
    if (bindir && strendswith( bindir, srcdir )) return strmake( "%s/../../nls", bindir );







    return ((void*)0);
}




extern unsigned char *output_buffer;
extern size_t output_buffer_pos;
extern size_t output_buffer_size;

static inline void check_output_buffer_space( size_t size )
{
    if (output_buffer_pos + size >= output_buffer_size)
    {
        output_buffer_size = ((( output_buffer_size * 2) > ( output_buffer_pos + size )) ? ( output_buffer_size * 2) : ( output_buffer_pos + size )) ;
        output_buffer = xrealloc( output_buffer, output_buffer_size );
    }
}

static inline void init_output_buffer(void)
{
    output_buffer_size = 1024;
    output_buffer_pos = 0;
    output_buffer = xmalloc( output_buffer_size );
}

static inline void put_data( const void *data, size_t size )
{
    check_output_buffer_space( size );
    memcpy( output_buffer + output_buffer_pos, data, size );
    output_buffer_pos += size;
}

static inline void put_byte( unsigned char val )
{
    check_output_buffer_space( 1 );
    output_buffer[output_buffer_pos++] = val;
}

static inline void put_word( unsigned short val )
{
    check_output_buffer_space( 2 );
    output_buffer[output_buffer_pos++] = val;
    output_buffer[output_buffer_pos++] = val >> 8;
}

static inline void put_dword( unsigned int val )
{
    check_output_buffer_space( 4 );
    output_buffer[output_buffer_pos++] = val;
    output_buffer[output_buffer_pos++] = val >> 8;
    output_buffer[output_buffer_pos++] = val >> 16;
    output_buffer[output_buffer_pos++] = val >> 24;
}

static inline void put_qword( unsigned int val )
{
    put_dword( val );
    put_dword( 0 );
}

static inline void align_output( unsigned int align )
{
    size_t size = align - (output_buffer_pos % align);

    if (size == align) return;
    check_output_buffer_space( size );
    memset( output_buffer + output_buffer_pos, 0, size );
    output_buffer_pos += size;
}

static inline void flush_output_buffer( const char *name )
{
    int fd = open( name, 0x0001 | 0x0100 | 0x0200 | 0x8000, 0666 );

    if (fd == -1 || write( fd, output_buffer, output_buffer_pos ) != output_buffer_pos)
    {
        perror( name );
        exit(1);
    }
    close( fd );
    free( output_buffer );
}




struct long_option
{
    const char *name;
    int has_arg;
    int val;
};

static inline struct strarray parse_options( int argc, char **argv, const char *short_opts,
                                             const struct long_option *long_opts, int long_only,
                                             void (*callback)( int, char* ) )
{
    struct strarray ret = empty_strarray;
    const char *flag;
    char *start, *end;
    int i;



    for (i = 1; i < argc; i++)
    {
        if (argv[i][0] != '-' || !argv[i][1])  
        {
            strarray_add( &ret, argv[i] );
            continue;
        }
        if (!strcmp( argv[i], "--" ))
        {
            
            while (++i < argc) strarray_add( &ret, argv[i] );
            break;
        }
        start = argv[i] + 1 + (argv[i][1] == '-');

        if (argv[i][1] == '-' || (long_only && (argv[i][2] || !strchr( short_opts, argv[i][1] ))))
        {
            
            const struct long_option *opt, *found = ((void*)0);
            int count = 0;

            if (!(end = strchr( start, '=' ))) end = start + strlen(start);
            for (opt = long_opts; opt && opt->name; opt++)
            {
                if (strncmp( opt->name, start, end - start )) continue;
                if (!opt->name[end - start])  
                {
                    found = opt;
                    count = 1;
                    break;
                }
                if (!found)
                {
                    found = opt;
                    count++;
                }
                else if (long_only || found->has_arg != opt->has_arg || found->val != opt->val)
                {
                    count++;
                }
            }

            if (count > 1) { callback( '?', strmake(  "option '%s' is ambiguous" , argv[i] )); continue; } ;

            if (found)
            {
                if (*end)
                {
                    if (!found->has_arg) { callback( '?', strmake(  "argument not allowed in '%s'" , argv[i] )); continue; } ;
                    end++;  
                }
                else if (found->has_arg == 1)
                {
                    if (i == argc - 1) { callback( '?', strmake(  "option '%s' requires an argument" , argv[i] )); continue; } ;
                    end = argv[++i];
                }
                else end = ((void*)0);

                callback( found->val, end );
                continue;
            }
            if (argv[i][1] == '-' || !long_only || !strchr( short_opts, argv[i][1] ))
                { callback( '?', strmake(  "unrecognized option '%s'" , argv[i] )); continue; } ;
        }

        
        for ( ; *start; start++)
        {
            if (!(flag = strchr( short_opts, *start ))) { callback( '?', strmake(  "invalid option '%s'" , argv[i] )); continue; } ;
            if (flag[1] == ':')
            {
                end = start + 1;
                if (!*end) end = ((void*)0);
                if (flag[2] != ':' && !end)
                {
                    if (i == argc - 1) { callback( '?', strmake(  "option '%s' requires an argument" , argv[i] )); continue; } ;
                    end = argv[++i];
                }
                callback( *start, end );
                break;
            }
            callback( *start, ((void*)0) );
        }
    }
    return ret;

}


# 25 "include/wine/list.h" 2

# 1 "./libs/ldap/include/portable.h" 1



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































	



















# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stddef.h" 1 3







# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/crtdefs.h" 1 3












# 8 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stddef.h" 2
















  do_not_use_this_in_wine   extern unsigned long  __threadid(void);

  do_not_use_this_in_wine   extern uintptr_t  __threadhandle(void);

























































































































































































































































































































































































































# 1176 "./libs/ldap/include/portable.h" 2
















# 1 "./libs/ldap/include/ac/fdset.h" 1





























    












# 1192 "./libs/ldap/include/portable.h" 2


# 1 "./libs/ldap/include/ldap_cdefs.h" 1






























	

























































































































































































































# 1194 "./libs/ldap/include/portable.h" 2

# 1 "./libs/ldap/include/ldap_features.h" 1
























































# 1195 "./libs/ldap/include/portable.h" 2


# 1 "./libs/ldap/include/ac/assert.h" 1

























































# 1197 "./libs/ldap/include/portable.h" 2

# 1 "./libs/ldap/include/ac/localize.h" 1


































	









# 1198 "./libs/ldap/include/portable.h" 2



# 26 "include/wine/list.h" 2




# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stddef.h" 1 3







# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/crtdefs.h" 1 3












# 8 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stddef.h" 2












































































































































































































































































































































































































































# 30 "include/wine/list.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdint.h" 1 3




























# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/crtdefs.h" 1 3












# 29 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdint.h" 2




# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stddef.h" 1 3







# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/crtdefs.h" 1 3












# 8 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stddef.h" 2












































































































































































































































































































































































































































# 33 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdint.h" 2


typedef signed char int8_t;
typedef unsigned char   uint8_t;
typedef short  int16_t;
typedef unsigned short  uint16_t;
typedef int  int32_t;
typedef unsigned   uint32_t;
 typedef long long  int64_t;
 typedef unsigned long long   uint64_t;


typedef signed char int_least8_t;
typedef unsigned char   uint_least8_t;
typedef short  int_least16_t;
typedef unsigned short  uint_least16_t;
typedef int  int_least32_t;
typedef unsigned   uint_least32_t;
 typedef long long  int_least64_t;
 typedef unsigned long long   uint_least64_t;





typedef signed char int_fast8_t;
typedef unsigned char uint_fast8_t;
typedef short  int_fast16_t;
typedef unsigned short  uint_fast16_t;
typedef int  int_fast32_t;
typedef unsigned  int  uint_fast32_t;
 typedef long long  int_fast64_t;
 typedef unsigned long long   uint_fast64_t;


 typedef long long  intmax_t;
 typedef unsigned long long   uintmax_t;














































































































































# 31 "include/wine/list.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdarg.h" 1 3












































































































































# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/_mingw_stdarg.h" 1 3






































# 141 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdarg.h" 2

# 32 "include/wine/list.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdlib.h" 1 3




































































































































































































































































































































































































































































































































































































































































































































































































# 33 "include/wine/list.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/ctype.h" 1 3









# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/crtdefs.h" 1 3












# 10 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/ctype.h" 2



















  do_not_use_this_in_wine   unsigned short* __pctype_func(void);





























  extern unsigned short ** __imp__wctype ;











  extern unsigned short ** __imp__pwctype ;






  

  extern const unsigned char __newclmap[];
  extern const unsigned char __newcumap[];
  extern pthreadlocinfo __ptlocinfo;
  extern pthreadmbcinfo __ptmbcinfo;
  extern int __globallocalestatus;
  extern int __locale_changed;
  extern struct threadlocaleinfostruct __initiallocinfo;
  extern _locale_tstruct __initiallocalestructinfo;
  pthreadlocinfo  __updatetlocinfo(void);
  pthreadmbcinfo  __updatetmbcinfo(void);


















  do_not_use_this_in_wine   int  _isctype(int _C,int _Type);
  do_not_use_this_in_wine   int  _isctype_l(int _C,int _Type,_locale_t _Locale);
  do_not_use_this_in_wine   int  isalpha(int _C);
  do_not_use_this_in_wine   int  _isalpha_l(int _C,_locale_t _Locale);
  do_not_use_this_in_wine   int  isupper(int _C);
  do_not_use_this_in_wine   int  _isupper_l(int _C,_locale_t _Locale);
  do_not_use_this_in_wine   int  islower(int _C);
  do_not_use_this_in_wine   int  _islower_l(int _C,_locale_t _Locale);
  do_not_use_this_in_wine   int  isdigit(int _C);
  do_not_use_this_in_wine   int  _isdigit_l(int _C,_locale_t _Locale);
  do_not_use_this_in_wine   int  isxdigit(int _C);
  do_not_use_this_in_wine   int  _isxdigit_l(int _C,_locale_t _Locale);
  do_not_use_this_in_wine   int  isspace(int _C);
  do_not_use_this_in_wine   int  _isspace_l(int _C,_locale_t _Locale);
  do_not_use_this_in_wine   int  ispunct(int _C);
  do_not_use_this_in_wine   int  _ispunct_l(int _C,_locale_t _Locale);
  do_not_use_this_in_wine   int  isalnum(int _C);
  do_not_use_this_in_wine   int  _isalnum_l(int _C,_locale_t _Locale);
  do_not_use_this_in_wine   int  isprint(int _C);
  do_not_use_this_in_wine   int  _isprint_l(int _C,_locale_t _Locale);
  do_not_use_this_in_wine   int  isgraph(int _C);
  do_not_use_this_in_wine   int  _isgraph_l(int _C,_locale_t _Locale);
  do_not_use_this_in_wine   int  iscntrl(int _C);
  do_not_use_this_in_wine   int  _iscntrl_l(int _C,_locale_t _Locale);
  do_not_use_this_in_wine   int  toupper(int _C);
  do_not_use_this_in_wine   int  tolower(int _C);
  do_not_use_this_in_wine   int  _tolower(int _C);
  do_not_use_this_in_wine   int  _tolower_l(int _C,_locale_t _Locale);
  do_not_use_this_in_wine   int  _toupper(int _C);
  do_not_use_this_in_wine   int  _toupper_l(int _C,_locale_t _Locale);
  do_not_use_this_in_wine   int  __isascii(int _C);
  do_not_use_this_in_wine   int  __toascii(int _C);
  do_not_use_this_in_wine   int  __iscsymf(int _C);
  do_not_use_this_in_wine   int  __iscsym(int _C);


int  isblank(int _C);






  int  iswalpha(wint_t _C);
  do_not_use_this_in_wine   int  _iswalpha_l(wint_t _C,_locale_t _Locale);
  int  iswupper(wint_t _C);
  do_not_use_this_in_wine   int  _iswupper_l(wint_t _C,_locale_t _Locale);
  int  iswlower(wint_t _C);
  do_not_use_this_in_wine   int  _iswlower_l(wint_t _C,_locale_t _Locale);
  int  iswdigit(wint_t _C);
  do_not_use_this_in_wine   int  _iswdigit_l(wint_t _C,_locale_t _Locale);
  int  iswxdigit(wint_t _C);
  do_not_use_this_in_wine   int  _iswxdigit_l(wint_t _C,_locale_t _Locale);
  int  iswspace(wint_t _C);
  do_not_use_this_in_wine   int  _iswspace_l(wint_t _C,_locale_t _Locale);
  int  iswpunct(wint_t _C);
  do_not_use_this_in_wine   int  _iswpunct_l(wint_t _C,_locale_t _Locale);
  int  iswalnum(wint_t _C);
  do_not_use_this_in_wine   int  _iswalnum_l(wint_t _C,_locale_t _Locale);
  int  iswprint(wint_t _C);
  do_not_use_this_in_wine   int  _iswprint_l(wint_t _C,_locale_t _Locale);
  int  iswgraph(wint_t _C);
  do_not_use_this_in_wine   int  _iswgraph_l(wint_t _C,_locale_t _Locale);
  int  iswcntrl(wint_t _C);
  do_not_use_this_in_wine   int  _iswcntrl_l(wint_t _C,_locale_t _Locale);
  int  iswascii(wint_t _C);

  int  isleadbyte(int _C);
  do_not_use_this_in_wine   int  _isleadbyte_l(int _C,_locale_t _Locale);

  wint_t  towupper(wint_t _C);
  do_not_use_this_in_wine   wint_t  _towupper_l(wint_t _C,_locale_t _Locale);
  wint_t  towlower(wint_t _C);
  do_not_use_this_in_wine   wint_t  _towlower_l(wint_t _C,_locale_t _Locale);
  int  iswctype(wint_t _C,wctype_t _Type);

  do_not_use_this_in_wine   int  _iswctype_l(wint_t _C,wctype_t _Type,_locale_t _Locale);
  do_not_use_this_in_wine   int  __iswcsymf(wint_t _C);
  do_not_use_this_in_wine   int  _iswcsymf_l(wint_t _C,_locale_t _Locale);
  do_not_use_this_in_wine   int  __iswcsym(wint_t _C);
  do_not_use_this_in_wine   int  _iswcsym_l(wint_t _C,_locale_t _Locale);


  int  is_wctype(wint_t _C,wctype_t _Type);



int  iswblank(wint_t _C);








































































































# 34 "include/wine/list.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/sys/types.h" 1 3



















































































































# 35 "include/wine/list.h" 2

struct list
{
    struct list *next;
    struct list *prev;
};





































static inline void list_add_after( struct list *elem, struct list *to_add )
{
    to_add->next = elem->next;
    to_add->prev = elem;
    elem->next->prev = to_add;
    elem->next = to_add;
}


static inline void list_add_before( struct list *elem, struct list *to_add )
{
    to_add->next = elem;
    to_add->prev = elem->prev;
    elem->prev->next = to_add;
    elem->prev = to_add;
}


static inline void list_add_head( struct list *list, struct list *elem )
{
    list_add_after( list, elem );
}


static inline void list_add_tail( struct list *list, struct list *elem )
{
    list_add_before( list, elem );
}


static inline void list_remove( struct list *elem )
{
    elem->next->prev = elem->prev;
    elem->prev->next = elem->next;
}


static inline struct list *list_next( const struct list *list, const struct list *elem )
{
    struct list *ret = elem->next;
    if (elem->next == list) ret = ((void *)0);
    return ret;
}


static inline struct list *list_prev( const struct list *list, const struct list *elem )
{
    struct list *ret = elem->prev;
    if (elem->prev == list) ret = ((void *)0);
    return ret;
}


static inline struct list *list_head( const struct list *list )
{
    return list_next( list, list );
}


static inline struct list *list_tail( const struct list *list )
{
    return list_prev( list, list );
}


static inline int list_empty( const struct list *list )
{
    return list->next == list;
}


static inline void list_init( struct list *list )
{
    list->next = list->prev = list;
}


static inline unsigned int list_count( const struct list *list )
{
    unsigned count = 0;
    const struct list *ptr;
    for (ptr = list->next; ptr != list; ptr = ptr->next) count++;
    return count;
}


static inline void list_move_before( struct list *dst, struct list *src )
{
    if (list_empty(src)) return;

    dst->prev->next = src->next;
    src->next->prev = dst->prev;
    dst->prev = src->prev;
    src->prev->next = dst;
    list_init(src);
}


static inline void list_move_after( struct list *dst, struct list *src )
{
    if (list_empty(src)) return;

    dst->next->prev = src->prev;
    src->prev->next = dst->next;
    dst->next = src->next;
    src->next->prev = dst;
    list_init(src);
}


static inline void list_move_head( struct list *dst, struct list *src )
{
    list_move_after( dst, src );
}


static inline void list_move_tail( struct list *dst, struct list *src )
{
    list_move_before( dst, src );
}


static inline void list_move_slice_head( struct list *dst, struct list *begin, struct list *end )
{
    struct list *dst_next = dst->next;
    begin->prev->next = end->next;
    end->next->prev = begin->prev;
    dst->next = begin;
    dst_next->prev = end;
    begin->prev = dst;
    end->next = dst_next;
}


static inline void list_move_slice_tail( struct list *dst, struct list *begin, struct list *end )
{
    struct list *dst_prev = dst->prev;
    begin->prev->next = end->next;
    end->next->prev = begin->prev;
    dst_prev->next = begin;
    dst->prev = end;
    begin->prev = dst_prev;
    end->next = dst;
}





































































# 37 "include/winnt.h" 2


# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stddef.h" 1 3







# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/crtdefs.h" 1 3












# 8 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stddef.h" 2












































































































































































































































































































































































































































# 39 "include/winnt.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdarg.h" 1 3












































































































































# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/_mingw_stdarg.h" 1 3






































# 141 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdarg.h" 2

# 40 "include/winnt.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdlib.h" 1 3




































































































































































































































































































































































































































































































































































































































































































































































































# 41 "include/winnt.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdint.h" 1 3



















































































































































































































# 42 "include/winnt.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdio.h" 1 3






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 43 "include/winnt.h" 2

# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/string.h" 1 3

































































































































































































































































































# 44 "include/winnt.h" 2











































































































































































































































































































































































































































typedef void           *PVOID;
typedef void           *PVOID64;
typedef BYTE            BOOLEAN,    *PBOOLEAN;
typedef char            CHAR,       *PCHAR;
typedef short           SHORT,      *PSHORT;

typedef long            LONG,       *PLONG;










typedef unsigned short  WCHAR;

typedef WCHAR          *PWCHAR;

typedef ULONG           UCSCHAR;











typedef signed __int32    LONGLONG,   *PLONGLONG;
typedef unsigned __int32  ULONGLONG,  *PULONGLONG;








typedef ULONGLONG    DWORDLONG,   *PDWORDLONG;




typedef CHAR           *PCH,        *LPCH,      *PNZCH;
typedef const CHAR     *PCCH,       *LPCCH,     *PCNZCH;
typedef CHAR           *PSTR,       *LPSTR,     *NPSTR;
typedef const CHAR     *PCSTR,      *LPCSTR;
typedef CHAR           *PZZSTR;
typedef const CHAR     *PCZZSTR;


typedef const WCHAR    *PCWCHAR,    *LPCWCHAR;
typedef const WCHAR    *PCUWCHAR,   *LPCUWCHAR;
typedef WCHAR          *PWCH,       *LPWCH;
typedef const WCHAR    *PCWCH,      *LPCWCH;
typedef WCHAR          *PNZWCH,     *PUNZWCH;
typedef const WCHAR    *PCNZWCH,    *PCUNZWCH;
typedef WCHAR          *PWSTR,      *LPWSTR,    *NWPSTR;
typedef const WCHAR    *PCWSTR,     *LPCWSTR;
typedef WCHAR          *PZZWSTR,    *PUZZWSTR;
typedef const WCHAR    *PCZZWSTR,   *PCUZZWSTR;
typedef PWSTR          *PZPWSTR;
typedef PCWSTR         *PZPCWSTR;











































typedef UCSCHAR         *PUCSCHAR,  *PUUCSCHAR;
typedef const UCSCHAR   *PCUCSCHAR, *PCUUCSCHAR;
typedef UCSCHAR         *PUCSSTR,   *PUUCSSTR;
typedef const UCSCHAR   *PCUCSSTR,  *PCUUCSSTR;


typedef char            CCHAR;
typedef DWORD           LCID,       *PLCID;
typedef WORD            LANGID;
typedef DWORD		EXECUTION_STATE;







typedef void *HANDLE;
typedef HANDLE *PHANDLE, *LPHANDLE;







typedef BYTE  FCHAR;
typedef WORD  FSHORT;
typedef DWORD FLONG;







































































































































typedef struct _MEMORY_BASIC_INFORMATION
{
    LPVOID   BaseAddress;
    LPVOID   AllocationBase;
    DWORD    AllocationProtect;
    SIZE_T   RegionSize;
    DWORD    State;
    DWORD    Protect;
    DWORD    Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;

typedef struct _MEM_ADDRESS_REQUIREMENTS
{
  void      *LowestStartingAddress;
  void      *HighestEndingAddress;
  SIZE_T     Alignment;
} MEM_ADDRESS_REQUIREMENTS, *PMEM_ADDRESS_REQUIREMENTS;



typedef enum MEM_EXTENDED_PARAMETER_TYPE {
    MemExtendedParameterInvalidType = 0,
    MemExtendedParameterAddressRequirements,
    MemExtendedParameterNumaNode,
    MemExtendedParameterPartitionHandle,
    MemExtendedParameterUserPhysicalHandle,
    MemExtendedParameterAttributeFlags,
    MemExtendedParameterImageMachine,
    MemExtendedParameterMax
} MEM_EXTENDED_PARAMETER_TYPE, *PMEM_EXTENDED_PARAMETER_TYPE;

typedef struct  MEM_EXTENDED_PARAMETER
{
    DWORD64 Type : 8;
    DWORD64 Reserved : 32;
    union 
    {
        DWORD64 ULong64;
        PVOID Pointer;
        SIZE_T Size;
        HANDLE Handle;
        DWORD ULong;
    };
} MEM_EXTENDED_PARAMETER, *PMEM_EXTENDED_PARAMETER;










































































































typedef struct _LIST_ENTRY {
  struct _LIST_ENTRY *Flink;
  struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY, *  PRLIST_ENTRY;

typedef struct _SINGLE_LIST_ENTRY {
  struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;







































typedef union _SLIST_HEADER {
    ULONGLONG Alignment;
    struct {
        SINGLE_LIST_ENTRY Next;
        WORD Depth;
        WORD Sequence;
    } ;
} SLIST_HEADER, *PSLIST_HEADER;



 PSINGLE_LIST_ENTRY  RtlFirstEntrySList(const SLIST_HEADER*);
 void          RtlInitializeSListHead(PSLIST_HEADER);
 PSINGLE_LIST_ENTRY  RtlInterlockedFlushSList(PSLIST_HEADER);
 PSINGLE_LIST_ENTRY  RtlInterlockedPopEntrySList(PSLIST_HEADER);
 PSINGLE_LIST_ENTRY  RtlInterlockedPushEntrySList(PSLIST_HEADER, PSINGLE_LIST_ENTRY);
 WORD          RtlQueryDepthSList(PSLIST_HEADER);




























































































typedef enum _HEAP_INFORMATION_CLASS {
    HeapCompatibilityInformation,
} HEAP_INFORMATION_CLASS;








































































# 1 "include/excpt.h" 1 3



















































# 1127 "include/winnt.h" 2







typedef struct _I386_FLOATING_SAVE_AREA
{
    DWORD   ControlWord;
    DWORD   StatusWord;
    DWORD   TagWord;
    DWORD   ErrorOffset;
    DWORD   ErrorSelector;
    DWORD   DataOffset;
    DWORD   DataSelector;
    BYTE    RegisterArea[80];
    DWORD   Cr0NpxState;
} I386_FLOATING_SAVE_AREA, WOW64_FLOATING_SAVE_AREA, *PWOW64_FLOATING_SAVE_AREA;




# 1 "include/pshpack4.h" 1



























     













































































#pragma pack(4)


# 1150 "include/winnt.h" 2
typedef struct _I386_CONTEXT
{
    DWORD   ContextFlags;  

    
    DWORD   Dr0;           
    DWORD   Dr1;           
    DWORD   Dr2;           
    DWORD   Dr3;           
    DWORD   Dr6;           
    DWORD   Dr7;           

    
    I386_FLOATING_SAVE_AREA FloatSave; 

    
    DWORD   SegGs;         
    DWORD   SegFs;         
    DWORD   SegEs;         
    DWORD   SegDs;         

    
    DWORD   Edi;           
    DWORD   Esi;           
    DWORD   Ebx;           
    DWORD   Edx;           
    DWORD   Ecx;           
    DWORD   Eax;           

    
    DWORD   Ebp;           
    DWORD   Eip;           
    DWORD   SegCs;         
    DWORD   EFlags;        
    DWORD   Esp;           
    DWORD   SegSs;         

    BYTE    ExtendedRegisters[512];  
} I386_CONTEXT, WOW64_CONTEXT, *PWOW64_CONTEXT;

# 1 "include/poppack.h" 1





























































































































































































































































#pragma pack()










# 1190 "include/winnt.h" 2

































typedef struct _LDT_ENTRY {
    WORD	LimitLow;
    WORD	BaseLow;
    union {
        struct {
            BYTE    BaseMid;
            BYTE    Flags1;
            BYTE    Flags2;
            BYTE    BaseHi;
        } Bytes;
        struct {
            unsigned    BaseMid: 8;
            unsigned    Type : 5;
            unsigned    Dpl : 2;
            unsigned    Pres : 1;
            unsigned    LimitHi : 4;
            unsigned    Sys : 1;
            unsigned    Reserved_0 : 1;
            unsigned    Default_Big : 1;
            unsigned    Granularity : 1;
            unsigned    BaseHi : 8;
        } Bits;
    } HighWord;
} LDT_ENTRY, *PLDT_ENTRY, WOW64_LDT_ENTRY, *PWOW64_LDT_ENTRY;

typedef struct  _M128A {
    ULONGLONG Low;
    LONGLONG High;
} M128A, *PM128A;

typedef struct _XSAVE_FORMAT {
    WORD ControlWord;        
    WORD StatusWord;         
    BYTE TagWord;            
    BYTE Reserved1;          
    WORD ErrorOpcode;        
    DWORD ErrorOffset;       
    WORD ErrorSelector;      
    WORD Reserved2;          
    DWORD DataOffset;        
    WORD DataSelector;       
    WORD Reserved3;          
    DWORD MxCsr;             
    DWORD MxCsr_Mask;        
    M128A FloatRegisters[8]; 
    M128A XmmRegisters[16];  
    BYTE Reserved4[96];      
} XSAVE_FORMAT, *PXSAVE_FORMAT;



typedef struct IMAGE_AMD64_RUNTIME_FUNCTION_ENTRY
{
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD UnwindData;
} IMAGE_AMD64_RUNTIME_FUNCTION_ENTRY;

typedef struct _SCOPE_TABLE_AMD64
{
    DWORD Count;
    struct
    {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_AMD64, *PSCOPE_TABLE_AMD64;












typedef XSAVE_FORMAT XMM_SAVE_AREA32, *PXMM_SAVE_AREA32;

typedef struct  _AMD64_CONTEXT {
    DWORD64 P1Home;          
    DWORD64 P2Home;          
    DWORD64 P3Home;          
    DWORD64 P4Home;          
    DWORD64 P5Home;          
    DWORD64 P6Home;          

    
    DWORD ContextFlags;      
    DWORD MxCsr;             

    
    WORD SegCs;              
    WORD SegDs;              
    WORD SegEs;              
    WORD SegFs;              
    WORD SegGs;              
    WORD SegSs;              
    DWORD EFlags;            

    
    DWORD64 Dr0;             
    DWORD64 Dr1;             
    DWORD64 Dr2;             
    DWORD64 Dr3;             
    DWORD64 Dr6;             
    DWORD64 Dr7;             

    
    DWORD64 Rax;             
    DWORD64 Rcx;             
    DWORD64 Rdx;             
    DWORD64 Rbx;             
    DWORD64 Rsp;             
    DWORD64 Rbp;             
    DWORD64 Rsi;             
    DWORD64 Rdi;             
    DWORD64 R8;              
    DWORD64 R9;              
    DWORD64 R10;             
    DWORD64 R11;             
    DWORD64 R12;             
    DWORD64 R13;             
    DWORD64 R14;             
    DWORD64 R15;             

    
    DWORD64 Rip;             

    
    union {
        XMM_SAVE_AREA32 FltSave;  
        struct {
            M128A Header[2];      
            M128A Legacy[8];      
            M128A Xmm0;           
            M128A Xmm1;           
            M128A Xmm2;           
            M128A Xmm3;           
            M128A Xmm4;           
            M128A Xmm5;           
            M128A Xmm6;           
            M128A Xmm7;           
            M128A Xmm8;           
            M128A Xmm9;           
            M128A Xmm10;          
            M128A Xmm11;          
            M128A Xmm12;          
            M128A Xmm13;          
            M128A Xmm14;          
            M128A Xmm15;          
        } ;
    } ;

    
    M128A VectorRegister[26];     
    DWORD64 VectorControl;        

    
    DWORD64 DebugControl;         
    DWORD64 LastBranchToRip;      
    DWORD64 LastBranchFromRip;    
    DWORD64 LastExceptionToRip;   
    DWORD64 LastExceptionFromRip; 
} AMD64_CONTEXT;
























































































typedef struct _XSTATE_FEATURE
{
    ULONG Offset;
    ULONG Size;
} XSTATE_FEATURE, *PXSTATE_FEATURE;

typedef struct _XSTATE_CONFIGURATION
{
    ULONG64 EnabledFeatures;
    ULONG64 EnabledVolatileFeatures;
    ULONG Size;
    ULONG OptimizedSave:1;
    ULONG CompactionEnabled:1;
    XSTATE_FEATURE Features[64];

    ULONG64 EnabledSupervisorFeatures;
    ULONG64 AlignedFeatures;
    ULONG AllFeatureSize;
    ULONG AllFeatures[64];
    ULONG64 EnabledUserVisibleSupervisorFeatures;
} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION;

typedef struct _XSAVE_AREA_HEADER
{
    DWORD64 Mask;
    DWORD64 CompactionMask;
    DWORD64 Reserved2[8];
}
XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER;

typedef struct _YMMCONTEXT
{
    M128A Ymm0;
    M128A Ymm1;
    M128A Ymm2;
    M128A Ymm3;
    M128A Ymm4;
    M128A Ymm5;
    M128A Ymm6;
    M128A Ymm7;
    M128A Ymm8;
    M128A Ymm9;
    M128A Ymm10;
    M128A Ymm11;
    M128A Ymm12;
    M128A Ymm13;
    M128A Ymm14;
    M128A Ymm15;
}
YMMCONTEXT, *PYMMCONTEXT;

typedef struct _XSTATE
{
    ULONG64 Mask;
    ULONG64 CompactionMask;
    ULONG64 Reserved[8];
    YMMCONTEXT YmmContext;
} XSTATE, *PXSTATE;

typedef struct _CONTEXT_CHUNK
{
    LONG Offset;
    ULONG Length;
} CONTEXT_CHUNK, *PCONTEXT_CHUNK;

typedef struct _CONTEXT_EX
{
    CONTEXT_CHUNK All;
    CONTEXT_CHUNK Legacy;
    CONTEXT_CHUNK XState;



} CONTEXT_EX, *PCONTEXT_EX;

















typedef struct _IMAGE_ARM_RUNTIME_FUNCTION
{
    DWORD BeginAddress;
    union {
        DWORD UnwindData;
        struct {
            DWORD Flag : 2;
            DWORD FunctionLength : 11;
            DWORD Ret : 2;
            DWORD H : 1;
            DWORD Reg : 3;
            DWORD R : 1;
            DWORD L : 1;
            DWORD C : 1;
            DWORD StackAdjust : 10;
        } ;
    } ;
} IMAGE_ARM_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY;

typedef struct _SCOPE_TABLE_ARM
{
    DWORD Count;
    struct
    {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_ARM, *PSCOPE_TABLE_ARM;

typedef struct _ARM_NEON128
{
    ULONGLONG Low;
    LONGLONG High;
} ARM_NEON128;

typedef struct _ARM_CONTEXT
{
    ULONG ContextFlags;             
    
    ULONG R0;                       
    ULONG R1;                       
    ULONG R2;                       
    ULONG R3;                       
    ULONG R4;                       
    ULONG R5;                       
    ULONG R6;                       
    ULONG R7;                       
    ULONG R8;                       
    ULONG R9;                       
    ULONG R10;                      
    ULONG R11;                      
    ULONG R12;                      
    
    ULONG Sp;                       
    ULONG Lr;                       
    ULONG Pc;                       
    ULONG Cpsr;                     
    
    ULONG Fpscr;                    
    ULONG Padding;                  
    union
    {
        ARM_NEON128 Q[16];
        ULONGLONG D[36];
        ULONG S[36];
    } ;               
    
    ULONG Bvr[8]; 
    ULONG Bcr[8]; 
    ULONG Wvr[1]; 
    ULONG Wcr[1]; 
    ULONG Padding2[2];              
} ARM_CONTEXT;























































typedef struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY
{
    DWORD BeginAddress;
    union
    {
        DWORD UnwindData;
        struct
        {
            DWORD Flag : 2;
            DWORD FunctionLength : 11;
            DWORD RegF : 3;
            DWORD RegI : 4;
            DWORD H : 1;
            DWORD CR : 2;
            DWORD FrameSize : 9;
        } ;
    } ;
} IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;

typedef union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA
{
    DWORD HeaderData;
    struct
    {
        DWORD FunctionLength : 18;
        DWORD Version : 2;
        DWORD ExceptionDataPresent : 1;
        DWORD EpilogInHeader : 1;
        DWORD EpilogCount : 5;
        DWORD CodeWords : 5;
    } ;
} IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA;

typedef enum ARM64_FNPDATA_FLAGS
{
    PdataRefToFullXdata = 0,
    PdataPackedUnwindFunction = 1,
    PdataPackedUnwindFragment = 2,
} ARM64_FNPDATA_FLAGS;

typedef enum ARM64_FNPDATA_CR
{
    PdataCrUnchained = 0,
    PdataCrUnchainedSavedLr = 1,
    PdataCrChainedWithPac = 2,
    PdataCrChained = 3,
} ARM64_FNPDATA_CR;

typedef IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY ARM64_RUNTIME_FUNCTION, *PARM64_RUNTIME_FUNCTION;

typedef struct _SCOPE_TABLE_ARM64
{
    DWORD Count;
    struct
    {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_ARM64, *PSCOPE_TABLE_ARM64;

typedef struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64
{
    PDWORD64 X19;
    PDWORD64 X20;
    PDWORD64 X21;
    PDWORD64 X22;
    PDWORD64 X23;
    PDWORD64 X24;
    PDWORD64 X25;
    PDWORD64 X26;
    PDWORD64 X27;
    PDWORD64 X28;
    PDWORD64 Fp;
    PDWORD64 Lr;
    PDWORD64 D8;
    PDWORD64 D9;
    PDWORD64 D10;
    PDWORD64 D11;
    PDWORD64 D12;
    PDWORD64 D13;
    PDWORD64 D14;
    PDWORD64 D15;
} KNONVOLATILE_CONTEXT_POINTERS_ARM64, *PKNONVOLATILE_CONTEXT_POINTERS_ARM64;

typedef union _ARM64_NT_NEON128
{
    struct
    {
        ULONGLONG Low;
        LONGLONG High;
    } ;
    double D[2];
    float S[4];
    WORD  H[8];
    BYTE  B[16];
} ARM64_NT_NEON128, *PARM64_NT_NEON128;

typedef struct  _ARM64_NT_CONTEXT
{
    ULONG ContextFlags;                 
    
    ULONG Cpsr;                         
    union
    {
        struct
        {
            DWORD64 X0;                 
            DWORD64 X1;                 
            DWORD64 X2;                 
            DWORD64 X3;                 
            DWORD64 X4;                 
            DWORD64 X5;                 
            DWORD64 X6;                 
            DWORD64 X7;                 
            DWORD64 X8;                 
            DWORD64 X9;                 
            DWORD64 X10;                
            DWORD64 X11;                
            DWORD64 X12;                
            DWORD64 X13;                
            DWORD64 X14;                
            DWORD64 X15;                
            DWORD64 X16;                
            DWORD64 X17;                
            DWORD64 X18;                
            DWORD64 X19;                
            DWORD64 X20;                
            DWORD64 X21;                
            DWORD64 X22;                
            DWORD64 X23;                
            DWORD64 X24;                
            DWORD64 X25;                
            DWORD64 X26;                
            DWORD64 X27;                
            DWORD64 X28;                
            DWORD64 Fp;                 
            DWORD64 Lr;                 
        } ;
        DWORD64 X[31];                  
    } ;
    
    DWORD64 Sp;                         
    DWORD64 Pc;                         
    
    ARM64_NT_NEON128 V[32];             
    DWORD Fpcr;                         
    DWORD Fpsr;                         
    
    DWORD Bcr[8];   
    DWORD64 Bvr[8]; 
    DWORD Wcr[2];   
    DWORD64 Wvr[2]; 
} ARM64_NT_CONTEXT, *PARM64_NT_CONTEXT;

typedef struct  _ARM64EC_NT_CONTEXT
{
    union
    {
        DWORD64 AMD64_P1Home;                         
        DWORD64 AMD64_P2Home;                         
        DWORD64 AMD64_P3Home;                         
        DWORD64 AMD64_P4Home;                         
        DWORD64 AMD64_P5Home;                         
        DWORD64 AMD64_P6Home;                         
        DWORD   ContextFlags;                         
        DWORD   AMD64_MxCsr_copy;                     
        WORD    AMD64_SegCs;                          
        WORD    AMD64_SegDs;                          
        WORD    AMD64_SegEs;                          
        WORD    AMD64_SegFs;                          
        WORD    AMD64_SegGs;                          
        WORD    AMD64_SegSs;                          
        DWORD   AMD64_EFlags;                         
        DWORD64 AMD64_Dr0;                            
        DWORD64 AMD64_Dr1;                            
        DWORD64 AMD64_Dr2;                            
        DWORD64 AMD64_Dr3;                            
        DWORD64 AMD64_Dr6;                            
        DWORD64 AMD64_Dr7;                            
        DWORD64 X8;                                   
        DWORD64 X0;                                   
        DWORD64 X1;                                   
        DWORD64 X27;                                  
        DWORD64 Sp;                                   
        DWORD64 Fp;                                   
        DWORD64 X25;                                  
        DWORD64 X26;                                  
        DWORD64 X2;                                   
        DWORD64 X3;                                   
        DWORD64 X4;                                   
        DWORD64 X5;                                   
        DWORD64 X19;                                  
        DWORD64 X20;                                  
        DWORD64 X21;                                  
        DWORD64 X22;                                  
        DWORD64 Pc;                                   
        struct
        {
            WORD    AMD64_ControlWord;                
            WORD    AMD64_StatusWord;                 
            BYTE    AMD64_TagWord;                    
            BYTE    AMD64_Reserved1;                  
            WORD    AMD64_ErrorOpcode;                
            DWORD   AMD64_ErrorOffset;                
            WORD    AMD64_ErrorSelector;              
            WORD    AMD64_Reserved2;                  
            DWORD   AMD64_DataOffset;                 
            WORD    AMD64_DataSelector;               
            WORD    AMD64_Reserved3;                  
            DWORD   AMD64_MxCsr;                      
            DWORD   AMD64_MxCsr_Mask;                 
            DWORD64 Lr;                               
            WORD    X16_0;                            
            WORD    AMD64_St0_Reserved1;              
            DWORD   AMD64_St0_Reserved2;              
            DWORD64 X6;                               
            WORD    X16_1;                            
            WORD    AMD64_St1_Reserved1;              
            DWORD   AMD64_St1_Reserved2;              
            DWORD64 X7;                               
            WORD    X16_2;                            
            WORD    AMD64_St2_Reserved1;              
            DWORD   AMD64_St2_Reserved2;              
            DWORD64 X9;                               
            WORD    X16_3;                            
            WORD    AMD64_St3_Reserved1;              
            DWORD   AMD64_St3_Reserved2;              
            DWORD64 X10;                              
            WORD    X17_0;                            
            WORD    AMD64_St4_Reserved1;              
            DWORD   AMD64_St4_Reserved2;              
            DWORD64 X11;                              
            WORD    X17_1;                            
            WORD    AMD64_St5_Reserved1;              
            DWORD   AMD64_St5_Reserved2;              
            DWORD64 X12;                              
            WORD    X17_2;                            
            WORD    AMD64_St6_Reserved1;              
            DWORD   AMD64_St6_Reserved2;              
            DWORD64 X15;                              
            WORD    X17_3;                            
            WORD    AMD64_St7_Reserved1;              
            DWORD   AMD64_St7_Reserved2;              
            ARM64_NT_NEON128 V[16];                   
            BYTE    AMD64_XSAVE_FORMAT_Reserved4[96]; 
        };
        M128A   AMD64_VectorRegister[26];             
        DWORD64 AMD64_VectorControl;                  
        DWORD64 AMD64_DebugControl;                   
        DWORD64 AMD64_LastBranchToRip;                
        DWORD64 AMD64_LastBranchFromRip;              
        DWORD64 AMD64_LastExceptionToRip;             
        DWORD64 AMD64_LastExceptionFromRip;           
    };
    AMD64_CONTEXT AMD64_Context;
} ARM64EC_NT_CONTEXT, *PARM64EC_NT_CONTEXT;





















































struct _EXCEPTION_POINTERS;
struct _EXCEPTION_RECORD;

typedef EXCEPTION_DISPOSITION  *EXCEPTION_ROUTINE (struct _EXCEPTION_RECORD *ExceptionRecord, PVOID EstablisherFrame, PVOID ContextRecord, PVOID DispatcherContext);
typedef EXCEPTION_ROUTINE *PEXCEPTION_ROUTINE;

typedef struct _DISPATCHER_CONTEXT_ARM64
{
    ULONG_PTR                     ControlPc;
    ULONG_PTR                     ImageBase;
    PARM64_RUNTIME_FUNCTION       FunctionEntry;
    ULONG_PTR                     EstablisherFrame;
    ULONG_PTR                     TargetPc;
    PARM64_NT_CONTEXT             ContextRecord;
    PEXCEPTION_ROUTINE            LanguageHandler;
    PVOID                         HandlerData;
    struct _UNWIND_HISTORY_TABLE *HistoryTable;
    DWORD                         ScopeIndex;
    BOOLEAN                       ControlPcIsUnwound;
    PBYTE                         NonVolatileRegisters;
} DISPATCHER_CONTEXT_ARM64, *PDISPATCHER_CONTEXT_ARM64;







typedef union _DISPATCHER_CONTEXT_NONVOLREG_ARM64
{
    BYTE  Buffer[(11 * sizeof(DWORD64)) + (8 * sizeof(double))];
    struct
    {
        DWORD64 GpNvRegs[11];
        double  FpNvRegs[8];
    } ;
} DISPATCHER_CONTEXT_NONVOLREG_ARM64;

























































































































































































































































# 1 "include/winnt.rh" 1 3


































































































































































































































































































































































































































































# 2298 "include/winnt.h" 2

























































typedef struct _EXCEPTION_RECORD
{
    DWORD    ExceptionCode;
    DWORD    ExceptionFlags;
    struct  _EXCEPTION_RECORD *ExceptionRecord;

    PVOID    ExceptionAddress;
    DWORD    NumberParameters;
    ULONG_PTR ExceptionInformation[15];
} EXCEPTION_RECORD, *PEXCEPTION_RECORD;

typedef struct _EXCEPTION_RECORD32
{
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    DWORD ExceptionRecord;
    DWORD ExceptionAddress;
    DWORD NumberParameters;
    DWORD ExceptionInformation[15];
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32;

typedef struct _EXCEPTION_RECORD64
{
    DWORD    ExceptionCode;
    DWORD    ExceptionFlags;
    DWORD64  ExceptionRecord;
    DWORD64  ExceptionAddress;
    DWORD    NumberParameters;
    DWORD    __unusedAlignment;
    DWORD64  ExceptionInformation[15];
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64;






typedef struct _EXCEPTION_POINTERS
{
  PEXCEPTION_RECORD  ExceptionRecord;
  PVOID              ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;








struct _EXCEPTION_REGISTRATION_RECORD;

typedef DWORD ( *PEXCEPTION_HANDLER)(PEXCEPTION_RECORD,struct _EXCEPTION_REGISTRATION_RECORD*,
                                          PVOID,struct _EXCEPTION_REGISTRATION_RECORD **);

typedef struct _EXCEPTION_REGISTRATION_RECORD
{
  struct _EXCEPTION_REGISTRATION_RECORD *Prev;
  PEXCEPTION_HANDLER       Handler;
} EXCEPTION_REGISTRATION_RECORD;





typedef LONG ( *PVECTORED_EXCEPTION_HANDLER)(PEXCEPTION_POINTERS ExceptionInfo);

typedef struct _NT_TIB
{
	struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
	PVOID StackBase;
	PVOID StackLimit;
	PVOID SubSystemTib;
	union {
          PVOID FiberData;
          DWORD Version;
	} ;
	PVOID ArbitraryUserPointer;
	struct _NT_TIB *Self;
} NT_TIB, *PNT_TIB;

struct _TEB;



































































































































# 1 "include/pshpack2.h" 1 3



























     













































































#pragma pack(2)


# 2568 "include/winnt.h" 2
typedef struct _IMAGE_DOS_HEADER {
    WORD  e_magic;      
    WORD  e_cblp;       
    WORD  e_cp;         
    WORD  e_crlc;       
    WORD  e_cparhdr;    
    WORD  e_minalloc;   
    WORD  e_maxalloc;   
    WORD  e_ss;         
    WORD  e_sp;         
    WORD  e_csum;       
    WORD  e_ip;         
    WORD  e_cs;         
    WORD  e_lfarlc;     
    WORD  e_ovno;       
    WORD  e_res[4];     
    WORD  e_oemid;      
    WORD  e_oeminfo;    
    WORD  e_res2[10];   
    DWORD e_lfanew;     
} IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

# 1 "include/poppack.h" 1 3





























































































































































































































































#pragma pack()










# 2590 "include/winnt.h" 2













# 1 "include/pshpack2.h" 1 3



























     













































































#pragma pack(2)


# 2603 "include/winnt.h" 2
typedef struct
{
    WORD  ne_magic;             
    BYTE  ne_ver;               
    BYTE  ne_rev;               
    WORD  ne_enttab;            
    WORD  ne_cbenttab;          
    LONG  ne_crc;               
    WORD  ne_flags;             
    WORD  ne_autodata;          
    WORD  ne_heap;              
    WORD  ne_stack;             
    DWORD ne_csip;              
    DWORD ne_sssp;              
    WORD  ne_cseg;              
    WORD  ne_cmod;              
    WORD  ne_cbnrestab;         
    WORD  ne_segtab;            
    WORD  ne_rsrctab;           
    WORD  ne_restab;            
    WORD  ne_modtab;            
    WORD  ne_imptab;            
    DWORD ne_nrestab;           
    WORD  ne_cmovent;           
    WORD  ne_align;             
    WORD  ne_cres;              
    BYTE  ne_exetyp;            
    BYTE  ne_flagsothers;       
    WORD  ne_pretthunks;        
    WORD  ne_psegrefbytes;      
    WORD  ne_swaparea;          
    WORD  ne_expver;            
} IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;

# 1 "include/poppack.h" 1 3





























































































































































































































































#pragma pack()










# 2637 "include/winnt.h" 2


# 1 "include/pshpack2.h" 1 3



























     













































































#pragma pack(2)


# 2639 "include/winnt.h" 2
typedef struct _IMAGE_VXD_HEADER {
  WORD  e32_magic;
  BYTE  e32_border;
  BYTE  e32_worder;
  DWORD e32_level;
  WORD  e32_cpu;
  WORD  e32_os;
  DWORD e32_ver;
  DWORD e32_mflags;
  DWORD e32_mpages;
  DWORD e32_startobj;
  DWORD e32_eip;
  DWORD e32_stackobj;
  DWORD e32_esp;
  DWORD e32_pagesize;
  DWORD e32_lastpagesize;
  DWORD e32_fixupsize;
  DWORD e32_fixupsum;
  DWORD e32_ldrsize;
  DWORD e32_ldrsum;
  DWORD e32_objtab;
  DWORD e32_objcnt;
  DWORD e32_objmap;
  DWORD e32_itermap;
  DWORD e32_rsrctab;
  DWORD e32_rsrccnt;
  DWORD e32_restab;
  DWORD e32_enttab;
  DWORD e32_dirtab;
  DWORD e32_dircnt;
  DWORD e32_fpagetab;
  DWORD e32_frectab;
  DWORD e32_impmod;
  DWORD e32_impmodcnt;
  DWORD e32_impproc;
  DWORD e32_pagesum;
  DWORD e32_datapage;
  DWORD e32_preload;
  DWORD e32_nrestab;
  DWORD e32_cbnrestab;
  DWORD e32_nressum;
  DWORD e32_autodata;
  DWORD e32_debuginfo;
  DWORD e32_debuglen;
  DWORD e32_instpreload;
  DWORD e32_instdemand;
  DWORD e32_heapsize;
  BYTE  e32_res3[12];
  DWORD e32_winresoff;
  DWORD e32_winreslen;
  WORD  e32_devid;
  WORD  e32_ddkver;
} IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER;

# 1 "include/poppack.h" 1 3





























































































































































































































































#pragma pack()










# 2693 "include/winnt.h" 2





















































































































































typedef struct _IMAGE_FILE_HEADER {
  WORD  Machine;
  WORD  NumberOfSections;
  DWORD TimeDateStamp;
  DWORD PointerToSymbolTable;
  DWORD NumberOfSymbols;
  WORD  SizeOfOptionalHeader;
  WORD  Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;

typedef struct _IMAGE_DATA_DIRECTORY {
  DWORD VirtualAddress;
  DWORD Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;



typedef struct _IMAGE_OPTIONAL_HEADER64 {
  WORD  Magic; 
  BYTE MajorLinkerVersion;
  BYTE MinorLinkerVersion;
  DWORD SizeOfCode;
  DWORD SizeOfInitializedData;
  DWORD SizeOfUninitializedData;
  DWORD AddressOfEntryPoint;
  DWORD BaseOfCode;
  ULONGLONG ImageBase;
  DWORD SectionAlignment;
  DWORD FileAlignment;
  WORD MajorOperatingSystemVersion;
  WORD MinorOperatingSystemVersion;
  WORD MajorImageVersion;
  WORD MinorImageVersion;
  WORD MajorSubsystemVersion;
  WORD MinorSubsystemVersion;
  DWORD Win32VersionValue;
  DWORD SizeOfImage;
  DWORD SizeOfHeaders;
  DWORD CheckSum;
  WORD Subsystem;
  WORD DllCharacteristics;
  ULONGLONG SizeOfStackReserve;
  ULONGLONG SizeOfStackCommit;
  ULONGLONG SizeOfHeapReserve;
  ULONGLONG SizeOfHeapCommit;
  DWORD LoaderFlags;
  DWORD NumberOfRvaAndSizes;
  IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;

typedef struct _IMAGE_NT_HEADERS64 {
  DWORD Signature;
  IMAGE_FILE_HEADER FileHeader;
  IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;

typedef struct _IMAGE_OPTIONAL_HEADER {

  

  WORD  Magic; 	
  BYTE  MajorLinkerVersion;
  BYTE  MinorLinkerVersion;
  DWORD SizeOfCode;
  DWORD SizeOfInitializedData;
  DWORD SizeOfUninitializedData;
  DWORD AddressOfEntryPoint;		
  DWORD BaseOfCode;
  DWORD BaseOfData;

  

  DWORD ImageBase;
  DWORD SectionAlignment;		
  DWORD FileAlignment;
  WORD  MajorOperatingSystemVersion;
  WORD  MinorOperatingSystemVersion;
  WORD  MajorImageVersion;
  WORD  MinorImageVersion;
  WORD  MajorSubsystemVersion;		
  WORD  MinorSubsystemVersion;
  DWORD Win32VersionValue;
  DWORD SizeOfImage;
  DWORD SizeOfHeaders;
  DWORD CheckSum;			
  WORD  Subsystem;
  WORD  DllCharacteristics;
  DWORD SizeOfStackReserve;
  DWORD SizeOfStackCommit;
  DWORD SizeOfHeapReserve;		
  DWORD SizeOfHeapCommit;
  DWORD LoaderFlags;
  DWORD NumberOfRvaAndSizes;
  IMAGE_DATA_DIRECTORY DataDirectory[16]; 
  
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

typedef struct _IMAGE_NT_HEADERS {
  DWORD Signature; 	
  IMAGE_FILE_HEADER FileHeader;		
  IMAGE_OPTIONAL_HEADER32 OptionalHeader;	
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;







typedef IMAGE_NT_HEADERS32  IMAGE_NT_HEADERS;
typedef PIMAGE_NT_HEADERS32 PIMAGE_NT_HEADERS;
typedef IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER;
typedef PIMAGE_OPTIONAL_HEADER32 PIMAGE_OPTIONAL_HEADER;




typedef struct _IMAGE_SECTION_HEADER {
  BYTE  Name[8];
  union {
    DWORD PhysicalAddress;
    DWORD VirtualSize;
  } Misc;
  DWORD VirtualAddress;
  DWORD SizeOfRawData;
  DWORD PointerToRawData;
  DWORD PointerToRelocations;
  DWORD PointerToLinenumbers;
  WORD  NumberOfRelocations;
  WORD  NumberOfLinenumbers;
  DWORD Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;































































# 1 "include/pshpack2.h" 1 3



























     













































































#pragma pack(2)


# 3037 "include/winnt.h" 2

typedef struct _IMAGE_SYMBOL {
    union {
        BYTE    ShortName[8];
        struct {
            DWORD   Short;
            DWORD   Long;
        } Name;
        DWORD   LongName[2];
    } N;
    DWORD   Value;
    SHORT   SectionNumber;
    WORD    Type;
    BYTE    StorageClass;
    BYTE    NumberOfAuxSymbols;
} IMAGE_SYMBOL;
typedef IMAGE_SYMBOL *PIMAGE_SYMBOL;



typedef struct _IMAGE_LINENUMBER {
    union {
        DWORD   SymbolTableIndex;
        DWORD   VirtualAddress;
    } Type;
    WORD    Linenumber;
} IMAGE_LINENUMBER;
typedef IMAGE_LINENUMBER *PIMAGE_LINENUMBER;



typedef union _IMAGE_AUX_SYMBOL {
    struct {
        DWORD    TagIndex;
        union {
            struct {
                WORD    Linenumber;
                WORD    Size;
            } LnSz;
           DWORD    TotalSize;
        } Misc;
        union {
            struct {
                DWORD    PointerToLinenumber;
                DWORD    PointerToNextFunction;
            } Function;
            struct {
                WORD     Dimension[4];
            } Array;
        } FcnAry;
        WORD    TvIndex;
    } Sym;
    struct {
        BYTE    Name[18];
    } File;
    struct {
        DWORD   Length;
        WORD    NumberOfRelocations;
        WORD    NumberOfLinenumbers;
        DWORD   CheckSum;
        SHORT   Number;
        BYTE    Selection;
    } Section;
} IMAGE_AUX_SYMBOL;
typedef IMAGE_AUX_SYMBOL *PIMAGE_AUX_SYMBOL;




# 1 "include/poppack.h" 1 3





























































































































































































































































#pragma pack()










# 3106 "include/winnt.h" 2







































































































typedef struct _IMAGE_EXPORT_DIRECTORY {
	DWORD	Characteristics;
	DWORD	TimeDateStamp;
	WORD	MajorVersion;
	WORD	MinorVersion;
	DWORD	Name;
	DWORD	Base;
	DWORD	NumberOfFunctions;
	DWORD	NumberOfNames;
	DWORD	AddressOfFunctions;
	DWORD	AddressOfNames;
	DWORD	AddressOfNameOrdinals;
} IMAGE_EXPORT_DIRECTORY,*PIMAGE_EXPORT_DIRECTORY;


typedef struct _IMAGE_IMPORT_BY_NAME {
	WORD	Hint;
	char	Name[1];
} IMAGE_IMPORT_BY_NAME,*PIMAGE_IMPORT_BY_NAME;


# 1 "include/pshpack8.h" 1 3



























     













































































#pragma pack(8)


# 3230 "include/winnt.h" 2

typedef struct _IMAGE_THUNK_DATA64 {
	union {
		ULONGLONG ForwarderString;
		ULONGLONG Function;
		ULONGLONG Ordinal;
		ULONGLONG AddressOfData;
	} u1;
} IMAGE_THUNK_DATA64,*PIMAGE_THUNK_DATA64;

# 1 "include/poppack.h" 1 3





























































































































































































































































#pragma pack()










# 3240 "include/winnt.h" 2

typedef struct _IMAGE_THUNK_DATA32 {
	union {
		DWORD ForwarderString;
		DWORD Function;
		DWORD Ordinal;
		DWORD AddressOfData;
	} u1;
} IMAGE_THUNK_DATA32,*PIMAGE_THUNK_DATA32;



typedef struct _IMAGE_IMPORT_DESCRIPTOR {
	union {
		DWORD	Characteristics; 
		DWORD	OriginalFirstThunk;	
	} ;
	DWORD	TimeDateStamp;	






	DWORD	ForwarderChain;	
	DWORD	Name;
	
	DWORD	FirstThunk;
} IMAGE_IMPORT_DESCRIPTOR,*PIMAGE_IMPORT_DESCRIPTOR;


















typedef IMAGE_THUNK_DATA32              IMAGE_THUNK_DATA;
typedef PIMAGE_THUNK_DATA32             PIMAGE_THUNK_DATA;


typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR
{
    DWORD   TimeDateStamp;
    WORD    OffsetModuleName;
    WORD    NumberOfModuleForwarderRefs;

} IMAGE_BOUND_IMPORT_DESCRIPTOR,  *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_BOUND_FORWARDER_REF
{
    DWORD   TimeDateStamp;
    WORD    OffsetModuleName;
    WORD    Reserved;
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;

typedef struct _IMAGE_BASE_RELOCATION
{
	DWORD	VirtualAddress;
	DWORD	SizeOfBlock;
	
} IMAGE_BASE_RELOCATION,*PIMAGE_BASE_RELOCATION;


# 1 "include/pshpack2.h" 1 3



























     













































































#pragma pack(2)


# 3314 "include/winnt.h" 2

typedef struct _IMAGE_RELOCATION
{
    union {
        DWORD   VirtualAddress;
        DWORD   RelocCount;
    } ;
    DWORD   SymbolTableIndex;
    WORD    Type;
} IMAGE_RELOCATION, *PIMAGE_RELOCATION;


# 1 "include/poppack.h" 1 3





























































































































































































































































#pragma pack()










# 3326 "include/winnt.h" 2



typedef struct _IMAGE_DELAYLOAD_DESCRIPTOR
{
    union
    {
        DWORD AllAttributes;
        struct
        {
            DWORD RvaBased:1;
            DWORD ReservedAttributes:31;
        } ;
    } Attributes;

    DWORD DllNameRVA;
    DWORD ModuleHandleRVA;
    DWORD ImportAddressTableRVA;
    DWORD ImportNameTableRVA;
    DWORD BoundImportAddressTableRVA;
    DWORD UnloadInformationTableRVA;
    DWORD TimeDateStamp;
} IMAGE_DELAYLOAD_DESCRIPTOR, *PIMAGE_DELAYLOAD_DESCRIPTOR;
typedef const IMAGE_DELAYLOAD_DESCRIPTOR *PCIMAGE_DELAYLOAD_DESCRIPTOR;

































































































































































































































typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER
{
    BYTE     Name[16];
    BYTE     Date[12];
    BYTE     UserID[6];
    BYTE     GroupID[6];
    BYTE     Mode[8];
    BYTE     Size[10];
    BYTE     EndHeader[2];
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;



typedef struct _IMPORT_OBJECT_HEADER
{
    WORD     Sig1;
    WORD     Sig2;
    WORD     Version;
    WORD     Machine;
    DWORD    TimeDateStamp;
    DWORD    SizeOfData;
    union
    {
        WORD Ordinal;
        WORD Hint;
    } ;
    WORD     Type : 2;
    WORD     NameType : 3;
    WORD     Reserved : 11;
} IMPORT_OBJECT_HEADER;



typedef enum IMPORT_OBJECT_TYPE
{
    IMPORT_OBJECT_CODE = 0,
    IMPORT_OBJECT_DATA = 1,
    IMPORT_OBJECT_CONST = 2
} IMPORT_OBJECT_TYPE;

typedef enum IMPORT_OBJECT_NAME_TYPE
{
    IMPORT_OBJECT_ORDINAL = 0,
    IMPORT_OBJECT_NAME = 1,
    IMPORT_OBJECT_NAME_NO_PREFIX = 2,
    IMPORT_OBJECT_NAME_UNDECORATE = 3,
    IMPORT_OBJECT_NAME_EXPORTAS = 4
} IMPORT_OBJECT_NAME_TYPE;

typedef struct _ANON_OBJECT_HEADER
{
    WORD     Sig1;
    WORD     Sig2;
    WORD     Version;
    WORD     Machine;
    DWORD    TimeDateStamp;
    CLSID    ClassID;
    DWORD    SizeOfData;
} ANON_OBJECT_HEADER;




typedef struct _IMAGE_RESOURCE_DIRECTORY {
	DWORD	Characteristics;
	DWORD	TimeDateStamp;
	WORD	MajorVersion;
	WORD	MinorVersion;
	WORD	NumberOfNamedEntries;
	WORD	NumberOfIdEntries;
	
} IMAGE_RESOURCE_DIRECTORY,*PIMAGE_RESOURCE_DIRECTORY;




typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
	union {
		struct {
			unsigned NameOffset:31;
			unsigned NameIsString:1;
		} ;
		DWORD   Name;
		WORD    Id;
	} ;
	union {
		DWORD   OffsetToData;
		struct {
			unsigned OffsetToDirectory:31;
			unsigned DataIsDirectory:1;
		} ;
	} ;
} IMAGE_RESOURCE_DIRECTORY_ENTRY,*PIMAGE_RESOURCE_DIRECTORY_ENTRY;


typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
	WORD	Length;
	CHAR	NameString[ 1 ];
} IMAGE_RESOURCE_DIRECTORY_STRING,*PIMAGE_RESOURCE_DIRECTORY_STRING;

typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
	WORD	Length;
	WCHAR	NameString[ 1 ];
} IMAGE_RESOURCE_DIR_STRING_U,*PIMAGE_RESOURCE_DIR_STRING_U;

typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
	DWORD	OffsetToData;
	DWORD	Size;
	DWORD	CodePage;
	DWORD	Reserved;
} IMAGE_RESOURCE_DATA_ENTRY,*PIMAGE_RESOURCE_DATA_ENTRY;


typedef void ( *PIMAGE_TLS_CALLBACK)(
	LPVOID DllHandle,DWORD Reason,LPVOID Reserved
);

typedef struct _IMAGE_TLS_DIRECTORY64 {
    ULONGLONG   StartAddressOfRawData;
    ULONGLONG   EndAddressOfRawData;
    ULONGLONG   AddressOfIndex;
    ULONGLONG   AddressOfCallBacks;
    DWORD       SizeOfZeroFill;
    DWORD       Characteristics;
} IMAGE_TLS_DIRECTORY64, *PIMAGE_TLS_DIRECTORY64;

typedef struct _IMAGE_TLS_DIRECTORY32 {
    DWORD   StartAddressOfRawData;
    DWORD   EndAddressOfRawData;
    DWORD   AddressOfIndex;
    DWORD   AddressOfCallBacks;
    DWORD   SizeOfZeroFill;
    DWORD   Characteristics;
} IMAGE_TLS_DIRECTORY32, *PIMAGE_TLS_DIRECTORY32;





typedef IMAGE_TLS_DIRECTORY32           IMAGE_TLS_DIRECTORY;
typedef PIMAGE_TLS_DIRECTORY32          PIMAGE_TLS_DIRECTORY;


typedef struct _IMAGE_DEBUG_DIRECTORY {
  DWORD Characteristics;
  DWORD TimeDateStamp;
  WORD  MajorVersion;
  WORD  MinorVersion;
  DWORD Type;
  DWORD SizeOfData;
  DWORD AddressOfRawData;
  DWORD PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;



















typedef enum ReplacesCorHdrNumericDefines
{
    COMIMAGE_FLAGS_ILONLY           = 0x00000001,
    COMIMAGE_FLAGS_32BITREQUIRED    = 0x00000002,
    COMIMAGE_FLAGS_IL_LIBRARY       = 0x00000004,
    COMIMAGE_FLAGS_STRONGNAMESIGNED = 0x00000008,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT= 0x00000010,
    COMIMAGE_FLAGS_TRACKDEBUGDATA   = 0x00010000,
    COMIMAGE_FLAGS_32BITPREFERRED   = 0x00020000,

    COR_VERSION_MAJOR_V2       = 2,
    COR_VERSION_MAJOR          = COR_VERSION_MAJOR_V2,
    COR_VERSION_MINOR          = 5,
    COR_DELETED_NAME_LENGTH    = 8,
    COR_VTABLEGAP_NAME_LENGTH  = 8,

    NATIVE_TYPE_MAX_CB = 1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 0xff,

    IMAGE_COR_MIH_METHODRVA  = 0x01,
    IMAGE_COR_MIH_EHRVA      = 0x02,
    IMAGE_COR_MIH_BASICBLOCK = 0x08,

    COR_VTABLE_32BIT             = 0x01,
    COR_VTABLE_64BIT             = 0x02,
    COR_VTABLE_FROM_UNMANAGED    = 0x04,
    COR_VTABLE_CALL_MOST_DERIVED = 0x10,

    IMAGE_COR_EATJ_THUNK_SIZE = 32,

    MAX_CLASS_NAME   = 1024,
    MAX_PACKAGE_NAME = 1024,
} ReplacesCorHdrNumericDefines;

typedef struct IMAGE_COR20_HEADER
{
    DWORD cb;
    WORD  MajorRuntimeVersion;
    WORD  MinorRuntimeVersion;

    IMAGE_DATA_DIRECTORY MetaData;
    DWORD Flags;
    union {
        DWORD EntryPointToken;
        DWORD EntryPointRVA;
    } ;

    IMAGE_DATA_DIRECTORY Resources;
    IMAGE_DATA_DIRECTORY StrongNameSignature;
    IMAGE_DATA_DIRECTORY CodeManagerTable;
    IMAGE_DATA_DIRECTORY VTableFixups;
    IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
    IMAGE_DATA_DIRECTORY ManagedNativeHeader;

} IMAGE_COR20_HEADER, *PIMAGE_COR20_HEADER;

typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
  DWORD NumberOfSymbols;
  DWORD LvaToFirstSymbol;
  DWORD NumberOfLinenumbers;
  DWORD LvaToFirstLinenumber;
  DWORD RvaToFirstByteOfCode;
  DWORD RvaToLastByteOfCode;
  DWORD RvaToFirstByteOfData;
  DWORD RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER;






typedef struct _FPO_DATA {
  DWORD ulOffStart;
  DWORD cbProcSize;
  DWORD cdwLocals;
  WORD  cdwParams;
  WORD  cbProlog : 8;
  WORD  cbRegs   : 3;
  WORD  fHasSEH  : 1;
  WORD  fUseBP   : 1;
  WORD  reserved : 1;
  WORD  cbFrame  : 2;
} FPO_DATA, *PFPO_DATA;

typedef struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY
{
  WORD    Flags;
  WORD    Catalog;
  DWORD   CatalogOffset;
  DWORD   Reserved;
} IMAGE_LOAD_CONFIG_CODE_INTEGRITY, *PIMAGE_LOAD_CONFIG_CODE_INTEGRITY;

typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY64 {
  DWORD     Size;                                 
  DWORD     TimeDateStamp;
  WORD      MajorVersion;
  WORD      MinorVersion;
  DWORD     GlobalFlagsClear;
  DWORD     GlobalFlagsSet;                       
  DWORD     CriticalSectionDefaultTimeout;
  ULONGLONG DeCommitFreeBlockThreshold;
  ULONGLONG DeCommitTotalFreeThreshold;           
  ULONGLONG LockPrefixTable;
  ULONGLONG MaximumAllocationSize;                
  ULONGLONG VirtualMemoryThreshold;
  ULONGLONG ProcessAffinityMask;                  
  DWORD     ProcessHeapFlags;
  WORD      CSDVersion;
  WORD      DependentLoadFlags;
  ULONGLONG EditList;                             
  ULONGLONG SecurityCookie;
  ULONGLONG SEHandlerTable;                       
  ULONGLONG SEHandlerCount;
  ULONGLONG GuardCFCheckFunctionPointer;          
  ULONGLONG GuardCFDispatchFunctionPointer;
  ULONGLONG GuardCFFunctionTable;                 
  ULONGLONG GuardCFFunctionCount;
  DWORD     GuardFlags;                           
  IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
  ULONGLONG GuardAddressTakenIatEntryTable;       
  ULONGLONG GuardAddressTakenIatEntryCount;
  ULONGLONG GuardLongJumpTargetTable;             
  ULONGLONG GuardLongJumpTargetCount;
  ULONGLONG DynamicValueRelocTable;               
  ULONGLONG CHPEMetadataPointer;
  ULONGLONG GuardRFFailureRoutine;                
  ULONGLONG GuardRFFailureRoutineFunctionPointer;
  DWORD     DynamicValueRelocTableOffset;         
  WORD      DynamicValueRelocTableSection;
  WORD      Reserved2;
  ULONGLONG GuardRFVerifyStackPointerFunctionPointer;
  DWORD     HotPatchTableOffset;                  
  DWORD     Reserved3;
  ULONGLONG EnclaveConfigurationPointer;
  ULONGLONG VolatileMetadataPointer;              
  ULONGLONG GuardEHContinuationTable;
  ULONGLONG GuardEHContinuationCount;             
  ULONGLONG GuardXFGCheckFunctionPointer;
  ULONGLONG GuardXFGDispatchFunctionPointer;      
  ULONGLONG GuardXFGTableDispatchFunctionPointer;
  ULONGLONG CastGuardOsDeterminedFailureMode;     
  ULONGLONG GuardMemcpyFunctionPointer;
} IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64;

typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY32 {
  DWORD Size;                                     
  DWORD TimeDateStamp;
  WORD  MajorVersion;
  WORD  MinorVersion;
  DWORD GlobalFlagsClear;
  DWORD GlobalFlagsSet;                           
  DWORD CriticalSectionDefaultTimeout;
  DWORD DeCommitFreeBlockThreshold;
  DWORD DeCommitTotalFreeThreshold;
  DWORD LockPrefixTable;                          
  DWORD MaximumAllocationSize;
  DWORD VirtualMemoryThreshold;
  DWORD ProcessHeapFlags;
  DWORD ProcessAffinityMask;                      
  WORD  CSDVersion;
  WORD  DependentLoadFlags;
  DWORD EditList;
  DWORD SecurityCookie;
  DWORD SEHandlerTable;                           
  DWORD SEHandlerCount;
  DWORD GuardCFCheckFunctionPointer;
  DWORD GuardCFDispatchFunctionPointer;
  DWORD GuardCFFunctionTable;                     
  DWORD GuardCFFunctionCount;
  DWORD GuardFlags;
  IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
  DWORD GuardAddressTakenIatEntryTable;
  DWORD GuardAddressTakenIatEntryCount;
  DWORD GuardLongJumpTargetTable;                 
  DWORD GuardLongJumpTargetCount;
  DWORD DynamicValueRelocTable;
  DWORD CHPEMetadataPointer;
  DWORD GuardRFFailureRoutine;                    
  DWORD GuardRFFailureRoutineFunctionPointer;
  DWORD DynamicValueRelocTableOffset;
  WORD  DynamicValueRelocTableSection;
  WORD  Reserved2;
  DWORD GuardRFVerifyStackPointerFunctionPointer; 
  DWORD HotPatchTableOffset;
  DWORD Reserved3;
  DWORD EnclaveConfigurationPointer;
  DWORD VolatileMetadataPointer;                  
  DWORD GuardEHContinuationTable;
  DWORD GuardEHContinuationCount;
  DWORD GuardXFGCheckFunctionPointer;
  DWORD GuardXFGDispatchFunctionPointer;          
  DWORD GuardXFGTableDispatchFunctionPointer;
  DWORD CastGuardOsDeterminedFailureMode;
  DWORD GuardMemcpyFunctionPointer;
} IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;





typedef IMAGE_LOAD_CONFIG_DIRECTORY32   IMAGE_LOAD_CONFIG_DIRECTORY;
typedef PIMAGE_LOAD_CONFIG_DIRECTORY32  PIMAGE_LOAD_CONFIG_DIRECTORY;


typedef struct _IMAGE_DYNAMIC_RELOCATION_TABLE
{
    DWORD     Version;
    DWORD     Size;
} IMAGE_DYNAMIC_RELOCATION_TABLE, *PIMAGE_DYNAMIC_RELOCATION_TABLE;


# 1 "include/pshpack1.h" 1 3



























     













































































#pragma pack(1)


# 3959 "include/winnt.h" 2

typedef struct _IMAGE_DYNAMIC_RELOCATION32
{
    DWORD     Symbol;
    DWORD     BaseRelocSize;
} IMAGE_DYNAMIC_RELOCATION32, *PIMAGE_DYNAMIC_RELOCATION32;

typedef struct _IMAGE_DYNAMIC_RELOCATION64
{
    ULONGLONG Symbol;
    DWORD     BaseRelocSize;
} IMAGE_DYNAMIC_RELOCATION64, *PIMAGE_DYNAMIC_RELOCATION64;

typedef struct _IMAGE_DYNAMIC_RELOCATION32_V2
{
    DWORD     HeaderSize;
    DWORD     FixupInfoSize;
    DWORD     Symbol;
    DWORD     SymbolGroup;
    DWORD     Flags;
} IMAGE_DYNAMIC_RELOCATION32_V2, *PIMAGE_DYNAMIC_RELOCATION32_V2;

typedef struct _IMAGE_DYNAMIC_RELOCATION64_V2
{
    DWORD     HeaderSize;
    DWORD     FixupInfoSize;
    ULONGLONG Symbol;
    DWORD     SymbolGroup;
    DWORD     Flags;
} IMAGE_DYNAMIC_RELOCATION64_V2, *PIMAGE_DYNAMIC_RELOCATION64_V2;


# 1 "include/poppack.h" 1 3





























































































































































































































































#pragma pack()










# 3991 "include/winnt.h" 2







typedef IMAGE_DYNAMIC_RELOCATION32     IMAGE_DYNAMIC_RELOCATION;
typedef PIMAGE_DYNAMIC_RELOCATION32    PIMAGE_DYNAMIC_RELOCATION;
typedef IMAGE_DYNAMIC_RELOCATION32_V2  IMAGE_DYNAMIC_RELOCATION_V2;
typedef PIMAGE_DYNAMIC_RELOCATION32_V2 PIMAGE_DYNAMIC_RELOCATION_V2;









typedef struct _IMAGE_CHPE_METADATA_X86
{
    ULONG  Version;
    ULONG  CHPECodeAddressRangeOffset;
    ULONG  CHPECodeAddressRangeCount;
    ULONG  WowA64ExceptionHandlerFunctionPointer;
    ULONG  WowA64DispatchCallFunctionPointer;
    ULONG  WowA64DispatchIndirectCallFunctionPointer;
    ULONG  WowA64DispatchIndirectCallCfgFunctionPointer;
    ULONG  WowA64DispatchRetFunctionPointer;
    ULONG  WowA64DispatchRetLeafFunctionPointer;
    ULONG  WowA64DispatchJumpFunctionPointer;
    ULONG  CompilerIATPointer;
    ULONG  WowA64RdtscFunctionPointer;
    ULONG  unknown[4];
} IMAGE_CHPE_METADATA_X86, *PIMAGE_CHPE_METADATA_X86;

typedef struct _IMAGE_CHPE_RANGE_ENTRY
{
    union
    {
        ULONG StartOffset;
        struct
        {
            ULONG NativeCode : 1;
            ULONG AddressBits : 31;
        } ;
    } ;
    ULONG Length;
} IMAGE_CHPE_RANGE_ENTRY, *PIMAGE_CHPE_RANGE_ENTRY;

typedef struct _IMAGE_ARM64EC_METADATA
{
    ULONG  Version;
    ULONG  CodeMap;
    ULONG  CodeMapCount;
    ULONG  CodeRangesToEntryPoints;
    ULONG  RedirectionMetadata;
    ULONG  __os_arm64x_dispatch_call_no_redirect;
    ULONG  __os_arm64x_dispatch_ret;
    ULONG  __os_arm64x_dispatch_call;
    ULONG  __os_arm64x_dispatch_icall;
    ULONG  __os_arm64x_dispatch_icall_cfg;
    ULONG  AlternateEntryPoint;
    ULONG  AuxiliaryIAT;
    ULONG  CodeRangesToEntryPointsCount;
    ULONG  RedirectionMetadataCount;
    ULONG  GetX64InformationFunctionPointer;
    ULONG  SetX64InformationFunctionPointer;
    ULONG  ExtraRFETable;
    ULONG  ExtraRFETableSize;
    ULONG  __os_arm64x_dispatch_fptr;
    ULONG  AuxiliaryIATCopy;
    ULONG  __os_arm64x_helper0;
    ULONG  __os_arm64x_helper1;
    ULONG  __os_arm64x_helper2;
    ULONG  __os_arm64x_helper3;
    ULONG  __os_arm64x_helper4;
    ULONG  __os_arm64x_helper5;
    ULONG  __os_arm64x_helper6;
    ULONG  __os_arm64x_helper7;
    ULONG  __os_arm64x_helper8;
} IMAGE_ARM64EC_METADATA;

typedef struct _IMAGE_ARM64EC_REDIRECTION_ENTRY
{
    ULONG Source;
    ULONG Destination;
} IMAGE_ARM64EC_REDIRECTION_ENTRY;

typedef struct _IMAGE_ARM64EC_CODE_RANGE_ENTRY_POINT
{
    ULONG StartRva;
    ULONG EndRva;
    ULONG EntryPoint;
} IMAGE_ARM64EC_CODE_RANGE_ENTRY_POINT;









typedef struct _IMAGE_DVRT_ARM64X_FIXUP_RECORD
{
    USHORT Offset : 12;
    USHORT Type   :  2;
    USHORT Size   :  2;
} IMAGE_DVRT_ARM64X_FIXUP_RECORD, *PIMAGE_DVRT_ARM64X_FIXUP_RECORD;

typedef struct _IMAGE_DVRT_ARM64X_DELTA_FIXUP_RECORD
{
    USHORT Offset : 12;
    USHORT Type   :  2;
    USHORT Sign   :  1;
    USHORT Scale  :  1;
} IMAGE_DVRT_ARM64X_DELTA_FIXUP_RECORD, *PIMAGE_DVRT_ARM64X_DELTA_FIXUP_RECORD;

typedef struct _IMAGE_FUNCTION_ENTRY {
  DWORD StartingAddress;
  DWORD EndingAddress;
  DWORD EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY;



typedef struct _IMAGE_DEBUG_MISC {
    DWORD       DataType;
    DWORD       Length;
    BYTE        Unicode;
    BYTE        Reserved[ 3 ];
    BYTE        Data[ 1 ];
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;



typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
	WORD	Signature;
	WORD	Flags;
	WORD	Machine;
	WORD	Characteristics;
	DWORD	TimeDateStamp;
	DWORD	CheckSum;
	DWORD	ImageBase;
	DWORD	SizeOfImage;
	DWORD	NumberOfSections;
	DWORD	ExportedNamesSize;
	DWORD	DebugDirectorySize;
	DWORD	SectionAlignment;
	DWORD	Reserved[ 2 ];
} IMAGE_SEPARATE_DEBUG_HEADER,*PIMAGE_SEPARATE_DEBUG_HEADER;




typedef struct tagMESSAGE_RESOURCE_ENTRY {
	WORD	Length;
	WORD	Flags;
	BYTE	Text[1];
} MESSAGE_RESOURCE_ENTRY,*PMESSAGE_RESOURCE_ENTRY;


typedef struct tagMESSAGE_RESOURCE_BLOCK {
	DWORD	LowId;
	DWORD	HighId;
	DWORD	OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK,*PMESSAGE_RESOURCE_BLOCK;

typedef struct tagMESSAGE_RESOURCE_DATA {
	DWORD			NumberOfBlocks;
	MESSAGE_RESOURCE_BLOCK	Blocks[ 1 ];
} MESSAGE_RESOURCE_DATA,*PMESSAGE_RESOURCE_DATA;












typedef PVOID PACCESS_TOKEN;
typedef PVOID PSECURITY_DESCRIPTOR;
typedef PVOID PSID;

typedef enum _TOKEN_ELEVATION_TYPE {
  TokenElevationTypeDefault = 1,
  TokenElevationTypeFull,
  TokenElevationTypeLimited
} TOKEN_ELEVATION_TYPE, *PTOKEN_ELEVATION_TYPE;





typedef enum _TOKEN_INFORMATION_CLASS {
  TokenUser = 1,
  TokenGroups,
  TokenPrivileges,
  TokenOwner,
  TokenPrimaryGroup,
  TokenDefaultDacl,
  TokenSource,
  TokenType,
  TokenImpersonationLevel,
  TokenStatistics,
  TokenRestrictedSids,
  TokenSessionId,
  TokenGroupsAndPrivileges,
  TokenSessionReference,
  TokenSandBoxInert,
  TokenAuditPolicy,
  TokenOrigin,
  TokenElevationType,
  TokenLinkedToken,
  TokenElevation,
  TokenHasRestrictions,
  TokenAccessInformation,
  TokenVirtualizationAllowed,
  TokenVirtualizationEnabled,
  TokenIntegrityLevel,
  TokenUIAccess,
  TokenMandatoryPolicy,
  TokenLogonSid,
  TokenIsAppContainer,
  TokenCapabilities,
  TokenAppContainerSid,
  TokenAppContainerNumber,
  TokenUserClaimAttributes,
  TokenDeviceClaimAttributes,
  TokenRestrictedUserClaimAttributes,
  TokenRestrictedDeviceClaimAttributes,
  TokenDeviceGroups,
  TokenRestrictedDeviceGroups,
  TokenSecurityAttributes,
  TokenIsRestricted,
  TokenProcessTrustLevel,
  MaxTokenInfoClass
} TOKEN_INFORMATION_CLASS;



































typedef DWORD ACCESS_MASK, *PACCESS_MASK;

typedef struct _GENERIC_MAPPING {
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
} GENERIC_MAPPING, *PGENERIC_MAPPING;



typedef struct {
    BYTE Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;




typedef struct _SID {
    BYTE Revision;
    BYTE SubAuthorityCount;
    SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
    DWORD SubAuthority[1];
} SID,*PISID;
























typedef struct _ACL {
    BYTE AclRevision;
    BYTE Sbz1;
    WORD AclSize;
    WORD AceCount;
    WORD Sbz2;
} ACL, *PACL;

typedef enum _ACL_INFORMATION_CLASS
{
  AclRevisionInformation = 1, 
  AclSizeInformation
} ACL_INFORMATION_CLASS;

typedef struct _ACL_REVISION_INFORMATION
{
    DWORD AclRevision;
} ACL_REVISION_INFORMATION, *PACL_REVISION_INFORMATION;

typedef struct _ACL_SIZE_INFORMATION
{
    DWORD AceCount;
    DWORD AclBytesInUse;
    DWORD AclBytesFree;
} ACL_SIZE_INFORMATION, *PACL_SIZE_INFORMATION;



























































































































































typedef DWORD SECURITY_INFORMATION, *PSECURITY_INFORMATION;
typedef WORD SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL;


typedef struct {
    BYTE Revision;
    BYTE Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    DWORD Owner;
    DWORD Group;
    DWORD Sacl;
    DWORD Dacl;
} SECURITY_DESCRIPTOR_RELATIVE, *PISECURITY_DESCRIPTOR_RELATIVE;

typedef struct {
    BYTE Revision;
    BYTE Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    PSID Owner;
    PSID Group;
    PACL Sacl;
    PACL Dacl;
} SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;









typedef struct _SID_AND_ATTRIBUTES {
  PSID  Sid;
  DWORD Attributes;
} SID_AND_ATTRIBUTES, *PSID_AND_ATTRIBUTES;

typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;



typedef ULONG_PTR SID_HASH_ENTRY, *PSID_HASH_ENTRY;

typedef struct _SID_AND_ATTRIBUTES_HASH {
  DWORD SidCount;
  PSID_AND_ATTRIBUTES SidAttr;
  SID_HASH_ENTRY Hash[32];
} SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH;









































































































































































typedef enum {
    WinNullSid                                  = 0,
    WinWorldSid                                 = 1,
    WinLocalSid                                 = 2,
    WinCreatorOwnerSid                          = 3,
    WinCreatorGroupSid                          = 4,
    WinCreatorOwnerServerSid                    = 5,
    WinCreatorGroupServerSid                    = 6,
    WinNtAuthoritySid                           = 7,
    WinDialupSid                                = 8,
    WinNetworkSid                               = 9,
    WinBatchSid                                 = 10,
    WinInteractiveSid                           = 11,
    WinServiceSid                               = 12,
    WinAnonymousSid                             = 13,
    WinProxySid                                 = 14,
    WinEnterpriseControllersSid                 = 15,
    WinSelfSid                                  = 16,
    WinAuthenticatedUserSid                     = 17,
    WinRestrictedCodeSid                        = 18,
    WinTerminalServerSid                        = 19,
    WinRemoteLogonIdSid                         = 20,
    WinLogonIdsSid                              = 21,
    WinLocalSystemSid                           = 22,
    WinLocalServiceSid                          = 23,
    WinNetworkServiceSid                        = 24,
    WinBuiltinDomainSid                         = 25,
    WinBuiltinAdministratorsSid                 = 26,
    WinBuiltinUsersSid                          = 27,
    WinBuiltinGuestsSid                         = 28,
    WinBuiltinPowerUsersSid                     = 29,
    WinBuiltinAccountOperatorsSid               = 30,
    WinBuiltinSystemOperatorsSid                = 31,
    WinBuiltinPrintOperatorsSid                 = 32,
    WinBuiltinBackupOperatorsSid                = 33,
    WinBuiltinReplicatorSid                     = 34,
    WinBuiltinPreWindows2000CompatibleAccessSid = 35,
    WinBuiltinRemoteDesktopUsersSid             = 36,
    WinBuiltinNetworkConfigurationOperatorsSid  = 37,
    WinAccountAdministratorSid                  = 38,
    WinAccountGuestSid                          = 39,
    WinAccountKrbtgtSid                         = 40,
    WinAccountDomainAdminsSid                   = 41,
    WinAccountDomainUsersSid                    = 42,
    WinAccountDomainGuestsSid                   = 43,
    WinAccountComputersSid                      = 44,
    WinAccountControllersSid                    = 45,
    WinAccountCertAdminsSid                     = 46,
    WinAccountSchemaAdminsSid                   = 47,
    WinAccountEnterpriseAdminsSid               = 48,
    WinAccountPolicyAdminsSid                   = 49,
    WinAccountRasAndIasServersSid               = 50,
    WinNTLMAuthenticationSid                    = 51,
    WinDigestAuthenticationSid                  = 52,
    WinSChannelAuthenticationSid                = 53,
    WinThisOrganizationSid                      = 54,
    WinOtherOrganizationSid                     = 55,
    WinBuiltinIncomingForestTrustBuildersSid    = 56,
    WinBuiltinPerfMonitoringUsersSid            = 57,
    WinBuiltinPerfLoggingUsersSid               = 58,
    WinBuiltinAuthorizationAccessSid            = 59,
    WinBuiltinTerminalServerLicenseServersSid   = 60,
    WinBuiltinDCOMUsersSid                      = 61,
    WinBuiltinIUsersSid                         = 62,
    WinIUserSid                                 = 63,
    WinBuiltinCryptoOperatorsSid                = 64,
    WinUntrustedLabelSid                        = 65,
    WinLowLabelSid                              = 66,
    WinMediumLabelSid                           = 67,
    WinHighLabelSid                             = 68,
    WinSystemLabelSid                           = 69,
    WinWriteRestrictedCodeSid                   = 70,
    WinCreatorOwnerRightsSid                    = 71,
    WinCacheablePrincipalsGroupSid              = 72,
    WinNonCacheablePrincipalsGroupSid           = 73,
    WinEnterpriseReadonlyControllersSid         = 74,
    WinAccountReadonlyControllersSid            = 75,
    WinBuiltinEventLogReadersGroup              = 76,
    WinNewEnterpriseReadonlyControllersSid      = 77,
    WinBuiltinCertSvcDComAccessGroup            = 78,
    WinMediumPlusLabelSid                       = 79,
    WinLocalLogonSid                            = 80,
    WinConsoleLogonSid                          = 81,
    WinThisOrganizationCertificateSid           = 82,
    WinApplicationPackageAuthoritySid           = 83,
    WinBuiltinAnyPackageSid                     = 84,
    WinCapabilityInternetClientSid              = 85,
    WinCapabilityInternetClientServerSid        = 86,
    WinCapabilityPrivateNetworkClientServerSid  = 87,
    WinCapabilityPicturesLibrarySid             = 88,
    WinCapabilityVideosLibrarySid               = 89,
    WinCapabilityMusicLibrarySid                = 90,
    WinCapabilityDocumentsLibrarySid            = 91,
    WinCapabilitySharedUserCertificatesSid      = 92,
    WinCapabilityEnterpriseAuthenticationSid    = 93,
    WinCapabilityRemovableStorageSid            = 94,
    WinBuiltinRDSRemoteAccessServersSid         = 95,
    WinBuiltinRDSEndpointServersSid             = 96,
    WinBuiltinRDSManagementServersSid           = 97,
    WinUserModeDriversSid                       = 98,
    WinBuiltinHyperVAdminsSid                   = 99,
    WinAccountCloneableControllersSid           = 100,
    WinBuiltinAccessControlAssistanceOperatorsSid = 101,
    WinBuiltinRemoteManagementUsersSid          = 102,
    WinAuthenticationAuthorityAssertedSid       = 103,
    WinAuthenticationServiceAssertedSid         = 104,
    WinLocalAccountSid                          = 105,
    WinLocalAccountAndAdministratorSid          = 106,
    WinAccountProtectedUsersSid                 = 107,
} WELL_KNOWN_SID_TYPE;





typedef struct _TOKEN_USER {
    SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER;





typedef struct _TOKEN_GROUPS {
    DWORD GroupCount;
    SID_AND_ATTRIBUTES Groups[1];
} TOKEN_GROUPS, *PTOKEN_GROUPS;





typedef union _LARGE_INTEGER {
    struct {
        DWORD    LowPart;
        LONG     HighPart;
    } u;
    struct {
        DWORD    LowPart;
        LONG     HighPart;
    } ;
    LONGLONG QuadPart;
} LARGE_INTEGER, *PLARGE_INTEGER;

typedef union _ULARGE_INTEGER {
    struct {
        DWORD    LowPart;
        DWORD    HighPart;
    } u;
    struct {
        DWORD    LowPart;
        DWORD    HighPart;
    } ;
    ULONGLONG QuadPart;
} ULARGE_INTEGER, *PULARGE_INTEGER;





typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
} LUID, *PLUID;


# 1 "include/pshpack4.h" 1 3



























     













































































#pragma pack(4)


# 4882 "include/winnt.h" 2
typedef struct _LUID_AND_ATTRIBUTES {
  LUID   Luid;
  DWORD  Attributes;
} LUID_AND_ATTRIBUTES, *PLUID_AND_ATTRIBUTES;

# 1 "include/poppack.h" 1 3





























































































































































































































































#pragma pack()










# 4887 "include/winnt.h" 2





typedef struct _PRIVILEGE_SET {
    DWORD PrivilegeCount;
    DWORD Control;
    LUID_AND_ATTRIBUTES Privilege[1];
} PRIVILEGE_SET, *PPRIVILEGE_SET;





typedef struct _TOKEN_PRIVILEGES {
  DWORD PrivilegeCount;
  LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;





typedef struct _TOKEN_OWNER {
  PSID Owner;
} TOKEN_OWNER, *PTOKEN_OWNER;





typedef struct _TOKEN_PRIMARY_GROUP {
  PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP;






typedef struct _TOKEN_DEFAULT_DACL {
  PACL DefaultDacl;
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL;







typedef struct _TOKEN_SOURCE {
  char SourceName[8];
  LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE;





typedef enum tagTOKEN_TYPE {
  TokenPrimary = 1,
  TokenImpersonation
} TOKEN_TYPE;





typedef enum _SECURITY_IMPERSONATION_LEVEL {
  SecurityAnonymous,
  SecurityIdentification,
  SecurityImpersonation,
  SecurityDelegation
} SECURITY_IMPERSONATION_LEVEL, *PSECURITY_IMPERSONATION_LEVEL;




typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,
	* PSECURITY_CONTEXT_TRACKING_MODE;




typedef struct _SECURITY_QUALITY_OF_SERVICE {
  DWORD				Length;
  SECURITY_IMPERSONATION_LEVEL	ImpersonationLevel;
  SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
  BOOLEAN			EffectiveOnly;
} SECURITY_QUALITY_OF_SERVICE, *PSECURITY_QUALITY_OF_SERVICE;






# 1 "include/pshpack4.h" 1 3



























     













































































#pragma pack(4)


# 4984 "include/winnt.h" 2
typedef struct _TOKEN_STATISTICS {
  LUID  TokenId;
  LUID  AuthenticationId;
  LARGE_INTEGER ExpirationTime;
  TOKEN_TYPE    TokenType;
  SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  DWORD DynamicCharged;
  DWORD DynamicAvailable;
  DWORD GroupCount;
  DWORD PrivilegeCount;
  LUID  ModifiedId;
} TOKEN_STATISTICS;

# 1 "include/poppack.h" 1 3





























































































































































































































































#pragma pack()










# 4997 "include/winnt.h" 2

typedef struct _TOKEN_GROUPS_AND_PRIVILEGES {
  DWORD                 SidCount;
  DWORD                 SidLength;
  PSID_AND_ATTRIBUTES   Sids;
  DWORD                 RestrictedSidCount;
  DWORD                 RestrictedSidLength;
  PSID_AND_ATTRIBUTES   RestrictedSids;
  DWORD                 PrivilegeCount;
  DWORD                 PrivilegeLength;
  PLUID_AND_ATTRIBUTES  Privileges;
  LUID                  AuthenticationId;
} TOKEN_GROUPS_AND_PRIVILEGES, * PTOKEN_GROUPS_AND_PRIVILEGES;

typedef struct _TOKEN_ORIGIN {
  LUID  OriginatingLogonSession;
} TOKEN_ORIGIN, * PTOKEN_ORIGIN;

typedef struct _TOKEN_LINKED_TOKEN {
  HANDLE LinkedToken;
} TOKEN_LINKED_TOKEN, * PTOKEN_LINKED_TOKEN;

typedef struct _TOKEN_ELEVATION {
  DWORD TokenIsElevated;
} TOKEN_ELEVATION, * PTOKEN_ELEVATION;

typedef struct _TOKEN_MANDATORY_LABEL {
  SID_AND_ATTRIBUTES Label;
} TOKEN_MANDATORY_LABEL, * PTOKEN_MANDATORY_LABEL;






typedef struct _TOKEN_MANDATORY_POLICY {
  DWORD Policy;
} TOKEN_MANDATORY_POLICY, *PTOKEN_MANDATORY_POLICY;

typedef struct _TOKEN_APPCONTAINER_INFORMATION {
  PSID TokenAppContainer;
} TOKEN_APPCONTAINER_INFORMATION, * PTOKEN_APPCONTAINER_INFORMATION;



typedef struct _TOKEN_AUDIT_POLICY {
  BYTE PerUserPolicy[((53) >> 1) + 1];
} TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY;

typedef struct _TOKEN_ACCESS_INFORMATION {
  PSID_AND_ATTRIBUTES_HASH SidHash;
  PSID_AND_ATTRIBUTES_HASH RestrictedSidHash;
  PTOKEN_PRIVILEGES Privileges;
  LUID AuthenticationId;
  TOKEN_TYPE TokenType;
  SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  TOKEN_MANDATORY_POLICY MandatoryPolicy;
  DWORD Flags;
} TOKEN_ACCESS_INFORMATION, *PTOKEN_ACCESS_INFORMATION;

typedef struct _TOKEN_CONTROL {
  LUID TokenId;
  LUID AuthenticationId;
  LUID ModifiedId;
  TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL, *PTOKEN_CONTROL;






typedef struct _ACE_HEADER {
	BYTE	AceType;
	BYTE	AceFlags;
	WORD	AceSize;
} ACE_HEADER,*PACE_HEADER;

















































typedef struct _ACCESS_ALLOWED_ACE {
	ACE_HEADER	Header;
	DWORD		Mask;
	DWORD		SidStart;
} ACCESS_ALLOWED_ACE,*PACCESS_ALLOWED_ACE;

typedef struct _ACCESS_DENIED_ACE {
	ACE_HEADER	Header;
	DWORD		Mask;
	DWORD		SidStart;
} ACCESS_DENIED_ACE,*PACCESS_DENIED_ACE;

typedef struct _SYSTEM_AUDIT_ACE {
	ACE_HEADER	Header;
	DWORD		Mask;
	DWORD		SidStart;
} SYSTEM_AUDIT_ACE,*PSYSTEM_AUDIT_ACE;

typedef struct _SYSTEM_ALARM_ACE {
	ACE_HEADER	Header;
	DWORD		Mask;
	DWORD		SidStart;
} SYSTEM_ALARM_ACE,*PSYSTEM_ALARM_ACE;

typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
    ACE_HEADER  Header;
    ACCESS_MASK Mask;
    DWORD       SidStart;
} SYSTEM_MANDATORY_LABEL_ACE,*PSYSTEM_MANDATORY_LABEL_ACE;

typedef struct _SYSTEM_PROCESS_TRUST_LABEL_ACE {
    ACE_HEADER  Header;
    ACCESS_MASK Mask;
    DWORD       SidStart;
} SYSTEM_PROCESS_TRUST_LABEL_ACE, *PSYSTEM_PROCESS_TRUST_LABEL_ACE;

typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
    ACE_HEADER  Header;
    ACCESS_MASK Mask;
    DWORD       Flags;
    GUID        ObjectType;
    GUID        InheritedObjectType;
    DWORD       SidStart;
} ACCESS_ALLOWED_OBJECT_ACE, *PACCESS_ALLOWED_OBJECT_ACE;

typedef struct _ACCESS_DENIED_OBJECT_ACE {
    ACE_HEADER  Header;
    ACCESS_MASK Mask;
    DWORD       Flags;
    GUID        ObjectType;
    GUID        InheritedObjectType;
    DWORD       SidStart;
} ACCESS_DENIED_OBJECT_ACE, *PACCESS_DENIED_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
    ACE_HEADER  Header;
    ACCESS_MASK Mask;
    DWORD       Flags;
    GUID        ObjectType;
    GUID        InheritedObjectType;
    DWORD       SidStart;
} SYSTEM_AUDIT_OBJECT_ACE, *PSYSTEM_AUDIT_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_OBJECT_ACE {
    ACE_HEADER  Header;
    ACCESS_MASK Mask;
    DWORD       Flags;
    GUID        ObjectType;
    GUID        InheritedObjectType;
    DWORD       SidStart;
} SYSTEM_ALARM_OBJECT_ACE, *PSYSTEM_ALARM_OBJECT_aCE;

typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
    ACE_HEADER  Header;
    DWORD       Mask;
    DWORD       SidStart;
} ACCESS_ALLOWED_CALLBACK_ACE,*PACCESS_ALLOWED_CALLBACK_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_ACE {
    ACE_HEADER  Header;
    DWORD       Mask;
    DWORD       SidStart;
} ACCESS_DENIED_CALLBACK_ACE,*PACCESS_DENIED_CALLBACK_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
    ACE_HEADER  Header;
    DWORD       Mask;
    DWORD       SidStart;
} SYSTEM_AUDIT_CALLBACK_ACE,*PSYSTEM_AUDIT_CALLBACK_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_ACE {
    ACE_HEADER  Header;
    DWORD       Mask;
    DWORD       SidStart;
} SYSTEM_ALARM_CALLBACK_ACE,*PSYSTEM_ALARM_CALLBACK_ACE;

typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
    ACE_HEADER  Header;
    ACCESS_MASK Mask;
    DWORD       Flags;
    GUID        ObjectType;
    GUID        InheritedObjectType;
    DWORD       SidStart;
} ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
    ACE_HEADER  Header;
    ACCESS_MASK Mask;
    DWORD       Flags;
    GUID        ObjectType;
    GUID        InheritedObjectType;
    DWORD       SidStart;
} ACCESS_DENIED_CALLBACK_OBJECT_ACE, *PACCESS_DENIED_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
    ACE_HEADER  Header;
    ACCESS_MASK Mask;
    DWORD       Flags;
    GUID        ObjectType;
    GUID        InheritedObjectType;
    DWORD       SidStart;
} SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
    ACE_HEADER  Header;
    ACCESS_MASK Mask;
    DWORD       Flags;
    GUID        ObjectType;
    GUID        InheritedObjectType;
    DWORD       SidStart;
} SYSTEM_ALARM_CALLBACK_OBJECT_ACE, *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;








typedef enum tagSID_NAME_USE {
	SidTypeUser = 1,
	SidTypeGroup,
	SidTypeDomain,
	SidTypeAlias,
	SidTypeWellKnownGroup,
	SidTypeDeletedAccount,
	SidTypeInvalid,
	SidTypeUnknown
} SID_NAME_USE,*PSID_NAME_USE;
























































































typedef struct _QUOTA_LIMITS {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS, *PQUOTA_LIMITS;







typedef union _RATE_QUOTA_LIMIT {
    DWORD RateData;
    struct {
        DWORD RatePercent:7;
        DWORD Reserved0:25;
    } ;
} RATE_QUOTA_LIMIT, *PRATE_QUOTA_LIMIT;

typedef struct _QUOTA_LIMITS_EX {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
    SIZE_T WorkingSetLimit;
    SIZE_T Reserved2;
    SIZE_T Reserved3;
    SIZE_T Reserved4;
    DWORD Flags;
    RATE_QUOTA_LIMIT CpuRateLimit;
} QUOTA_LIMITS_EX, *PQUOTA_LIMITS_EX;

























































































































































typedef enum _LATENCY_TIME {
	LT_DONT_CARE,
	LT_LOWEST_LATENCY
} LATENCY_TIME, *PLATENCY_TIME;










typedef enum _POWER_ACTION {
	PowerActionNone = 0,
	PowerActionReserved,
	PowerActionSleep,
	PowerActionHibernate,
	PowerActionShutdown,
	PowerActionShutdownReset,
	PowerActionShutdownOff,
	PowerActionWarmEject
} POWER_ACTION,
*PPOWER_ACTION;

typedef enum _POWER_PLATFORM_ROLE {
    PlatformRoleUnspecified,
    PlatformRoleDesktop,
    PlatformRoleMobile,
    PlatformRoleWorkstation,
    PlatformRoleEnterpriseServer,
    PlatformRoleSOHOServer,
    PlatformRoleAppliancePC,
    PlatformRolePerformanceServer,
    PlatformRoleSlate,
    PlatformRoleMaximum
} POWER_PLATFORM_ROLE, *PPOWER_PLATFORM_ROLE;

typedef enum _SYSTEM_POWER_STATE {
	PowerSystemUnspecified = 0,
	PowerSystemWorking = 1,
	PowerSystemSleeping1 = 2,
	PowerSystemSleeping2 = 3,
	PowerSystemSleeping3 = 4,
	PowerSystemHibernate = 5,
	PowerSystemShutdown = 6,
	PowerSystemMaximum = 7
} SYSTEM_POWER_STATE,
*PSYSTEM_POWER_STATE;

typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified,
    PowerDeviceD0,
    PowerDeviceD1,
    PowerDeviceD2,
    PowerDeviceD3,
    PowerDeviceMaximum
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef enum _POWER_INFORMATION_LEVEL {
        SystemPowerPolicyAc,
        SystemPowerPolicyDc,
        VerifySystemPolicyAc,
        VerifySystemPolicyDc,
        SystemPowerCapabilities,
        SystemBatteryState,
        SystemPowerStateHandler,
        ProcessorStateHandler,
        SystemPowerPolicyCurrent,
        AdministratorPowerPolicy,
        SystemReserveHiberFile,
        ProcessorInformation,
        SystemPowerInformation,
        ProcessorStateHandler2,
        LastWakeTime,
        LastSleepTime,
        SystemExecutionState,
        SystemPowerStateNotifyHandler,
        ProcessorPowerPolicyAc,
        ProcessorPowerPolicyDc,
        VerifyProcessorPowerPolicyAc,
        VerifyProcessorPowerPolicyDc,
        ProcessorPowerPolicyCurrent
} POWER_INFORMATION_LEVEL;

typedef struct _ADMINISTRATOR_POWER_POLICY {
	SYSTEM_POWER_STATE MinSleep;
	SYSTEM_POWER_STATE MaxSleep;
	ULONG MinVideoTimeout;
	ULONG MaxVideoTimeout;
	ULONG MinSpindownTimeout;
	ULONG MaxSpindownTimeout;
} ADMINISTRATOR_POWER_POLICY, *PADMINISTRATOR_POWER_POLICY;

typedef struct {
	ULONG Granularity;
	ULONG Capacity;
} BATTERY_REPORTING_SCALE,
*PBATTERY_REPORTING_SCALE;

typedef struct {
	POWER_ACTION Action;
	ULONG Flags;
	ULONG EventCode;
} POWER_ACTION_POLICY,
*PPOWER_ACTION_POLICY;

typedef struct _PROCESSOR_POWER_INFORMATION {
	ULONG Number;
	ULONG MaxMhz;
	ULONG CurrentMhz;
	ULONG MhzLimit;
	ULONG MaxIdleState;
	ULONG CurrentIdleState;
} PROCESSOR_POWER_INFORMATION,
*PPROCESSOR_POWER_INFORMATION;

typedef struct _PROCESSOR_POWER_POLICY_INFO {
	ULONG TimeCheck;
	ULONG DemoteLimit;
	ULONG PromoteLimit;
	UCHAR DemotePercent;
	UCHAR PromotePercent;
	UCHAR Spare[2];
	ULONG AllowDemotion:1;
	ULONG AllowPromotion:1;
	ULONG Reserved:30;
} PROCESSOR_POWER_POLICY_INFO,
*PPROCESSOR_POWER_POLICY_INFO;

typedef struct _PROCESSOR_POWER_POLICY {
	DWORD Revision;
	BYTE DynamicThrottle;
	BYTE Spare[3];
	DWORD DisableCStates:1;
	DWORD Reserved:31;
	DWORD PolicyCount;
	PROCESSOR_POWER_POLICY_INFO Policy[3];
} PROCESSOR_POWER_POLICY,
*PPROCESSOR_POWER_POLICY;

typedef struct {
	BOOLEAN AcOnLine;
	BOOLEAN BatteryPresent;
	BOOLEAN Charging;
	BOOLEAN Discharging;
	BOOLEAN Spare1[3];
	BYTE Tag;
	ULONG MaxCapacity;
	ULONG RemainingCapacity;
	ULONG Rate;
	ULONG EstimatedTime;
	ULONG DefaultAlert1;
	ULONG DefaultAlert2;
} SYSTEM_BATTERY_STATE,
*PSYSTEM_BATTERY_STATE;

typedef struct {
	BOOLEAN PowerButtonPresent;
	BOOLEAN SleepButtonPresent;
	BOOLEAN LidPresent;
	BOOLEAN SystemS1;
	BOOLEAN SystemS2;
	BOOLEAN SystemS3;
	BOOLEAN SystemS4;
	BOOLEAN SystemS5;
	BOOLEAN HiberFilePresent;
	BOOLEAN FullWake;
	BOOLEAN VideoDimPresent;
	BOOLEAN ApmPresent;
	BOOLEAN UpsPresent;
	BOOLEAN ThermalControl;
	BOOLEAN ProcessorThrottle;
	UCHAR ProcessorMinThrottle;
	UCHAR ProcessorMaxThrottle;
	UCHAR spare2[4];
	BOOLEAN DiskSpinDown;
	UCHAR spare3[8];
	BOOLEAN SystemBatteriesPresent;
	BOOLEAN BatteriesAreShortTerm;
	BATTERY_REPORTING_SCALE BatteryScale[3];
	SYSTEM_POWER_STATE AcOnLineWake;
	SYSTEM_POWER_STATE SoftLidWake;
	SYSTEM_POWER_STATE RtcWake;
	SYSTEM_POWER_STATE MinDeviceWakeState;
	SYSTEM_POWER_STATE DefaultLowLatencyWake;
} SYSTEM_POWER_CAPABILITIES,
*PSYSTEM_POWER_CAPABILITIES;

typedef struct _SYSTEM_POWER_INFORMATION {
	ULONG MaxIdlenessAllowed;
	ULONG Idleness;
	ULONG TimeRemaining;
	UCHAR CoolingMode;
} SYSTEM_POWER_INFORMATION,
*PSYSTEM_POWER_INFORMATION;

typedef struct _SYSTEM_POWER_LEVEL {
	BOOLEAN Enable;
	UCHAR Spare[3];
	ULONG BatteryLevel;
	POWER_ACTION_POLICY PowerPolicy;
	SYSTEM_POWER_STATE MinSystemState;
} SYSTEM_POWER_LEVEL,
*PSYSTEM_POWER_LEVEL;

typedef struct _SYSTEM_POWER_POLICY {
	ULONG Revision;
	POWER_ACTION_POLICY PowerButton;
	POWER_ACTION_POLICY SleepButton;
	POWER_ACTION_POLICY LidClose;
	SYSTEM_POWER_STATE LidOpenWake;
	ULONG Reserved;
	POWER_ACTION_POLICY Idle;
	ULONG IdleTimeout;
	UCHAR IdleSensitivity;
	UCHAR DynamicThrottle;
	UCHAR Spare2[2];
	SYSTEM_POWER_STATE MinSleep;
	SYSTEM_POWER_STATE MaxSleep;
	SYSTEM_POWER_STATE ReducedLatencySleep;
	ULONG WinLogonFlags;
	ULONG Spare3;
	ULONG DozeS4Timeout;
	ULONG BroadcastCapacityResolution;
	SYSTEM_POWER_LEVEL DischargePolicy[4];
	ULONG VideoTimeout;
	BOOLEAN VideoDimDisplay;
	ULONG VideoReserved[3];
	ULONG SpindownTimeout;
	BOOLEAN OptimizeForPower;
	UCHAR FanThrottleTolerance;
	UCHAR ForcedThrottle;
	UCHAR MinThrottle;
	POWER_ACTION_POLICY OverThrottled;
} SYSTEM_POWER_POLICY,
*PSYSTEM_POWER_POLICY;

typedef enum _POWER_REQUEST_TYPE
{
    PowerRequestDisplayRequired,
    PowerRequestSystemRequired,
    PowerRequestAwayModeRequired
} POWER_REQUEST_TYPE, *PPOWER_REQUEST_TYPE;






typedef union _FILE_SEGMENT_ELEMENT {
	PVOID64 Buffer;
	ULONGLONG Alignment;
} FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;

typedef struct _FILE_NOTIFY_INFORMATION {
	DWORD NextEntryOffset;
	DWORD Action;
	DWORD FileNameLength;
	WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION;





























typedef struct _TAPE_CREATE_PARTITION {
    DWORD Method;
    DWORD Count;
    DWORD Size;
} TAPE_CREATE_PARTITION, *PTAPE_CREATE_PARTITION;

typedef struct _TAPE_ERASE {
    DWORD Type;
    BOOLEAN Immediate;
} TAPE_ERASE, *PTAPE_ERASE;

typedef struct _TAPE_PREPARE {
    DWORD Operation;
    BOOLEAN Immediate;
} TAPE_PREPARE, *PTAPE_PREPARE;

typedef struct _TAPE_SET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    ULONG EOTWarningZoneSize;
} TAPE_SET_DRIVE_PARAMETERS, *PTAPE_SET_DRIVE_PARAMETERS;

typedef struct _TAPE_SET_MEDIA_PARAMETERS {
    ULONG BlockSize;
} TAPE_SET_MEDIA_PARAMETERS, *PTAPE_SET_MEDIA_PARAMETERS;

typedef struct _TAPE_WRITE_MARKS {
    DWORD Type;
    DWORD Count;
    BOOLEAN Immediate;
} TAPE_WRITE_MARKS, *PTAPE_WRITE_MARKS;

typedef struct _TAPE_GET_POSITION {
    ULONG Type;
    ULONG Partition;
    ULONG OffsetLow;
    ULONG OffsetHigh;
} TAPE_GET_POSITION, *PTAPE_GET_POSITION;

typedef struct _TAPE_SET_POSITION {
    ULONG Method;
    ULONG Partition;
    LARGE_INTEGER Offset;
    BOOLEAN Immediate;
} TAPE_SET_POSITION, *PTAPE_SET_POSITION;

typedef struct _TAPE_GET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD DefaultBlockSize;
    DWORD MaximumBlockSize;
    DWORD MinimumBlockSize;
    DWORD MaximumPartitionCount;
    DWORD FeaturesLow;
    DWORD FeaturesHigh;
    DWORD EOTWarningZoneSize;
} TAPE_GET_DRIVE_PARAMETERS, *PTAPE_GET_DRIVE_PARAMETERS;

typedef struct _TAPE_GET_MEDIA_PARAMETERS {
    LARGE_INTEGER Capacity;
    LARGE_INTEGER Remaining;
    DWORD BlockSize;
    DWORD PartitionCount;
    BOOLEAN WriteProtected;
} TAPE_GET_MEDIA_PARAMETERS, *PTAPE_GET_MEDIA_PARAMETERS;



































































































































 void  RtlGetDeviceFamilyInfoEnum(ULONGLONG*,DWORD*,DWORD*);
 DWORD  RtlConvertDeviceFamilyInfoToString(DWORD *,DWORD *,WCHAR *,WCHAR *);













typedef struct _EVENTLOGRECORD {
    DWORD  Length;
    DWORD  Reserved;
    DWORD  RecordNumber;
    DWORD  TimeGenerated;
    DWORD  TimeWritten;
    DWORD  EventID;
    WORD   EventType;
    WORD   NumStrings;
    WORD   EventCategory;
    WORD   ReservedFlags;
    DWORD  ClosingRecordNumber;
    DWORD  StringOffset;
    DWORD  UserSidLength;
    DWORD  UserSidOffset;
    DWORD  DataLength;
    DWORD  DataOffset;
} EVENTLOGRECORD, *PEVENTLOGRECORD;































typedef enum _CM_SERVICE_NODE_TYPE
{
  DriverType               = 0x00000001,
  FileSystemType           = 0x00000002,
  Win32ServiceOwnProcess   = 0x00000010,
  Win32ServiceShareProcess = 0x00000020,
  AdapterType              = 0x00000004,
  RecognizerType           = 0x00000008
} SERVICE_NODE_TYPE;

typedef enum _CM_SERVICE_LOAD_TYPE
{
  BootLoad    = 0x00000000,
  SystemLoad  = 0x00000001,
  AutoLoad    = 0x00000002,
  DemandLoad  = 0x00000003,
  DisableLoad = 0x00000004
} SERVICE_LOAD_TYPE;

typedef enum _CM_ERROR_CONTROL_TYPE
{
  IgnoreError   = 0x00000000,
  NormalError   = 0x00000001,
  SevereError   = 0x00000002,
  CriticalError = 0x00000003
} SERVICE_ERROR_TYPE;

 SIZE_T  RtlCompareMemory(const void*, const void*, SIZE_T);
 SIZE_T  RtlCompareMemoryUlong(void*, SIZE_T, ULONG);















# 1 "include/guiddef.h" 1 3






















typedef struct
{
    unsigned long  Data1;
    unsigned short Data2;
    unsigned short Data3;
    byte           Data4[ 8 ];
} GUID;






















































































typedef GUID *LPGUID;




typedef const GUID *LPCGUID;





typedef GUID IID,*LPIID;
typedef GUID CLSID,*LPCLSID;
typedef GUID FMTID,*LPFMTID;


























































# 6149 "include/winnt.h" 2

typedef struct _OBJECT_TYPE_LIST {
    WORD   Level;
    WORD   Sbz;
    GUID *ObjectType;
} OBJECT_TYPE_LIST, *POBJECT_TYPE_LIST;

typedef struct _RTL_CRITICAL_SECTION_DEBUG
{
  WORD   Type;
  WORD   CreatorBackTraceIndex;
  struct _RTL_CRITICAL_SECTION *CriticalSection;
  LIST_ENTRY ProcessLocksList;
  DWORD EntryCount;
  DWORD ContentionCount;

  DWORD_PTR Spare[8/sizeof(DWORD_PTR)];



} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG, RTL_RESOURCE_DEBUG, *PRTL_RESOURCE_DEBUG;

typedef struct _RTL_CRITICAL_SECTION {
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;
    HANDLE LockSemaphore;
    ULONG_PTR SpinCount;
}  RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;









typedef struct _RTL_SRWLOCK {
    PVOID Ptr;
} RTL_SRWLOCK, *PRTL_SRWLOCK;



typedef struct _RTL_CONDITION_VARIABLE {
    PVOID Ptr;
} RTL_CONDITION_VARIABLE, *PRTL_CONDITION_VARIABLE;



typedef void ( * WAITORTIMERCALLBACKFUNC) (PVOID, BOOLEAN );
typedef void ( * PFLS_CALLBACK_FUNCTION) ( PVOID );


typedef union _RTL_RUN_ONCE {
    PVOID Ptr;
} RTL_RUN_ONCE, *PRTL_RUN_ONCE;





typedef DWORD  RTL_RUN_ONCE_INIT_FN(PRTL_RUN_ONCE, PVOID, PVOID*);
typedef RTL_RUN_ONCE_INIT_FN *PRTL_RUN_ONCE_INIT_FN;
 void  RtlRunOnceInitialize(PRTL_RUN_ONCE);
 DWORD  RtlRunOnceExecuteOnce(PRTL_RUN_ONCE,PRTL_RUN_ONCE_INIT_FN,PVOID,PVOID*);
 DWORD  RtlRunOnceBeginInitialize(PRTL_RUN_ONCE, DWORD, PVOID*);
 DWORD  RtlRunOnceComplete(PRTL_RUN_ONCE, DWORD, PVOID);
 WORD  RtlCaptureStackBackTrace(DWORD,DWORD,void**,DWORD*);


# 1 "include/pshpack8.h" 1 3



























     













































































#pragma pack(8)


# 6221 "include/winnt.h" 2
typedef struct _IO_COUNTERS {
    ULONGLONG  ReadOperationCount;
    ULONGLONG  WriteOperationCount;
    ULONGLONG  OtherOperationCount;
    ULONGLONG  ReadTransferCount;
    ULONGLONG  WriteTransferCount;
    ULONGLONG  OtherTransferCount;
} IO_COUNTERS, *PIO_COUNTERS;

# 1 "include/poppack.h" 1 3





























































































































































































































































#pragma pack()










# 6230 "include/winnt.h" 2

typedef struct {
	DWORD dwOSVersionInfoSize;
	DWORD dwMajorVersion;
	DWORD dwMinorVersion;
	DWORD dwBuildNumber;
	DWORD dwPlatformId;
	CHAR szCSDVersion[128];
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;

typedef struct {
	DWORD dwOSVersionInfoSize;
	DWORD dwMajorVersion;
	DWORD dwMinorVersion;
	DWORD dwBuildNumber;
	DWORD dwPlatformId;
	WCHAR szCSDVersion[128];
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW, RTL_OSVERSIONINFOW, *PRTL_OSVERSIONINFOW;





typedef struct {
	DWORD dwOSVersionInfoSize;
	DWORD dwMajorVersion;
	DWORD dwMinorVersion;
	DWORD dwBuildNumber;
	DWORD dwPlatformId;
	CHAR szCSDVersion[128];
	WORD wServicePackMajor;
	WORD wServicePackMinor;
	WORD wSuiteMask;
	BYTE wProductType;
	BYTE wReserved;
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA;

typedef struct {
	DWORD dwOSVersionInfoSize;
	DWORD dwMajorVersion;
	DWORD dwMinorVersion;
	DWORD dwBuildNumber;
	DWORD dwPlatformId;
	WCHAR szCSDVersion[128];
	WORD wServicePackMajor;
	WORD wServicePackMinor;
	WORD wSuiteMask;
	BYTE wProductType;
	BYTE wReserved;
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW, RTL_OSVERSIONINFOEXW, *PRTL_OSVERSIONINFOEXW;





 ULONGLONG  VerSetConditionMask(ULONGLONG,DWORD,BYTE);













































typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
    DWORD dwFlags;
    DWORD ulFormatVersion;
    DWORD ulAssemblyCount;
    DWORD ulRootManifestPathType;
    DWORD ulRootManifestPathChars;
    DWORD ulRootConfigurationPathType;
    DWORD ulRootConfigurationPathChars;
    DWORD ulAppDirPathType;
    DWORD ulAppDirPathChars;
    PCWSTR lpRootManifestPath;
    PCWSTR lpRootConfigurationPath;
    PCWSTR lpAppDirPath;
} ACTIVATION_CONTEXT_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_DETAILED_INFORMATION;

typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulEncodedAssemblyIdentityLength;
    DWORD ulManifestPathType;
    DWORD ulManifestPathLength;
    LARGE_INTEGER liManifestLastWriteTime;
    DWORD ulPolicyPathType;
    DWORD ulPolicyPathLength;
    LARGE_INTEGER liPolicyLastWriteTime;
    DWORD ulMetadataSatelliteRosterIndex;
    DWORD ulManifestVersionMajor;
    DWORD ulManifestVersionMinor;
    DWORD ulPolicyVersionMajor;
    DWORD ulPolicyVersionMinor;
    DWORD ulAssemblyDirectoryNameLength;
    PCWSTR lpAssemblyEncodedAssemblyIdentity;
    PCWSTR lpAssemblyManifestPath;
    PCWSTR lpAssemblyPolicyPath;
    PCWSTR lpAssemblyDirectoryName;
    DWORD  ulFileCount;
} ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX {
    DWORD ulAssemblyIndex;
    DWORD ulFileIndexInAssembly;
} ACTIVATION_CONTEXT_QUERY_INDEX, *PACTIVATION_CONTEXT_QUERY_INDEX;

typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX *PCACTIVATION_CONTEXT_QUERY_INDEX;

typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulFilenameLength;
    DWORD ulPathLength;
    PCWSTR lpFileName;
    PCWSTR lpFilePath;
} ASSEMBLY_FILE_DETAILED_INFORMATION, *PASSEMBLY_FILE_DETAILED_INFORMATION;

typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;

typedef enum {
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED
} ACTCTX_COMPATIBILITY_ELEMENT_TYPE;

typedef struct _COMPATIBILITY_CONTEXT_ELEMENT {
    GUID Id;
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
    ULONGLONG MaxVersionTested;
} COMPATIBILITY_CONTEXT_ELEMENT, *PCOMPATIBILITY_CONTEXT_ELEMENT;








typedef enum {
    ACTCTX_RUN_LEVEL_UNSPECIFIED = 0,
    ACTCTX_RUN_LEVEL_AS_INVOKER,
    ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE,
    ACTCTX_RUN_LEVEL_REQUIRE_ADMIN,
    ACTCTX_RUN_LEVEL_NUMBERS
} ACTCTX_REQUESTED_RUN_LEVEL;

typedef struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
    DWORD ulFlags;
    ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
    DWORD UiAccess;
} ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION, *PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION *PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

typedef enum _ACTIVATION_CONTEXT_INFO_CLASS {
    ActivationContextBasicInformation                       = 1,
    ActivationContextDetailedInformation                    = 2,
    AssemblyDetailedInformationInActivationContext          = 3,
    FileInformationInAssemblyOfAssemblyInActivationContext  = 4,
    RunlevelInformationInActivationContext                  = 5,
    CompatibilityInformationInActivationContext             = 6,
    ActivationContextManifestResourceName                   = 7,
    MaxActivationContextInfoClass,
    AssemblyDetailedInformationInActivationContxt           = AssemblyDetailedInformationInActivationContext,
    FileInformationInAssemblyOfAssemblyInActivationContxt   = FileInformationInAssemblyOfAssemblyInActivationContext
} ACTIVATION_CONTEXT_INFO_CLASS;
























typedef struct _ACTIVATION_CONTEXT_DATA_DLL_REDIRECTION
{
    ULONG Size;
    ULONG Flags;
    ULONG TotalPathLength;
    ULONG PathSegmentCount;
    ULONG PathSegmentOffset;
} ACTIVATION_CONTEXT_DATA_DLL_REDIRECTION, *PACTIVATION_CONTEXT_DATA_DLL_REDIRECTION;

typedef struct _ACTIVATION_CONTEXT_DATA_DLL_REDIRECTION_PATH_SEGMENT
{
    ULONG Length;
    ULONG Offset;
} ACTIVATION_CONTEXT_DATA_DLL_REDIRECTION_PATH_SEGMENT, *PACTIVATION_CONTEXT_DATA_DLL_REDIRECTION_PATH_SEGMENT;

typedef enum _JOBOBJECTINFOCLASS
{
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation,
    JobObjectBasicProcessIdList,
    JobObjectBasicUIRestrictions,
    JobObjectSecurityLimitInformation,
    JobObjectEndOfJobTimeInformation,
    JobObjectAssociateCompletionPortInformation,
    JobObjectBasicAndIoAccountingInformation,
    JobObjectExtendedLimitInformation,
    JobObjectJobSetInformation,
    MaxJobObjectInfoClass
} JOBOBJECTINFOCLASS;

typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
    LARGE_INTEGER TotalUserTime;
    LARGE_INTEGER TotalKernelTime;
    LARGE_INTEGER ThisPeriodTotalUserTime;
    LARGE_INTEGER ThisPeriodTotalKernelTime;
    DWORD         TotalPageFaultCount;
    DWORD         TotalProcesses;
    DWORD         ActiveProcesses;
    DWORD         TotalTerminatedProcesses;
} JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
    LARGE_INTEGER PerProcessUserTimeLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD         LimitFlags;
    SIZE_T        MinimumWorkingSetSize;
    SIZE_T        MaximumWorkingSetSize;
    DWORD         ActiveProcessLimit;
    ULONG_PTR     Affinity;
    DWORD         PriorityClass;
    DWORD         SchedulingClass;
} JOBOBJECT_BASIC_LIMIT_INFORMATION, *PJOBOBJECT_BASIC_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
    DWORD     NumberOfAssignedProcesses;
    DWORD     NumberOfProcessIdsInList;
    ULONG_PTR ProcessIdList[1];
} JOBOBJECT_BASIC_PROCESS_ID_LIST, *PJOBOBJECT_BASIC_PROCESS_ID_LIST;

typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
    DWORD UIRestrictionsClass;
} JOBOBJECT_BASIC_UI_RESTRICTIONS, *PJOBOBJECT_BASIC_UI_RESTRICTIONS;

typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
    DWORD             SecurityLimitFlags;
    HANDLE            JobToken;
    PTOKEN_GROUPS     SidsToDisable;
    PTOKEN_PRIVILEGES PrivilegesToDelete;
    PTOKEN_GROUPS     RestrictedSids;
} JOBOBJECT_SECURITY_LIMIT_INFORMATION, *PJOBOBJECT_SECURITY_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
    DWORD EndOfJobTimeAction;
} JOBOBJECT_END_OF_JOB_TIME_INFORMATION, PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;

typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
    PVOID  CompletionKey;
    HANDLE CompletionPort;
} JOBOBJECT_ASSOCIATE_COMPLETION_PORT, *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;











typedef struct JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
    JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
    IO_COUNTERS                            IoInfo;
} JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
    JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
    IO_COUNTERS                       IoInfo;
    SIZE_T                            ProcessMemoryLimit;
    SIZE_T                            JobMemoryLimit;
    SIZE_T                            PeakProcessMemoryUsed;
    SIZE_T                            PeakJobMemoryUsed;
} JOBOBJECT_EXTENDED_LIMIT_INFORMATION, *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;





















typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP
{
    RelationProcessorCore    = 0,
    RelationNumaNode         = 1,
    RelationCache            = 2,
    RelationProcessorPackage = 3,
    RelationGroup            = 4,
    RelationProcessorDie     = 5,
    RelationNumaNodeEx       = 6,
    RelationProcessorModule  = 7,
    RelationAll              = 0xffff
} LOGICAL_PROCESSOR_RELATIONSHIP;



typedef enum _PROCESSOR_CACHE_TYPE
{
    CacheUnified,
    CacheInstruction,
    CacheData,
    CacheTrace
} PROCESSOR_CACHE_TYPE;

typedef struct _PROCESSOR_GROUP_INFO
{
    BYTE MaximumProcessorCount;
    BYTE ActiveProcessorCount;
    BYTE Reserved[38];
    KAFFINITY ActiveProcessorMask;
} PROCESSOR_GROUP_INFO, *PPROCESSOR_GROUP_INFO;

typedef struct _CACHE_DESCRIPTOR
{
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD Size;
    PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR;

typedef struct _GROUP_AFFINITY
{
    KAFFINITY Mask;
    WORD Group;
    WORD Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY;



typedef struct _PROCESSOR_NUMBER
{
    WORD Group;
    BYTE Number;
    BYTE Reserved;
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER;

typedef struct _PROCESSOR_RELATIONSHIP
{
    BYTE Flags;
    BYTE EfficiencyClass;
    BYTE Reserved[20];
    WORD GroupCount;
    GROUP_AFFINITY GroupMask[1];
} PROCESSOR_RELATIONSHIP, *PPROCESSOR_RELATIONSHIP;

typedef struct _NUMA_NODE_RELATIONSHIP
{
    DWORD NodeNumber;
    BYTE Reserved[20];
    GROUP_AFFINITY GroupMask;
} NUMA_NODE_RELATIONSHIP, *PNUMA_NODE_RELATIONSHIP;

typedef struct _CACHE_RELATIONSHIP
{
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD CacheSize;
    PROCESSOR_CACHE_TYPE Type;
    BYTE Reserved[20];
    GROUP_AFFINITY GroupMask;
} CACHE_RELATIONSHIP, *PCACHE_RELATIONSHIP;

typedef struct _GROUP_RELATIONSHIP
{
    WORD MaximumGroupCount;
    WORD ActiveGroupCount;
    BYTE Reserved[20];
    PROCESSOR_GROUP_INFO GroupInfo[1];
} GROUP_RELATIONSHIP, *PGROUP_RELATIONSHIP;

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION
{
    ULONG_PTR ProcessorMask;
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    union
    {
        struct
        {
            BYTE Flags;
        } ProcessorCore;
        struct
        {
            DWORD NodeNumber;
        } NumaNode;
        CACHE_DESCRIPTOR Cache;
        ULONGLONG Reserved[2];
    } ;
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX
{
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    DWORD Size;
    union
    {
        PROCESSOR_RELATIONSHIP Processor;
        NUMA_NODE_RELATIONSHIP NumaNode;
        CACHE_RELATIONSHIP Cache;
        GROUP_RELATIONSHIP Group;
    } ;
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;

typedef enum _CPU_SET_INFORMATION_TYPE
{
    CpuSetInformation,
} CPU_SET_INFORMATION_TYPE, *PCPU_SET_INFORMATION_TYPE;

typedef struct _SYSTEM_CPU_SET_INFORMATION
{
    DWORD Size;
    CPU_SET_INFORMATION_TYPE Type;
    union
    {
        struct
        {
            DWORD Id;
            WORD Group;
            BYTE LogicalProcessorIndex;
            BYTE CoreIndex;
            BYTE LastLevelCacheIndex;
            BYTE NumaNodeIndex;
            BYTE EfficiencyClass;
            union
            {
                BYTE AllFlags;
                struct
                {
                    BYTE Parked : 1;
                    BYTE Allocated : 1;
                    BYTE AllocatedToTargetProcess : 1;
                    BYTE RealTime : 1;
                    BYTE ReservedFlags : 4;
                } ;
            } ;
            union {
            DWORD Reserved;
            BYTE  SchedulingClass;
            };
            DWORD64 AllocationTag;
        } CpuSet;
    } ;
} SYSTEM_CPU_SET_INFORMATION, *PSYSTEM_CPU_SET_INFORMATION;

typedef struct _SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION
{
    DWORD Machine : 16;
    DWORD KernelMode : 1;
    DWORD UserMode : 1;
    DWORD Native : 1;
    DWORD Process : 1;
    DWORD WoW64Container : 1;
    DWORD ReservedZero0 : 11;
} SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION;


typedef DWORD TP_VERSION,*PTP_VERSION;

typedef struct _TP_CALLBACK_INSTANCE TP_CALLBACK_INSTANCE,*PTP_CALLBACK_INSTANCE;

typedef void ( *PTP_SIMPLE_CALLBACK)(PTP_CALLBACK_INSTANCE,PVOID);

typedef struct _TP_POOL TP_POOL,*PTP_POOL;

typedef enum _TP_CALLBACK_PRIORITY
{
	TP_CALLBACK_PRIORITY_HIGH,
	TP_CALLBACK_PRIORITY_NORMAL,
	TP_CALLBACK_PRIORITY_LOW,
	TP_CALLBACK_PRIORITY_INVALID,
	TP_CALLBACK_PRIORITY_COUNT = TP_CALLBACK_PRIORITY_INVALID
} TP_CALLBACK_PRIORITY;

typedef struct _TP_POOL_STACK_INFORMATION
{
	SIZE_T StackReserve;
	SIZE_T StackCommit;
} TP_POOL_STACK_INFORMATION,*PTP_POOL_STACK_INFORMATION;

typedef struct _TP_CLEANUP_GROUP TP_CLEANUP_GROUP,*PTP_CLEANUP_GROUP;

typedef void ( *PTP_CLEANUP_GROUP_CANCEL_CALLBACK)(PVOID,PVOID);

typedef struct _TP_CALLBACK_ENVIRON_V1
{
	TP_VERSION Version;
	PTP_POOL Pool;
	PTP_CLEANUP_GROUP CleanupGroup;
	PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback;
	PVOID RaceDll;
	struct _ACTIVATION_CONTEXT* ActivationContext;
	PTP_SIMPLE_CALLBACK FinalizationCallback;
	union
	{
		DWORD Flags;
		struct
		{
			DWORD LongFunction:1;
			DWORD Persistent:1;
			DWORD Private:30;
		} s;
	} u;
} TP_CALLBACK_ENVIRON_V1;

typedef struct _TP_CALLBACK_ENVIRON_V3
{
    TP_VERSION Version;
    PTP_POOL Pool;
    PTP_CLEANUP_GROUP CleanupGroup;
    PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback;
    PVOID RaceDll;
    struct _ACTIVATION_CONTEXT *ActivationContext;
    PTP_SIMPLE_CALLBACK FinalizationCallback;
    union
    {
        DWORD Flags;
        struct
        {
            DWORD LongFunction:1;
            DWORD Persistent:1;
            DWORD Private:30;
        } s;
    } u;
    TP_CALLBACK_PRIORITY CallbackPriority;
    DWORD Size;
} TP_CALLBACK_ENVIRON_V3;

typedef struct _TP_WORK TP_WORK, *PTP_WORK;
typedef struct _TP_TIMER TP_TIMER, *PTP_TIMER;

typedef DWORD TP_WAIT_RESULT;
typedef struct _TP_WAIT TP_WAIT, *PTP_WAIT;

typedef struct _TP_IO TP_IO, *PTP_IO;

typedef TP_CALLBACK_ENVIRON_V1 TP_CALLBACK_ENVIRON, *PTP_CALLBACK_ENVIRON;

typedef void ( *PTP_WORK_CALLBACK)(PTP_CALLBACK_INSTANCE,PVOID,PTP_WORK);
typedef void ( *PTP_TIMER_CALLBACK)(PTP_CALLBACK_INSTANCE,PVOID,PTP_TIMER);
typedef void ( *PTP_WAIT_CALLBACK)(PTP_CALLBACK_INSTANCE,PVOID,PTP_WAIT,TP_WAIT_RESULT);


 BOOLEAN  RtlGetProductInfo(DWORD,DWORD,DWORD,DWORD,PDWORD);

typedef enum _RTL_UMS_THREAD_INFO_CLASS
{
    UmsThreadInvalidInfoClass,
    UmsThreadUserContext,
    UmsThreadPriority,
    UmsThreadAffinity,
    UmsThreadTeb,
    UmsThreadIsSuspended,
    UmsThreadIsTerminated,
    UmsThreadMaxInfoClass
} RTL_UMS_THREAD_INFO_CLASS, *PRTL_UMS_THREAD_INFO_CLASS;

typedef enum _RTL_UMS_SCHEDULER_REASON
{
    UmsSchedulerStartup,
    UmsSchedulerThreadBlocked,
    UmsSchedulerThreadYield,
} RTL_UMS_SCHEDULER_REASON, *PRTL_UMS_SCHEDULER_REASON;

typedef void ( *PRTL_UMS_SCHEDULER_ENTRY_POINT)(RTL_UMS_SCHEDULER_REASON,ULONG_PTR,PVOID);

typedef enum _PROCESS_MITIGATION_POLICY
{
    ProcessDEPPolicy,
    ProcessASLRPolicy,
    ProcessDynamicCodePolicy,
    ProcessStrictHandleCheckPolicy,
    ProcessSystemCallDisablePolicy,
    ProcessMitigationOptionsMask,
    ProcessExtensionPointDisablePolicy,
    ProcessControlFlowGuardPolicy,
    ProcessSignaturePolicy,
    ProcessFontDisablePolicy,
    ProcessImageLoadPolicy,
    ProcessSystemCallFilterPolicy,
    ProcessPayloadRestrictionPolicy,
    ProcessChildProcessPolicy,
    ProcessSideChannelIsolationPolicy,
    MaxProcessMitigationPolicy
} PROCESS_MITIGATION_POLICY, *PPROCESS_MITIGATION_POLICY;

typedef enum _FIRMWARE_TYPE
{
    FirmwareTypeUnknown,
    FirmwareTypeBios,
    FirmwareTypeUefi,
    FirmwareTypeMax
} FIRMWARE_TYPE, *PFIRMWARE_TYPE;






























































































































































































































































































































































































































































































































# 263 "include/windef.h" 2



typedef UINT_PTR        WPARAM;
typedef LONG_PTR        LPARAM;
typedef LONG_PTR        LRESULT;



typedef WORD            ATOM;
typedef DWORD           COLORREF, *LPCOLORREF;




typedef int HFILE;
typedef struct DPI_AWARENESS_CONTEXT__ {int unused; } *DPI_AWARENESS_CONTEXT ;
typedef struct HACCEL__ {int unused; } *HACCEL ;
typedef struct HBITMAP__ {int unused; } *HBITMAP ;
typedef struct HBRUSH__ {int unused; } *HBRUSH ;
typedef struct HCOLORSPACE__ {int unused; } *HCOLORSPACE ;
typedef struct HDC__ {int unused; } *HDC ;
typedef struct HDESK__ {int unused; } *HDESK ;
typedef struct HENHMETAFILE__ {int unused; } *HENHMETAFILE ;
typedef struct HFONT__ {int unused; } *HFONT ;
typedef struct HGLRC__ {int unused; } *HGLRC ;
typedef struct HHOOK__ {int unused; } *HHOOK ;
typedef struct HICON__ {int unused; } *HICON ;
typedef struct HINSTANCE__ {int unused; } *HINSTANCE ;
typedef struct HKEY__ {int unused; } *HKEY ;
typedef HKEY *PHKEY;
typedef struct HKL__ {int unused; } *HKL ;
typedef struct HMENU__ {int unused; } *HMENU ;
typedef struct HMETAFILE__ {int unused; } *HMETAFILE ;
typedef struct HMONITOR__ {int unused; } *HMONITOR ;
typedef struct HPALETTE__ {int unused; } *HPALETTE ;
typedef struct HPEN__ {int unused; } *HPEN ;
typedef struct HRGN__ {int unused; } *HRGN ;
typedef struct HRSRC__ {int unused; } *HRSRC ;
typedef struct HTASK__ {int unused; } *HTASK ;
typedef struct HWINEVENTHOOK__ {int unused; } *HWINEVENTHOOK ;
typedef struct HWINSTA__ {int unused; } *HWINSTA ;
typedef struct HWND__ {int unused; } *HWND ;



typedef HINSTANCE HMODULE;
typedef HANDLE HGDIOBJ;
typedef HANDLE HGLOBAL;
typedef HANDLE HLOCAL;
typedef HANDLE GLOBALHANDLE;
typedef HANDLE LOCALHANDLE;
typedef HICON HCURSOR;




typedef INT_PTR ( *FARPROC)(void);
typedef INT_PTR ( *NEARPROC)(void);
typedef INT_PTR ( *PROC)(void);



































typedef struct tagSIZE
{
    LONG cx;
    LONG cy;
} SIZE, *PSIZE, *LPSIZE;

typedef SIZE SIZEL, *PSIZEL, *LPSIZEL;


typedef struct tagPOINT
{
    LONG  x;
    LONG  y;
} POINT, *PPOINT, *LPPOINT;

typedef struct _POINTL
{
    LONG x;
    LONG y;
} POINTL, *PPOINTL;



typedef struct tagPOINTS
{
    SHORT x;
    SHORT y;
} POINTS, *PPOINTS, *LPPOINTS;

typedef struct _FILETIME {
    DWORD  dwLowDateTime;
    DWORD  dwHighDateTime;
} FILETIME, *PFILETIME, *LPFILETIME;



typedef struct tagRECT
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
} RECT, *PRECT, *LPRECT;
typedef const RECT *LPCRECT;

typedef struct _RECTL
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
} RECTL, *PRECTL, *LPRECTL;

typedef const RECTL *LPCRECTL;


typedef enum DPI_AWARENESS
{
    DPI_AWARENESS_INVALID = -1,
    DPI_AWARENESS_UNAWARE = 0,
    DPI_AWARENESS_SYSTEM_AWARE,
    DPI_AWARENESS_PER_MONITOR_AWARE
} DPI_AWARENESS;











typedef enum {
  DPI_HOSTING_BEHAVIOR_INVALID = -1,
  DPI_HOSTING_BEHAVIOR_DEFAULT = 0,
  DPI_HOSTING_BEHAVIOR_MIXED = 1
} DPI_HOSTING_BEHAVIOR;


# 38 "include/windows.h" 2

# 1 "include/winbase.h" 1 3







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 39 "include/windows.h" 2

# 1 "include/wingdi.h" 1 3










































typedef struct _ABCFLOAT {
    FLOAT   abcfA;
    FLOAT   abcfB;
    FLOAT   abcfC;
} ABCFLOAT, *PABCFLOAT, *LPABCFLOAT;



typedef struct
{
    WORD   wFirst;
    WORD   wSecond;
    INT  iKernAmount;
} KERNINGPAIR, *LPKERNINGPAIR;

typedef struct tagPIXELFORMATDESCRIPTOR {
    WORD  nSize;
    WORD  nVersion;
    DWORD dwFlags;
    BYTE  iPixelType;
    BYTE  cColorBits;
    BYTE  cRedBits;
    BYTE  cRedShift;
    BYTE  cGreenBits;
    BYTE  cGreenShift;
    BYTE  cBlueBits;
    BYTE  cBlueShift;
    BYTE  cAlphaBits;
    BYTE  cAlphaShift;
    BYTE  cAccumBits;
    BYTE  cAccumRedBits;
    BYTE  cAccumGreenBits;
    BYTE  cAccumBlueBits;
    BYTE  cAccumAlphaBits;
    BYTE  cDepthBits;
    BYTE  cStencilBits;
    BYTE  cAuxBuffers;
    BYTE  iLayerType;
    BYTE  bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR, *LPPIXELFORMATDESCRIPTOR;



























typedef struct tagCOLORADJUSTMENT
{
	WORD   caSize;
	WORD   caFlags;
	WORD   caIlluminantIndex;
	WORD   caRedGamma;
	WORD   caGreenGamma;
	WORD   caBlueGamma;
	WORD   caReferenceBlack;
	WORD   caReferenceWhite;
	SHORT  caContrast;
	SHORT  caBrightness;
	SHORT  caColorfulness;
	SHORT  caRedGreenTint;
} COLORADJUSTMENT, *PCOLORADJUSTMENT, *LPCOLORADJUSTMENT;































typedef LONG FXPT16DOT16, *LPFXPT16DOT16;
typedef LONG FXPT2DOT30, *LPFXPT2DOT30;
typedef LONG LCSCSTYPE;
typedef LONG LCSGAMUTMATCH;















typedef struct tagCIEXYZ
{
  FXPT2DOT30 ciexyzX;
  FXPT2DOT30 ciexyzY;
  FXPT2DOT30 ciexyzZ;
} CIEXYZ, *LPCIEXYZ;

typedef struct tagCIEXYZTRIPLE
{
  CIEXYZ ciexyzRed;
  CIEXYZ ciexyzGreen;
  CIEXYZ ciexyzBlue;
} CIEXYZTRIPLE, *LPCIEXYZTRIPLE;

typedef struct tagLOGCOLORSPACEA
{
  DWORD lcsSignature;
  DWORD lcsVersion;
  DWORD lcsSize;
  LCSCSTYPE lcsCSType;
  LCSGAMUTMATCH lcsIntent;
  CIEXYZTRIPLE lcsEndpoints;
  DWORD lcsGammaRed;
  DWORD lcsGammaGreen;
  DWORD lcsGammaBlue;
  CHAR lcsFilename[260];
} LOGCOLORSPACEA, *LPLOGCOLORSPACEA;

typedef struct tagLOGCOLORSPACEW
{
  DWORD lcsSignature;
  DWORD lcsVersion;
  DWORD lcsSize;
  LCSCSTYPE lcsCSType;
  LCSGAMUTMATCH lcsIntent;
  CIEXYZTRIPLE lcsEndpoints;
  DWORD lcsGammaRed;
  DWORD lcsGammaGreen;
  DWORD lcsGammaBlue;
  WCHAR lcsFilename[260];
} LOGCOLORSPACEW, *LPLOGCOLORSPACEW;













































































































































































  





































  











  

















typedef INT ( *ICMENUMPROCA)(LPSTR lpszFilename,LPARAM lParam);
typedef INT ( *ICMENUMPROCW)(LPWSTR lpszFilename,LPARAM lParam);







  







typedef struct
{
    LONG paXCount;
    LONG paYCount;
    LONG paXExt;
    LONG paYExt;
    BYTE paRGBs;
} PELARRAY, *PPELARRAY, *LPPELARRAY;

  

typedef struct
{
    INT  bmType;
    INT  bmWidth;
    INT  bmHeight;
    INT  bmWidthBytes;
    WORD   bmPlanes;
    WORD   bmBitsPixel;
    LPVOID bmBits;
} BITMAP, *PBITMAP, *LPBITMAP;


  

typedef struct
{
    UINT       lbStyle;
    COLORREF   lbColor;
    ULONG_PTR  lbHatch;
} LOGBRUSH, *PLOGBRUSH, *LPLOGBRUSH;

typedef struct
{
    UINT       lbStyle;
    COLORREF   lbColor;
    ULONG      lbHatch;
} LOGBRUSH32, *PLOGBRUSH32, *LPLOGBRUSH32;

typedef LOGBRUSH PATTERN, *PPATTERN, *LPPATTERN;


  












  








  








typedef struct tagLOGFONTA
{
    LONG   lfHeight;
    LONG   lfWidth;
    LONG   lfEscapement;
    LONG   lfOrientation;
    LONG   lfWeight;
    BYTE   lfItalic;
    BYTE   lfUnderline;
    BYTE   lfStrikeOut;
    BYTE   lfCharSet;
    BYTE   lfOutPrecision;
    BYTE   lfClipPrecision;
    BYTE   lfQuality;
    BYTE   lfPitchAndFamily;
    CHAR   lfFaceName[32];
} LOGFONTA, *PLOGFONTA, *LPLOGFONTA;

typedef struct tagLOGFONTW
{
    LONG   lfHeight;
    LONG   lfWidth;
    LONG   lfEscapement;
    LONG   lfOrientation;
    LONG   lfWeight;
    BYTE   lfItalic;
    BYTE   lfUnderline;
    BYTE   lfStrikeOut;
    BYTE   lfCharSet;
    BYTE   lfOutPrecision;
    BYTE   lfClipPrecision;
    BYTE   lfQuality;
    BYTE   lfPitchAndFamily;
    WCHAR  lfFaceName[32];
} LOGFONTW, *PLOGFONTW, *LPLOGFONTW;





typedef struct
{
  LOGFONTA elfLogFont;
  BYTE       elfFullName[64];
  BYTE       elfStyle[32];
} ENUMLOGFONTA, *LPENUMLOGFONTA;

typedef struct
{
  LOGFONTW elfLogFont;
  WCHAR      elfFullName[64];
  WCHAR      elfStyle[32];
} ENUMLOGFONTW, *LPENUMLOGFONTW;




typedef struct
{
  LOGFONTA elfLogFont;
  BYTE       elfFullName[64];
  BYTE       elfStyle[32];
  BYTE       elfScript[32];
} ENUMLOGFONTEXA,*LPENUMLOGFONTEXA;

typedef struct
{
  LOGFONTW elfLogFont;
  WCHAR      elfFullName[64];
  WCHAR      elfStyle[32];
  WCHAR      elfScript[32];
} ENUMLOGFONTEXW,*LPENUMLOGFONTEXW;






typedef struct
{
  DWORD      dvReserved;
  DWORD      dvNumAxes;
  LONG       dvValues[16];
} DESIGNVECTOR, *PDESIGNVECTOR;

typedef struct
{
  ENUMLOGFONTEXA    elfEnumLogfontEx;
  DESIGNVECTOR      elfDesignVector;
} ENUMLOGFONTEXDVA, *PENUMLOGFONTEXDVA;

typedef struct
{
  ENUMLOGFONTEXW    elfEnumLogfontEx;
  DESIGNVECTOR      elfDesignVector;
} ENUMLOGFONTEXDVW, *PENUMLOGFONTEXDVW;
















typedef struct
{
  DWORD fsUsb[4];
  DWORD fsCsb[2];
} FONTSIGNATURE, *PFONTSIGNATURE, *LPFONTSIGNATURE;

typedef struct
{
  UINT	ciCharset; 
  UINT	ciACP; 
  FONTSIGNATURE	fs;
} CHARSETINFO, *PCHARSETINFO, *LPCHARSETINFO;






typedef struct
{
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
} LOCALESIGNATURE, *PLOCALESIGNATURE, *LPLOCALESIGNATURE;

























typedef struct tagXFORM
{
    FLOAT  eM11;
    FLOAT  eM12;
    FLOAT  eM21;
    FLOAT  eM22;
    FLOAT  eDx;
    FLOAT  eDy;
} XFORM, *PXFORM, *LPXFORM;

  
















  

















































  












  









  








  















typedef struct tagTEXTMETRICA
{
    LONG      tmHeight;
    LONG      tmAscent;
    LONG      tmDescent;
    LONG      tmInternalLeading;
    LONG      tmExternalLeading;
    LONG      tmAveCharWidth;
    LONG      tmMaxCharWidth;
    LONG      tmWeight;
    LONG      tmOverhang;
    LONG      tmDigitizedAspectX;
    LONG      tmDigitizedAspectY;
    BYTE      tmFirstChar;
    BYTE      tmLastChar;
    BYTE      tmDefaultChar;
    BYTE      tmBreakChar;
    BYTE      tmItalic;
    BYTE      tmUnderlined;
    BYTE      tmStruckOut;
    BYTE      tmPitchAndFamily;
    BYTE      tmCharSet;
} TEXTMETRICA, *LPTEXTMETRICA, *PTEXTMETRICA;

typedef struct tagTEXTMETRICW
{
    LONG      tmHeight;
    LONG      tmAscent;
    LONG      tmDescent;
    LONG      tmInternalLeading;
    LONG      tmExternalLeading;
    LONG      tmAveCharWidth;
    LONG      tmMaxCharWidth;
    LONG      tmWeight;
    LONG      tmOverhang;
    LONG      tmDigitizedAspectX;
    LONG      tmDigitizedAspectY;
    WCHAR     tmFirstChar;
    WCHAR     tmLastChar;
    WCHAR     tmDefaultChar;
    WCHAR     tmBreakChar;
    BYTE      tmItalic;
    BYTE      tmUnderlined;
    BYTE      tmStruckOut;
    BYTE      tmPitchAndFamily;
    BYTE      tmCharSet;
} TEXTMETRICW, *LPTEXTMETRICW, *PTEXTMETRICW;







typedef struct tagPANOSE
{
    BYTE bFamilyType;
    BYTE bSerifStyle;
    BYTE bWeight;
    BYTE bProportion;
    BYTE bContrast;
    BYTE bStrokeVariation;
    BYTE bArmStyle;
    BYTE bLetterform;
    BYTE bMidline;
    BYTE bXHeight;
} PANOSE, *LPPANOSE;



























































































































typedef struct
{
  LOGFONTA    elfLogFont;
  BYTE        elfFullName[64];
  BYTE        elfStyle[32];
  DWORD       elfVersion;
  DWORD       elfStyleSize;
  DWORD       elfMatch;
  DWORD       elfReserved;
  BYTE        elfVendorId[4];
  DWORD       elfCulture;
  PANOSE      elfPanose;
} EXTLOGFONTA, *PEXTLOGFONTA, *LPEXTLOGFONTA;

typedef struct
{
  LOGFONTW    elfLogFont;
  WCHAR       elfFullName[64];
  WCHAR       elfStyle[32];
  DWORD       elfVersion;
  DWORD       elfStyleSize;
  DWORD       elfMatch;
  DWORD       elfReserved;
  BYTE        elfVendorId[4];
  DWORD       elfCulture;
  PANOSE      elfPanose;
} EXTLOGFONTW, *PEXTLOGFONTW, *LPEXTLOGFONTW;








typedef struct _OUTLINETEXTMETRICA
{
    UINT          otmSize;
    TEXTMETRICA   otmTextMetrics;
    BYTE            otmFiller;
    PANOSE          otmPanoseNumber;
    UINT          otmfsSelection;
    UINT          otmfsType;
    INT           otmsCharSlopeRise;
    INT           otmsCharSlopeRun;
    INT           otmItalicAngle;
    UINT          otmEMSquare;
    INT           otmAscent;
    INT           otmDescent;
    UINT          otmLineGap;
    UINT          otmsCapEmHeight;
    UINT          otmsXHeight;
    RECT          otmrcFontBox;
    INT           otmMacAscent;
    INT           otmMacDescent;
    UINT          otmMacLineGap;
    UINT          otmusMinimumPPEM;
    POINT         otmptSubscriptSize;
    POINT         otmptSubscriptOffset;
    POINT         otmptSuperscriptSize;
    POINT         otmptSuperscriptOffset;
    UINT          otmsStrikeoutSize;
    INT           otmsStrikeoutPosition;
    INT           otmsUnderscoreSize;
    INT           otmsUnderscorePosition;
    LPSTR           otmpFamilyName;
    LPSTR           otmpFaceName;
    LPSTR           otmpStyleName;
    LPSTR           otmpFullName;
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA, *LPOUTLINETEXTMETRICA;

typedef struct _OUTLINETEXTMETRICW
{
    UINT          otmSize;
    TEXTMETRICW   otmTextMetrics;
    BYTE            otmFiller;
    PANOSE          otmPanoseNumber;
    UINT          otmfsSelection;
    UINT          otmfsType;
    INT           otmsCharSlopeRise;
    INT           otmsCharSlopeRun;
    INT           otmItalicAngle;
    UINT          otmEMSquare;
    INT           otmAscent;
    INT           otmDescent;
    UINT          otmLineGap;
    UINT          otmsCapEmHeight;
    UINT          otmsXHeight;
    RECT          otmrcFontBox;
    INT           otmMacAscent;
    INT           otmMacDescent;
    UINT          otmMacLineGap;
    UINT          otmusMinimumPPEM;
    POINT         otmptSubscriptSize;
    POINT         otmptSubscriptOffset;
    POINT         otmptSuperscriptSize;
    POINT         otmptSuperscriptOffset;
    UINT          otmsStrikeoutSize;
    INT           otmsStrikeoutPosition;
    INT           otmsUnderscoreSize;
    INT           otmsUnderscorePosition;
    LPSTR           otmpFamilyName;
    LPSTR           otmpFaceName;
    LPSTR           otmpStyleName;
    LPSTR           otmpFullName;
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW, *LPOUTLINETEXTMETRICW;





typedef struct
{
    INT       x;
    INT       y;
    UINT      n;
    LPCSTR    lpstr;
    UINT      uiFlags;
    RECT      rcl;
    INT       *pdx;
} POLYTEXTA, *PPOLYTEXTA, *LPPOLYTEXTA;

typedef struct
{
    INT       x;
    INT       y;
    UINT      n;
    LPCWSTR   lpstr;
    UINT      uiFlags;
    RECT      rcl;
    INT       *pdx;
} POLYTEXTW, *PPOLYTEXTW, *LPPOLYTEXTW;



















typedef struct
{
    LONG      tmHeight;
    LONG      tmAscent;
    LONG      tmDescent;
    LONG      tmInternalLeading;
    LONG      tmExternalLeading;
    LONG      tmAveCharWidth;
    LONG      tmMaxCharWidth;
    LONG      tmWeight;
    LONG      tmOverhang;
    LONG      tmDigitizedAspectX;
    LONG      tmDigitizedAspectY;
    BYTE      tmFirstChar;
    BYTE      tmLastChar;
    BYTE      tmDefaultChar;
    BYTE      tmBreakChar;
    BYTE      tmItalic;
    BYTE      tmUnderlined;
    BYTE      tmStruckOut;
    BYTE      tmPitchAndFamily;
    BYTE      tmCharSet;
    DWORD     ntmFlags;
    UINT    ntmSizeEM;
    UINT    ntmCellHeight;
    UINT    ntmAvgWidth;
} NEWTEXTMETRICA, *PNEWTEXTMETRICA, *LPNEWTEXTMETRICA;

typedef struct
{
    LONG      tmHeight;
    LONG      tmAscent;
    LONG      tmDescent;
    LONG      tmInternalLeading;
    LONG      tmExternalLeading;
    LONG      tmAveCharWidth;
    LONG      tmMaxCharWidth;
    LONG      tmWeight;
    LONG      tmOverhang;
    LONG      tmDigitizedAspectX;
    LONG      tmDigitizedAspectY;
    WCHAR     tmFirstChar;
    WCHAR     tmLastChar;
    WCHAR     tmDefaultChar;
    WCHAR     tmBreakChar;
    BYTE      tmItalic;
    BYTE      tmUnderlined;
    BYTE      tmStruckOut;
    BYTE      tmPitchAndFamily;
    BYTE      tmCharSet;
    DWORD     ntmFlags;
    UINT      ntmSizeEM;
    UINT      ntmCellHeight;
    UINT      ntmAvgWidth;
} NEWTEXTMETRICW, *PNEWTEXTMETRICW, *LPNEWTEXTMETRICW;





typedef struct
{
    NEWTEXTMETRICA	ntmTm;
    FONTSIGNATURE       ntmFontSig;
} NEWTEXTMETRICEXA;

typedef struct
{
    NEWTEXTMETRICW	ntmTm;
    FONTSIGNATURE       ntmFontSig;
} NEWTEXTMETRICEXW;






typedef int ( *OLDFONTENUMPROCA)(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM);
typedef int ( *OLDFONTENUMPROCW)(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM);






typedef OLDFONTENUMPROCA FONTENUMPROCA;
typedef OLDFONTENUMPROCW FONTENUMPROCW;


typedef INT ( *GOBJENUMPROC)(LPVOID, LPARAM);
typedef void ( *LINEDDAPROC)(INT, INT, LPARAM);














  





  



















  












  


typedef struct
{
    UINT	gmBlackBoxX;
    UINT	gmBlackBoxY;
    POINT	gmptGlyphOrigin;
    SHORT	gmCellIncX;
    SHORT	gmCellIncY;
} GLYPHMETRICS, *LPGLYPHMETRICS;




















typedef struct
{
    WORD    fract;
    SHORT   value;
} FIXED;

typedef struct tagPOINTFX
{
	FIXED x;
	FIXED y;
} POINTFX, *LPPOINTFX;

typedef struct tagTTPOLYCURVE
{
	WORD wType;
	WORD cpfx;
	POINTFX apfx[1];
} TTPOLYCURVE, *LPTTPOLYCURVE;

typedef struct tagTTPOLYGONHEADER
{
	DWORD cb;
	DWORD dwType;
	POINTFX pfxStart;
} TTPOLYGONHEADER, *LPTTPOLYGONHEADER;

typedef struct
{
     FIXED  eM11;
     FIXED  eM12;
     FIXED  eM21;
     FIXED  eM22;
} MAT2, *LPMAT2;

  
typedef struct
{
    INT   abcA;
    UINT  abcB;
    INT   abcC;
} ABC, *PABC, *LPABC;


  








































typedef struct tagGCP_RESULTSA{
    DWORD  lStructSize;
    LPSTR  lpOutString;
    UINT   *lpOrder;
    INT    *lpDx;
    INT    *lpCaretPos;
    LPSTR  lpClass;
    LPWSTR lpGlyphs;
    UINT   nGlyphs;
    UINT   nMaxFit;
} GCP_RESULTSA, *LPGCP_RESULTSA;

typedef struct tagGCP_RESULTSW
{
    DWORD  lStructSize;
    LPWSTR lpOutString;
    UINT   *lpOrder;
    INT    *lpDx;
    INT    *lpCaretPos;
    LPSTR  lpClass;
    LPWSTR lpGlyphs;
    UINT   nGlyphs;
    UINT   nMaxFit;
} GCP_RESULTSW, *LPGCP_RESULTSW;




  
typedef struct
{
    SHORT nSize;
    SHORT wFlags;
    SHORT nLanguageID;
} RASTERIZER_STATUS, *LPRASTERIZER_STATUS;









  
typedef struct {
  FLOAT      x;
  FLOAT      y;
} POINTFLOAT, *PPOINTFLOAT;

typedef struct {
  FLOAT      gmfBlackBoxX;
  FLOAT      gmfBlackBoxY;
  POINTFLOAT gmfptGlyphOrigin;
  FLOAT      gmfCellIncX;
  FLOAT      gmfCellIncY;
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT, *LPGLYPHMETRICSFLOAT;

typedef struct {
  WORD  nSize;
  WORD  nVersion;
  DWORD dwFlags;
  BYTE  iPixelType;
  BYTE  cColorBits;
  BYTE  cRedBits;
  BYTE  cRedShift;
  BYTE  cGreenBits;
  BYTE  cGreenShift;
  BYTE  cBlueBits;
  BYTE  cBlueShift;
  BYTE  cAlphaBits;
  BYTE  cAlphaShift;
  BYTE  cAccumBits;
  BYTE  cAccumRedBits;
  BYTE  cAccumGreenBits;
  BYTE  cAccumBlueBits;
  BYTE  cAccumAlphaBits;
  BYTE  cDepthBits;
  BYTE  cStencilBits;
  BYTE  cAuxBuffers;
  BYTE  iLayerPlane;
  BYTE  bReserved;
  COLORREF crTransparent;
} LAYERPLANEDESCRIPTOR, *PLAYERPLANEDESCRIPTOR, *LPLAYERPLANEDESCRIPTOR;






    


typedef struct tagPALETTEENTRY
{
	BYTE peRed, peGreen, peBlue, peFlags;
} PALETTEENTRY, *PPALETTEENTRY, *LPPALETTEENTRY;









typedef struct tagLOGPALETTE
{
    WORD           palVersion;
    WORD           palNumEntries;
    PALETTEENTRY   palPalEntry[1];
} LOGPALETTE, *PLOGPALETTE, *LPLOGPALETTE, *NPLOGPALETTE;


  

typedef struct
{
    UINT     lopnStyle;
    POINT    lopnWidth;
    COLORREF lopnColor;
} LOGPEN, *LPLOGPEN;


typedef struct tagEXTLOGPEN
{
    DWORD    elpPenStyle;
    DWORD    elpWidth;
    UINT     elpBrushStyle;
    COLORREF elpColor;
    ULONG_PTR elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
} EXTLOGPEN, *PEXTLOGPEN, *NPEXTLOGPEN, *LPEXTLOGPEN;


























  

















  

  











  




  



  













  



  



  


























































































































































  

typedef struct tagRGBQUAD {
  BYTE rgbBlue;
  BYTE rgbGreen;
  BYTE rgbRed;
  BYTE rgbReserved;
} RGBQUAD, *LPRGBQUAD;

typedef struct tagRGBTRIPLE {
  BYTE rgbtBlue;
  BYTE rgbtGreen;
  BYTE rgbtRed;
} RGBTRIPLE;


# 1 "include/pshpack2.h" 1 3



























     













































































#pragma pack(2)


# 1830 "include/wingdi.h" 2
typedef struct
{
    WORD    bfType;
    DWORD   bfSize;
    WORD    bfReserved1;
    WORD    bfReserved2;
    DWORD   bfOffBits;
} BITMAPFILEHEADER, *PBITMAPFILEHEADER, *LPBITMAPFILEHEADER;

# 1 "include/poppack.h" 1 3





























































































































































































































































#pragma pack()










# 1839 "include/wingdi.h" 2



typedef struct
{
    DWORD 	biSize;
    LONG  	biWidth;
    LONG  	biHeight;
    WORD 	biPlanes;
    WORD 	biBitCount;
    DWORD 	biCompression;
    DWORD 	biSizeImage;
    LONG  	biXPelsPerMeter;
    LONG  	biYPelsPerMeter;
    DWORD 	biClrUsed;
    DWORD 	biClrImportant;
} BITMAPINFOHEADER, *PBITMAPINFOHEADER, *LPBITMAPINFOHEADER;

typedef struct
{
    DWORD        bV4Size;
    LONG         bV4Width;
    LONG         bV4Height;
    WORD         bV4Planes;
    WORD         bV4BitCount;
    DWORD        bV4V4Compression;
    DWORD        bV4SizeImage;
    LONG         bV4XPelsPerMeter;
    LONG         bV4YPelsPerMeter;
    DWORD        bV4ClrUsed;
    DWORD        bV4ClrImportant;
    DWORD        bV4RedMask;
    DWORD        bV4GreenMask;
    DWORD        bV4BlueMask;
    DWORD        bV4AlphaMask;
    DWORD        bV4CSType;
    CIEXYZTRIPLE bV4Endpoints;
    DWORD        bV4GammaRed;
    DWORD        bV4GammaGreen;
    DWORD        bV4GammaBlue;
} BITMAPV4HEADER, *PBITMAPV4HEADER;

typedef struct {
    DWORD        bV5Size;
    LONG         bV5Width;
    LONG         bV5Height;
    WORD         bV5Planes;
    WORD         bV5BitCount;
    DWORD        bV5Compression;
    DWORD        bV5SizeImage;
    LONG         bV5XPelsPerMeter;
    LONG         bV5YPelsPerMeter;
    DWORD        bV5ClrUsed;
    DWORD        bV5ClrImportant;
    DWORD        bV5RedMask;
    DWORD        bV5GreenMask;
    DWORD        bV5BlueMask;
    DWORD        bV5AlphaMask;
    DWORD        bV5CSType;
    CIEXYZTRIPLE bV5Endpoints;
    DWORD        bV5GammaRed;
    DWORD        bV5GammaGreen;
    DWORD        bV5GammaBlue;
    DWORD        bV5Intent;
    DWORD        bV5ProfileData;
    DWORD        bV5ProfileSize;
    DWORD        bV5Reserved;
} BITMAPV5HEADER, *LPBITMAPV5HEADER, *PBITMAPV5HEADER;





  







typedef struct tagBITMAPINFO
{
    BITMAPINFOHEADER bmiHeader;
    RGBQUAD          bmiColors[1];
} BITMAPINFO, *PBITMAPINFO, *LPBITMAPINFO;

typedef struct
{
    DWORD   bcSize;
    WORD    bcWidth;
    WORD    bcHeight;
    WORD    bcPlanes;
    WORD    bcBitCount;
} BITMAPCOREHEADER, *PBITMAPCOREHEADER, *LPBITMAPCOREHEADER;

typedef struct
{
    BITMAPCOREHEADER bmciHeader;
    RGBTRIPLE        bmciColors[1];
} BITMAPCOREINFO, *PBITMAPCOREINFO, *LPBITMAPCOREINFO;





typedef struct
{
	BITMAP		dsBm;
	BITMAPINFOHEADER	dsBmih;
	DWORD			dsBitfields[3];
	HANDLE		dshSection;
	DWORD			dsOffset;
} DIBSECTION, *PDIBSECTION, *LPDIBSECTION;

  


























typedef USHORT COLOR16;

typedef struct _TRIVERTEX
{
    LONG    x;
    LONG    y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
} TRIVERTEX, *PTRIVERTEX, *LPTRIVERTEX;

typedef struct _GRADIENT_TRIANGLE
{
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
} GRADIENT_TRIANGLE, *PGRADIENT_TRIANGLE, *LPGRADIENT_TRIANGLE;

typedef struct _GRADIENT_RECT
{
    ULONG UpperLeft;
    ULONG LowerRight;
} GRADIENT_RECT, *PGRADIENT_RECT, *LPGRADIENT_RECT;




typedef struct _BLENDFUNCTION
{
    BYTE BlendOp;
    BYTE BlendFlags;
    BYTE SourceConstantAlpha;
    BYTE AlphaFormat;
} BLENDFUNCTION, *PBLENDFUNCTION;









# 1 "include/pshpack2.h" 1 3



























     













































































#pragma pack(2)


# 2025 "include/wingdi.h" 2
typedef struct
{
    WORD       mtType;
    WORD       mtHeaderSize;
    WORD       mtVersion;
    DWORD      mtSize;
    WORD       mtNoObjects;
    DWORD      mtMaxRecord;
    WORD       mtNoParameters;
} METAHEADER, *PMETAHEADER, *LPMETAHEADER;

# 1 "include/poppack.h" 1 3





























































































































































































































































#pragma pack()










# 2036 "include/wingdi.h" 2


typedef struct
{
    DWORD      rdSize;
    WORD       rdFunction;
    WORD       rdParm[1];
} METARECORD, *PMETARECORD, *LPMETARECORD;



typedef struct
{
    HGDIOBJ objectHandle[1];
} HANDLETABLE, *PHANDLETABLE, *LPHANDLETABLE;



typedef struct
{
    LONG       mm;
    LONG       xExt;
    LONG       yExt;
    HMETAFILE  hMF;
} METAFILEPICT, *LPMETAFILEPICT;




















































































typedef INT ( *MFENUMPROC)(HDC,HANDLETABLE*,METARECORD*,
                                       INT,LPARAM);





typedef struct {
    DWORD iType;
    DWORD nSize;
    RECTL rclBounds;
    RECTL rclFrame;
    DWORD dSignature;
    DWORD nVersion;
    DWORD nBytes;
    DWORD nRecords;
    WORD  nHandles;
    WORD  sReserved;
    DWORD nDescription;
    DWORD offDescription;
    DWORD nPalEntries;
    SIZEL szlDevice;
    SIZEL szlMillimeters;
    DWORD cbPixelFormat;
    DWORD offPixelFormat;
    DWORD bOpenGL;
    SIZEL szlMicrometers;
} ENHMETAHEADER, *PENHMETAHEADER, *LPENHMETAHEADER;

typedef struct {
    DWORD iType;
    DWORD nSize;
    DWORD dParm[1];
} ENHMETARECORD, *LPENHMETARECORD;

typedef struct {
    DWORD iType;
    DWORD nSize;
} EMR, *PEMR;

typedef struct {
    POINTL ptlReference;
    DWORD  nChars;
    DWORD  offString;
    DWORD  fOptions;
    RECTL  rcl;
    DWORD  offDx;
} EMRTEXT, *PEMRTEXT;

typedef struct {
    EMR emr;
} EMRABORTPATH,      *PEMRABORTPATH,
  EMRBEGINPATH,      *PEMRBEGINPATH,
  EMRENDPATH,        *PEMRENDPATH,
  EMRCLOSEFIGURE,    *PEMRCLOSEFIGURE,
  EMRFLATTENPATH,    *PEMRFLATTENPATH,
  EMRWIDENPATH,      *PEMRWIDENPATH,
  EMRSETMETARGN,     *PEMRSETMETARGN,
  EMRSAVEDC,         *PEMRSAVEDC,
  EMRREALIZEPALETTE, *PEMRREALIZEPALETTE;

typedef struct {
    EMR    emr;
    POINTL ptlCenter;
    DWORD  nRadius;
    FLOAT  eStartAngle;
    FLOAT  eSweepAngle;
} EMRANGLEARC, *PEMRANGLEARC;

typedef struct {
    EMR    emr;
    RECTL  rclBox;
    POINTL ptlStart;
    POINTL ptlEnd;
} EMRARC,   *PEMRARC,
  EMRARCTO, *PEMRARCTO,
  EMRCHORD, *PEMRCHORD,
  EMRPIE,   *PEMRPIE;

typedef struct {
    EMR      emr;
    RECTL    rclBounds;
    LONG     xDest;
    LONG     yDest;
    LONG     cxDest;
    LONG     cyDest;
    DWORD    dwRop;
    LONG     xSrc;
    LONG     ySrc;
    XFORM    xformSrc;
    COLORREF crBkColorSrc;
    DWORD    iUsageSrc;
    DWORD    offBmiSrc;
    DWORD    cbBmiSrc;
    DWORD    offBitsSrc;
    DWORD    cbBitsSrc;
} EMRBITBLT, *PEMRBITBLT;

typedef struct {
    EMR        emr;
    DWORD      ihBrush;
    LOGBRUSH32 lb;
} EMRCREATEBRUSHINDIRECT, *PEMRCREATEBRUSHINDIRECT;

typedef struct {
    EMR            emr;
    DWORD          ihCS;
    LOGCOLORSPACEA lcs;
} EMRCREATECOLORSPACE, *PEMRCREATECOLORSPACE;

typedef struct {
  EMR            emr;
  DWORD          ihCS;
  LOGCOLORSPACEW lcs;
  DWORD          dwFlags;
  DWORD          cbData;
  BYTE           Data[1];
} EMRCREATECOLORSPACEW, *PEMRCREATECOLORSPACEW;

typedef struct {
    EMR   emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
} EMRCREATEDIBPATTERNBRUSHPT, *PEMRCREATEDIBPATTERNBRUSHPT;

typedef struct {
    EMR   emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
} EMRCREATEMONOBRUSH, *PEMRCREATEMONOBRUSH;

typedef struct {
    EMR        emr;
    DWORD      ihPal;
    LOGPALETTE lgpl;
} EMRCREATEPALETTE, *PEMRCREATEPALETTE;

typedef struct {
    EMR    emr;
    DWORD  ihPen;
    LOGPEN lopn;
} EMRCREATEPEN, *PEMRCREATEPEN;

typedef struct {
    EMR           emr;
    DWORD         ihCS;
} EMRDELETECOLORSPACE, *PEMRDELETECOLORSPACE,
  EMRSELECTCOLORSPACE, *PEMRSELECTCOLORSPACE,
  EMRSETCOLORSPACE,    *PEMRSETCOLORSPACE;

typedef struct {
    EMR   emr;
    DWORD ihObject;
} EMRDELETEOBJECT, *PEMRDELETEOBJECT,
  EMRSELECTOBJECT, *PEMRSELECTOBJECT;

typedef struct {
    EMR   emr;
    RECTL rclBox;
} EMRELLIPSE,   *PEMRELLIPSE,
  EMRRECTANGLE, *PEMRRECTANGLE;

typedef struct {
    EMR   emr;
    DWORD nPalEntries;
    DWORD offPalEntries;
    DWORD nSizeLast;
} EMREOF, *PEMREOF;

typedef struct {
    EMR   emr;
    RECTL rclClip;
} EMREXCLUDECLIPRECT,   *PEMREXCLUDECLIPRECT,
  EMRINTERSECTCLIPRECT, *PEMRINTERSECTCLIPRECT;

typedef struct {
    EMR         emr;
    DWORD       ihFont;
    EXTLOGFONTW elfw;
} EMREXTCREATEFONTINDIRECTW, *PEMREXTCREATEFONTINDIRECTW;

typedef struct {
    EMR       emr;
    DWORD     ihPen;
    DWORD     offBmi;
    DWORD     cbBmi;
    DWORD     offBits;
    DWORD     cbBits;
    EXTLOGPEN elp;
} EMREXTCREATEPEN, *PEMREXTCREATEPEN;

typedef struct tagEMREXTESCAPE
{
    EMR  emr;
    INT  iEscape;
    INT  cbEscData;
    BYTE EscData[1];
} EMREXTESCAPE, *PEMREXTESCAPE, EMRDRAWESCAPE, *PEMRDRAWESCAPE;

typedef struct {
    EMR      emr;
    POINTL   ptlStart;
    COLORREF crColor;
    DWORD    iMode;
} EMREXTFLOODFILL, *PEMREXTFLOODFILL;

typedef struct {
    EMR   emr;
    DWORD cbRgnData;
    DWORD iMode;
    BYTE  RgnData[1];
} EMREXTSELECTCLIPRGN, *PEMREXTSELECTCLIPRGN;

typedef struct {
    EMR     emr;
    RECTL   rclBounds;
    DWORD   iGraphicsMode;
    FLOAT   exScale;
    FLOAT   eyScale;
    EMRTEXT emrtext;
} EMREXTTEXTOUTA, *PEMREXTTEXTOUTA,
  EMREXTTEXTOUTW, *PEMREXTTEXTOUTW;

typedef struct {
    EMR emr;
    RECTL rclBounds;
} EMRFILLPATH,          *PEMRFILLPATH,
  EMRSTROKEANDFILLPATH, *PEMRSTROKEANDFILLPATH,
  EMRSTROKEPATH,        *PEMRSTROKEPATH;

typedef struct {
    EMR   emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    BYTE  RgnData[1];
} EMRFILLRGN, *PEMRFILLRGN;

typedef struct {
    DWORD dSignature;
    DWORD nVersion;
    DWORD cbData;
    DWORD offData;
} EMRFORMAT, *PEMRFORMAT;

typedef struct {
    EMR   emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    SIZEL szlStroke;
    BYTE  RgnData[1];
} EMRFRAMERGN, *PEMRFRAMERGN;

typedef struct {
    EMR   emr;
    DWORD cbData;
    BYTE  Data[1];
} EMRGDICOMMENT, *PEMRGDICOMMENT;

typedef struct {
    EMR       emr;
    RECTL     rclBounds;
    DWORD     nVer;
    DWORD     nTri;
    ULONG     ulMode;
    TRIVERTEX Ver[1];
} EMRGRADIENTFILL, *PEMRGRADIENTFILL;

typedef struct {
    EMR   emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    BYTE  RgnData[1];
} EMRINVERTRGN, *PEMRINVERTRGN,
  EMRPAINTRGN,  *PEMRPAINTRGN;

typedef struct {
    EMR    emr;
    POINTL ptl;
} EMRLINETO,   *PEMRLINETO,
  EMRMOVETOEX, *PEMRMOVETOEX;

typedef struct {
    EMR      emr;
    RECTL    rclBounds;
    LONG     xDest;
    LONG     yDest;
    LONG     cxDest;
    LONG     cyDest;
    DWORD    dwRop;
    LONG     xSrc;
    LONG     ySrc;
    XFORM    xformSrc;
    COLORREF crBkColorSrc;
    DWORD    iUsageSrc;
    DWORD    offBmiSrc;
    DWORD    cbBmiSrc;
    DWORD    offBitsSrc;
    DWORD    cbBitsSrc;
    LONG     xMask;
    LONG     yMask;
    DWORD    iUsageMask;
    DWORD    offBmiMask;
    DWORD    cbBmiMask;
    DWORD    offBitsMask;
    DWORD    cbBitsMask;
} EMRMASKBLT, *PEMRMASKBLT;

typedef struct {
    EMR   emr;
    XFORM xform;
    DWORD iMode;
} EMRMODIFYWORLDTRANSFORM, *PEMRMODIFYWORLDTRANSFORM;

typedef struct {
    EMR    emr;
    POINTL ptlOffset;
} EMROFFSETCLIPRGN, *PEMROFFSETCLIPRGN;

typedef struct {
    EMR      emr;
    RECTL    rclBounds;
    POINTL   aptlDest[3];
    LONG     xSrc;
    LONG     ySrc;
    LONG     cxSrc;
    LONG     cySrc;
    XFORM    xformSrc;
    COLORREF crBkColorSrc;
    DWORD    iUsageSrc;
    DWORD    offBmiSrc;
    DWORD    cbBmiSrc;
    DWORD    offBitsSrc;
    DWORD    cbBitsSrc;
    LONG     xMask;
    LONG     yMask;
    DWORD    iUsageMask;
    DWORD    offBmiMask;
    DWORD    cbBmiMask;
    DWORD    offBitsMask;
    DWORD    cbBitsMask;
} EMRPLGBLT, *PEMRPLGBLT;

typedef struct {
    EMR    emr;
    RECTL  rclBounds;
    DWORD  cptl;
    POINTL aptl[1];
} EMRPOLYLINE,     *PEMRPOLYLINE,
  EMRPOLYBEZIER,   *PEMRPOLYBEZIER,
  EMRPOLYGON,      *PEMRPOLYGON,
  EMRPOLYBEZIERTO, *PEMRPOLYBEZIERTO,
  EMRPOLYLINETO,   *PEMRPOLYLINETO;

typedef struct {
    EMR    emr;
    RECTL  rclBounds;
    DWORD  cpts;
    POINTS apts[1];
} EMRPOLYLINE16,     *PEMRPOLYLINE16,
  EMRPOLYBEZIER16,   *PEMRPOLYBEZIER16,
  EMRPOLYGON16,      *PEMRPOLYGON16,
  EMRPOLYBEZIERTO16, *PEMRPOLYBEZIERTO16,
  EMRPOLYLINETO16,   *PEMRPOLYLINETO16;

typedef struct {
    EMR    emr;
    RECTL  rclBounds;
    DWORD  cpts;
    POINTS apts[1];
    BYTE   abTypes[1];
} EMRPOLYDRAW16, *PEMRPOLYDRAW16;

typedef struct {
    EMR     emr;
    RECTL   rclBounds;
    DWORD   nPolys;
    DWORD   cpts;
    DWORD   aPolyCounts[1];
    POINTS  apts[1];
} EMRPOLYPOLYLINE16, *PEMRPOLYPOLYLINE16,
  EMRPOLYPOLYGON16,  *PEMRPOLYPOLYGON16;

typedef struct {
    EMR    emr;
    RECTL  rclBounds;
    DWORD  cptl;
    POINTL aptl[1];
    BYTE   abTypes[1];
} EMRPOLYDRAW, *PEMRPOLYDRAW;

typedef struct {
    EMR     emr;
    RECTL   rclBounds;
    DWORD   nPolys;
    DWORD   cptl;
    DWORD   aPolyCounts[1];
    POINTL  aptl[1];
} EMRPOLYPOLYLINE, *PEMRPOLYPOLYLINE,
  EMRPOLYPOLYGON,  *PEMRPOLYPOLYGON;

typedef struct {
    EMR     emr;
    RECTL   rclBounds;
    DWORD   iGraphicsMode;
    FLOAT   exScale;
    FLOAT   eyScale;
    LONG    cStrings;
    EMRTEXT aemrtext[1];
} EMRPOLYTEXTOUTA, *PEMRPOLYTEXTOUTA,
  EMRPOLYTEXTOUTW, *PEMRPOLYTEXTOUTW;

typedef struct {
    EMR   emr;
    DWORD ihPal;
    DWORD cEntries;
} EMRRESIZEPALETTE, *PEMRRESIZEPALETTE;

typedef struct {
    EMR  emr;
    LONG iRelative;
} EMRRESTOREDC, *PEMRRESTOREDC;

typedef struct {
    EMR   emr;
    RECTL rclBox;
    SIZEL szlCorner;
} EMRROUNDRECT, *PEMRROUNDRECT;

typedef struct {
    EMR  emr;
    LONG xNum;
    LONG xDenom;
    LONG yNum;
    LONG yDenom;
} EMRSCALEVIEWPORTEXTEX, *PEMRSCALEVIEWPORTEXTEX,
  EMRSCALEWINDOWEXTEX,   *PEMRSCALEWINDOWEXTEX;

typedef struct {
    EMR   emr;
    DWORD iMode;
} EMRSELECTCLIPPATH,    *PEMRSELECTCLIPPATH,
  EMRSETBKMODE,         *PEMRSETBKMODE,
  EMRSETMAPMODE,        *PEMRSETMAPMODE,
  EMRSETPOLYFILLMODE,   *PEMRSETPOLYFILLMODE,
  EMRSETROP2,           *PEMRSETROP2,
  EMRSETSTRETCHBLTMODE, *PEMRSETSTRETCHBLTMODE,
  EMRSETTEXTALIGN,      *PEMRSETTEXTALIGN,
  EMRSETICMMODE,        *PEMRSETICMMODE,
  EMRSETLAYOUT,         *PEMRSETLAYOUT;

typedef struct {
    EMR   emr;
    DWORD ihPal;
} EMRSELECTPALETTE, *PEMRSELECTPALETTE;

typedef struct {
    EMR   emr;
    DWORD iArcDirection;
} EMRSETARCDIRECTION, *PEMRSETARCDIRECTION;

typedef struct {
    EMR      emr;
    COLORREF crColor;
} EMRSETBKCOLOR,   *PEMRSETBKCOLOR,
  EMRSETTEXTCOLOR, *PEMRSETTEXTCOLOR;

typedef struct {
    EMR   emr;
    POINTL ptlOrigin;
} EMRSETBRUSHORGEX,    *PEMRSETBRUSHORGEX,
  EMRSETVIEWPORTORGEX, *PEMRSETVIEWPORTORGEX,
  EMRSETWINDOWORGEX,   *PEMRSETWINDOWORGEX;

typedef struct {
    EMR  emr;
    COLORADJUSTMENT ColorAdjustment;
} EMRSETCOLORADJUSTMENT, *PEMRSETCOLORADJUSTMENT;

typedef struct {
    EMR   emr;
    RECTL rclBounds;
    LONG  xDest;
    LONG  yDest;
    LONG  xSrc;
    LONG  ySrc;
    LONG  cxSrc;
    LONG  cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD iStartScan;
    DWORD cScans;
} EMRSETDIBITSTODEVICE, *PEMRSETDIBITSTODEVICE;

typedef struct {
    EMR   emr;
    DWORD dwFlags;
} EMRSETMAPPERFLAGS, *PEMRSETMAPPERFLAGS;

typedef struct {
    EMR   emr;
    FLOAT eMiterLimit;
} EMRSETMITERLIMIT, *PEMRSETMITERLIMIT;

typedef struct {
    EMR          emr;
    DWORD        ihPal;
    DWORD        iStart;
    DWORD        cEntries;
    PALETTEENTRY aPalEntries[1];
} EMRSETPALETTEENTRIES, *PEMRSETPALETTEENTRIES;

typedef struct {
    EMR     emr;
    POINTL  ptlPixel;
    COLORREF crColor;
} EMRSETPIXELV, *PEMRSETPIXELV;

typedef struct {
    EMR   emr;
    SIZEL szlExtent;
} EMRSETVIEWPORTEXTEX, *PEMRSETVIEWPORTEXTEX,
  EMRSETWINDOWEXTEX,   *PEMRSETWINDOWEXTEX;

typedef struct {
    EMR   emr;
    XFORM xform;
} EMRSETWORLDTRANSFORM, *PEMRSETWORLDTRANSFORM;

typedef struct {
    EMR      emr;
    RECTL    rclBounds;
    LONG     xDest;
    LONG     yDest;
    LONG     cxDest;
    LONG     cyDest;
    DWORD    dwRop;
    LONG     xSrc;
    LONG     ySrc;
    XFORM    xformSrc;
    COLORREF crBkColorSrc;
    DWORD    iUsageSrc;
    DWORD    offBmiSrc;
    DWORD    cbBmiSrc;
    DWORD    offBitsSrc;
    DWORD    cbBitsSrc;
    LONG     cxSrc;
    LONG     cySrc;
} EMRSTRETCHBLT, *PEMRSTRETCHBLT;

typedef struct {
    EMR      emr;
    RECTL    rclBounds;
    LONG     xDest;
    LONG     yDest;
    LONG     cxDest;
    LONG     cyDest;
    DWORD    dwRop;
    LONG     xSrc;
    LONG     ySrc;
    XFORM    xformSrc;
    COLORREF crBkColorSrc;
    DWORD    iUsageSrc;
    DWORD    offBmiSrc;
    DWORD    cbBmiSrc;
    DWORD    offBitsSrc;
    DWORD    cbBitsSrc;
    LONG     cxSrc;
    LONG     cySrc;
} EMRALPHABLEND, *PEMRALPHABLEND;

typedef struct {
    EMR      emr;
    RECTL    rclBounds;
    LONG     xDest;
    LONG     yDest;
    LONG     cxDest;
    LONG     cyDest;
    DWORD    dwRop;
    LONG     xSrc;
    LONG     ySrc;
    XFORM    xformSrc;
    COLORREF crBkColorSrc;
    DWORD    iUsageSrc;
    DWORD    offBmiSrc;
    DWORD    cbBmiSrc;
    DWORD    offBitsSrc;
    DWORD    cbBitsSrc;
    LONG     cxSrc;
    LONG     cySrc;
} EMRTRANSPARENTBLT, *PEMRTRANSPARENTBLT;

typedef struct {
    EMR   emr;
    RECTL rclBounds;
    LONG  xDest;
    LONG  yDest;
    LONG  xSrc;
    LONG  ySrc;
    LONG  cxSrc;
    LONG  cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD dwRop;
    LONG  cxDest;
    LONG  cyDest;
} EMRSTRETCHDIBITS, *PEMRSTRETCHDIBITS;

typedef struct {
    EMR                   emr;
    PIXELFORMATDESCRIPTOR pfd;
} EMRPIXELFORMAT, *PEMRPIXELFORMAT;

typedef struct tagEMRGLSRECORD {
  EMR   emr;
  DWORD cbData;
  BYTE  Data[1];
} EMRGLSRECORD, *PEMRGLSRECORD;

typedef struct {
  EMR   emr;
  RECTL rclBounds;
  DWORD cbData;
  BYTE  Data[1];
} EMRGLSBOUNDEDRECORD, *PEMRGLSBOUNDEDRECORD;

typedef INT ( *ENHMFENUMPROC)(HDC, HANDLETABLE *,
                                      const ENHMETARECORD *, INT, LPARAM);













































































































































typedef struct
{
    BYTE   dmDeviceName[32];
    WORD   dmSpecVersion;
    WORD   dmDriverVersion;
    WORD   dmSize;
    WORD   dmDriverExtra;
    DWORD  dmFields;
    union {
      struct {
	short  dmOrientation;
	short  dmPaperSize;
	short  dmPaperLength;
	short  dmPaperWidth;
        short  dmScale;
        short  dmCopies;
        short  dmDefaultSource;
        short  dmPrintQuality;
      } ;
      struct {
        POINTL dmPosition;
        DWORD dmDisplayOrientation;
        DWORD dmDisplayFixedOutput;
      } ;
    } ;
    short  dmColor;
    short  dmDuplex;
    short  dmYResolution;
    short  dmTTOption;
    short  dmCollate;
    BYTE   dmFormName[32];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    union {
      DWORD dmDisplayFlags;
      DWORD dmNup;
    } ;
    DWORD  dmDisplayFrequency;
    DWORD  dmICMMethod;
    DWORD  dmICMIntent;
    DWORD  dmMediaType;
    DWORD  dmDitherType;
    DWORD  dmReserved1;
    DWORD  dmReserved2;
    DWORD  dmPanningWidth;
    DWORD  dmPanningHeight;
} DEVMODEA, *PDEVMODEA, *LPDEVMODEA;

typedef struct
{
    WCHAR  dmDeviceName[32];
    WORD   dmSpecVersion;
    WORD   dmDriverVersion;
    WORD   dmSize;
    WORD   dmDriverExtra;
    DWORD  dmFields;
    union {
      struct {
	short  dmOrientation;
	short  dmPaperSize;
	short  dmPaperLength;
	short  dmPaperWidth;
        short  dmScale;
        short  dmCopies;
        short  dmDefaultSource;
        short  dmPrintQuality;
      } ;
      struct {
        POINTL dmPosition;
        DWORD dmDisplayOrientation;
        DWORD dmDisplayFixedOutput;
      } ;
    } ;
    short  dmColor;
    short  dmDuplex;
    short  dmYResolution;
    short  dmTTOption;
    short  dmCollate;
    WCHAR  dmFormName[32];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    union {
      DWORD dmDisplayFlags;
      DWORD dmNup;
    } ;
    DWORD  dmDisplayFrequency;
    DWORD  dmICMMethod;
    DWORD  dmICMIntent;
    DWORD  dmMediaType;
    DWORD  dmDitherType;
    DWORD  dmReserved1;
    DWORD  dmReserved2;
    DWORD  dmPanningWidth;
    DWORD  dmPanningHeight;
} DEVMODEW, *PDEVMODEW, *LPDEVMODEW;























































































































































































































































typedef struct
{
    INT    cbSize;
    LPCSTR   lpszDocName;
    LPCSTR   lpszOutput;
    LPCSTR   lpszDatatype;
    DWORD    fwType;
} DOCINFOA, *LPDOCINFOA;

typedef struct
{
    INT    cbSize;
    LPCWSTR  lpszDocName;
    LPCWSTR  lpszOutput;
    LPCWSTR  lpszDatatype;
    DWORD    fwType;
} DOCINFOW, *LPDOCINFOW;














typedef struct _RGNDATAHEADER {
    DWORD	dwSize;
    DWORD	iType;
    DWORD	nCount;
    DWORD	nRgnSize;
    RECT	rcBound;
} RGNDATAHEADER,*PRGNDATAHEADER;

typedef struct _RGNDATA {
    RGNDATAHEADER	rdh;
    char		Buffer[1];
} RGNDATA,*PRGNDATA,*LPRGNDATA;

typedef BOOL ( *ABORTPROC)(HDC, INT);

typedef enum {
    DISPLAYCONFIG_DEVICE_INFO_SET_SOURCE_DPI_SCALE           = (int)-4,
    DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_DPI_SCALE           = (int)-3,
    DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME                = (int)1,
    DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME                = (int)2,
    DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE      = (int)3,
    DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME               = (int)4,
    DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE         = (int)5,
    DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE           = (int)6,
    DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION = (int)7,
    DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION = (int)8,
    DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO        = (int)9,
    DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE       = (int)10,
    DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL            = (int)11,
    DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32                   = (int)0xffffffff
} DISPLAYCONFIG_DEVICE_INFO_TYPE;

typedef struct DISPLAYCONFIG_DEVICE_INFO_HEADER {
    DISPLAYCONFIG_DEVICE_INFO_TYPE type;
    UINT32                         size;
    LUID                           adapterId;
    UINT32                         id;
} DISPLAYCONFIG_DEVICE_INFO_HEADER;

typedef struct {
    DWORD	cb;
    CHAR	DeviceName[32];
    CHAR	DeviceString[128];
    DWORD	StateFlags;
    CHAR	DeviceID[128];
    CHAR	DeviceKey[128];
} DISPLAY_DEVICEA,*PDISPLAY_DEVICEA,*LPDISPLAY_DEVICEA;

typedef struct {
    DWORD	cb;
    WCHAR	DeviceName[32];
    WCHAR	DeviceString[128];
    DWORD	StateFlags;
    WCHAR	DeviceID[128];
    WCHAR	DeviceKey[128];
} DISPLAY_DEVICEW,*PDISPLAY_DEVICEW,*LPDISPLAY_DEVICEW;























typedef struct DISPLAYCONFIG_DESKTOP_IMAGE_INFO
{
    POINTL PathSourceSize;
    RECTL DesktopImageRegion;
    RECTL DesktopImageClip;
} DISPLAYCONFIG_DESKTOP_IMAGE_INFO;

typedef enum
{
    DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1,
    DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2,
    DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE = 3,
    DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = 0xffffffff
} DISPLAYCONFIG_MODE_INFO_TYPE;

typedef enum
{
    DISPLAYCONFIG_PIXELFORMAT_8BPP = 1,
    DISPLAYCONFIG_PIXELFORMAT_16BPP = 2,
    DISPLAYCONFIG_PIXELFORMAT_24BPP = 3,
    DISPLAYCONFIG_PIXELFORMAT_32BPP = 4,
    DISPLAYCONFIG_PIXELFORMAT_NONGDI = 5,
    DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = 0xffffffff
} DISPLAYCONFIG_PIXELFORMAT;

typedef enum
{
    DISPLAYCONFIG_ROTATION_IDENTITY = 1,
    DISPLAYCONFIG_ROTATION_ROTATE90 = 2,
    DISPLAYCONFIG_ROTATION_ROTATE180 = 3,
    DISPLAYCONFIG_ROTATION_ROTATE270 = 4,
    DISPLAYCONFIG_ROTATION_FORCE_UINT32 = 0xffffffff
} DISPLAYCONFIG_ROTATION;

typedef enum
{
    DISPLAYCONFIG_SCALING_IDENTITY = 1,
    DISPLAYCONFIG_SCALING_CENTERED = 2,
    DISPLAYCONFIG_SCALING_STRETCHED = 3,
    DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 4,
    DISPLAYCONFIG_SCALING_CUSTOM = 5,
    DISPLAYCONFIG_SCALING_PREFERRED = 128,
    DISPLAYCONFIG_SCALING_FORCE_UINT32 = 0xffffffff
} DISPLAYCONFIG_SCALING;

typedef enum
{
    DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0,
    DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3,
    DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = 0xffffffff
} DISPLAYCONFIG_SCANLINE_ORDERING;

typedef enum
{
    DISPLAYCONFIG_TOPOLOGY_INTERNAL = 0x00000001,
    DISPLAYCONFIG_TOPOLOGY_CLONE = 0x00000002,
    DISPLAYCONFIG_TOPOLOGY_EXTEND = 0x00000004,
    DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 0x00000008,
    DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = 0xffffffff
} DISPLAYCONFIG_TOPOLOGY_ID;

typedef enum
{
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = (int) -1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = (int) 0,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = (int) 1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = (int) 2,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = (int) 3,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = (int) 4,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = (int) 5,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = (int) 6,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = (int) 8,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = (int) 9,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = (int) 10,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = (int) 11,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = (int) 12,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = (int) 13,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = (int) 14,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST = (int) 15,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = (int) 0x80000000,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = (int) 0xffffffff
} DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY;

typedef enum
{
    DISPLAYCONFIG_COLOR_ENCODING_RGB = 0,
    DISPLAYCONFIG_COLOR_ENCODING_YCBCR444 = 1,
    DISPLAYCONFIG_COLOR_ENCODING_YCBCR422 = 2,
    DISPLAYCONFIG_COLOR_ENCODING_YCBCR420 = 3,
    DISPLAYCONFIG_COLOR_ENCODING_INTENSITY = 4,
    DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32 = 0xffffffff
} DISPLAYCONFIG_COLOR_ENCODING;

typedef struct DISPLAYCONFIG_2DREGION
{
    UINT32 cx;
    UINT32 cy;
} DISPLAYCONFIG_2DREGION;

typedef struct DISPLAYCONFIG_RATIONAL
{
    UINT32 Numerator;
    UINT32 Denominator;
} DISPLAYCONFIG_RATIONAL;

typedef struct DISPLAYCONFIG_PATH_SOURCE_INFO
{
    LUID adapterId;
    UINT32 id;
    union {
        UINT32 modeInfoIdx;
        struct {
            UINT32 cloneGroupId :16;
            UINT32 sourceModeInfoIdx :16;
        } ;
    } ;
    UINT32 statusFlags;
} DISPLAYCONFIG_PATH_SOURCE_INFO;

typedef struct DISPLAYCONFIG_SOURCE_MODE
{
    UINT32 width;
    UINT32 height;
    DISPLAYCONFIG_PIXELFORMAT pixelFormat;
    POINTL position;
} DISPLAYCONFIG_SOURCE_MODE;

typedef struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO
{
  UINT64 pixelRate;
  DISPLAYCONFIG_RATIONAL hSyncFreq;
  DISPLAYCONFIG_RATIONAL vSyncFreq;
  DISPLAYCONFIG_2DREGION activeSize;
  DISPLAYCONFIG_2DREGION totalSize;
  union {
      struct {
          UINT32 videoStandard :16;
          UINT32 vSyncFreqDivider :6;
          UINT32 reserved :10;
      } AdditionalSignalInfo;
      UINT32 videoStandard;
  } ;
  DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
} DISPLAYCONFIG_VIDEO_SIGNAL_INFO;

typedef struct DISPLAYCONFIG_PATH_TARGET_INFO
{
    LUID adapterId;
    UINT32 id;
    union {
        UINT32 modeInfoIdx;
        struct {
            UINT32 desktopModeInfoIdx :16;
            UINT32 targetModeInfoIdx :16;
        } ;
    } ;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
    DISPLAYCONFIG_ROTATION rotation;
    DISPLAYCONFIG_SCALING scaling;
    DISPLAYCONFIG_RATIONAL refreshRate;
    DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
    BOOL targetAvailable;
    UINT32 statusFlags;
} DISPLAYCONFIG_PATH_TARGET_INFO;

typedef struct DISPLAYCONFIG_TARGET_MODE
{
    DISPLAYCONFIG_VIDEO_SIGNAL_INFO targetVideoSignalInfo;
} DISPLAYCONFIG_TARGET_MODE;

typedef struct DISPLAYCONFIG_PATH_INFO
{
    DISPLAYCONFIG_PATH_SOURCE_INFO sourceInfo;
    DISPLAYCONFIG_PATH_TARGET_INFO targetInfo;
    UINT32 flags;
} DISPLAYCONFIG_PATH_INFO;

typedef struct DISPLAYCONFIG_MODE_INFO
{
    DISPLAYCONFIG_MODE_INFO_TYPE infoType;
    UINT32 id;
    LUID adapterId;
    union {
        DISPLAYCONFIG_TARGET_MODE targetMode;
        DISPLAYCONFIG_SOURCE_MODE sourceMode;
        DISPLAYCONFIG_DESKTOP_IMAGE_INFO desktopImageInfo;
    } ;
} DISPLAYCONFIG_MODE_INFO;

typedef struct DISPLAYCONFIG_SOURCE_DEVICE_NAME {
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    WCHAR                            viewGdiDeviceName[32];
} DISPLAYCONFIG_SOURCE_DEVICE_NAME;

typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS {
    union {
        struct {
            UINT32 friendlyNameFromEdid :1;
            UINT32 friendlyNameForced :1;
            UINT32 edidIdsValid :1;
            UINT32 reserved :29;
        } ;
        UINT32 value;
    } ;
} DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS;

typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME {
    DISPLAYCONFIG_DEVICE_INFO_HEADER       header;
    DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS flags;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY  outputTechnology;
    UINT16                                 edidManufactureId;
    UINT16                                 edidProductCodeId;
    UINT32                                 connectorInstance;
    WCHAR                                  monitorFriendlyDeviceName[64];
    WCHAR                                  monitorDevicePath[128];
} DISPLAYCONFIG_TARGET_DEVICE_NAME;

typedef struct DISPLAYCONFIG_TARGET_PREFERRED_MODE {
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    UINT32                           width;
    UINT32                           height;
    DISPLAYCONFIG_TARGET_MODE        targetMode;
} DISPLAYCONFIG_TARGET_PREFERRED_MODE;

typedef struct DISPLAYCONFIG_ADAPTER_NAME {
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    WCHAR                            adapterDevicePath[128];
} DISPLAYCONFIG_ADAPTER_NAME;

typedef struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE {
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union {
        struct {
            UINT32 bootPersistenceOn :1;
            UINT32 reserved :31;
        } ;
        UINT32 value;
    } ;
} DISPLAYCONFIG_SET_TARGET_PERSISTENCE;

typedef struct DISPLAYCONFIG_TARGET_BASE_TYPE {
    DISPLAYCONFIG_DEVICE_INFO_HEADER      header;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY baseOutputTechnology;
} DISPLAYCONFIG_TARGET_BASE_TYPE;

typedef struct DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION {
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union {
        struct {
            UINT32 disableMonitorVirtualResolution :1;
            UINT32 reserved :31;
        } ;
        UINT32 value;
    } ;
} DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION;

typedef struct DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO {
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union {
        struct {
            UINT32 advancedColorSupported :1;
            UINT32 advancedColorEnabled :1;
            UINT32 wideColorEnforced :1;
            UINT32 advancedColorForceDisabled :1;
            UINT32 reserved :28;
        } ;
        UINT32 value;
    } ;
    DISPLAYCONFIG_COLOR_ENCODING colorEncoding;
    UINT32                       bitsPerColorChannel;
} DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO;

typedef struct DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE {
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union {
        struct {
            UINT32 enableAdvancedColor :1;
            UINT32 reserved :31;
        } ;
        UINT32 value;
    } ;
} DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE;

typedef struct DISPLAYCONFIG_SDR_WHITE_LEVEL {
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    ULONG                            SDRWhiteLevel;
} DISPLAYCONFIG_SDR_WHITE_LEVEL;












typedef struct DISPLAYCONFIG_GET_SOURCE_DPI_SCALE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    int minRelativeScaleStep;   
    int curRelativeScaleStep;   
    int maxRelativeScaleStep;   
} DISPLAYCONFIG_GET_SOURCE_DPI_SCALE;

typedef struct DISPLAYCONFIG_SET_SOURCE_DPI_SCALE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    int relativeScaleStep;      
} DISPLAYCONFIG_SET_SOURCE_DPI_SCALE;








































typedef struct _DRAWPATRECT
{
    POINT ptPosition;
    POINT ptSize;
    WORD  wStyle;
    WORD  wPattern;
} DRAWPATRECT, *PDRAWPATRECT;

typedef struct tagWCRANGE {
  WCHAR  wcLow;
  USHORT cGlyphs;
} WCRANGE, *PWCRANGE, *LPWCRANGE;

typedef struct tagGLYPHSET {
  DWORD    cbThis;
  DWORD    flAccel;
  DWORD    cGlyphsSupported;
  DWORD    cRanges;
  WCRANGE  ranges[1];
} GLYPHSET, *PGLYPHSET, *LPGLYPHSET;



 INT          AbortDoc(HDC);
 BOOL         AbortPath(HDC);
 INT          AddFontResourceA(LPCSTR);
 INT          AddFontResourceW(LPCWSTR);

 INT          AddFontResourceExA(LPCSTR, DWORD, PVOID);
 INT          AddFontResourceExW(LPCWSTR, DWORD, PVOID);

 HANDLE       AddFontMemResourceEx(PVOID, DWORD, PVOID, DWORD *);
 BOOL         AlphaBlend(HDC,int,int,int,int,HDC,int,int,int,int,BLENDFUNCTION);
 BOOL         AngleArc(HDC, INT, INT, DWORD, FLOAT, FLOAT);
 BOOL         AnimatePalette(HPALETTE,UINT,UINT,const PALETTEENTRY*);
 BOOL         Arc(HDC,INT,INT,INT,INT,INT,INT,INT,INT);
 BOOL         ArcTo(HDC, INT, INT, INT, INT, INT, INT, INT, INT);
 BOOL         BeginPath(HDC);
 BOOL         BitBlt(HDC,INT,INT,INT,INT,HDC,INT,INT,DWORD);
 INT          ChoosePixelFormat(HDC,const PIXELFORMATDESCRIPTOR*);
 BOOL         Chord(HDC,INT,INT,INT,INT,INT,INT,INT,INT);
 HENHMETAFILE  CloseEnhMetaFile(HDC);
 BOOL         CloseFigure(HDC);
 HMETAFILE    CloseMetaFile(HDC);
 INT          CombineRgn(HRGN,HRGN,HRGN,INT);
 BOOL         CombineTransform(LPXFORM,const XFORM *,const XFORM *);
 HENHMETAFILE  CopyEnhMetaFileA(HENHMETAFILE,LPCSTR);
 HENHMETAFILE  CopyEnhMetaFileW(HENHMETAFILE,LPCWSTR);

 HMETAFILE    CopyMetaFileA(HMETAFILE,LPCSTR);
 HMETAFILE    CopyMetaFileW(HMETAFILE,LPCWSTR);

 HBITMAP      CreateBitmap(INT,INT,UINT,UINT,LPCVOID);
 HBITMAP      CreateBitmapIndirect(const BITMAP*);
 HBRUSH       CreateBrushIndirect(const LOGBRUSH*);
 HCOLORSPACE  CreateColorSpaceA(LPLOGCOLORSPACEA);
 HCOLORSPACE  CreateColorSpaceW(LPLOGCOLORSPACEW);

 HBITMAP      CreateCompatibleBitmap(HDC,INT,INT);
 HDC          CreateCompatibleDC(HDC);
 HDC          CreateDCA(LPCSTR,LPCSTR,LPCSTR,const DEVMODEA*);
 HDC          CreateDCW(LPCWSTR,LPCWSTR,LPCWSTR,const DEVMODEW*);

 HBITMAP      CreateDIBitmap(HDC,const BITMAPINFOHEADER*,DWORD,LPCVOID,const BITMAPINFO*,UINT);
 HBRUSH       CreateDIBPatternBrush(HGLOBAL,UINT);
 HBRUSH       CreateDIBPatternBrushPt(const void*,UINT);
 HBITMAP      CreateDIBSection(HDC, const BITMAPINFO *, UINT, void **, HANDLE, DWORD offset);
 HBITMAP      CreateDiscardableBitmap(HDC,INT,INT);
 HRGN         CreateEllipticRgn(INT,INT,INT,INT);
 HRGN         CreateEllipticRgnIndirect(const RECT *);
 HDC          CreateEnhMetaFileA(HDC,LPCSTR,const RECT*,LPCSTR);
 HDC          CreateEnhMetaFileW(HDC,LPCWSTR,const RECT*,LPCWSTR);

 HFONT        CreateFontA(INT,INT,INT,INT,INT,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,LPCSTR);
 HFONT        CreateFontW(INT,INT,INT,INT,INT,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,DWORD,LPCWSTR);

 HFONT        CreateFontIndirectA(const LOGFONTA*);
 HFONT        CreateFontIndirectW(const LOGFONTW*);

 HFONT        CreateFontIndirectExA(const ENUMLOGFONTEXDVA*);
 HFONT        CreateFontIndirectExW(const ENUMLOGFONTEXDVW*);

 HPALETTE     CreateHalftonePalette(HDC);
 HBRUSH       CreateHatchBrush(INT,COLORREF);
 HDC          CreateICA(LPCSTR,LPCSTR,LPCSTR,const DEVMODEA*);
 HDC          CreateICW(LPCWSTR,LPCWSTR,LPCWSTR,const DEVMODEW*);

 HDC          CreateMetaFileA(LPCSTR);
 HDC          CreateMetaFileW(LPCWSTR);

 HPALETTE     CreatePalette(const LOGPALETTE*);
 HBRUSH       CreatePatternBrush(HBITMAP);
 HPEN         CreatePen(INT,INT,COLORREF);
 HPEN         CreatePenIndirect(const LOGPEN*);
 HRGN         CreatePolyPolygonRgn(const POINT*,const INT*,INT,INT);
 HRGN         CreatePolygonRgn(const POINT*,INT,INT);
 HRGN         CreateRectRgn(INT,INT,INT,INT);
 HRGN         CreateRectRgnIndirect(const RECT*);
 HRGN         CreateRoundRectRgn(INT,INT,INT,INT,INT,INT);
 BOOL         CreateScalableFontResourceA(DWORD,LPCSTR,LPCSTR,LPCSTR);
 BOOL         CreateScalableFontResourceW(DWORD,LPCWSTR,LPCWSTR,LPCWSTR);

 HBRUSH       CreateSolidBrush(COLORREF);
 BOOL         DPtoLP(HDC,LPPOINT,INT);
 BOOL         DeleteColorSpace(HCOLORSPACE);
 BOOL         DeleteDC(HDC);
 BOOL         DeleteEnhMetaFile(HENHMETAFILE);
 BOOL         DeleteMetaFile(HMETAFILE);
 BOOL         DeleteObject(HGDIOBJ);
 INT          DescribePixelFormat(HDC,int,UINT,LPPIXELFORMATDESCRIPTOR);
 INT          DrawEscape(HDC,INT,INT,LPCSTR);
 BOOL         Ellipse(HDC,INT,INT,INT,INT);
 INT          EndDoc(HDC);
 BOOL         EndPath(HDC);
 BOOL         EnumEnhMetaFile(HDC,HENHMETAFILE,ENHMFENUMPROC,LPVOID,const RECT*);
 INT          EnumFontFamiliesA(HDC,LPCSTR,FONTENUMPROCA,LPARAM);
 INT          EnumFontFamiliesW(HDC,LPCWSTR,FONTENUMPROCW,LPARAM);

 INT          EnumFontFamiliesExA(HDC,LPLOGFONTA,FONTENUMPROCA,LPARAM,DWORD);
 INT          EnumFontFamiliesExW(HDC,LPLOGFONTW,FONTENUMPROCW,LPARAM,DWORD);

 INT          EnumFontsA(HDC,LPCSTR,FONTENUMPROCA,LPARAM);
 INT          EnumFontsW(HDC,LPCWSTR,FONTENUMPROCW,LPARAM);

 INT          EnumICMProfilesA(HDC,ICMENUMPROCA,LPARAM);
 INT          EnumICMProfilesW(HDC,ICMENUMPROCW,LPARAM);

 BOOL         EnumMetaFile(HDC,HMETAFILE,MFENUMPROC,LPARAM);
 INT          EnumObjects(HDC,INT,GOBJENUMPROC,LPARAM);
 BOOL         EqualRgn(HRGN,HRGN);
 INT          Escape(HDC,INT,INT,LPCSTR,LPVOID);
 INT          ExcludeClipRect(HDC,INT,INT,INT,INT);
 HPEN         ExtCreatePen(DWORD,DWORD,const LOGBRUSH*,DWORD,const DWORD*);
 HRGN         ExtCreateRegion(const XFORM*,DWORD,const RGNDATA*);
 INT          ExtEscape(HDC,INT,INT,LPCSTR,INT,LPSTR);
 BOOL         ExtFloodFill(HDC,INT,INT,COLORREF,UINT);
 INT          ExtSelectClipRgn(HDC,HRGN,INT);
 BOOL         ExtTextOutA(HDC,INT,INT,UINT,const RECT*,LPCSTR,UINT,const INT*);
 BOOL         ExtTextOutW(HDC,INT,INT,UINT,const RECT*,LPCWSTR,UINT,const INT*);

 BOOL         FillPath(HDC);
 BOOL         FillRgn(HDC,HRGN,HBRUSH);
 BOOL         FixBrushOrgEx(HDC,INT,INT,LPPOINT);
 BOOL         FlattenPath(HDC);
 BOOL         FloodFill(HDC,INT,INT,COLORREF);
 BOOL         FrameRgn(HDC,HRGN,HBRUSH,INT,INT);
 BOOL         GdiAlphaBlend(HDC,int,int,int,int,HDC,int,int,int,int,BLENDFUNCTION);
 BOOL         GdiComment(HDC,UINT,const BYTE *);
 DEVMODEW *   GdiConvertToDevmodeW(const DEVMODEA *);
 BOOL         GdiFlush(void);
 DWORD        GdiGetBatchLimit(void);
 LONG         GdiGetCharDimensions(HDC, LPTEXTMETRICW, LONG *);
 DWORD        GdiGetCodePage(HDC);
 BOOL         GdiGradientFill(HDC,PTRIVERTEX,ULONG,PVOID,ULONG,ULONG);
 BOOL         GdiIsMetaFileDC(HDC);
 BOOL         GdiIsMetaPrintDC(HDC);
 BOOL         GdiIsPlayMetafileDC(HDC);
 DWORD        GdiSetBatchLimit(DWORD);
 BOOL         GdiTransparentBlt(HDC,int,int,int,int,HDC,int,int,int,int,UINT);
 INT          GetArcDirection(HDC);
 BOOL         GetAspectRatioFilterEx(HDC,LPSIZE);
 LONG         GetBitmapBits(HBITMAP,LONG,LPVOID);
 BOOL         GetBitmapDimensionEx(HBITMAP,LPSIZE);
 BOOL         GetBrushOrgEx(HDC,LPPOINT);
 COLORREF     GetBkColor(HDC);
 INT          GetBkMode(HDC);
 UINT         GetBoundsRect(HDC,LPRECT,UINT);
 BOOL         GetCharABCWidthsA(HDC,UINT,UINT,LPABC);
 BOOL         GetCharABCWidthsW(HDC,UINT,UINT,LPABC);

 BOOL         GetCharABCWidthsFloatA(HDC,UINT,UINT,LPABCFLOAT);
 BOOL         GetCharABCWidthsFloatW(HDC,UINT,UINT,LPABCFLOAT);

 BOOL         GetCharABCWidthsI(HDC,UINT,UINT,LPWORD,LPABC);
 DWORD        GetCharacterPlacementA(HDC,LPCSTR,INT,INT,GCP_RESULTSA*,DWORD);
 DWORD        GetCharacterPlacementW(HDC,LPCWSTR,INT,INT,GCP_RESULTSW*,DWORD);

 BOOL         GetCharWidth32A(HDC,UINT,UINT,LPINT);
 BOOL         GetCharWidth32W(HDC,UINT,UINT,LPINT);

 BOOL         GetCharWidthA(HDC,UINT,UINT,LPINT);
 BOOL         GetCharWidthI(HDC,UINT,UINT,LPWORD,LPINT);
 BOOL         GetCharWidthW(HDC,UINT,UINT,LPINT);

 BOOL         GetCharWidthFloatA(HDC,UINT,UINT,PFLOAT);
 BOOL         GetCharWidthFloatW(HDC,UINT,UINT,PFLOAT);

 INT          GetClipBox(HDC,LPRECT);
 INT          GetClipRgn(HDC,HRGN);
 BOOL         GetColorAdjustment(HDC, LPCOLORADJUSTMENT);
 HCOLORSPACE  GetColorSpace(HDC);
 HGDIOBJ      GetCurrentObject(HDC,UINT);
 BOOL         GetCurrentPositionEx(HDC,LPPOINT);
 INT          GetDeviceCaps(HDC,INT);
 BOOL         GetDeviceGammaRamp(HDC,LPVOID);
 COLORREF     GetDCBrushColor(HDC);
 BOOL         GetDCOrgEx(HDC,LPPOINT);
 COLORREF     GetDCPenColor(HDC);
 UINT         GetDIBColorTable(HDC,UINT,UINT,RGBQUAD*);
 INT          GetDIBits(HDC,HBITMAP,UINT,UINT,LPVOID,LPBITMAPINFO,UINT);
 HENHMETAFILE  GetEnhMetaFileA(LPCSTR);
 HENHMETAFILE  GetEnhMetaFileW(LPCWSTR);

 UINT         GetEnhMetaFileBits(HENHMETAFILE,UINT,LPBYTE);
 UINT         GetEnhMetaFileDescriptionA(HENHMETAFILE,UINT,LPSTR);
 UINT         GetEnhMetaFileDescriptionW(HENHMETAFILE,UINT,LPWSTR);

 UINT         GetEnhMetaFileHeader(HENHMETAFILE,UINT,LPENHMETAHEADER);
 UINT         GetEnhMetaFilePaletteEntries(HENHMETAFILE,UINT,LPPALETTEENTRY);
 DWORD        GetFontData(HDC,DWORD,DWORD,LPVOID,DWORD);
 DWORD        GetFontLanguageInfo(HDC);
 DWORD        GetFontUnicodeRanges(HDC,LPGLYPHSET);
 DWORD        GetGlyphIndicesA(HDC,LPCSTR,INT,LPWORD,DWORD);
 DWORD        GetGlyphIndicesW(HDC,LPCWSTR,INT,LPWORD,DWORD);

 DWORD        GetGlyphOutlineA(HDC,UINT,UINT,LPGLYPHMETRICS,DWORD,LPVOID,const MAT2*);
 DWORD        GetGlyphOutlineW(HDC,UINT,UINT,LPGLYPHMETRICS,DWORD,LPVOID,const MAT2*);

 INT          GetGraphicsMode(HDC);
 BOOL         GetICMProfileA(HDC,LPDWORD,LPSTR);
 BOOL         GetICMProfileW(HDC,LPDWORD,LPWSTR);

 DWORD        GetKerningPairsA(HDC,DWORD,LPKERNINGPAIR);
 DWORD        GetKerningPairsW(HDC,DWORD,LPKERNINGPAIR);

 DWORD        GetLayout(HDC);
 BOOL         GetLogColorSpaceA(HCOLORSPACE,LPLOGCOLORSPACEA,DWORD);
 BOOL         GetLogColorSpaceW(HCOLORSPACE,LPLOGCOLORSPACEW,DWORD);

 INT          GetMapMode(HDC);
 HMETAFILE    GetMetaFileA(LPCSTR);
 HMETAFILE    GetMetaFileW(LPCWSTR);

 UINT         GetMetaFileBitsEx(HMETAFILE,UINT,LPVOID);
 INT          GetMetaRgn(HDC,HRGN);
 BOOL         GetMiterLimit(HDC, PFLOAT);
 DWORD        GetNearestColor(HDC,DWORD);
 UINT         GetNearestPaletteIndex(HPALETTE,COLORREF);
 INT          GetObjectA(HGDIOBJ,INT,LPVOID);
 INT          GetObjectW(HGDIOBJ,INT,LPVOID);

 DWORD        GetObjectType(HGDIOBJ);
 UINT         GetOutlineTextMetricsA(HDC,UINT,LPOUTLINETEXTMETRICA);
 UINT         GetOutlineTextMetricsW(HDC,UINT,LPOUTLINETEXTMETRICW);

 UINT         GetPaletteEntries(HPALETTE,UINT,UINT,LPPALETTEENTRY);
 INT          GetPath(HDC,LPPOINT,LPBYTE,INT);
 COLORREF     GetPixel(HDC,INT,INT);
 INT          GetPixelFormat(HDC);
 INT          GetPolyFillMode(HDC);
 INT          GetRandomRgn(HDC,HRGN,INT);
 BOOL         GetRasterizerCaps(LPRASTERIZER_STATUS,UINT);
 DWORD        GetRegionData(HRGN,DWORD,LPRGNDATA);
 INT          GetRelAbs(HDC,DWORD);
 INT          GetRgnBox(HRGN,LPRECT);
 INT          GetROP2(HDC);
 HGDIOBJ      GetStockObject(INT);
 INT          GetStretchBltMode(HDC);
 UINT         GetSystemPaletteEntries(HDC,UINT,UINT,LPPALETTEENTRY);
 UINT         GetSystemPaletteUse(HDC);
 UINT         GetTextAlign(HDC);
 INT          GetTextCharacterExtra(HDC);
 UINT         GetTextCharset(HDC);
 UINT         GetTextCharsetInfo(HDC,LPFONTSIGNATURE,DWORD);
 COLORREF     GetTextColor(HDC);
 BOOL         GetTextExtentExPointA(HDC,LPCSTR,INT,INT,LPINT,LPINT,LPSIZE);
 BOOL         GetTextExtentExPointW(HDC,LPCWSTR,INT,INT,LPINT,LPINT,LPSIZE);

 BOOL         GetTextExtentPointA(HDC,LPCSTR,INT,LPSIZE);
 BOOL         GetTextExtentPointW(HDC,LPCWSTR,INT,LPSIZE);

 BOOL         GetTextExtentPoint32A(HDC,LPCSTR,INT,LPSIZE);
 BOOL         GetTextExtentPoint32W(HDC,LPCWSTR,INT,LPSIZE);

 BOOL         GetTextExtentExPointI(HDC,const WORD*,INT,INT,LPINT,LPINT,LPSIZE);
 BOOL         GetTextExtentPointI(HDC,const WORD*,INT,LPSIZE);
 INT          GetTextFaceA(HDC,INT,LPSTR);
 INT          GetTextFaceW(HDC,INT,LPWSTR);

 BOOL         GetTextMetricsA(HDC,LPTEXTMETRICA);
 BOOL         GetTextMetricsW(HDC,LPTEXTMETRICW);

 BOOL         GetTransform(HDC,DWORD,XFORM*);
 BOOL         GetViewportExtEx(HDC,LPSIZE);
 BOOL         GetViewportOrgEx(HDC,LPPOINT);
 BOOL         GetWindowExtEx(HDC,LPSIZE);
 BOOL         GetWindowOrgEx(HDC,LPPOINT);
 UINT         GetWinMetaFileBits(HENHMETAFILE,UINT,LPBYTE,INT,HDC);
 BOOL         GetWorldTransform(HDC,LPXFORM);
 BOOL         GradientFill(HDC,PTRIVERTEX,ULONG,PVOID,ULONG,ULONG);
 INT          IntersectClipRect(HDC,INT,INT,INT,INT);
 BOOL         InvertRgn(HDC,HRGN);
 BOOL         LineDDA(INT,INT,INT,INT,LINEDDAPROC,LPARAM);
 BOOL         LineTo(HDC,INT,INT);
 BOOL         LPtoDP(HDC,LPPOINT,INT);
 BOOL         MaskBlt(HDC,INT,INT,INT,INT,HDC,INT,INT,HBITMAP,INT,INT,DWORD);
 BOOL         MirrorRgn(HWND,HRGN);
 BOOL         ModifyWorldTransform(HDC,const XFORM *, DWORD);
 BOOL         MoveToEx(HDC,INT,INT,LPPOINT);
 INT          OffsetClipRgn(HDC,INT,INT);
 INT          OffsetRgn(HRGN,INT,INT);
 BOOL         OffsetViewportOrgEx(HDC,INT,INT,LPPOINT);
 BOOL         OffsetWindowOrgEx(HDC,INT,INT,LPPOINT);
 BOOL         PaintRgn(HDC,HRGN);
 BOOL         PatBlt(HDC,INT,INT,INT,INT,DWORD);
 HRGN         PathToRegion(HDC);
 BOOL         Pie(HDC,INT,INT,INT,INT,INT,INT,INT,INT);
 BOOL         PlayEnhMetaFile(HDC,HENHMETAFILE,const RECT*);
 BOOL         PlayEnhMetaFileRecord(HDC,LPHANDLETABLE,const ENHMETARECORD*,UINT);
 BOOL         PlayMetaFile(HDC,HMETAFILE);
 BOOL         PlayMetaFileRecord(HDC,LPHANDLETABLE,LPMETARECORD,UINT);
 BOOL         PlgBlt(HDC,const POINT*,HDC,INT,INT,INT,INT,HBITMAP,INT,INT);
 BOOL         PolyBezier(HDC,const POINT*,DWORD);
 BOOL         PolyBezierTo(HDC,const POINT*,DWORD);
 BOOL         PolyDraw(HDC,const POINT*,const BYTE*,DWORD);
 BOOL         PolyPolygon(HDC,const POINT*,const INT*,UINT);
 BOOL         PolyPolyline(HDC,const POINT*,const DWORD*,DWORD);
 BOOL         Polygon(HDC,const POINT*,INT);
 BOOL         Polyline(HDC,const POINT*,INT);
 BOOL         PolylineTo(HDC,const POINT*,DWORD);
 BOOL         PtInRegion(HRGN,INT,INT);
 BOOL         PtVisible(HDC,INT,INT);
 UINT         RealizePalette(HDC);
 BOOL         Rectangle(HDC,INT,INT,INT,INT);
 BOOL         RectInRegion(HRGN,const RECT *);
 BOOL         RectVisible(HDC,const RECT*);
 BOOL         RemoveFontMemResourceEx(HANDLE);
 BOOL         RemoveFontResourceA(LPCSTR);
 BOOL         RemoveFontResourceW(LPCWSTR);

 BOOL         RemoveFontResourceExA(LPCSTR, DWORD, PVOID);
 BOOL         RemoveFontResourceExW(LPCWSTR, DWORD, PVOID);

 HDC          ResetDCA(HDC,const DEVMODEA *);
 HDC          ResetDCW(HDC,const DEVMODEW *);

 BOOL         ResizePalette(HPALETTE,UINT);
 BOOL         RestoreDC(HDC,INT);
 BOOL         RoundRect(HDC,INT,INT,INT,INT,INT,INT);
 INT          SaveDC(HDC);
 BOOL         ScaleViewportExtEx(HDC,INT,INT,INT,INT,LPSIZE);
 BOOL         ScaleWindowExtEx(HDC,INT,INT,INT,INT,LPSIZE);
 BOOL         SelectClipPath(HDC,INT);
 INT          SelectClipRgn(HDC,HRGN);
 HGDIOBJ      SelectObject(HDC,HGDIOBJ);
 HPALETTE     SelectPalette(HDC,HPALETTE,BOOL);
 INT          SetAbortProc(HDC,ABORTPROC);
 INT          SetArcDirection(HDC,INT);
 LONG         SetBitmapBits(HBITMAP,LONG,LPCVOID);
 BOOL         SetBitmapDimensionEx(HBITMAP,INT,INT,LPSIZE);
 COLORREF     SetBkColor(HDC,COLORREF);
 INT          SetBkMode(HDC,INT);
 UINT         SetBoundsRect(HDC,const RECT*,UINT);
 BOOL         SetBrushOrgEx(HDC,INT,INT,LPPOINT);
 BOOL         SetColorAdjustment(HDC,const COLORADJUSTMENT*);
 HCOLORSPACE  SetColorSpace(HDC,HCOLORSPACE);
 BOOL         SetDeviceGammaRamp(HDC,LPVOID);
 COLORREF     SetDCBrushColor(HDC,COLORREF);
 COLORREF     SetDCPenColor(HDC, COLORREF);
 UINT         SetDIBColorTable(HDC,UINT,UINT,const RGBQUAD*);
 INT          SetDIBits(HDC,HBITMAP,UINT,UINT,LPCVOID,const BITMAPINFO*,UINT);
 INT          SetDIBitsToDevice(HDC,INT,INT,DWORD,DWORD,INT,INT,UINT,UINT,LPCVOID,const BITMAPINFO*,UINT);
 HENHMETAFILE  SetEnhMetaFileBits(UINT,const BYTE *);
 INT          SetGraphicsMode(HDC,INT);
 INT          SetICMMode(HDC,INT);
 BOOL         SetICMProfileA(HDC,LPSTR);
 BOOL         SetICMProfileW(HDC,LPWSTR);

 DWORD        SetLayout(HDC,DWORD);
 INT          SetMapMode(HDC,INT);
 DWORD        SetMapperFlags(HDC,DWORD);
 HMETAFILE    SetMetaFileBitsEx(UINT,const BYTE*);
 INT          SetMetaRgn(HDC);
 BOOL         SetMiterLimit(HDC, FLOAT, PFLOAT);
 UINT         SetPaletteEntries(HPALETTE,UINT,UINT,const PALETTEENTRY*);
 COLORREF     SetPixel(HDC,INT,INT,COLORREF);
 BOOL         SetPixelV(HDC,INT,INT,COLORREF);
 BOOL         SetPixelFormat(HDC,int,const PIXELFORMATDESCRIPTOR*);
 INT          SetPolyFillMode(HDC,INT);
 BOOL         SetRectRgn(HRGN,INT,INT,INT,INT);
 INT          SetRelAbs(HDC,INT);
 INT          SetROP2(HDC,INT);
 INT          SetStretchBltMode(HDC,INT);
 UINT         SetSystemPaletteUse(HDC,UINT);
 UINT         SetTextAlign(HDC,UINT);
 INT          SetTextCharacterExtra(HDC,INT);
 COLORREF     SetTextColor(HDC,COLORREF);
 BOOL         SetTextJustification(HDC,INT,INT);
 BOOL         SetViewportExtEx(HDC,INT,INT,LPSIZE);
 BOOL         SetViewportOrgEx(HDC,INT,INT,LPPOINT);
 BOOL         SetWindowExtEx(HDC,INT,INT,LPSIZE);
 BOOL         SetWindowOrgEx(HDC,INT,INT,LPPOINT);
 HENHMETAFILE  SetWinMetaFileBits(UINT,const BYTE*,HDC,const METAFILEPICT *);
 BOOL         SetWorldTransform(HDC,const XFORM*);
 INT          StartDocA(HDC,const DOCINFOA*);
 INT          StartDocW(HDC,const DOCINFOW*);

 INT          StartPage(HDC);
 INT          EndPage(HDC);
 BOOL         StretchBlt(HDC,INT,INT,INT,INT,HDC,INT,INT,INT,INT,DWORD);
 INT          StretchDIBits(HDC,INT,INT,INT,INT,INT,INT,INT,INT,const void*,const BITMAPINFO*,UINT,DWORD);
 BOOL         StrokeAndFillPath(HDC);
 BOOL         StrokePath(HDC);
 BOOL         SwapBuffers(HDC);
 BOOL         TextOutA(HDC,INT,INT,LPCSTR,INT);
 BOOL         TextOutW(HDC,INT,INT,LPCWSTR,INT);

 BOOL         TranslateCharsetInfo(LPDWORD,LPCHARSETINFO,DWORD);
 BOOL         TransparentBlt(HDC,int,int,int,int,HDC,int,int,int,int,UINT);
 BOOL         UnrealizeObject(HGDIOBJ);
 BOOL         UpdateColors(HDC);
 BOOL         UpdateICMRegKeyA(DWORD,LPSTR,LPSTR,UINT);
 BOOL         UpdateICMRegKeyW(DWORD,LPWSTR,LPWSTR,UINT);

 BOOL         WidenPath(HDC);
 BOOL         PolyTextOutA(HDC,const POLYTEXTA*,INT);
 BOOL         PolyTextOutW(HDC,const POLYTEXTW*,INT);






































typedef struct _WGLSWAP
{
    HDC hdc;
    UINT uiFlags;
} WGLSWAP, *PWGLSWAP, *LPWGLSWAP;




 HGLRC    wglCreateContext(HDC);
 HGLRC    wglCreateLayerContext(HDC,INT);
 BOOL     wglCopyContext(HGLRC,HGLRC,UINT);
 BOOL     wglDeleteContext(HGLRC);
 BOOL     wglDescribeLayerPlane(HDC,INT,INT,UINT,LPLAYERPLANEDESCRIPTOR);
 HGLRC    wglGetCurrentContext(void);
 HDC      wglGetCurrentDC(void);
 INT      wglGetLayerPaletteEntries(HDC,INT,INT,INT,COLORREF *);
 PROC     wglGetProcAddress(LPCSTR);
 BOOL     wglMakeCurrent(HDC,HGLRC);
 BOOL     wglRealizeLayerPalette(HDC,INT,BOOL);
 INT      wglSetLayerPaletteEntries(HDC,INT,INT,INT,const COLORREF *);
 BOOL     wglShareLists(HGLRC,HGLRC);
 BOOL     wglSwapLayerBuffers(HDC,UINT);
 DWORD    wglSwapMultipleBuffers(UINT,const WGLSWAP *);
 BOOL     wglUseFontBitmapsA(HDC,DWORD,DWORD,DWORD);
 BOOL     wglUseFontBitmapsW(HDC,DWORD,DWORD,DWORD);

 BOOL     wglUseFontOutlinesA(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,INT,LPGLYPHMETRICSFLOAT);
 BOOL     wglUseFontOutlinesW(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,INT,LPGLYPHMETRICSFLOAT);








# 40 "include/windows.h" 2

# 1 "include/winuser.h" 1 3































# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdarg.h" 1 3












































































































































# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/_mingw_stdarg.h" 1 3






































# 141 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdarg.h" 2

# 32 "include/winuser.h" 2


# 1 "include/winuser.rh" 1 3

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 34 "include/winuser.h" 2









typedef INT_PTR ( *DLGPROC)(HWND,UINT,WPARAM,LPARAM);
typedef BOOL    ( *DRAWSTATEPROC)(HDC,LPARAM,WPARAM,int,int);
typedef INT     ( *EDITWORDBREAKPROCA)(LPSTR,INT,INT,INT);
typedef INT     ( *EDITWORDBREAKPROCW)(LPWSTR,INT,INT,INT);
typedef BOOL    ( *GRAYSTRINGPROC)(HDC,LPARAM,INT);
typedef LRESULT ( *HOOKPROC)(INT,WPARAM,LPARAM);
typedef BOOL    ( *NAMEENUMPROCA)(LPSTR,LPARAM);
typedef BOOL    ( *NAMEENUMPROCW)(LPWSTR,LPARAM);
typedef BOOL    ( *PROPENUMPROCA)(HWND,LPCSTR,HANDLE);
typedef BOOL    ( *PROPENUMPROCW)(HWND,LPCWSTR,HANDLE);
typedef BOOL    ( *PROPENUMPROCEXA)(HWND,LPSTR,HANDLE,ULONG_PTR);
typedef BOOL    ( *PROPENUMPROCEXW)(HWND,LPWSTR,HANDLE,ULONG_PTR);
typedef void    ( *SENDASYNCPROC)(HWND,UINT,ULONG_PTR,LRESULT);
typedef void    ( *TIMERPROC)(HWND,UINT,UINT_PTR,DWORD);
typedef void    ( *WINEVENTPROC)(HWINEVENTHOOK,DWORD,HWND,LONG,LONG,
                                         DWORD,DWORD);
typedef BOOL    ( *WNDENUMPROC)(HWND,LPARAM);




















typedef NAMEENUMPROCA WINSTAENUMPROCA;
typedef NAMEENUMPROCA DESKTOPENUMPROCA;
typedef NAMEENUMPROCW WINSTAENUMPROCW;
typedef NAMEENUMPROCW DESKTOPENUMPROCW;

typedef LRESULT ( *WNDPROC)(HWND,UINT,WPARAM,LPARAM);









typedef HANDLE HDWP;
typedef void* HPOWERNOTIFY;











typedef struct tagUSEROBJECTFLAGS {
    BOOL fInherit;
    BOOL fReserved;
    DWORD dwFlags;
} USEROBJECTFLAGS, *PUSEROBJECTFLAGS;

typedef struct tagBSMINFO {
    UINT  cbSize;
    HDESK hdesk;
    HWND  hwnd;
    LUID  luid;
} BSMINFO, *PBSMINFO;


































typedef struct tagFILTERKEYS
{
    UINT   cbSize;
    DWORD  dwFlags;
    DWORD  iWaitMSec;
    DWORD  iDelayMSec;
    DWORD  iRepeatMSec;
    DWORD  iBounceMSec;
} FILTERKEYS, *LPFILTERKEYS;








typedef struct tagTOGGLEKEYS
{
    DWORD   cbSize;
    DWORD   dwFlags;
} TOGGLEKEYS, *LPTOGGLEKEYS;











typedef struct tagMOUSEKEYS
{
    UINT    cbSize;
    DWORD   dwFlags;
    DWORD   iMaxSpeed;
    DWORD   iTimeToMaxSpeed;
    DWORD   iCtrlSpeed;
    DWORD   dwReserved1;
    DWORD   dwReserved2;
} MOUSEKEYS, *LPMOUSEKEYS;





typedef struct tagMOUSEMOVEPOINT {
    int x;
    int y;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MOUSEMOVEPOINT,*PMOUSEMOVEPOINT,*LPMOUSEMOVEPOINT;












typedef struct tagSTICKYKEYS
{
    DWORD   cbSize;
    DWORD   dwFlags;
} STICKYKEYS, *LPSTICKYKEYS;






typedef struct tagACCESSTIMEOUT
{
    UINT    cbSize;
    DWORD   dwFlags;
    DWORD   iTimeOutMSec;
} ACCESSTIMEOUT, *LPACCESSTIMEOUT;







typedef struct tagSERIALKEYSA
{
    UINT  cbSize;
    DWORD  dwFlags;
    LPSTR  lpszActivePort;
    LPSTR  lpszPort;
    UINT  iBaudRate;
    UINT  iPortState;
    UINT  iActive;
} SERIALKEYSA, *LPSERIALKEYSA;

typedef struct tagSERIALKEYSW {
    UINT  cbSize;
    DWORD   dwFlags;
    LPWSTR  lpszActivePort;
    LPWSTR  lpszPort;
    UINT   iBaudRate;
    UINT   iPortState;
    UINT   iActive;
} SERIALKEYSW,*LPSERIALKEYSW;





















typedef struct tagSOUNDSENTRYA
{
    UINT  cbSize;
    DWORD  dwFlags;
    DWORD  iFSTextEffect;
    DWORD  iFSTextEffectMSec;
    DWORD  iFSTextEffectColorBits;
    DWORD  iFSGrafEffect;
    DWORD  iFSGrafEffectMSec;
    DWORD  iFSGrafEffectColor;
    DWORD  iWindowsEffect;
    DWORD  iWindowsEffectMSec;
    LPSTR  lpszWindowsEffectDLL;
    DWORD  iWindowsEffectOrdinal;
} SOUNDSENTRYA, *LPSOUNDSENTRYA;

typedef struct tagSOUNDSENTRYW
{
    UINT  cbSize;
    DWORD  dwFlags;
    DWORD  iFSTextEffect;
    DWORD  iFSTextEffectMSec;
    DWORD  iFSTextEffectColorBits;
    DWORD  iFSGrafEffect;
    DWORD  iFSGrafEffectMSec;
    DWORD  iFSGrafEffectColor;
    DWORD  iWindowsEffect;
    DWORD  iWindowsEffectMSec;
    LPWSTR  lpszWindowsEffectDLL;
    DWORD  iWindowsEffectOrdinal;
} SOUNDSENTRYW, *LPSOUNDSENTRYW;













typedef struct tagHIGHCONTRASTA
{
    UINT  cbSize;
    DWORD   dwFlags;
    LPSTR   lpszDefaultScheme;
} HIGHCONTRASTA, *LPHIGHCONTRASTA;

typedef struct tagHIGHCONTRASTW
{
    UINT  cbSize;
    DWORD   dwFlags;
    LPWSTR  lpszDefaultScheme;
} HIGHCONTRASTW, *LPHIGHCONTRASTW;




typedef struct tagEVENTMSG
{
    UINT  message;
    UINT  paramL;
    UINT  paramH;
    DWORD   time;
    HWND  hwnd;
} EVENTMSG, *PEVENTMSG, *LPEVENTMSG;


typedef struct tagKBDLLHOOKSTRUCT
{
    DWORD   vkCode;
    DWORD   scanCode;
    DWORD   flags;
    DWORD   time;
    ULONG_PTR dwExtraInfo;
} KBDLLHOOKSTRUCT, *LPKBDLLHOOKSTRUCT, *PKBDLLHOOKSTRUCT;







typedef struct tagMSLLHOOKSTRUCT
{
    POINT   pt;
    DWORD   mouseData;
    DWORD   flags;
    DWORD   time;
    ULONG_PTR dwExtraInfo;
} MSLLHOOKSTRUCT, *LPMSLLHOOKSTRUCT, *PMSLLHOOKSTRUCT;



    

typedef struct
{
    POINT pt;
    HWND  hwnd;
    UINT  wHitTestCode;
    ULONG_PTR dwExtraInfo;
} MOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT, *LPMOUSEHOOKSTRUCT;

typedef struct
{
    struct { 
        POINT pt;
        HWND  hwnd;
        UINT  wHitTestCode;
        ULONG_PTR dwExtraInfo;
    } ;
    DWORD mouseData;
} MOUSEHOOKSTRUCTEX, *PMOUSEHOOKSTRUCTEX, *LPMOUSEHOOKSTRUCTEX;


    

typedef struct
{
    HWND    hwnd;
    UINT    message;
    WPARAM  wParam;
    LPARAM  lParam;
} HARDWAREHOOKSTRUCT, *PHARDWAREHOOKSTRUCT, *LPHARDWAREHOOKSTRUCT;


  

typedef struct tagDEBUGHOOKINFO
{
    DWORD       idThread;
    DWORD       idThreadInstaller;
    LPARAM      lParam;
    WPARAM    wParam;
    INT       code;
} DEBUGHOOKINFO, *PDEBUGHOOKINFO, *LPDEBUGHOOKINFO;
















typedef struct tagMOUSEINPUT
{
    LONG    dx;
    LONG    dy;
    DWORD   mouseData;
    DWORD   dwFlags;
    DWORD   time;
    ULONG_PTR dwExtraInfo;
} MOUSEINPUT, *PMOUSEINPUT, *LPMOUSEINPUT;

typedef struct tagKEYBDINPUT
{
    WORD    wVk;
    WORD    wScan;
    DWORD   dwFlags;
    DWORD   time;
    ULONG_PTR dwExtraInfo;
} KEYBDINPUT, *PKEYBDINPUT, *LPKEYBDINPUT;

typedef struct tagHARDWAREINPUT
{
    DWORD   uMsg;
    WORD    wParamL;
    WORD    wParamH;
} HARDWAREINPUT, *PHARDWAREINPUT, *LPHARDWAREINPUT;





typedef struct tagINPUT
{
    DWORD type;
    union
    {
        MOUSEINPUT      mi;
        KEYBDINPUT      ki;
        HARDWAREINPUT   hi;
    } ;
} INPUT, *PINPUT, *LPINPUT;

typedef struct HRAWINPUT__ {int unused; } *HRAWINPUT ;

typedef struct tagRAWINPUTDEVICELIST
{
    HANDLE hDevice;
    DWORD dwType;
} RAWINPUTDEVICELIST, *PRAWINPUTDEVICELIST;

typedef struct tagRAWHID {
    DWORD dwSizeHid;
    DWORD dwCount;
    BYTE bRawData[1];
} RAWHID, *LPRAWHID;

typedef struct tagRAWKEYBOARD {
    USHORT MakeCode;
    USHORT Flags;
    USHORT Reserved;
    USHORT VKey;
    UINT Message;
    ULONG ExtraInformation;
} RAWKEYBOARD, *PRAWKEYBOARD, *LPRAWKEYBOARD;

typedef struct tagRAWMOUSE {
    USHORT usFlags;
    union {
        ULONG ulButtons;
        struct {
            USHORT usButtonFlags;
            USHORT usButtonData;
        } ;
    } ;
    ULONG ulRawButtons;
    LONG  lLastX;
    LONG  lLastY;
    ULONG ulExtraInformation;
} RAWMOUSE, *PRAWMOUSE, *LPRAWMOUSE;

typedef struct tagRAWINPUTHEADER {
    DWORD dwType;
    DWORD dwSize;
    HANDLE hDevice;
    WPARAM wParam;
} RAWINPUTHEADER, *PRAWINPUTHEADER;

typedef struct tagRAWINPUT {
    RAWINPUTHEADER header;
    union {
        RAWMOUSE    mouse;
        RAWKEYBOARD keyboard;
        RAWHID      hid;
    } data;
} RAWINPUT, *PRAWINPUT, *LPRAWINPUT;

typedef struct tagRAWINPUTDEVICE {
    USHORT usUsagePage;
    USHORT usUsage;
    DWORD dwFlags;
    HWND hwndTarget;
} RAWINPUTDEVICE, *PRAWINPUTDEVICE, *LPRAWINPUTDEVICE;

typedef struct tagRID_DEVICE_INFO_MOUSE {
    DWORD dwId;
    DWORD dwNumberOfButtons;
    DWORD dwSampleRate;
    BOOL fHasHorizontalWheel;
} RID_DEVICE_INFO_MOUSE, *PRID_DEVICE_INFO_MOUSE;

typedef struct tagRID_DEVICE_INFO_KEYBOARD {
    DWORD dwType;
    DWORD dwSubType;
    DWORD dwKeyboardMode;
    DWORD dwNumberOfFunctionKeys;
    DWORD dwNumberOfIndicators;
    DWORD dwNumberOfKeysTotal;
} RID_DEVICE_INFO_KEYBOARD, *PRID_DEVICE_INFO_KEYBOARD;

typedef struct tagRID_DEVICE_INFO_HID {
    DWORD dwVendorId;
    DWORD dwProductId;
    DWORD dwVersionNumber;
    USHORT usUsagePage;
    USHORT usUsage;
} RID_DEVICE_INFO_HID, *PRID_DEVICE_INFO_HID;

typedef struct tagRID_DEVICE_INFO {
    DWORD    cbSize;
    DWORD    dwType;
    union {
        RID_DEVICE_INFO_MOUSE     mouse;
        RID_DEVICE_INFO_KEYBOARD  keyboard;
        RID_DEVICE_INFO_HID       hid;
    } ;
} RID_DEVICE_INFO, *PRID_DEVICE_INFO, *LPRID_DEVICE_INFO;






































































typedef struct tagGESTURECONFIG {
    DWORD dwID;
    DWORD dwWant;
    DWORD dwBlock;
} GESTURECONFIG, *PGESTURECONFIG;




































typedef struct tagGUITHREADINFO
{
    DWORD   cbSize;
    DWORD   flags;
    HWND    hwndActive;
    HWND    hwndFocus;
    HWND    hwndCapture;
    HWND    hwndMenuOwner;
    HWND    hwndMoveSize;
    HWND    hwndCaret;
    RECT    rcCaret;
} GUITHREADINFO, *PGUITHREADINFO, *LPGUITHREADINFO;








typedef enum tagINPUT_MESSAGE_DEVICE_TYPE
{
    IMDT_UNAVAILABLE = 0x00,
    IMDT_KEYBOARD    = 0x01,
    IMDT_MOUSE       = 0x02,
    IMDT_TOUCH       = 0x04,
    IMDT_PEN         = 0x08,
    IMDT_TOUCHPAD    = 0x10,
} INPUT_MESSAGE_DEVICE_TYPE;

typedef enum tagINPUT_MESSAGE_ORIGIN_ID
{
     IMO_UNAVAILABLE = 0x00,
     IMO_HARDWARE    = 0x01,
     IMO_INJECTED    = 0x02,
     IMO_SYSTEM      = 0x04,
} INPUT_MESSAGE_ORIGIN_ID;

typedef struct tagINPUT_MESSAGE_SOURCE
{
    INPUT_MESSAGE_DEVICE_TYPE deviceType;
    INPUT_MESSAGE_ORIGIN_ID   originId;
} INPUT_MESSAGE_SOURCE;














typedef struct tagANIMATIONINFO
{
       UINT          cbSize;
       INT           iMinAnimate;
} ANIMATIONINFO, *LPANIMATIONINFO;

typedef struct tagNMHDR
{
    HWND  hwndFrom;
    UINT_PTR idFrom;
    UINT  code;
} NMHDR, *LPNMHDR;

typedef struct tagDRAWTEXTPARAMS
{
	UINT	cbSize;
	INT	iTabLength;
	INT	iLeftMargin;
	INT	iRightMargin;
	UINT	uiLengthDrawn;
} DRAWTEXTPARAMS,*LPDRAWTEXTPARAMS;

typedef struct
{
  LPARAM        lParam;
  WPARAM      wParam;
  UINT        message;
  HWND        hwnd;
} CWPSTRUCT, *PCWPSTRUCT, *LPCWPSTRUCT;

typedef struct
{
  LRESULT       lResult;
  LPARAM        lParam;
  WPARAM      wParam;
  DWORD         message;
  HWND        hwnd;
} CWPRETSTRUCT, *PCWPRETSTRUCT, *LPCWPRETSTRUCT;

typedef struct tagWINDOWPLACEMENT
{
    UINT   length;
    UINT   flags;
    UINT   showCmd;
    POINT  ptMinPosition;
    POINT  ptMaxPosition;
    RECT   rcNormalPosition;
} WINDOWPLACEMENT, *PWINDOWPLACEMENT, *LPWINDOWPLACEMENT;


  























































  



  










































































  








 COLORREF  GetSysColor(INT);
 BOOL      SetSysColors(INT,const INT*,const COLORREF*);
































  



























































































































































typedef struct tagCREATESTRUCTA
{
    LPVOID      lpCreateParams;
    HINSTANCE hInstance;
    HMENU     hMenu;
    HWND      hwndParent;
    INT       cy;
    INT       cx;
    INT       y;
    INT       x;
    LONG        style;
    LPCSTR      lpszName;
    LPCSTR      lpszClass;
    DWORD       dwExStyle;
} CREATESTRUCTA, *LPCREATESTRUCTA;

typedef struct tagCREATESTRUCTW
{
    LPVOID      lpCreateParams;
    HINSTANCE hInstance;
    HMENU     hMenu;
    HWND      hwndParent;
    INT       cy;
    INT       cx;
    INT       y;
    INT       x;
    LONG        style;
    LPCWSTR     lpszName;
    LPCWSTR     lpszClass;
    DWORD       dwExStyle;
} CREATESTRUCTW, *LPCREATESTRUCTW;




typedef struct tagPAINTSTRUCT
{
    HDC   hdc;
    BOOL  fErase;
    RECT  rcPaint;
    BOOL  fRestore;
    BOOL  fIncUpdate;
    BYTE  rgbReserved[32];
} PAINTSTRUCT, *PPAINTSTRUCT, *LPPAINTSTRUCT;

typedef struct tagCLIENTCREATESTRUCT
{
    HMENU   hWindowMenu;
    UINT    idFirstChild;
} CLIENTCREATESTRUCT, *LPCLIENTCREATESTRUCT;


typedef struct tagMDICREATESTRUCTA
{
    LPCSTR       szClass;
    LPCSTR       szTitle;
    HINSTANCE  hOwner;
    INT        x;
    INT        y;
    INT        cx;
    INT        cy;
    DWORD        style;
    LPARAM       lParam;
} MDICREATESTRUCTA, *LPMDICREATESTRUCTA;

typedef struct tagMDICREATESTRUCTW
{
    LPCWSTR      szClass;
    LPCWSTR      szTitle;
    HINSTANCE  hOwner;
    INT        x;
    INT        y;
    INT        cx;
    INT        cy;
    DWORD        style;
    LPARAM       lParam;
} MDICREATESTRUCTW, *LPMDICREATESTRUCTW;











typedef struct tagSTYLESTRUCT {
    DWORD   styleOld;
    DWORD   styleNew;
} STYLESTRUCT, *LPSTYLESTRUCT;



  













  









  












  
typedef struct tagMINMAXINFO
{
    POINT   ptReserved;
    POINT   ptMaxSize;
    POINT   ptMaxPosition;
    POINT   ptMinTrackSize;
    POINT   ptMaxTrackSize;
} MINMAXINFO, *PMINMAXINFO, *LPMINMAXINFO;


  



















  
typedef struct tagWINDOWPOS
{
    HWND  hwnd;
    HWND  hwndInsertAfter;
    INT   x;
    INT   y;
    INT   cx;
    INT   cy;
    UINT  flags;
} WINDOWPOS, *PWINDOWPOS, *LPWINDOWPOS;


  
typedef struct
{
    RECT       rgrc[3];
    WINDOWPOS *lppos;
} NCCALCSIZE_PARAMS, *LPNCCALCSIZE_PARAMS;









  















































  






















  








  











typedef struct tagWNDCLASSA
{
    UINT      style;
    WNDPROC   lpfnWndProc;
    INT       cbClsExtra;
    INT       cbWndExtra;
    HINSTANCE hInstance;
    HICON     hIcon;
    HCURSOR   hCursor;
    HBRUSH    hbrBackground;
    LPCSTR      lpszMenuName;
    LPCSTR      lpszClassName;
} WNDCLASSA, *PWNDCLASSA, *LPWNDCLASSA;

typedef struct tagWNDCLASSW
{
    UINT      style;
    WNDPROC   lpfnWndProc;
    INT       cbClsExtra;
    INT       cbWndExtra;
    HINSTANCE hInstance;
    HICON     hIcon;
    HCURSOR   hCursor;
    HBRUSH    hbrBackground;
    LPCWSTR     lpszMenuName;
    LPCWSTR     lpszClassName;
} WNDCLASSW, *PWNDCLASSW, *LPWNDCLASSW;





typedef struct tagCOPYDATASTRUCT {
    ULONG_PTR dwData;
    DWORD cbData;
    PVOID lpData;
} COPYDATASTRUCT, *PCOPYDATASTRUCT;

typedef struct tagMDINEXTMENU {
    HMENU hmenuIn;
    HMENU hmenuNext;
    HWND  hwndNext;
} MDINEXTMENU, *PMDINEXTMENU, *LPMDINEXTMENU;

typedef struct tagMULTIKEYHELPA
{
    DWORD   mkSize;
    CHAR    mkKeylist;
    CHAR    szKeyphrase[1];
} MULTIKEYHELPA, *PMULTIKEYHELPA, *LPMULTIKEYHELPA;

typedef struct tagMULTIKEYHELPW
{
    DWORD   mkSize;
    WCHAR   mkKeylist;
    WCHAR   szKeyphrase[1];
} MULTIKEYHELPW, *PMULTIKEYHELPW, *LPMULTIKEYHELPW;





typedef struct tagHELPWININFOA {
	int wStructSize;
	int x;
	int y;
	int dx;
	int dy;
	int wMax;
	CHAR rgchMember[2];
} HELPWININFOA, *PHELPWININFOA, *LPHELPWININFOA;

typedef struct tagHELPWININFOW {
	int wStructSize;
	int x;
	int y;
	int dx;
	int dy;
	int wMax;
	WCHAR rgchMember[2];
} HELPWININFOW, *PHELPWININFOW, *LPHELPWININFOW;






     























typedef struct tagWNDCLASSEXA
{
    UINT      cbSize;
    UINT      style;
    WNDPROC   lpfnWndProc;
    INT       cbClsExtra;
    INT       cbWndExtra;
    HINSTANCE hInstance;
    HICON     hIcon;
    HCURSOR   hCursor;
    HBRUSH    hbrBackground;
    LPCSTR      lpszMenuName;
    LPCSTR      lpszClassName;
    HICON     hIconSm;
} WNDCLASSEXA, *PWNDCLASSEXA, *LPWNDCLASSEXA;

typedef struct tagWNDCLASSEXW
{
    UINT      cbSize;
    UINT      style;
    WNDPROC   lpfnWndProc;
    INT       cbClsExtra;
    INT       cbWndExtra;
    HINSTANCE hInstance;
    HICON     hIcon;
    HCURSOR   hCursor;
    HBRUSH    hbrBackground;
    LPCWSTR     lpszMenuName;
    LPCWSTR     lpszClassName;
    HICON     hIconSm;
} WNDCLASSEXW, *PWNDCLASSEXW, *LPWNDCLASSEXW;





typedef struct tagMSG
{
    HWND    hwnd;
    UINT    message;
    WPARAM  wParam;
    LPARAM    lParam;
    DWORD     time;
    POINT   pt;
} MSG, *PMSG, *LPMSG;










typedef struct _ICONINFO {
	BOOL		fIcon;
	DWORD		xHotspot;
	DWORD		yHotspot;
	HBITMAP	hbmMask;
	HBITMAP	hbmColor;
} ICONINFO, *PICONINFO;

typedef struct _ICONINFOEXA
{
    DWORD     cbSize;
    BOOL      fIcon;
    DWORD     xHotspot;
    DWORD     yHotspot;
    HBITMAP   hbmMask;
    HBITMAP   hbmColor;
    WORD      wResID;
    CHAR      szModName[260];
    CHAR      szResName[260];
} ICONINFOEXA, *PICONINFOEXA;

typedef struct _ICONINFOEXW
{
    DWORD     cbSize;
    BOOL      fIcon;
    DWORD     xHotspot;
    DWORD     yHotspot;
    HBITMAP   hbmMask;
    HBITMAP   hbmColor;
    WORD      wResID;
    WCHAR     szModName[260];
    WCHAR     szResName[260];
} ICONINFOEXW, *PICONINFOEXW;




typedef struct tagCURSORINFO
{
    DWORD cbSize;
    DWORD flags;
    HCURSOR hCursor;
    POINT ptScreenPos;
} CURSORINFO, *PCURSORINFO, *LPCURSORINFO;





typedef struct tagACCEL
{
    BYTE   fVirt;
    WORD   key;
    WORD   cmd;
} ACCEL, *LPACCEL;























typedef struct tagTPMPARAMS
{
    UINT   cbSize;
    RECT   rcExclude;
} TPMPARAMS, *LPTPMPARAMS;





typedef struct tagCOMBOBOXINFO
{
    DWORD cbSize;
    RECT  rcItem;
    RECT  rcButton;
    DWORD stateButton;
    HWND  hwndCombo;
    HWND  hwndItem;
    HWND  hwndList;
} COMBOBOXINFO, *PCOMBOBOXINFO, *LPCOMBOBOXINFO;

typedef struct tagMENUITEMINFOA {
  UINT    cbSize;
  UINT    fMask;
  UINT    fType;
  UINT    fState;
  UINT    wID;
  HMENU   hSubMenu;
  HBITMAP hbmpChecked;
  HBITMAP hbmpUnchecked;
  ULONG_PTR dwItemData;
  LPSTR   dwTypeData;
  UINT    cch;
  HBITMAP hbmpItem;
} MENUITEMINFOA, *LPMENUITEMINFOA;

typedef struct tagMENUITEMINFOW {
  UINT    cbSize;
  UINT    fMask;
  UINT    fType;
  UINT    fState;
  UINT    wID;
  HMENU   hSubMenu;
  HBITMAP hbmpChecked;
  HBITMAP hbmpUnchecked;
  ULONG_PTR dwItemData;
  LPWSTR  dwTypeData;
  UINT    cch;
  HBITMAP hbmpItem;
} MENUITEMINFOW, *LPMENUITEMINFOW;



typedef const MENUITEMINFOA *LPCMENUITEMINFOA;
typedef const MENUITEMINFOW *LPCMENUITEMINFOW;


typedef struct tagMENUBARINFO {
  DWORD cbSize;
  RECT  rcBar;
  HMENU hMenu;
  HWND  hwndMenu;
  BOOL  fBarFocused:1;
  BOOL  fFocused:1;
} MENUBARINFO, *PMENUBARINFO, *LPMENUBARINFO;

typedef struct tagMENUINFO {
  DWORD   cbSize;
  DWORD   fMask;
  DWORD   dwStyle;
  UINT    cyMax;
  HBRUSH  hbrBack;
  DWORD   dwContextHelpID;
  ULONG_PTR dwMenuData;
} MENUINFO, *LPMENUINFO;

typedef const MENUINFO *LPCMENUINFO;















typedef struct {
  WORD versionNumber;
  WORD offset;
} MENUITEMTEMPLATEHEADER, *PMENUITEMTEMPLATEHEADER;


typedef struct {
  WORD mtOption;
  WORD mtID;
  WCHAR mtString[1];
} MENUITEMTEMPLATE, *PMENUITEMTEMPLATE;


typedef void   MENUTEMPLATE;
typedef PVOID *LPMENUTEMPLATE;




















































































typedef struct tagSCROLLINFO
{
    UINT    cbSize;
    UINT    fMask;
    INT     nMin;
    INT     nMax;
    UINT    nPage;
    INT     nPos;
    INT     nTrackPos;
} SCROLLINFO, *LPSCROLLINFO;

typedef const SCROLLINFO *LPCSCROLLINFO;



typedef struct tagSCROLLBARINFO
{
    DWORD   cbSize;             
    RECT    rcScrollBar;        
    INT     dxyLineButton;      
    INT     xyThumbTop;         
    INT     xyThumbBottom;      
    INT     reserved;
    DWORD   rgstate[5+1];
} SCROLLBARINFO, *PSCROLLBARINFO, *LPSCROLLBARINFO;














































































































































































typedef struct tagHELPINFO
{
    UINT	cbSize;		
    INT	iContextType;	
    INT	iCtrlId;	
    HANDLE	hItemHandle;	
    DWORD_PTR	dwContextId;	
    POINT	MousePos;	
}  HELPINFO,*LPHELPINFO;

typedef void ( *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);

typedef struct tagMSGBOXPARAMSA
{
    UINT	cbSize;
    HWND	hwndOwner;
    HINSTANCE	hInstance;
    LPCSTR	lpszText;
    LPCSTR	lpszCaption;
    DWORD	dwStyle;
    LPCSTR	lpszIcon;
    DWORD_PTR	dwContextHelpId;
    MSGBOXCALLBACK	lpfnMsgBoxCallback;
    DWORD	dwLanguageId;
} MSGBOXPARAMSA, *PMSGBOXPARAMSA, *LPMSGBOXPARAMSA;

typedef struct tagMSGBOXPARAMSW
{
    UINT	cbSize;
    HWND	hwndOwner;
    HINSTANCE	hInstance;
    LPCWSTR	lpszText;
    LPCWSTR	lpszCaption;
    DWORD	dwStyle;
    LPCWSTR	lpszIcon;
    DWORD_PTR	dwContextHelpId;
    MSGBOXCALLBACK	lpfnMsgBoxCallback;
    DWORD	dwLanguageId;
} MSGBOXPARAMSW, *PMSGBOXPARAMSW, *LPMSGBOXPARAMSW;















typedef struct tagMONITORINFO
{
    DWORD cbSize;
    RECT  rcMonitor;
    RECT  rcWork;
    DWORD dwFlags;
} MONITORINFO, *LPMONITORINFO;

typedef struct tagMONITORINFOEXA
{   
    DWORD	cbSize;	
    RECT	rcMonitor;
    RECT	rcWork;
    DWORD	dwFlags;
    CHAR        szDevice[32];
} MONITORINFOEXA, *LPMONITORINFOEXA;

typedef struct tagMONITORINFOEXW
{   
    DWORD	cbSize;
    RECT	rcMonitor;
    RECT	rcWork;
    DWORD	dwFlags;
    WCHAR       szDevice[32];
} MONITORINFOEXW, *LPMONITORINFOEXW;




typedef BOOL  ( *MONITORENUMPROC)(HMONITOR,HDC,LPRECT,LPARAM);


# 1 "include/pshpack2.h" 1 3



























     













































































#pragma pack(2)


# 2131 "include/winuser.h" 2

typedef struct tagDLGTEMPLATE
{
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
} DLGTEMPLATE;

typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;

typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;


typedef struct tagDLGITEMTEMPLATE
{
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
} DLGITEMTEMPLATE;

typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;

typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;



# 1 "include/poppack.h" 1 3





























































































































































































































































#pragma pack()










# 2169 "include/winuser.h" 2

  











  

typedef struct tagCBT_CREATEWNDA
{
    CREATESTRUCTA *lpcs;
    HWND           hwndInsertAfter;
} CBT_CREATEWNDA, *LPCBT_CREATEWNDA;

typedef struct tagCBT_CREATEWNDW
{
    CREATESTRUCTW *lpcs;
    HWND           hwndInsertAfter;
} CBT_CREATEWNDW, *LPCBT_CREATEWNDW;




typedef struct tagCBTACTIVATESTRUCT
{
    BOOL    fMouse;
    HWND    hWndActive;
} CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT;


typedef struct tagDROPSTRUCT
{
    HWND      hwndSource;
    HWND      hwndSink;
    DWORD     wFmt;
    ULONG_PTR dwData;
    POINT     ptDrop;
    DWORD     dwControlData;
} DROPSTRUCT, *PDROPSTRUCT, *LPDROPSTRUCT;


















  





  


















































































































































































































































































































typedef struct tagNONCLIENTMETRICSA {
	UINT		cbSize;
	INT		iBorderWidth;
	INT		iScrollWidth;
	INT		iScrollHeight;
	INT		iCaptionWidth;
	INT		iCaptionHeight;
	LOGFONTA	lfCaptionFont;
	INT		iSmCaptionWidth;
	INT		iSmCaptionHeight;
	LOGFONTA	lfSmCaptionFont;
	INT		iMenuWidth;
	INT		iMenuHeight;
	LOGFONTA	lfMenuFont;
	LOGFONTA	lfStatusFont;
	LOGFONTA	lfMessageFont;
	INT		iPaddedBorderWidth;
} NONCLIENTMETRICSA, *PNONCLIENTMETRICSA, *LPNONCLIENTMETRICSA;

typedef struct tagNONCLIENTMETRICSW {
	UINT		cbSize;
	INT		iBorderWidth;
	INT		iScrollWidth;
	INT		iScrollHeight;
	INT		iCaptionWidth;
	INT		iCaptionHeight;
	LOGFONTW	lfCaptionFont;
	INT		iSmCaptionWidth;
	INT		iSmCaptionHeight;
	LOGFONTW	lfSmCaptionFont;
	INT		iMenuWidth;
	INT		iMenuHeight;
	LOGFONTW	lfMenuFont;
	LOGFONTW	lfStatusFont;
	LOGFONTW	lfMessageFont;
	INT		iPaddedBorderWidth;
} NONCLIENTMETRICSW, *PNONCLIENTMETRICSW, *LPNONCLIENTMETRICSW;





typedef struct tagICONMETRICSA {
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTA lfFont;
} ICONMETRICSA, *PICONMETRICSA, *LPICONMETRICSA;

typedef struct tagICONMETRICSW {
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTW lfFont;
} ICONMETRICSW, *PICONMETRICSW, *LPICONMETRICSW;





typedef struct tagUPDATELAYEREDWINDOWINFO
{
    DWORD                cbSize;
    HDC                  hdcDst;
    POINT const*         pptDst;
    SIZE const*          psize;
    HDC                  hdcSrc;
    POINT const*         pptSrc;
    COLORREF             crKey;
    BLENDFUNCTION const* pblend;
    DWORD                dwFlags;
    RECT const*          prcDirty;
} UPDATELAYEREDWINDOWINFO, *PUPDATELAYEREDWINDOWINFO;

















typedef struct tagMINIMIZEDMETRICS {
    UINT cbSize;
    int iWidth;
    int iHorzGap;
    int iVertGap;
    int iArrange;
} MINIMIZEDMETRICS, *PMINIMIZEDMETRICS, *LPMINIMIZEDMETRICS;



















  





































typedef struct {
    UINT cbSize;
    HWND hwnd;
    DWORD dwFlags;
    UINT uCount;
    DWORD dwTimeout;
} FLASHWINFO, *PFLASHWINFO;















































































































































































































typedef struct tagDRAWITEMSTRUCT
{
    UINT      CtlType;    
    UINT      CtlID;      
    UINT      itemID;     
    UINT      itemAction; 
    UINT      itemState;  
    HWND      hwndItem;   
    HDC       hDC;        
    RECT      rcItem;     
    ULONG_PTR itemData;   
} DRAWITEMSTRUCT, *PDRAWITEMSTRUCT, *LPDRAWITEMSTRUCT;


typedef struct tagMEASUREITEMSTRUCT
{
    UINT      CtlType;
    UINT      CtlID;
    UINT      itemID;
    UINT      itemWidth;
    UINT      itemHeight;
    ULONG_PTR itemData;
} MEASUREITEMSTRUCT, *PMEASUREITEMSTRUCT, *LPMEASUREITEMSTRUCT;


typedef struct tagDELETEITEMSTRUCT
{
    UINT     CtlType;
    UINT     CtlID;
    UINT     itemID;
    HWND     hwndItem;
    ULONG_PTR itemData;
} DELETEITEMSTRUCT, *PDELETEITEMSTRUCT, *LPDELETEITEMSTRUCT;


typedef struct tagCOMPAREITEMSTRUCT
{
    UINT      CtlType;
    UINT      CtlID;
    HWND      hwndItem;
    UINT      itemID1;
    ULONG_PTR itemData1;
    UINT      itemID2;
    ULONG_PTR itemData2;
    DWORD     dwLocaleId;
} COMPAREITEMSTRUCT, *PCOMPAREITEMSTRUCT, *LPCOMPAREITEMSTRUCT;




















typedef struct tagTRACKMOUSEEVENT {
    DWORD cbSize;
    DWORD dwFlags;
    HWND  hwndTrack;
    DWORD dwHoverTime;
} TRACKMOUSEEVENT, *LPTRACKMOUSEEVENT;

  






































  





















































































































typedef  PVOID           HDEVNOTIFY;
typedef  HDEVNOTIFY     *PHDEVNOTIFY;









typedef struct tagWINDOWINFO {
    DWORD cbSize;
    RECT  rcWindow;
    RECT  rcClient;
    DWORD dwStyle;
    DWORD dwExStyle;
    DWORD dwWindowStatus;
    UINT  cxWindowBorders;
    UINT  cyWindowBorders;
    ATOM  atomWindowType;
    WORD  wCreatorVersion;
} WINDOWINFO, *PWINDOWINFO, *LPWINDOWINFO;





typedef struct tagTITLEBARINFO {
    DWORD cbSize;
    RECT  rcTitleBar;
    DWORD rgstate[5+1];
} TITLEBARINFO, *PTITLEBARINFO, *LPTITLEBARINFO;


typedef struct tagLASTINPUTINFO {
    UINT cbSize;
    DWORD dwTime;
} LASTINPUTINFO, *PLASTINPUTINFO;


typedef struct
{
    DWORD cbSize;
    INT cItems;
    INT cColumns;
    INT cRows;
    INT iColFocus;
    INT iRowFocus;
    INT cxItem;
    INT cyItem;
    POINT ptStart;
} ALTTABINFO, *PALTTABINFO, *LPALTTABINFO;































































































































































































































typedef struct tagCHANGEFILTERSTRUCT
{
    DWORD cbSize;
    DWORD ExtStatus;
} CHANGEFILTERSTRUCT, *PCHANGEFILTERSTRUCT;








typedef enum tagAR_STATE {
    AR_ENABLED       = 0x0,
    AR_DISABLED      = 0x1,
    AR_SUPPRESSED    = 0x2,
    AR_REMOTESESSION = 0x4,
    AR_MULTIMON      = 0x8,
    AR_NOSENSOR      = 0x10,
    AR_NOT_SUPPORTED = 0x20,
    AR_DOCKED        = 0x40,
    AR_LAPTOP        = 0x80
} AR_STATE, *PAR_STATE;

typedef enum ORIENTATION_PREFERENCE {
    ORIENTATION_PREFERENCE_NONE              = 0x0,
    ORIENTATION_PREFERENCE_LANDSCAPE         = 0x1,
    ORIENTATION_PREFERENCE_PORTRAIT          = 0x2,
    ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 0x4,
    ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED  = 0x8
} ORIENTATION_PREFERENCE;


typedef struct HTOUCHINPUT__ {int unused; } *HTOUCHINPUT ;

typedef struct tagTOUCHINPUT {
    LONG      x;
    LONG      y;
    HANDLE    hSource;
    DWORD     dwID;
    DWORD     dwFlags;
    DWORD     dwMask;
    DWORD     dwTime;
    ULONG_PTR dwExtraInfo;
    DWORD     cxContact;
    DWORD     cyContact;
} TOUCHINPUT, *PTOUCHINPUT;
typedef TOUCHINPUT const * PCTOUCHINPUT;


















typedef struct HGESTUREINFO__ {int unused; } *HGESTUREINFO ;





typedef struct tagGESTUREINFO {
    UINT      cbSize;
    DWORD     dwFlags;
    DWORD     dwID;
    HWND      hwndTarget;
    POINTS    ptsLocation;
    DWORD     dwInstanceID;
    DWORD     dwSequenceID;
    ULONGLONG ullArguments;
    UINT      cbExtraArgs;
} GESTUREINFO, *PGESTUREINFO;
typedef GESTUREINFO const * PCGESTUREINFO;

typedef struct tagGESTURENOTIFYSTRUCT
{
    UINT cbSize;
    DWORD dwFlags;
    HWND hwndTarget;
    POINTS ptsLocation;
    DWORD dwInstanceID;
} GESTURENOTIFYSTRUCT, *PGESTURENOTIFYSTRUCT;



















typedef enum tagPOINTER_DEVICE_TYPE {
    POINTER_DEVICE_TYPE_INTEGRATED_PEN = 0x00000001,
    POINTER_DEVICE_TYPE_EXTERNAL_PEN   = 0x00000002,
    POINTER_DEVICE_TYPE_TOUCH          = 0x00000003,
    POINTER_DEVICE_TYPE_TOUCH_PAD      = 0x00000004,
    POINTER_DEVICE_TYPE_MAX            = 0xFFFFFFFF
} POINTER_DEVICE_TYPE;

typedef struct tagPOINTER_DEVICE_INFO {
    DWORD               displayOrientation;
    HANDLE              device;
    POINTER_DEVICE_TYPE pointerDeviceType;
    HMONITOR            monitor;
    ULONG               startingCursorId;
    USHORT              maxActiveContacts;
    WCHAR               productString[520];
} POINTER_DEVICE_INFO;

typedef struct tagPOINTER_DEVICE_PROPERTY
{
    INT32 logicalMin;
    INT32 logicalMax;
    INT32 physicalMin;
    INT32 physicalMax;
    UINT32 unit;
    UINT32 unitExponent;
    USHORT usagePageId;
    USHORT usageId;
} POINTER_DEVICE_PROPERTY;

typedef enum tagPOINTER_DEVICE_CURSOR_TYPE
{
    POINTER_DEVICE_CURSOR_TYPE_UNKNOWN = 0x00000000,
    POINTER_DEVICE_CURSOR_TYPE_TIP = 0x00000001,
    POINTER_DEVICE_CURSOR_TYPE_ERASER = 0x00000002,
    POINTER_DEVICE_CURSOR_TYPE_MAX = 0xFFFFFFFF,
} POINTER_DEVICE_CURSOR_TYPE;

typedef struct tagPOINTER_DEVICE_CURSOR_INFO
{
    UINT32 cursorId;
    POINTER_DEVICE_CURSOR_TYPE cursor;
} POINTER_DEVICE_CURSOR_INFO;

enum tagPOINTER_INPUT_TYPE
{
    PT_POINTER = 1,
    PT_TOUCH = 2,
    PT_PEN = 3,
    PT_MOUSE = 4,
    PT_TOUCHPAD = 5,
};
typedef DWORD POINTER_INPUT_TYPE;
typedef UINT32 POINTER_FLAGS;
























typedef enum tagPOINTER_BUTTON_CHANGE_TYPE
{
    POINTER_CHANGE_NONE,
    POINTER_CHANGE_FIRSTBUTTON_DOWN,
    POINTER_CHANGE_FIRSTBUTTON_UP,
    POINTER_CHANGE_SECONDBUTTON_DOWN,
    POINTER_CHANGE_SECONDBUTTON_UP,
    POINTER_CHANGE_THIRDBUTTON_DOWN,
    POINTER_CHANGE_THIRDBUTTON_UP,
    POINTER_CHANGE_FOURTHBUTTON_DOWN,
    POINTER_CHANGE_FOURTHBUTTON_UP,
    POINTER_CHANGE_FIFTHBUTTON_DOWN,
    POINTER_CHANGE_FIFTHBUTTON_UP,
} POINTER_BUTTON_CHANGE_TYPE;

typedef struct tagPOINTER_INFO
{
    POINTER_INPUT_TYPE pointerType;
    UINT32 pointerId;
    UINT32 frameId;
    POINTER_FLAGS pointerFlags;
    HANDLE sourceDevice;
    HWND hwndTarget;
    POINT ptPixelLocation;
    POINT ptHimetricLocation;
    POINT ptPixelLocationRaw;
    POINT ptHimetricLocationRaw;
    DWORD dwTime;
    UINT32 historyCount;
    INT32 InputData;
    DWORD dwKeyStates;
    UINT64 PerformanceCount;
    POINTER_BUTTON_CHANGE_TYPE ButtonChangeType;
} POINTER_INFO;

typedef UINT32 TOUCH_FLAGS;


typedef UINT32 TOUCH_MASK;





typedef struct tagPOINTER_TOUCH_INFO
{
    POINTER_INFO pointerInfo;
    TOUCH_FLAGS touchFlags;
    TOUCH_MASK touchMask;
    RECT rcContact;
    RECT rcContactRaw;
    UINT32 orientation;
    UINT32 pressure;
} POINTER_TOUCH_INFO;

typedef UINT32 PEN_FLAGS;





typedef UINT32 PEN_MASK;






typedef struct tagPOINTER_PEN_INFO
{
    POINTER_INFO pointerInfo;
    PEN_FLAGS penFlags;
    PEN_MASK penMask;
    UINT32 pressure;
    UINT32 rotation;
    INT32 tiltX;
    INT32 tiltY;
} POINTER_PEN_INFO;








































typedef struct tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION
{
    UINT16 score;
    POINT adjustedPoint;
} TOUCH_HIT_TESTING_PROXIMITY_EVALUATION, *PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION;

typedef struct tagTOUCH_HIT_TESTING_INPUT
{
    UINT32 pointerId;
    POINT point;
    RECT boundingBox;
    RECT nonOccludedBoundingBox;
    UINT32 orientation;
} TOUCH_HIT_TESTING_INPUT, *PTOUCH_HIT_TESTING_INPUT;




typedef enum
{
    POINTER_FEEDBACK_DEFAULT = 1,
    POINTER_FEEDBACK_INDIRECT = 2,
    POINTER_FEEDBACK_NONE = 3,
} POINTER_FEEDBACK_MODE;

typedef enum tagFEEDBACK_TYPE
{
    FEEDBACK_TOUCH_CONTACTVISUALIZATION = 1,
    FEEDBACK_PEN_BARRELVISUALIZATION = 2,
    FEEDBACK_PEN_TAP = 3,
    FEEDBACK_PEN_DOUBLETAP = 4,
    FEEDBACK_PEN_PRESSANDHOLD = 5,
    FEEDBACK_PEN_RIGHTTAP = 6,
    FEEDBACK_TOUCH_TAP = 7,
    FEEDBACK_TOUCH_DOUBLETAP = 8,
    FEEDBACK_TOUCH_PRESSANDHOLD = 9,
    FEEDBACK_TOUCH_RIGHTTAP = 10,
    FEEDBACK_GESTURE_PRESSANDTAP = 11,
    FEEDBACK_MAX = 0xFFFFFFFF
} FEEDBACK_TYPE;



typedef struct tagPOINTER_TYPE_INFO
{
    POINTER_INPUT_TYPE type;
    union
    {
        POINTER_TOUCH_INFO touchInfo;
        POINTER_PEN_INFO penInfo;
    } ;
} POINTER_TYPE_INFO, *PPOINTER_TYPE_INFO;

typedef struct tagINPUT_TRANSFORM
{
    union
    {
        struct
        {
            float _11, _12, _13, _14;
            float _21, _22, _23, _24;
            float _31, _32, _33, _34;
            float _41, _42, _43, _44;
        } ;
        float m[4][4];
    } ;
} INPUT_TRANSFORM;

typedef struct HSYNTHETICPOINTERDEVICE__ {int unused; } *HSYNTHETICPOINTERDEVICE ;








typedef struct tagAUDIODESCRIPTION
{
    UINT cbSize;
    BOOL Enabled;
    LCID Locale;
} AUDIODESCRIPTION, *LPAUDIODESCRIPTION;

typedef struct tagMENUGETOBJECTINFO
{
    DWORD dwFlags;
    UINT  uPos;
    HMENU hmenu;
    void  *riid;
    void  *pvObj;
} MENUGETOBJECTINFO, *PMENUGETOBJECTINFO;


 LONG         ChangeDisplaySettingsA(LPDEVMODEA,DWORD);
 LONG         ChangeDisplaySettingsW(LPDEVMODEW,DWORD);

 LONG         ChangeDisplaySettingsExA(LPCSTR,LPDEVMODEA,HWND,DWORD,LPVOID);
 LONG         ChangeDisplaySettingsExW(LPCWSTR,LPDEVMODEW,HWND,DWORD,LPVOID);

 HDESK        CreateDesktopA(LPCSTR,LPCSTR,LPDEVMODEA,DWORD,ACCESS_MASK,LPSECURITY_ATTRIBUTES);
 HDESK        CreateDesktopW(LPCWSTR,LPCWSTR,LPDEVMODEW,DWORD,ACCESS_MASK,LPSECURITY_ATTRIBUTES);

 LONG         DisplayConfigGetDeviceInfo(DISPLAYCONFIG_DEVICE_INFO_HEADER *);
 BOOL         EnumDisplayDevicesA(LPCSTR,DWORD,LPDISPLAY_DEVICEA,DWORD);
 BOOL         EnumDisplayDevicesW(LPCWSTR,DWORD,LPDISPLAY_DEVICEW,DWORD);

 BOOL         EnumDisplaySettingsA(LPCSTR,DWORD,LPDEVMODEA);
 BOOL         EnumDisplaySettingsW(LPCWSTR,DWORD,LPDEVMODEW);

 BOOL         EnumDisplaySettingsExA(LPCSTR,DWORD,LPDEVMODEA,DWORD);
 BOOL         EnumDisplaySettingsExW(LPCWSTR,DWORD,LPDEVMODEW,DWORD);

 LONG         GetDisplayConfigBufferSizes(UINT32,UINT32*,UINT32*);
 BOOL         UpdateLayeredWindow(HWND,HDC,POINT*,SIZE*,HDC,POINT*,COLORREF,BLENDFUNCTION*,DWORD);
 BOOL         UpdateLayeredWindowIndirect(HWND,UPDATELAYEREDWINDOWINFO const*);


 HKL          ActivateKeyboardLayout(HKL,UINT);
 BOOL         AddClipboardFormatListener(HWND);
 BOOL         AdjustWindowRect(LPRECT,DWORD,BOOL);
 BOOL         AdjustWindowRectEx(LPRECT,DWORD,BOOL,DWORD);
 BOOL         AdjustWindowRectExForDpi(RECT*,DWORD,BOOL,DWORD,UINT);
 BOOL         AllowSetForegroundWindow(DWORD);
 BOOL         AnimateWindow(HWND,DWORD,DWORD);


















 BOOL         AnyPopup(void);
 BOOL         AppendMenuA(HMENU,UINT,UINT_PTR,LPCSTR);
 BOOL         AppendMenuW(HMENU,UINT,UINT_PTR,LPCWSTR);

 BOOL         AreDpiAwarenessContextsEqual(DPI_AWARENESS_CONTEXT,DPI_AWARENESS_CONTEXT);
 UINT         ArrangeIconicWindows(HWND);
 BOOL         AttachThreadInput(DWORD,DWORD,BOOL);
 HDWP         BeginDeferWindowPos(INT);
 HDC          BeginPaint(HWND,LPPAINTSTRUCT);
 BOOL         BlockInput(BOOL);
 BOOL         BringWindowToTop(HWND);
 LONG         BroadcastSystemMessageA(DWORD,LPDWORD,UINT,WPARAM,LPARAM);
 LONG         BroadcastSystemMessageW(DWORD,LPDWORD,UINT,WPARAM,LPARAM);

 LONG         BroadcastSystemMessageExA(DWORD,LPDWORD,UINT,WPARAM,LPARAM,PBSMINFO);
 LONG         BroadcastSystemMessageExW(DWORD,LPDWORD,UINT,WPARAM,LPARAM,PBSMINFO);

 void         CalcChildScroll(HWND, INT);
 BOOL         CallMsgFilterA(LPMSG,INT);
 BOOL         CallMsgFilterW(LPMSG,INT);

 LRESULT      CallNextHookEx(HHOOK,INT,WPARAM,LPARAM);
 LRESULT      CallWindowProcA(WNDPROC,HWND,UINT,WPARAM,LPARAM);
 LRESULT      CallWindowProcW(WNDPROC,HWND,UINT,WPARAM,LPARAM);

 WORD         CascadeWindows(HWND, UINT, const RECT *, UINT, const HWND *);
 BOOL         ChangeClipboardChain(HWND,HWND);
 BOOL         ChangeMenuA(HMENU,UINT,LPCSTR,UINT,UINT);
 BOOL         ChangeMenuW(HMENU,UINT,LPCWSTR,UINT,UINT);

 BOOL         ChangeWindowMessageFilter(UINT,DWORD);
 BOOL         ChangeWindowMessageFilterEx(HWND,UINT,DWORD,CHANGEFILTERSTRUCT*);
 LPSTR        CharLowerA(LPSTR);
 LPWSTR       CharLowerW(LPWSTR);

 DWORD        CharLowerBuffA(LPSTR,DWORD);
 DWORD        CharLowerBuffW(LPWSTR,DWORD);

 LPSTR        CharNextA(LPCSTR);
 LPWSTR       CharNextW(LPCWSTR);

 LPSTR        CharNextExA(WORD,LPCSTR,DWORD);

 LPSTR        CharPrevA(LPCSTR,LPCSTR);
 LPWSTR       CharPrevW(LPCWSTR,LPCWSTR);

 LPSTR        CharPrevExA(WORD,LPCSTR,LPCSTR,DWORD);

 LPSTR        CharUpperA(LPSTR);
 LPWSTR       CharUpperW(LPWSTR);

 DWORD        CharUpperBuffA(LPSTR,DWORD);
 DWORD        CharUpperBuffW(LPWSTR,DWORD);

 BOOL         CharToOemA(LPCSTR,LPSTR);
 BOOL         CharToOemW(LPCWSTR,LPSTR);

 BOOL         CharToOemBuffA(LPCSTR,LPSTR,DWORD);
 BOOL         CharToOemBuffW(LPCWSTR,LPSTR,DWORD);

 BOOL         CheckDlgButton(HWND,INT,UINT);
 DWORD        CheckMenuItem(HMENU,UINT,UINT);
 BOOL         CheckMenuRadioItem(HMENU,UINT,UINT,UINT,UINT);
 BOOL         CheckRadioButton(HWND,int,int,int);
 HWND         ChildWindowFromPoint(HWND,POINT);
 HWND         ChildWindowFromPointEx(HWND,POINT,UINT);
 BOOL         ClientToScreen(HWND,LPPOINT);
 BOOL         ClipCursor(const RECT*);
 BOOL         CloseClipboard(void);
 BOOL         CloseDesktop(HDESK);
 BOOL         CloseTouchInputHandle(HTOUCHINPUT);
 BOOL         CloseGestureInfoHandle(HGESTUREINFO);
 BOOL         CloseWindow(HWND);
 BOOL         CloseWindowStation(HWINSTA);
 INT          CopyAcceleratorTableA(HACCEL,LPACCEL,INT);
 INT          CopyAcceleratorTableW(HACCEL,LPACCEL,INT);


 HICON        CopyIcon(HICON);
 HANDLE       CopyImage(HANDLE,UINT,INT,INT,UINT);
 BOOL         CopyRect(RECT*,const RECT*);
 INT          CountClipboardFormats(void);
 HACCEL       CreateAcceleratorTableA(LPACCEL,INT);
 HACCEL       CreateAcceleratorTableW(LPACCEL,INT);

 HICON        CreateIconIndirect(PICONINFO);
 BOOL         CreateCaret(HWND,HBITMAP,INT,INT);
 HCURSOR      CreateCursor(HINSTANCE,INT,INT,INT,INT,LPCVOID,LPCVOID);






 HWND         CreateDialogIndirectParamA(HINSTANCE,LPCDLGTEMPLATEA,HWND,DLGPROC,LPARAM);
 HWND         CreateDialogIndirectParamW(HINSTANCE,LPCDLGTEMPLATEW,HWND,DLGPROC,LPARAM);

 HWND         CreateDialogParamA(HINSTANCE,LPCSTR,HWND,DLGPROC,LPARAM);
 HWND         CreateDialogParamW(HINSTANCE,LPCWSTR,HWND,DLGPROC,LPARAM);

 HICON        CreateIcon(HINSTANCE,INT,INT,BYTE,BYTE,LPCVOID,LPCVOID);
 HICON        CreateIconFromResource(LPBYTE,UINT,BOOL,DWORD);
 HICON        CreateIconFromResourceEx(LPBYTE,UINT,BOOL,DWORD,INT,INT,UINT);
 HMENU        CreateMenu(void);
 HMENU        CreatePopupMenu(void);



 HWND         CreateWindowExA(DWORD,LPCSTR,LPCSTR,DWORD,INT,INT,INT,INT,HWND,HMENU,HINSTANCE,LPVOID);
 HWND         CreateWindowExW(DWORD,LPCWSTR,LPCWSTR,DWORD,INT,INT,INT,INT,HWND,HMENU,HINSTANCE,LPVOID);

 HWINSTA      CreateWindowStationA(LPCSTR,DWORD,ACCESS_MASK,LPSECURITY_ATTRIBUTES);
 HWINSTA      CreateWindowStationW(LPCWSTR,DWORD,ACCESS_MASK,LPSECURITY_ATTRIBUTES);

 HWND         CreateMDIWindowA(LPCSTR,LPCSTR,DWORD,INT,INT,INT,INT,HWND,HINSTANCE,LPARAM);
 HWND         CreateMDIWindowW(LPCWSTR,LPCWSTR,DWORD,INT,INT,INT,INT,HWND,HINSTANCE,LPARAM);

 HSYNTHETICPOINTERDEVICE   CreateSyntheticPointerDevice(POINTER_INPUT_TYPE,ULONG,POINTER_FEEDBACK_MODE);
 LRESULT      DefDlgProcA(HWND,UINT,WPARAM,LPARAM);
 LRESULT      DefDlgProcW(HWND,UINT,WPARAM,LPARAM);

 HDWP         DeferWindowPos(HDWP,HWND,HWND,INT,INT,INT,INT,UINT);
 LRESULT      DefFrameProcA(HWND,HWND,UINT,WPARAM,LPARAM);
 LRESULT      DefFrameProcW(HWND,HWND,UINT,WPARAM,LPARAM);


 LRESULT      DefMDIChildProcA(HWND,UINT,WPARAM,LPARAM);
 LRESULT      DefMDIChildProcW(HWND,UINT,WPARAM,LPARAM);

 LRESULT      DefRawInputProc(PRAWINPUT*,INT,UINT);
 LRESULT      DefWindowProcA(HWND,UINT,WPARAM,LPARAM);
 LRESULT      DefWindowProcW(HWND,UINT,WPARAM,LPARAM);

 BOOL         DeleteMenu(HMENU,UINT,UINT);
 BOOL         DeregisterShellHookWindow(HWND);
 BOOL         DestroyAcceleratorTable(HACCEL);
 BOOL         DestroyCaret(void);
 BOOL         DestroyCursor(HCURSOR);
 BOOL         DestroyIcon(HICON);
 BOOL         DestroyMenu(HMENU);
 void         DestroySyntheticPointerDevice(HSYNTHETICPOINTERDEVICE);
 BOOL         DestroyWindow(HWND);






 INT_PTR      DialogBoxIndirectParamA(HINSTANCE,LPCDLGTEMPLATEA,HWND,DLGPROC,LPARAM);
 INT_PTR      DialogBoxIndirectParamW(HINSTANCE,LPCDLGTEMPLATEW,HWND,DLGPROC,LPARAM);

 INT_PTR      DialogBoxParamA(HINSTANCE,LPCSTR,HWND,DLGPROC,LPARAM);
 INT_PTR      DialogBoxParamW(HINSTANCE,LPCWSTR,HWND,DLGPROC,LPARAM);

 void         DisableProcessWindowsGhosting(void);
 LRESULT      DispatchMessageA(const MSG*);
 LRESULT      DispatchMessageW(const MSG*);

 INT          DlgDirListA(HWND,LPSTR,INT,INT,UINT);
 INT          DlgDirListW(HWND,LPWSTR,INT,INT,UINT);

 INT          DlgDirListComboBoxA(HWND,LPSTR,INT,INT,UINT);
 INT          DlgDirListComboBoxW(HWND,LPWSTR,INT,INT,UINT);

 BOOL         DlgDirSelectComboBoxExA(HWND,LPSTR,INT,INT);
 BOOL         DlgDirSelectComboBoxExW(HWND,LPWSTR,INT,INT);

 BOOL         DlgDirSelectExA(HWND,LPSTR,INT,INT);
 BOOL         DlgDirSelectExW(HWND,LPWSTR,INT,INT);

 BOOL         DragDetect(HWND,POINT);
 DWORD        DragObject(HWND,HWND,UINT,ULONG_PTR,HCURSOR);
 BOOL         DrawAnimatedRects(HWND,int,const RECT*,const RECT*);
 BOOL         DrawCaption(HWND,HDC,const RECT*,UINT);
 BOOL         DrawCaptionTempA(HWND,HDC,const RECT*,HFONT,HICON,LPCSTR,UINT);
 BOOL         DrawCaptionTempW(HWND,HDC,const RECT*,HFONT,HICON,LPCWSTR,UINT);

 BOOL         DrawEdge(HDC,LPRECT,UINT,UINT);
 BOOL         DrawFocusRect(HDC,const RECT*);
 BOOL         DrawFrameControl(HDC,LPRECT,UINT,UINT);
 BOOL         DrawIcon(HDC,INT,INT,HICON);
 BOOL         DrawIconEx(HDC,INT,INT,HICON,INT,INT,UINT,HBRUSH,UINT);
 BOOL         DrawMenuBar(HWND);
 BOOL         DrawStateA(HDC,HBRUSH,DRAWSTATEPROC,LPARAM,WPARAM,INT,INT,INT,INT,UINT);
 BOOL         DrawStateW(HDC,HBRUSH,DRAWSTATEPROC,LPARAM,WPARAM,INT,INT,INT,INT,UINT);

 INT          DrawTextA(HDC,LPCSTR,INT,LPRECT,UINT);
 INT          DrawTextW(HDC,LPCWSTR,INT,LPRECT,UINT);

 INT          DrawTextExA(HDC,LPSTR,INT,LPRECT,UINT,LPDRAWTEXTPARAMS);
 INT          DrawTextExW(HDC,LPWSTR,INT,LPRECT,UINT,LPDRAWTEXTPARAMS);

 BOOL         EmptyClipboard(void);
 BOOL         EnableMenuItem(HMENU,UINT,UINT);
 BOOL         EnableMouseInPointer(BOOL);
 BOOL         EnableMouseInPointerForThread(void);
 BOOL         EnableNonClientDpiScaling(HWND);
 BOOL         EnableScrollBar(HWND,UINT,UINT);
 BOOL         EnableWindow(HWND,BOOL);
 BOOL         EndDeferWindowPos(HDWP);
 BOOL         EndDialog(HWND,INT_PTR);
 BOOL         EndMenu(void);
 BOOL         EndPaint(HWND,const PAINTSTRUCT*);
 BOOL         EnumChildWindows(HWND,WNDENUMPROC,LPARAM);
 UINT         EnumClipboardFormats(UINT);
 BOOL         EnumDesktopsA(HWINSTA,DESKTOPENUMPROCA,LPARAM);
 BOOL         EnumDesktopsW(HWINSTA,DESKTOPENUMPROCW,LPARAM);

 BOOL         EnumDesktopWindows(HDESK,WNDENUMPROC,LPARAM);
 BOOL         EnumDisplayMonitors(HDC,LPRECT,MONITORENUMPROC,LPARAM);
 INT          EnumPropsA(HWND,PROPENUMPROCA);
 INT          EnumPropsW(HWND,PROPENUMPROCW);

 INT          EnumPropsExA(HWND,PROPENUMPROCEXA,LPARAM);
 INT          EnumPropsExW(HWND,PROPENUMPROCEXW,LPARAM);

 BOOL         EnumThreadWindows(DWORD,WNDENUMPROC,LPARAM);
 BOOL         EnumWindows(WNDENUMPROC,LPARAM);
 BOOL         EnumWindowStationsA(WINSTAENUMPROCA,LPARAM);
 BOOL         EnumWindowStationsW(WINSTAENUMPROCW,LPARAM);

 BOOL         EvaluateProximityToRect(const RECT*,const TOUCH_HIT_TESTING_INPUT*,TOUCH_HIT_TESTING_PROXIMITY_EVALUATION*);
 BOOL         EvaluateProximityToPolygon(UINT32,const POINT*,const TOUCH_HIT_TESTING_INPUT*,TOUCH_HIT_TESTING_PROXIMITY_EVALUATION*);
 INT          ExcludeUpdateRgn(HDC,HWND);

 BOOL         ExitWindowsEx(UINT,DWORD);
 INT          FillRect(HDC,const RECT*,HBRUSH);
 HWND         FindWindowA(LPCSTR,LPCSTR);
 HWND         FindWindowW(LPCWSTR,LPCWSTR);

 HWND         FindWindowExA(HWND,HWND,LPCSTR,LPCSTR);
 HWND         FindWindowExW(HWND,HWND,LPCWSTR,LPCWSTR);

 BOOL         FlashWindow(HWND,BOOL);
 BOOL         FlashWindowEx(PFLASHWINFO);
 INT          FrameRect(HDC,const RECT*,HBRUSH);
 HWND         GetActiveWindow(void);
 BOOL         GetAltTabInfoA(HWND,INT,PALTTABINFO,LPSTR,UINT);
 BOOL         GetAltTabInfoW(HWND,INT,PALTTABINFO,LPWSTR,UINT);

 HWND         GetAncestor(HWND,UINT);
 DWORD        GetAppCompatFlags(HTASK);
 SHORT        GetAsyncKeyState(INT);
 BOOL         GetAutoRotationState(AR_STATE*);
 DPI_AWARENESS  GetAwarenessFromDpiAwarenessContext(DPI_AWARENESS_CONTEXT);
 UINT         GetDpiFromDpiAwarenessContext(DPI_AWARENESS_CONTEXT);
 HWND         GetCapture(void);
 UINT         GetCaretBlinkTime(void);
 BOOL         GetCaretPos(LPPOINT);
 BOOL         GetClassInfoA(HINSTANCE,LPCSTR,WNDCLASSA *);
 BOOL         GetClassInfoW(HINSTANCE,LPCWSTR,WNDCLASSW *);

 BOOL         GetClassInfoExA(HINSTANCE,LPCSTR,WNDCLASSEXA *);
 BOOL         GetClassInfoExW(HINSTANCE,LPCWSTR,WNDCLASSEXW *);

 DWORD        GetClassLongA(HWND,INT);
 DWORD        GetClassLongW(HWND,INT);









 INT          GetClassNameA(HWND,LPSTR,INT);
 INT          GetClassNameW(HWND,LPWSTR,INT);

 WORD         GetClassWord(HWND,INT);
 BOOL         GetClientRect(HWND,LPRECT);
 HANDLE       GetClipboardData(UINT);
 INT          GetClipboardFormatNameA(UINT,LPSTR,INT);
 INT          GetClipboardFormatNameW(UINT,LPWSTR,INT);

 HWND         GetClipboardOwner(void);
 DWORD        GetClipboardSequenceNumber(void);
 HWND         GetClipboardViewer(void);
 BOOL         GetClipCursor(LPRECT);
 BOOL         GetComboBoxInfo(HWND,PCOMBOBOXINFO);
 BOOL         GetCurrentInputMessageSource(INPUT_MESSAGE_SOURCE*);
 HCURSOR      GetCursor(void);
 BOOL         GetCursorInfo(PCURSORINFO);
 HCURSOR      GetCursorFrameInfo(HCURSOR,DWORD,DWORD,DWORD*,DWORD*);
 BOOL         GetCursorPos(LPPOINT);
 HDC          GetDC(HWND);
 HDC          GetDCEx(HWND,HRGN,DWORD);
 HWND         GetDesktopWindow(void);
 DWORD        GetDialogBaseUnits(void);
 BOOL         GetDisplayAutoRotationPreferences(ORIENTATION_PREFERENCE*);
 INT          GetDlgCtrlID(HWND);
 HWND         GetDlgItem(HWND,INT);
 UINT         GetDlgItemInt(HWND,INT,BOOL*,BOOL);
 UINT         GetDlgItemTextA(HWND,INT,LPSTR,INT);
 UINT         GetDlgItemTextW(HWND,INT,LPWSTR,INT);

 UINT         GetDoubleClickTime(void);
 BOOL         GetDpiForMonitorInternal(HMONITOR,UINT,UINT*,UINT*);
 UINT         GetDpiForWindow(HWND);
 UINT         GetDpiForSystem(void);
 HWND         GetFocus(void);
 HWND         GetForegroundWindow(void);
 BOOL         GetGestureConfig(HWND,DWORD,DWORD,UINT*,GESTURECONFIG*,UINT);
 BOOL         GetGestureExtraArgs(HGESTUREINFO,UINT,BYTE*);
 BOOL         GetGestureInfo(HGESTUREINFO,PGESTUREINFO);
 BOOL         GetGUIThreadInfo(DWORD,GUITHREADINFO*);
 DWORD        GetGuiResources(HANDLE,DWORD);
 BOOL         GetIconInfo(HICON,PICONINFO);
 BOOL         GetIconInfoExA(HICON,ICONINFOEXA*);
 BOOL         GetIconInfoExW(HICON,ICONINFOEXW*);

 BOOL         GetInputState(void);
 UINT         GetInternalWindowPos(HWND,LPRECT,LPPOINT);
 UINT         GetKBCodePage(void);
 HKL          GetKeyboardLayout(DWORD);
 UINT         GetKeyboardLayoutList(INT,HKL *);
 BOOL         GetKeyboardState(LPBYTE);
 INT          GetKeyboardType(INT);
 INT          GetKeyNameTextA(LONG,LPSTR,INT);
 INT          GetKeyNameTextW(LONG,LPWSTR,INT);

 BOOL         GetKeyboardLayoutNameA(LPSTR);
 BOOL         GetKeyboardLayoutNameW(LPWSTR);

 SHORT        GetKeyState(INT);
 HWND         GetLastActivePopup(HWND);
 BOOL         GetLastInputInfo(PLASTINPUTINFO);
 DWORD        GetListBoxInfo(HWND);
 UINT         GetRawInputBuffer(PRAWINPUT,PUINT,UINT);
 UINT         GetRawInputData(HRAWINPUT,UINT,LPVOID,PUINT,UINT);
 UINT         GetRawInputDeviceInfoA(HANDLE,UINT,LPVOID,PUINT);
 UINT         GetRawInputDeviceInfoW(HANDLE,UINT,LPVOID,PUINT);

 UINT         GetRawInputDeviceList(PRAWINPUTDEVICELIST,PUINT,UINT);
 UINT         GetRegisteredRawInputDevices(PRAWINPUTDEVICE,PUINT,UINT);
 BOOL         GetLayeredWindowAttributes(HWND,COLORREF*,BYTE*,DWORD*);
 HMENU        GetMenu(HWND);
 BOOL         GetMenuBarInfo(HWND,LONG,LONG,PMENUBARINFO);
 DWORD        GetMenuCheckMarkDimensions(void);
 DWORD        GetMenuContextHelpId(HMENU);
 UINT         GetMenuDefaultItem(HMENU,UINT,UINT);
 BOOL         GetMenuInfo(HMENU,LPMENUINFO);
 INT          GetMenuItemCount(HMENU);
 UINT         GetMenuItemID(HMENU,INT);
 BOOL         GetMenuItemInfoA(HMENU,UINT,BOOL,MENUITEMINFOA*);
 BOOL         GetMenuItemInfoW(HMENU,UINT,BOOL,MENUITEMINFOW*);

 BOOL         GetMenuItemRect(HWND,HMENU,UINT,LPRECT);
 UINT         GetMenuState(HMENU,UINT,UINT);
 INT          GetMenuStringA(HMENU,UINT,LPSTR,INT,UINT);
 INT          GetMenuStringW(HMENU,UINT,LPWSTR,INT,UINT);

 BOOL         GetMessageA(LPMSG,HWND,UINT,UINT);
 BOOL         GetMessageW(LPMSG,HWND,UINT,UINT);

 LPARAM       GetMessageExtraInfo(void);
 DWORD        GetMessagePos(void);
 LONG         GetMessageTime(void);
 BOOL         GetMonitorInfoA(HMONITOR,LPMONITORINFO);
 BOOL         GetMonitorInfoW(HMONITOR,LPMONITORINFO);

 HWND         GetNextDlgGroupItem(HWND,HWND,BOOL);
 HWND         GetNextDlgTabItem(HWND,HWND,BOOL);

 HWND         GetOpenClipboardWindow(void);
 HWND         GetParent(HWND);
 BOOL         GetPhysicalCursorPos(POINT*);
 BOOL         GetPointerDevice(HANDLE device,POINTER_DEVICE_INFO*);
 BOOL         GetPointerDeviceCursors(HANDLE,UINT32*,POINTER_DEVICE_CURSOR_INFO*);
 BOOL         GetPointerDeviceProperties(HANDLE device,UINT32*,POINTER_DEVICE_PROPERTY*);
 BOOL         GetPointerDeviceRects(HANDLE,RECT*,RECT*);
 BOOL         GetPointerDevices(UINT32*,POINTER_DEVICE_INFO*);
 BOOL         GetPointerInputTransform(UINT32,UINT32,INPUT_TRANSFORM*);
 BOOL         GetPointerPenInfo(UINT32,POINTER_PEN_INFO*);
 BOOL         GetPointerPenInfoHistory(UINT32,UINT32*,POINTER_PEN_INFO*);
 BOOL         GetPointerFramePenInfo(UINT32,UINT32*,POINTER_PEN_INFO*);
 BOOL         GetPointerFramePenInfoHistory(UINT32,UINT32*,UINT32*,POINTER_PEN_INFO*);
 BOOL         GetPointerType(UINT32,POINTER_INPUT_TYPE*);
 BOOL         GetPointerCursorId(UINT32,UINT32*);
 BOOL         GetPointerInfo(UINT32,POINTER_INFO*);
 BOOL         GetPointerInfoHistory(UINT32,UINT32*,POINTER_INFO*);
 BOOL         GetPointerFrameInfo(UINT32,UINT32*,POINTER_INFO*);
 BOOL         GetPointerFrameInfoHistory(UINT32,UINT32*,UINT32*,POINTER_INFO*);
 BOOL         GetPointerTouchInfo(UINT32,POINTER_TOUCH_INFO*);
 BOOL         GetPointerTouchInfoHistory(UINT32,UINT32*,POINTER_TOUCH_INFO*);
 BOOL         GetPointerFrameTouchInfo(UINT32,UINT32*,POINTER_TOUCH_INFO*);
 BOOL         GetPointerFrameTouchInfoHistory(UINT32,UINT32*,UINT32*,POINTER_TOUCH_INFO*);
 INT          GetPriorityClipboardFormat(UINT*,INT);
 BOOL         GetProcessDefaultLayout(DWORD*);
 BOOL         GetProcessDpiAwarenessInternal(HANDLE,DPI_AWARENESS*);
 HANDLE       GetPropA(HWND,LPCSTR);
 HANDLE       GetPropW(HWND,LPCWSTR);

 DWORD        GetQueueStatus(UINT);
 BOOL         GetRawPointerDeviceData(UINT32,UINT32,UINT32,POINTER_DEVICE_PROPERTY*,LONG*);
 BOOL         GetScrollInfo(HWND,INT,LPSCROLLINFO);
 BOOL         GetScrollBarInfo(HWND,LONG,LPSCROLLBARINFO);
 INT          GetScrollPos(HWND,INT);
 BOOL         GetScrollRange(HWND,INT,LPINT,LPINT);
 HWND         GetShellWindow(void);
 HMENU        GetSubMenu(HMENU,INT);
 HBRUSH       GetSysColorBrush(INT);

 HMENU        GetSystemMenu(HWND,BOOL);
 INT          GetSystemMetrics(INT);
 INT          GetSystemMetricsForDpi(INT,UINT);
 DWORD        GetTabbedTextExtentA(HDC,LPCSTR,INT,INT,const INT*);
 DWORD        GetTabbedTextExtentW(HDC,LPCWSTR,INT,INT,const INT*);

 BOOL         GetTitleBarInfo(HWND,PTITLEBARINFO);
 HDESK        GetThreadDesktop(DWORD);
 DPI_AWARENESS_CONTEXT  GetThreadDpiAwarenessContext(void);
 DPI_HOSTING_BEHAVIOR  GetThreadDpiHostingBehavior(void);
 HWND         GetTopWindow(HWND);
 BOOL         GetTouchInputInfo(HTOUCHINPUT,UINT,TOUCHINPUT*,int);
 BOOL         GetUpdateRect(HWND,LPRECT,BOOL);
 INT          GetUpdateRgn(HWND,HRGN,BOOL);
 BOOL         GetUpdatedClipboardFormats(UINT*,UINT,UINT*);
 BOOL         GetUserObjectInformationA(HANDLE,INT,LPVOID,DWORD,LPDWORD);
 BOOL         GetUserObjectInformationW(HANDLE,INT,LPVOID,DWORD,LPDWORD);

 BOOL         GetUserObjectSecurity(HANDLE,PSECURITY_INFORMATION,PSECURITY_DESCRIPTOR,DWORD,LPDWORD);
 HWND         GetWindow(HWND,UINT);
 DWORD        GetWindowContextHelpId(HWND);
 HDC          GetWindowDC(HWND);
 BOOL         GetWindowDisplayAffinity(HWND,DWORD*);
 DPI_AWARENESS_CONTEXT  GetWindowDpiAwarenessContext(HWND);
 DPI_HOSTING_BEHAVIOR  GetWindowDpiHostingBehavior(HWND);
 BOOL         GetWindowFeedbackSetting(HWND,FEEDBACK_TYPE,DWORD,UINT32*,void*);
 BOOL         GetWindowInfo(HWND, PWINDOWINFO);
 LONG         GetWindowLongA(HWND,INT);
 LONG         GetWindowLongW(HWND,INT);









 UINT         GetWindowModuleFileNameA(HWND,LPSTR,UINT);
 UINT         GetWindowModuleFileNameW(HWND,LPWSTR,UINT);

 BOOL         GetWindowPlacement(HWND,LPWINDOWPLACEMENT);
 BOOL         GetWindowRect(HWND,LPRECT);
 INT          GetWindowRgnBox(HWND,LPRECT);
 INT          GetWindowRgn(HWND,HRGN);
 HWINSTA      GetProcessWindowStation(void);

 INT          GetWindowTextA(HWND,LPSTR,INT);
 INT          GetWindowTextW(HWND,LPWSTR,INT);

 INT          GetWindowTextLengthA(HWND);
 INT          GetWindowTextLengthW(HWND);

 DWORD        GetWindowThreadProcessId(HWND,LPDWORD);
 WORD         GetWindowWord(HWND,INT);
 BOOL         GrayStringA(HDC,HBRUSH,GRAYSTRINGPROC,LPARAM,INT,INT,INT,INT,INT);
 BOOL         GrayStringW(HDC,HBRUSH,GRAYSTRINGPROC,LPARAM,INT,INT,INT,INT,INT);

 BOOL         HideCaret(HWND);
 BOOL         HiliteMenuItem(HWND,HMENU,UINT,UINT);
 BOOL         InitializeTouchInjection(UINT32,DWORD);
 BOOL         InjectSyntheticPointerInput(HSYNTHETICPOINTERDEVICE,const POINTER_TYPE_INFO*,UINT32);
 BOOL         InjectTouchInput(UINT32,const POINTER_TOUCH_INFO*);
 BOOL         InSendMessage(void);
 DWORD        InSendMessageEx(LPVOID);
 BOOL         InsertMenuA(HMENU,UINT,UINT,UINT_PTR,LPCSTR);
 BOOL         InsertMenuW(HMENU,UINT,UINT,UINT_PTR,LPCWSTR);

 BOOL         InsertMenuItemA(HMENU,UINT,BOOL,const MENUITEMINFOA*);
 BOOL         InsertMenuItemW(HMENU,UINT,BOOL,const MENUITEMINFOW*);

 INT          InternalGetWindowText(HWND,LPWSTR,INT);
 BOOL         IntersectRect(LPRECT,const RECT*,const RECT*);
 BOOL         InvalidateRect(HWND,const RECT*,BOOL);
 BOOL         InvalidateRgn(HWND,HRGN,BOOL);
 BOOL         InvertRect(HDC,const RECT*);
 BOOL         IsCharAlphaA(CHAR);
 BOOL         IsCharAlphaW(WCHAR);

 BOOL         IsCharAlphaNumericA(CHAR);
 BOOL         IsCharAlphaNumericW(WCHAR);

 BOOL         IsCharLowerA(CHAR);
 BOOL         IsCharLowerW(WCHAR);

 BOOL         IsCharUpperA(CHAR);
 BOOL         IsCharUpperW(WCHAR);

 BOOL         IsChild(HWND,HWND);
 BOOL         IsClipboardFormatAvailable(UINT);
 BOOL         IsDialogMessageA(HWND,LPMSG);
 BOOL         IsDialogMessageW(HWND,LPMSG);

 UINT         IsDlgButtonChecked(HWND,int);
 BOOL         IsGUIThread(BOOL);
 BOOL         IsHungAppWindow(HWND);
 BOOL         IsIconic(HWND);
 BOOL         IsMenu(HMENU);
 BOOL         IsMouseInPointerEnabled(void);
 BOOL         IsProcessDPIAware(void);
 BOOL         IsTouchWindow(HWND,PULONG);
 BOOL         IsValidDpiAwarenessContext(DPI_AWARENESS_CONTEXT);
 BOOL         IsWinEventHookInstalled(DWORD);
 BOOL         IsWindow(HWND);
 BOOL         IsWindowEnabled(HWND);
 BOOL         IsWindowUnicode(HWND);
 BOOL         IsWindowVisible(HWND);
 BOOL         IsZoomed(HWND);
 BOOL         KillSystemTimer(HWND,UINT_PTR);
 BOOL         KillTimer(HWND,UINT_PTR);
 HACCEL       LoadAcceleratorsA(HINSTANCE,LPCSTR);
 HACCEL       LoadAcceleratorsW(HINSTANCE,LPCWSTR);

 HBITMAP      LoadBitmapA(HINSTANCE,LPCSTR);
 HBITMAP      LoadBitmapW(HINSTANCE,LPCWSTR);

 HCURSOR      LoadCursorA(HINSTANCE,LPCSTR);
 HCURSOR      LoadCursorW(HINSTANCE,LPCWSTR);

 HCURSOR      LoadCursorFromFileA(LPCSTR);
 HCURSOR      LoadCursorFromFileW(LPCWSTR);

 HICON        LoadIconA(HINSTANCE,LPCSTR);
 HICON        LoadIconW(HINSTANCE,LPCWSTR);

 HANDLE       LoadImageA(HINSTANCE,LPCSTR,UINT,INT,INT,UINT);
 HANDLE       LoadImageW(HINSTANCE,LPCWSTR,UINT,INT,INT,UINT);

 HKL          LoadKeyboardLayoutA(LPCSTR,UINT);
 HKL          LoadKeyboardLayoutW(LPCWSTR,UINT);

 HMENU        LoadMenuA(HINSTANCE,LPCSTR);
 HMENU        LoadMenuW(HINSTANCE,LPCWSTR);

 HMENU        LoadMenuIndirectA(LPCVOID);
 HMENU        LoadMenuIndirectW(LPCVOID);

 INT          LoadStringA(HINSTANCE,UINT,LPSTR,INT);
 INT          LoadStringW(HINSTANCE,UINT,LPWSTR,INT);

 BOOL         LogicalToPhysicalPoint(HWND,POINT*);
 BOOL         LogicalToPhysicalPointForPerMonitorDPI(HWND,POINT*);
 BOOL         LockSetForegroundWindow(UINT);
 BOOL         LockWindowUpdate(HWND);
 BOOL         LockWorkStation(void);
 INT          LookupIconIdFromDirectory(LPBYTE,BOOL);
 INT          LookupIconIdFromDirectoryEx(LPBYTE,BOOL,INT,INT,UINT);
 UINT         MapVirtualKeyA(UINT,UINT);
 UINT         MapVirtualKeyW(UINT,UINT);

 UINT         MapVirtualKeyExA(UINT,UINT,HKL);
 UINT         MapVirtualKeyExW(UINT,UINT,HKL);

 BOOL         MapDialogRect(HWND,LPRECT);
 INT          MapWindowPoints(HWND,HWND,LPPOINT,UINT);
 INT          MenuItemFromPoint(HWND,HMENU,POINT);
 BOOL         MessageBeep(UINT);
 INT          MessageBoxA(HWND,LPCSTR,LPCSTR,UINT);
 INT          MessageBoxW(HWND,LPCWSTR,LPCWSTR,UINT);

 INT          MessageBoxExA(HWND,LPCSTR,LPCSTR,UINT,WORD);
 INT          MessageBoxExW(HWND,LPCWSTR,LPCWSTR,UINT,WORD);

 INT          MessageBoxIndirectA(LPMSGBOXPARAMSA);
 INT          MessageBoxIndirectW(LPMSGBOXPARAMSW);

 BOOL         ModifyMenuA(HMENU,UINT,UINT,UINT_PTR,LPCSTR);
 BOOL         ModifyMenuW(HMENU,UINT,UINT,UINT_PTR,LPCWSTR);

 HMONITOR     MonitorFromPoint(POINT,DWORD);
 HMONITOR     MonitorFromRect(const RECT*,DWORD);
 HMONITOR     MonitorFromWindow(HWND,DWORD);
 BOOL         MoveWindow(HWND,INT,INT,INT,INT,BOOL);
 DWORD        MsgWaitForMultipleObjects(DWORD,const HANDLE*,BOOL,DWORD,DWORD);
 DWORD        MsgWaitForMultipleObjectsEx(DWORD,const HANDLE*,DWORD,DWORD,DWORD);
 void         NotifyWinEvent(DWORD,HWND,LONG,LONG);
 DWORD        OemKeyScan(WORD);
 BOOL         OemToCharA(LPCSTR,LPSTR);
 BOOL         OemToCharW(LPCSTR,LPWSTR);

 BOOL         OemToCharBuffA(LPCSTR,LPSTR,DWORD);
 BOOL         OemToCharBuffW(LPCSTR,LPWSTR,DWORD);

 BOOL         OpenClipboard(HWND);
 HDESK        OpenDesktopA(LPCSTR,DWORD,BOOL,ACCESS_MASK);
 HDESK        OpenDesktopW(LPCWSTR,DWORD,BOOL,ACCESS_MASK);

 BOOL         OpenIcon(HWND);
 HDESK        OpenInputDesktop(DWORD,BOOL,ACCESS_MASK);
 HWINSTA      OpenWindowStationA(LPCSTR,BOOL,ACCESS_MASK);
 HWINSTA      OpenWindowStationW(LPCWSTR,BOOL,ACCESS_MASK);

 BOOL         PaintDesktop(HDC);
 LRESULT      PackTouchHitTestingProximityEvaluation(const TOUCH_HIT_TESTING_INPUT*,const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION*);
 BOOL         PeekMessageA(LPMSG,HWND,UINT,UINT,UINT);
 BOOL         PeekMessageW(LPMSG,HWND,UINT,UINT,UINT);

 BOOL         PhysicalToLogicalPoint(HWND,POINT*);
 BOOL         PhysicalToLogicalPointForPerMonitorDPI(HWND,POINT*);



 BOOL         PostMessageA(HWND,UINT,WPARAM,LPARAM);
 BOOL         PostMessageW(HWND,UINT,WPARAM,LPARAM);

 void         PostQuitMessage(INT);
 BOOL         PostThreadMessageA(DWORD,UINT,WPARAM,LPARAM);
 BOOL         PostThreadMessageW(DWORD,UINT,WPARAM,LPARAM);

 BOOL         PrintWindow(HWND,HDC,UINT);
 UINT         PrivateExtractIconExA(LPCSTR,int,HICON*,HICON*,UINT);
 UINT         PrivateExtractIconExW(LPCWSTR,int,HICON*,HICON*,UINT);
 UINT         PrivateExtractIconsA(LPCSTR,int,int,int,HICON*,UINT*,UINT,UINT);
 UINT         PrivateExtractIconsW(LPCWSTR,int,int,int,HICON*,UINT*,UINT,UINT);
 HWND         RealChildWindowFromPoint(HWND,POINT);
 UINT         RealGetWindowClassA(HWND,LPSTR,UINT);
 UINT         RealGetWindowClassW(HWND,LPWSTR,UINT);

 BOOL         RedrawWindow(HWND,const RECT*,HRGN,UINT);
 ATOM         RegisterClassA(const WNDCLASSA *);
 ATOM         RegisterClassW(const WNDCLASSW *);

 ATOM         RegisterClassExA(const WNDCLASSEXA *);
 ATOM         RegisterClassExW(const WNDCLASSEXW *);

 UINT         RegisterClipboardFormatA(LPCSTR);
 UINT         RegisterClipboardFormatW(LPCWSTR);

 HDEVNOTIFY   RegisterDeviceNotificationA(HANDLE,LPVOID,DWORD);
 HDEVNOTIFY   RegisterDeviceNotificationW(HANDLE,LPVOID,DWORD);

 BOOL         RegisterHotKey(HWND,INT,UINT,UINT);
 BOOL         RegisterPointerDeviceNotifications(HWND,BOOL);
 BOOL         RegisterPointerInputTarget(HWND,POINTER_INPUT_TYPE);
 BOOL         RegisterPointerInputTargetEx(HWND,POINTER_INPUT_TYPE,BOOL);
 HPOWERNOTIFY  RegisterPowerSettingNotification(HANDLE,LPCGUID,DWORD);
 BOOL         RegisterRawInputDevices(const RAWINPUTDEVICE *,UINT,UINT);
 BOOL         RegisterShellHookWindow(HWND);
 HPOWERNOTIFY  RegisterSuspendResumeNotification(HANDLE,DWORD);
 BOOL         RegisterTouchHitTestingWindow(HWND,ULONG);
 BOOL         RegisterTouchWindow(HWND,ULONG);
 UINT         RegisterWindowMessageA(LPCSTR);
 UINT         RegisterWindowMessageW(LPCWSTR);

 BOOL         ReleaseCapture(void);
 INT          ReleaseDC(HWND,HDC);
 BOOL         RemoveClipboardFormatListener(HWND);
 BOOL         RemoveMenu(HMENU,UINT,UINT);
 HANDLE       RemovePropA(HWND,LPCSTR);
 HANDLE       RemovePropW(HWND,LPCWSTR);

 BOOL         ReplyMessage(LRESULT);
 BOOL         ScreenToClient(HWND,LPPOINT);
 void         ScrollChildren(HWND,UINT,WPARAM,LPARAM);
 BOOL         ScrollDC(HDC,INT,INT,const RECT*,const RECT*,HRGN,LPRECT);
 BOOL         ScrollWindow(HWND,INT,INT,const RECT*,const RECT*);
 INT          ScrollWindowEx(HWND,INT,INT,const RECT*,const RECT*,HRGN,LPRECT,UINT);
 LRESULT      SendDlgItemMessageA(HWND,INT,UINT,WPARAM,LPARAM);
 LRESULT      SendDlgItemMessageW(HWND,INT,UINT,WPARAM,LPARAM);

 UINT         SendInput(UINT,LPINPUT,int);
 LRESULT      SendMessageA(HWND,UINT,WPARAM,LPARAM);
 LRESULT      SendMessageW(HWND,UINT,WPARAM,LPARAM);

 BOOL         SendMessageCallbackA(HWND,UINT,WPARAM,LPARAM,SENDASYNCPROC,ULONG_PTR);
 BOOL         SendMessageCallbackW(HWND,UINT,WPARAM,LPARAM,SENDASYNCPROC,ULONG_PTR);

 LRESULT      SendMessageTimeoutA(HWND,UINT,WPARAM,LPARAM,UINT,UINT,PDWORD_PTR);
 LRESULT      SendMessageTimeoutW(HWND,UINT,WPARAM,LPARAM,UINT,UINT,PDWORD_PTR);

 BOOL         SendNotifyMessageA(HWND,UINT,WPARAM,LPARAM);
 BOOL         SendNotifyMessageW(HWND,UINT,WPARAM,LPARAM);

 HWND         SetActiveWindow(HWND);
 HWND         SetCapture(HWND);
 BOOL         SetCaretBlinkTime(UINT);
 BOOL         SetCaretPos(INT,INT);
 DWORD        SetClassLongA(HWND,INT,LONG);
 DWORD        SetClassLongW(HWND,INT,LONG);









 WORD         SetClassWord(HWND,INT,WORD);
 HANDLE       SetClipboardData(UINT,HANDLE);
 HWND         SetClipboardViewer(HWND);
 UINT_PTR     SetCoalescableTimer(HWND,UINT_PTR,UINT,TIMERPROC,ULONG);
 HCURSOR      SetCursor(HCURSOR);
 BOOL         SetCursorPos(INT,INT);
 void         SetDebugErrorLevel(DWORD);
 BOOL         SetDeskWallpaper(const char*);
 BOOL         SetDisplayAutoRotationPreferences(ORIENTATION_PREFERENCE);
 BOOL         SetDlgItemInt(HWND,INT,UINT,BOOL);
 BOOL         SetDlgItemTextA(HWND,INT,LPCSTR);
 BOOL         SetDlgItemTextW(HWND,INT,LPCWSTR);

 BOOL         SetDoubleClickTime(UINT);
 HWND         SetFocus(HWND);
 BOOL         SetForegroundWindow(HWND);
 BOOL         SetGestureConfig(HWND,DWORD,UINT,PGESTURECONFIG,UINT);
 void         SetInternalWindowPos(HWND,UINT,LPRECT,LPPOINT);
 BOOL         SetKeyboardState(LPBYTE);
 void         SetLastErrorEx(DWORD,DWORD);
 BOOL         SetLayeredWindowAttributes(HWND,COLORREF,BYTE,DWORD);
 BOOL         SetMenu(HWND,HMENU);
 BOOL         SetMenuContextHelpId(HMENU,DWORD);
 BOOL         SetMenuDefaultItem(HMENU,UINT,UINT);
 BOOL         SetMenuInfo(HMENU,LPCMENUINFO);
 BOOL         SetMenuItemBitmaps(HMENU,UINT,UINT,HBITMAP,HBITMAP);
 BOOL         SetMenuItemInfoA(HMENU,UINT,BOOL,const MENUITEMINFOA*);
 BOOL         SetMenuItemInfoW(HMENU,UINT,BOOL,const MENUITEMINFOW*);

 LPARAM       SetMessageExtraInfo(LPARAM);
 BOOL         SetMessageQueue(INT);
 HWND         SetParent(HWND,HWND);
 BOOL         SetPhysicalCursorPos(INT,INT);
 BOOL         SetProcessDPIAware(void);
 BOOL         SetProcessDefaultLayout(DWORD);
 BOOL         SetProcessDpiAwarenessContext(DPI_AWARENESS_CONTEXT);
 BOOL         SetProcessDpiAwarenessInternal(DPI_AWARENESS);
 BOOL         SetProcessWindowStation(HWINSTA);
 BOOL         SetPropA(HWND,LPCSTR,HANDLE);
 BOOL         SetPropW(HWND,LPCWSTR,HANDLE);

 INT          SetScrollInfo(HWND,INT,const SCROLLINFO*,BOOL);
 INT          SetScrollPos(HWND,INT,INT,BOOL);
 BOOL         SetScrollRange(HWND,INT,INT,INT,BOOL);
 BOOL         SetShellWindow(HWND);

 BOOL         SetSystemCursor(HCURSOR,DWORD);
 BOOL         SetSystemMenu(HWND,HMENU);
 UINT_PTR     SetSystemTimer(HWND,UINT_PTR,UINT,void*);
 BOOL         SetThreadDesktop(HDESK);
 DPI_AWARENESS_CONTEXT  SetThreadDpiAwarenessContext(DPI_AWARENESS_CONTEXT);
 DPI_HOSTING_BEHAVIOR  SetThreadDpiHostingBehavior(DPI_HOSTING_BEHAVIOR);
 UINT_PTR     SetTimer(HWND,UINT_PTR,UINT,TIMERPROC);
 BOOL         SetUserObjectInformationA(HANDLE,INT,LPVOID,DWORD);
 BOOL         SetUserObjectInformationW(HANDLE,INT,LPVOID,DWORD);

 BOOL         SetUserObjectSecurity(HANDLE,PSECURITY_INFORMATION,PSECURITY_DESCRIPTOR);
 BOOL         SetWindowContextHelpId(HWND,DWORD);
 BOOL         SetWindowDisplayAffinity(HWND,DWORD);
 BOOL         SetWindowFeedbackSetting(HWND,FEEDBACK_TYPE,DWORD,UINT32,const void*);
 LONG         SetWindowLongA(HWND,INT,LONG);
 LONG         SetWindowLongW(HWND,INT,LONG);









 BOOL         SetWindowPlacement(HWND,const WINDOWPLACEMENT*);
 HHOOK        SetWindowsHookA(INT,HOOKPROC);
 HHOOK        SetWindowsHookW(INT,HOOKPROC);

 HHOOK        SetWindowsHookExA(INT,HOOKPROC,HINSTANCE,DWORD);
 HHOOK        SetWindowsHookExW(INT,HOOKPROC,HINSTANCE,DWORD);

 BOOL         SetWindowPos(HWND,HWND,INT,INT,INT,INT,UINT);
 INT          SetWindowRgn(HWND,HRGN,BOOL);
 BOOL         SetWindowTextA(HWND,LPCSTR);
 BOOL         SetWindowTextW(HWND,LPCWSTR);

 WORD         SetWindowWord(HWND,INT,WORD);
 HWINEVENTHOOK  SetWinEventHook(DWORD,DWORD,HMODULE,WINEVENTPROC,DWORD,DWORD,DWORD);
 BOOL         ShowCaret(HWND);
 INT          ShowCursor(BOOL);
 BOOL         ShowScrollBar(HWND,INT,BOOL);
 BOOL         ShowOwnedPopups(HWND,BOOL);
 BOOL         ShowWindow(HWND,INT);
 BOOL         ShowWindowAsync(HWND,INT);
 BOOL         ShutdownBlockReasonCreate(HWND,LPCWSTR);
 BOOL         ShutdownBlockReasonDestroy(HWND);
 BOOL         SkipPointerFrameMessages(UINT32);
 BOOL         SubtractRect(LPRECT,const RECT*,const RECT*);
 BOOL         SwapMouseButton(BOOL);
 BOOL         SwitchDesktop(HDESK);
 void         SwitchToThisWindow(HWND,BOOL);
 BOOL         SystemParametersInfoA(UINT,UINT,LPVOID,UINT);
 BOOL         SystemParametersInfoW(UINT,UINT,LPVOID,UINT);

 BOOL         SystemParametersInfoForDpi(UINT,UINT,void*,UINT,UINT);
 LONG         TabbedTextOutA(HDC,INT,INT,LPCSTR,INT,INT,const INT*,INT);
 LONG         TabbedTextOutW(HDC,INT,INT,LPCWSTR,INT,INT,const INT*,INT);

 WORD         TileWindows (HWND,UINT,const RECT *,UINT,const HWND *);
 INT          ToAscii(UINT,UINT,const BYTE *,LPWORD,UINT);
 INT          ToAsciiEx(UINT,UINT,const BYTE *,LPWORD,UINT,HKL);
 INT          ToUnicode(UINT,UINT,const BYTE *,LPWSTR,int,UINT);
 INT          ToUnicodeEx(UINT,UINT,const BYTE *,LPWSTR,int,UINT,HKL);
 BOOL         TrackMouseEvent(LPTRACKMOUSEEVENT);
 BOOL         TrackPopupMenu(HMENU,UINT,INT,INT,INT,HWND,const RECT*);
 BOOL         TrackPopupMenuEx(HMENU,UINT,INT,INT,HWND,LPTPMPARAMS);
 INT          TranslateAcceleratorA(HWND,HACCEL,LPMSG);
 INT          TranslateAcceleratorW(HWND,HACCEL,LPMSG);

 BOOL         TranslateMDISysAccel(HWND,LPMSG);
 BOOL         TranslateMessage(const MSG*);
 BOOL         UnhookWinEvent(HWINEVENTHOOK);
 BOOL         UnhookWindowsHook(INT,HOOKPROC);
 BOOL         UnhookWindowsHookEx(HHOOK);
 BOOL         UnloadKeyboardLayout(HKL);
 BOOL         UnionRect(LPRECT,const RECT*,const RECT*);
 BOOL         UnregisterClassA(LPCSTR,HINSTANCE);
 BOOL         UnregisterClassW(LPCWSTR,HINSTANCE);

 BOOL         UnregisterDeviceNotification(HDEVNOTIFY);
 BOOL         UnregisterHotKey(HWND,INT);
 BOOL         UnregisterPointerInputTarget(HWND,POINTER_INPUT_TYPE);
 BOOL         UnregisterPointerInputTargetEx(HWND,POINTER_INPUT_TYPE);
 BOOL         UnregisterPowerSettingNotification(HPOWERNOTIFY);
 BOOL         UnregisterSuspendResumeNotification(HPOWERNOTIFY);
 BOOL         UnregisterTouchWindow(HWND);
 BOOL         UpdateWindow(HWND);
 BOOL         UserHandleGrantAccess(HANDLE,HANDLE,BOOL);
 UINT         UserRealizePalette(HDC);
 BOOL         ValidateRect(HWND,const RECT*);
 BOOL         ValidateRgn(HWND,HRGN);
 SHORT        VkKeyScanA(CHAR);
 SHORT        VkKeyScanW(WCHAR);

 WORD         VkKeyScanExA(CHAR, HKL);
 WORD         VkKeyScanExW(WCHAR, HKL);

 DWORD        WaitForInputIdle(HANDLE,DWORD);
 BOOL         WaitMessage(void);
 HWND         WindowFromDC(HDC);
 HWND         WindowFromPoint(POINT);
 BOOL         WinHelpA(HWND,LPCSTR,UINT,ULONG_PTR);
 BOOL         WinHelpW(HWND,LPCWSTR,UINT,ULONG_PTR);

 void         keybd_event(BYTE,BYTE,DWORD,ULONG_PTR);
 void         mouse_event(DWORD,DWORD,DWORD,DWORD,ULONG_PTR);
 INT         wsprintfA(LPSTR,LPCSTR,...);
 INT         wsprintfW(LPWSTR,LPCWSTR,...);


 INT          wvsprintfA(LPSTR,LPCSTR,va_list);
 INT          wvsprintfW(LPWSTR,LPCWSTR,va_list);

















inline struct _TEB *  NtCurrentTeb(void) {  struct _TEB *teb;  __asm__("movq %%gs:0x30,%0" : "=r" (teb));  return teb; } inline BOOL  EqualRect(const RECT *rect1, const RECT *rect2)
{
    if (!rect1 || !rect2) return 0;
    return ((rect1->left == rect2->left) && (rect1->right == rect2->right) &&
            (rect1->top == rect2->top) && (rect1->bottom == rect2->bottom));
}

inline struct _TEB *  NtCurrentTeb(void) {  struct _TEB *teb;  __asm__("movq %%gs:0x30,%0" : "=r" (teb));  return teb; } inline BOOL  InflateRect(LPRECT rect, INT x, INT y)
{
    if (!rect) return 0;
    rect->left   -= x;
    rect->top    -= y;
    rect->right  += x;
    rect->bottom += y;
    return 1;
}

inline struct _TEB *  NtCurrentTeb(void) {  struct _TEB *teb;  __asm__("movq %%gs:0x30,%0" : "=r" (teb));  return teb; } inline BOOL  IsRectEmpty(const RECT *rect)
{
    if (!rect) return 1;
    return ((rect->left >= rect->right) || (rect->top >= rect->bottom));
}

inline struct _TEB *  NtCurrentTeb(void) {  struct _TEB *teb;  __asm__("movq %%gs:0x30,%0" : "=r" (teb));  return teb; } inline BOOL  OffsetRect(LPRECT rect, INT x, INT y)
{
    if (!rect) return 0;
    rect->left   += x;
    rect->right  += x;
    rect->top    += y;
    rect->bottom += y;
    return 1;
}

inline struct _TEB *  NtCurrentTeb(void) {  struct _TEB *teb;  __asm__("movq %%gs:0x30,%0" : "=r" (teb));  return teb; } inline BOOL  PtInRect(const RECT *rect, POINT pt)
{
    if (!rect) return 0;
    return ((pt.x >= rect->left) && (pt.x < rect->right) &&
            (pt.y >= rect->top) && (pt.y < rect->bottom));
}

inline struct _TEB *  NtCurrentTeb(void) {  struct _TEB *teb;  __asm__("movq %%gs:0x30,%0" : "=r" (teb));  return teb; } inline BOOL  SetRect(LPRECT rect, INT left, INT top, INT right, INT bottom)
{
    if (!rect) return 0;
    rect->left   = left;
    rect->right  = right;
    rect->top    = top;
    rect->bottom = bottom;
    return 1;
}

inline struct _TEB *  NtCurrentTeb(void) {  struct _TEB *teb;  __asm__("movq %%gs:0x30,%0" : "=r" (teb));  return teb; } inline BOOL  SetRectEmpty(LPRECT rect)
{
    if (!rect) return 0;
    rect->left = rect->right = rect->top = rect->bottom = 0;
    return 1;
}






WORD         SYSTEM_KillSystemTimer( WORD );






enum SCROLL_HITTEST
{
    SCROLL_NOWHERE,      
    SCROLL_TOP_ARROW,    
    SCROLL_TOP_RECT,     
    SCROLL_THUMB,        
    SCROLL_BOTTOM_RECT,  
    SCROLL_BOTTOM_ARROW  
};


struct SCROLL_TRACKING_INFO
{
    HWND win;                       
    INT bar;                        
    INT thumb_pos;                  
    INT thumb_val;                  
    BOOL vertical;                  
    enum SCROLL_HITTEST hit_test;   
};

enum NONCLIENT_BUTTON_TYPE
{
    MENU_CLOSE_BUTTON,               
    MENU_MIN_BUTTON,                 
    MENU_MAX_BUTTON,                 
    MENU_RESTORE_BUTTON,             
    MENU_HELP_BUTTON,                
};

struct user_api_hook
{
    LRESULT ( *pDefDlgProc)(HWND, UINT, WPARAM, LPARAM, BOOL);
    void ( *pNonClientButtonDraw)(HWND, HDC, enum NONCLIENT_BUTTON_TYPE, RECT, BOOL, BOOL);
    void ( *pScrollBarDraw)(HWND, HDC, INT, enum SCROLL_HITTEST,
                                  const struct SCROLL_TRACKING_INFO *, BOOL, BOOL, RECT *, UINT,
                                  INT, INT, INT, BOOL);
    LRESULT ( *pScrollBarWndProc)(HWND, UINT, WPARAM, LPARAM, BOOL);
};

 BOOL  RegisterUserApiHook(const struct user_api_hook *new_hook, struct user_api_hook *old_hook);
 void  UnregisterUserApiHook(void);







# 41 "include/windows.h" 2

# 1 "include/winnls.h" 1 3














































































































































































































































































































































inline struct _TEB *  NtCurrentTeb(void) {  struct _TEB *teb;  __asm__("movq %%gs:0x30,%0" : "=r" (teb));  return teb; } const WCHAR LOCALE_NAME_INVARIANT[] = { 0 };





inline struct _TEB *  NtCurrentTeb(void) {  struct _TEB *teb;  __asm__("movq %%gs:0x30,%0" : "=r" (teb));  return teb; } const WCHAR LOCALE_NAME_SYSTEM_DEFAULT[] = {'!','x','-','s','y','s','-','d','e','f','a','u','l','t','-','l','o','c','a','l','e',0};
































































































































































































































































































typedef struct _FILEMUIINFO {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwFileType;
    BYTE pChecksum[16];
    BYTE pServiceChecksum[16];
    DWORD dwLanguageNameOffset;
    DWORD dwTypeIDMainSize;
    DWORD dwTypeIDMainOffset;
    DWORD dwTypeNameMainOffset;
    DWORD dwTypeIDMUISize;
    DWORD dwTypeIDMUIOffset;
    DWORD dwTypeNameMUIOffset;
    BYTE abBuffer[8];
} FILEMUIINFO, *PFILEMUIINFO;




typedef enum _NORM_FORM {
    NormalizationOther  = 0,
    NormalizationC      = 0x1,
    NormalizationD      = 0x2,
    NormalizationKC     = 0x5,
    NormalizationKD     = 0x6
} NORM_FORM;

typedef DWORD CALID;
typedef DWORD CALTYPE;
typedef LONG  GEOID;
typedef DWORD GEOCLASS;
typedef DWORD GEOTYPE;
typedef DWORD LCTYPE;
typedef DWORD LGRPID;

typedef struct
{
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
} CPINFO, *LPCPINFO;

typedef struct
{
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    CHAR CodePageName[260];
} CPINFOEXA, *LPCPINFOEXA;

typedef struct
{
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    WCHAR CodePageName[260];
} CPINFOEXW, *LPCPINFOEXW;




typedef struct _numberfmtA {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
} NUMBERFMTA, *LPNUMBERFMTA;

typedef struct _numberfmtW {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
} NUMBERFMTW, *LPNUMBERFMTW;




typedef struct _currencyfmtA
{
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPSTR lpCurrencySymbol;
} CURRENCYFMTA, *LPCURRENCYFMTA;

typedef struct _currencyfmtW
{
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPWSTR lpCurrencySymbol;
} CURRENCYFMTW, *LPCURRENCYFMTW;




typedef struct _nlsversioninfo {
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
    DWORD dwEffectiveId;
    GUID  guidCustomVersion;
} NLSVERSIONINFO, *LPNLSVERSIONINFO;

typedef struct _nlsversioninfoex {
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
    DWORD dwEffectiveId;
    GUID  guidCustomVersion;
} NLSVERSIONINFOEX, *LPNLSVERSIONINFOEX;

enum SYSNLS_FUNCTION { COMPARE_STRING = 1 };
typedef DWORD NLS_FUNCTION;



typedef BOOL    ( *CALINFO_ENUMPROCEXEX)(LPWSTR,CALID,LPWSTR,LPARAM);
typedef BOOL    ( *DATEFMT_ENUMPROCEXEX)(LPWSTR,CALID,LPARAM);
typedef BOOL    ( *TIMEFMT_ENUMPROCEX)(LPWSTR,LPARAM);

typedef BOOL    ( *CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL    ( *CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL    ( *CALINFO_ENUMPROCEXA)(LPSTR,CALID);
typedef BOOL    ( *CALINFO_ENUMPROCEXW)(LPWSTR,CALID);
typedef BOOL    ( *CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL    ( *CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL    ( *DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL    ( *DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL    ( *DATEFMT_ENUMPROCEXA)(LPSTR,CALID);
typedef BOOL    ( *DATEFMT_ENUMPROCEXW)(LPWSTR,CALID);
typedef BOOL    ( *GEO_ENUMPROC)(GEOID);
typedef BOOL    ( *LANGGROUPLOCALE_ENUMPROCA)(LGRPID,LCID,LPSTR,LONG_PTR);
typedef BOOL    ( *LANGGROUPLOCALE_ENUMPROCW)(LGRPID,LCID,LPWSTR,LONG_PTR);
typedef BOOL    ( *LANGUAGEGROUP_ENUMPROCA)(LGRPID,LPSTR,LPSTR,DWORD,LONG_PTR);
typedef BOOL    ( *LANGUAGEGROUP_ENUMPROCW)(LGRPID,LPWSTR,LPWSTR,DWORD,LONG_PTR);
typedef BOOL    ( *LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL    ( *LOCALE_ENUMPROCW)(LPWSTR);
typedef BOOL    ( *LOCALE_ENUMPROCEX)(LPWSTR, DWORD, LPARAM);
typedef BOOL    ( *TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL    ( *TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL    ( *UILANGUAGE_ENUMPROCA)(LPSTR,LONG_PTR);
typedef BOOL    ( *UILANGUAGE_ENUMPROCW)(LPWSTR,LONG_PTR);




































enum SYSGEOTYPE
{
    GEO_NATION = 1,
    GEO_LATITUDE,
    GEO_LONGITUDE,
    GEO_ISO2,
    GEO_ISO3,
    GEO_RFC1766,
    GEO_LCID,
    GEO_FRIENDLYNAME,
    GEO_OFFICIALNAME,
    GEO_TIMEZONES,
    GEO_OFFICIALLANGUAGES,
    GEO_ISO_UN_NUMBER,
    GEO_PARENT,
    GEO_DIALINGCODE,
    GEO_CURRENCYCODE,
    GEO_CURRENCYSYMBOL,
    GEO_NAME,
    GEO_ID
};

enum SYSGEOCLASS
{
    GEOCLASS_ALL = 0,
    GEOCLASS_REGION = 14,
    GEOCLASS_NATION = 16
};







 INT          CompareStringA(LCID,DWORD,LPCSTR,INT,LPCSTR,INT);
 INT          CompareStringW(LCID,DWORD,LPCWSTR,INT,LPCWSTR,INT);

 INT          CompareStringEx(LPCWSTR,DWORD,LPCWSTR,INT,LPCWSTR,INT,LPNLSVERSIONINFO,LPVOID,LPARAM);
 INT          CompareStringOrdinal(const WCHAR *,INT,const WCHAR *,INT,BOOL);
 LCID         ConvertDefaultLocale(LCID);
 BOOL         EnumCalendarInfoA(CALINFO_ENUMPROCA,LCID,CALID,CALTYPE);
 BOOL         EnumCalendarInfoW(CALINFO_ENUMPROCW,LCID,CALID,CALTYPE);

 BOOL         EnumCalendarInfoExA(CALINFO_ENUMPROCEXA,LCID,CALID,CALTYPE);
 BOOL         EnumCalendarInfoExW(CALINFO_ENUMPROCEXW,LCID,CALID,CALTYPE);

 BOOL         EnumCalendarInfoExEx(CALINFO_ENUMPROCEXEX,LPCWSTR,CALID,LPCWSTR,CALTYPE,LPARAM);
 BOOL         EnumDateFormatsA(DATEFMT_ENUMPROCA,LCID,DWORD);
 BOOL         EnumDateFormatsW(DATEFMT_ENUMPROCW,LCID,DWORD);

 BOOL         EnumDateFormatsExA(DATEFMT_ENUMPROCEXA,LCID,DWORD);
 BOOL         EnumDateFormatsExW(DATEFMT_ENUMPROCEXW,LCID,DWORD);

 BOOL         EnumDateFormatsExEx(DATEFMT_ENUMPROCEXEX,LPCWSTR,DWORD,LPARAM);
 BOOL         EnumSystemCodePagesA(CODEPAGE_ENUMPROCA,DWORD);
 BOOL         EnumSystemCodePagesW(CODEPAGE_ENUMPROCW,DWORD);

 BOOL         EnumSystemGeoID(GEOCLASS,GEOID,GEO_ENUMPROC);
 BOOL         EnumSystemLocalesA(LOCALE_ENUMPROCA,DWORD);
 BOOL         EnumSystemLocalesW(LOCALE_ENUMPROCW,DWORD);

 BOOL         EnumSystemLocalesEx(LOCALE_ENUMPROCEX,DWORD,LPARAM,LPVOID);
 BOOL         EnumSystemLanguageGroupsA(LANGUAGEGROUP_ENUMPROCA,DWORD,LONG_PTR);
 BOOL         EnumSystemLanguageGroupsW(LANGUAGEGROUP_ENUMPROCW,DWORD,LONG_PTR);

 BOOL         EnumLanguageGroupLocalesA(LANGGROUPLOCALE_ENUMPROCA,LGRPID,DWORD,LONG_PTR);
 BOOL         EnumLanguageGroupLocalesW(LANGGROUPLOCALE_ENUMPROCW,LGRPID,DWORD,LONG_PTR);

 BOOL         EnumTimeFormatsA(TIMEFMT_ENUMPROCA,LCID,DWORD);
 BOOL         EnumTimeFormatsW(TIMEFMT_ENUMPROCW,LCID,DWORD);

 BOOL         EnumTimeFormatsEx(TIMEFMT_ENUMPROCEX,LPCWSTR,DWORD,LPARAM);
 BOOL         EnumUILanguagesA(UILANGUAGE_ENUMPROCA,DWORD,LONG_PTR);
 BOOL         EnumUILanguagesW(UILANGUAGE_ENUMPROCW,DWORD,LONG_PTR);

 INT          FoldStringA(DWORD,LPCSTR,INT,LPSTR,INT);
 INT          FoldStringW(DWORD,LPCWSTR,INT,LPWSTR,INT);

 UINT         GetACP(void);
 BOOL         GetCPInfo(UINT,LPCPINFO);
 BOOL         GetCPInfoExA(UINT,DWORD,LPCPINFOEXA);
 BOOL         GetCPInfoExW(UINT,DWORD,LPCPINFOEXW);

 INT          GetCalendarInfoA(LCID,DWORD,DWORD,LPSTR,INT,LPDWORD);
 INT          GetCalendarInfoEx(const WCHAR*,CALID,const WCHAR*,CALTYPE,WCHAR*,INT,DWORD*);
 INT          GetCalendarInfoW(LCID,DWORD,DWORD,LPWSTR,INT,LPDWORD);

 INT          GetCurrencyFormatA(LCID,DWORD,LPCSTR,const CURRENCYFMTA*,LPSTR,INT);
 INT          GetCurrencyFormatEx(LPCWSTR,DWORD,LPCWSTR,const CURRENCYFMTW*,LPWSTR,int);
 INT          GetCurrencyFormatW(LCID,DWORD,LPCWSTR,const CURRENCYFMTW*,LPWSTR,INT);

 INT          GetDateFormatA(LCID,DWORD,const SYSTEMTIME*,LPCSTR,LPSTR,INT);
 INT          GetDateFormatEx(LPCWSTR,DWORD,const SYSTEMTIME*,LPCWSTR,LPWSTR,INT,LPCWSTR);
 INT          GetDateFormatW(LCID,DWORD,const SYSTEMTIME*,LPCWSTR,LPWSTR,INT);

 BOOL         GetFileMUIInfo(DWORD,PCWSTR,PFILEMUIINFO,DWORD*);
 BOOL         GetFileMUIPath(DWORD,PCWSTR,PWSTR,PULONG,PWSTR,PULONG,PULONGLONG);
 INT          GetGeoInfoA(GEOID,GEOTYPE,LPSTR,INT,LANGID);
 INT          GetGeoInfoW(GEOID,GEOTYPE,LPWSTR,INT,LANGID);

 INT          GetGeoInfoEx(PWSTR,GEOTYPE,PWSTR,INT);
 INT          GetLocaleInfoA(LCID,LCTYPE,LPSTR,INT);
 INT          GetLocaleInfoW(LCID,LCTYPE,LPWSTR,INT);

 INT          GetLocaleInfoEx(LPCWSTR,LCTYPE,LPWSTR,INT);
 BOOL         GetNLSVersion(NLS_FUNCTION,LCID,NLSVERSIONINFO*);
 BOOL         GetNLSVersionEx(NLS_FUNCTION,LPCWSTR,NLSVERSIONINFOEX*);
 INT          GetNumberFormatA(LCID,DWORD,LPCSTR,const NUMBERFMTA*,LPSTR,INT);
 INT          GetNumberFormatW(LCID,DWORD,LPCWSTR,const NUMBERFMTW*,LPWSTR,INT);

 UINT         GetOEMCP(void);
 BOOL         GetProcessPreferredUILanguages(DWORD,PULONG,PZZWSTR,PULONG);
 BOOL         GetStringTypeA(LCID,DWORD,LPCSTR,INT,LPWORD);
 BOOL         GetStringTypeW(DWORD,LPCWSTR,INT,LPWORD);
 BOOL         GetStringTypeExA(LCID,DWORD,LPCSTR,INT,LPWORD);
 BOOL         GetStringTypeExW(LCID,DWORD,LPCWSTR,INT,LPWORD);

 LANGID       GetSystemDefaultLangID(void);
 INT          GetSystemDefaultLocaleName(LPWSTR,int);
 LCID         GetSystemDefaultLCID(void);
 LANGID       GetSystemDefaultUILanguage(void);
 BOOL         GetSystemPreferredUILanguages(DWORD,ULONG*,WCHAR*,ULONG*);
 LCID         GetThreadLocale(void);
 BOOL         GetThreadPreferredUILanguages(DWORD,ULONG*,WCHAR*,ULONG*);
 LANGID       GetThreadUILanguage(void);
 BOOL         GetUserPreferredUILanguages(DWORD,ULONG*,WCHAR*,ULONG*);
 INT          GetTimeFormatA(LCID,DWORD,const SYSTEMTIME*,LPCSTR,LPSTR,INT);
 INT          GetTimeFormatEx(LPCWSTR,DWORD,const SYSTEMTIME*,LPCWSTR,LPWSTR,INT);
 INT          GetTimeFormatW(LCID,DWORD,const SYSTEMTIME*,LPCWSTR,LPWSTR,INT);

 INT          GetUserDefaultGeoName(LPWSTR,int);
 LANGID       GetUserDefaultLangID(void);
 LCID         GetUserDefaultLCID(void);
 INT          GetUserDefaultLocaleName(LPWSTR,int);
 LANGID       GetUserDefaultUILanguage(void);
 GEOID        GetUserGeoID(GEOCLASS);
 INT     IdnToAscii(DWORD,LPCWSTR,INT,LPWSTR,INT);
 INT     IdnToNameprepUnicode(DWORD,LPCWSTR,INT,LPWSTR,INT);
 INT     IdnToUnicode(DWORD,LPCWSTR,INT,LPWSTR,INT);
 BOOL         IsDBCSLeadByte(BYTE);
 BOOL         IsDBCSLeadByteEx(UINT,BYTE);
 BOOL         IsNLSDefinedString(NLS_FUNCTION,DWORD,NLSVERSIONINFO*,LPCWSTR,INT);
 BOOL    IsNormalizedString(NORM_FORM,LPCWSTR,INT);
 BOOL         IsValidCodePage(UINT);
 BOOL         IsValidLanguageGroup(LGRPID,DWORD);
 BOOL         IsValidLocale(LCID,DWORD);
 BOOL         IsValidLocaleName(LPCWSTR);
 DWORD        IsValidNLSVersion(NLS_FUNCTION,LPCWSTR,NLSVERSIONINFOEX*);
 INT          LCIDToLocaleName(LCID,LPWSTR,INT,DWORD);
 INT          LCMapStringA(LCID,DWORD,LPCSTR,INT,LPSTR,INT);
 INT          LCMapStringW(LCID,DWORD,LPCWSTR,INT,LPWSTR,INT);

 INT          LCMapStringEx(LPCWSTR,DWORD,LPCWSTR,INT,LPWSTR,INT,LPNLSVERSIONINFO,LPVOID,LPARAM);
 LCID         LocaleNameToLCID(LPCWSTR,DWORD);
 INT          MultiByteToWideChar(UINT,DWORD,LPCSTR,INT,LPWSTR,INT);
 INT     NormalizeString(NORM_FORM,LPCWSTR,INT,LPWSTR,INT);
 INT          ResolveLocaleName(LPCWSTR,LPWSTR,INT);
 INT          SetCalendarInfoA(LCID,CALID,CALTYPE,LPCSTR);
 INT          SetCalendarInfoW(LCID,CALID,CALTYPE,LPCWSTR);

 BOOL         SetLocaleInfoA(LCID,LCTYPE,LPCSTR);
 BOOL         SetLocaleInfoW(LCID,LCTYPE,LPCWSTR);

 BOOL         SetProcessPreferredUILanguages(DWORD,PCZZWSTR,PULONG);
 BOOL         SetThreadLocale(LCID);
 BOOL         SetThreadPreferredUILanguages(DWORD,PCZZWSTR,PULONG);
 LANGID       SetThreadUILanguage(LANGID);
 BOOL         SetUserGeoID(GEOID);
 BOOL         SetUserGeoName(PWSTR);
 INT          WideCharToMultiByte(UINT,DWORD,LPCWSTR,INT,LPSTR,INT,LPCSTR,LPBOOL);
 INT          FindNLSStringEx(const WCHAR *,DWORD,const WCHAR *,INT,const WCHAR *,INT,INT *,NLSVERSIONINFO *,void *,LPARAM);







# 42 "include/windows.h" 2

# 1 "include/wincon.h" 1 3



























# 1 "include/wingdi.h" 1 3







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 28 "include/wincon.h" 2



# 1 "include/consoleapi.h" 1 3






















# 1 "include/wincontypes.h" 1 3





















typedef struct tagCOORD
{
    SHORT X;
    SHORT Y;
} COORD, *LPCOORD;

typedef struct tagSMALL_RECT
{
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
} SMALL_RECT,*LPSMALL_RECT;

typedef struct tagKEY_EVENT_RECORD
{
    BOOL  bKeyDown;              
    WORD  wRepeatCount;          
    WORD  wVirtualKeyCode;       
    WORD  wVirtualScanCode;      
    union                        
    {
        WCHAR UnicodeChar;       
        CHAR AsciiChar;          
    } uChar;
    DWORD dwControlKeyState;     
} KEY_EVENT_RECORD,*LPKEY_EVENT_RECORD;












typedef struct tagMOUSE_EVENT_RECORD
{
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
} MOUSE_EVENT_RECORD,*LPMOUSE_EVENT_RECORD;














typedef struct tagWINDOW_BUFFER_SIZE_RECORD
{
    COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD,*LPWINDOW_BUFFER_SIZE_RECORD;

typedef struct tagMENU_EVENT_RECORD
{
    UINT dwCommandId;
} MENU_EVENT_RECORD,*LPMENU_EVENT_RECORD;

typedef struct tagFOCUS_EVENT_RECORD
{
    BOOL      bSetFocus;
} FOCUS_EVENT_RECORD,*LPFOCUS_EVENT_RECORD;

typedef struct tagINPUT_RECORD
{
    WORD EventType;
    union
    {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
    } Event;
} INPUT_RECORD,*PINPUT_RECORD;








typedef struct tagCHAR_INFO
{
    union
    {
        WCHAR UnicodeChar;
        CHAR AsciiChar;
    } Char;
    WORD Attributes;
} CHAR_INFO,*LPCHAR_INFO;

typedef struct _CONSOLE_FONT_INFO
{
    DWORD       nFont;
    COORD       dwFontSize;
} CONSOLE_FONT_INFO,*LPCONSOLE_FONT_INFO;

typedef void *HPCON;


# 23 "include/consoleapi.h" 2




























typedef BOOL ( *PHANDLER_ROUTINE)(DWORD dwCtrlType);

typedef struct _CONSOLE_READCONSOLE_CONTROL
{
    ULONG       nLength;
    ULONG       nInitialChars;
    ULONG       dwCtrlWakeupMask;
    ULONG       dwConsoleKeyState;
} CONSOLE_READCONSOLE_CONTROL,*LPCONSOLE_READCONSOLE_CONTROL;





 BOOL     AllocConsole(void);
 BOOL     AttachConsole(DWORD);
 void     ClosePseudoConsole(HPCON);
 HRESULT  CreatePseudoConsole(COORD,HANDLE,HANDLE,DWORD,HPCON *);
 BOOL     FreeConsole(void);
 UINT     GetConsoleCP(void);
 BOOL     GetConsoleMode( HANDLE,DWORD *);
 UINT     GetConsoleOutputCP(void);
 BOOL     GetNumberOfConsoleInputEvents( HANDLE,DWORD *);
 BOOL     PeekConsoleInputA(HANDLE,PINPUT_RECORD,DWORD,DWORD *);
 BOOL     PeekConsoleInputW(HANDLE,PINPUT_RECORD,DWORD,DWORD *);

 BOOL     ReadConsoleA(HANDLE,void *,DWORD,DWORD *,void *);
 BOOL     ReadConsoleW(HANDLE,void *,DWORD,DWORD *,void *);

 BOOL     ReadConsoleInputA(HANDLE,PINPUT_RECORD,DWORD,DWORD *);
 BOOL     ReadConsoleInputW(HANDLE,PINPUT_RECORD,DWORD,DWORD *);

 HRESULT  ResizePseudoConsole(HPCON,COORD);
 BOOL     SetConsoleCtrlHandler( PHANDLER_ROUTINE,BOOL);
 BOOL     SetConsoleMode( HANDLE,DWORD);
 BOOL     WriteConsoleA(HANDLE,const void *,DWORD,DWORD *,void *);
 BOOL     WriteConsoleW(HANDLE,const void *,DWORD,DWORD *,void *);







# 31 "include/wincon.h" 2









































typedef struct _CONSOLE_CURSOR_INFO {
    DWORD	dwSize;   
    BOOL	bVisible; 
} CONSOLE_CURSOR_INFO, *LPCONSOLE_CURSOR_INFO;


typedef struct _CONSOLE_FONT_INFOEX
{
    ULONG       cbSize;
    DWORD       nFont;
    COORD       dwFontSize;
    UINT        FontFamily;
    UINT        FontWeight;
    WCHAR       FaceName[32];
} CONSOLE_FONT_INFOEX,*LPCONSOLE_FONT_INFOEX;

 BOOL  GetCurrentConsoleFontEx(HANDLE,BOOL,LPCONSOLE_FONT_INFOEX);
 BOOL  SetCurrentConsoleFontEx(HANDLE,BOOL,LPCONSOLE_FONT_INFOEX);


typedef struct tagCONSOLE_HISTORY_INFO
{
    UINT        cbSize;
    UINT        HistoryBufferSize;
    UINT        NumberOfHistoryBuffers;
    DWORD       dwFlags;
} CONSOLE_HISTORY_INFO,*LPCONSOLE_HISTORY_INFO;

typedef struct tagCONSOLE_SCREEN_BUFFER_INFO
{
    COORD       dwSize;
    COORD       dwCursorPosition;
    WORD        wAttributes;
    SMALL_RECT  srWindow;
    COORD       dwMaximumWindowSize;
} CONSOLE_SCREEN_BUFFER_INFO,*LPCONSOLE_SCREEN_BUFFER_INFO;

typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX
{
    ULONG       cbSize;
    COORD       dwSize;
    COORD       dwCursorPosition;
    WORD        wAttributes;
    SMALL_RECT  srWindow;
    COORD       dwMaximumWindowSize;
    WORD        wPopupAttributes;
    BOOL        bFullscreenSupported;
    COLORREF    ColorTable[16];
} CONSOLE_SCREEN_BUFFER_INFOEX,*LPCONSOLE_SCREEN_BUFFER_INFOEX;

typedef struct _CONSOLE_SELECTION_INFO
{
    DWORD       dwFlags;
    COORD       dwSelectionAnchor;
    SMALL_RECT  srSelection;
} CONSOLE_SELECTION_INFO,*LPCONSOLE_SELECTION_INFO;


































 COORD  GetConsoleFontSize(HANDLE, DWORD);
 COORD  GetLargestConsoleWindowSize(HANDLE);


 BOOL    AddConsoleAliasA(LPSTR,LPSTR,LPSTR);
 BOOL    AddConsoleAliasW(LPWSTR,LPWSTR,LPWSTR);

 BOOL    CloseConsoleHandle(HANDLE);
 HANDLE  CreateConsoleScreenBuffer(DWORD,DWORD,LPSECURITY_ATTRIBUTES,DWORD,LPVOID);
 HANDLE  DuplicateConsoleHandle(HANDLE,DWORD,BOOL,DWORD);
 BOOL    FillConsoleOutputAttribute( HANDLE,WORD,DWORD,COORD,LPDWORD);
 BOOL    FillConsoleOutputCharacterA(HANDLE,CHAR,DWORD,COORD,LPDWORD);
 BOOL    FillConsoleOutputCharacterW(HANDLE,WCHAR,DWORD,COORD,LPDWORD);

 BOOL    FlushConsoleInputBuffer( HANDLE);
 BOOL    GenerateConsoleCtrlEvent( DWORD,DWORD);
 DWORD   GetConsoleAliasA(LPSTR,LPSTR,DWORD,LPSTR);
 DWORD   GetConsoleAliasW(LPWSTR,LPWSTR,DWORD,LPWSTR);

 DWORD   GetConsoleAliasesA(LPSTR,DWORD,LPSTR);
 DWORD   GetConsoleAliasesW(LPWSTR,DWORD,LPWSTR);

 DWORD   GetConsoleAliasesLengthA(LPSTR);
 DWORD   GetConsoleAliasesLengthW(LPWSTR);

 DWORD   GetConsoleAliasExesA(LPSTR,DWORD);
 DWORD   GetConsoleAliasExesW(LPWSTR,DWORD);

 DWORD   GetConsoleAliasExesLengthA(void);
 DWORD   GetConsoleAliasExesLengthW(void);

 BOOL    GetConsoleCursorInfo( HANDLE,LPCONSOLE_CURSOR_INFO);
 BOOL    GetConsoleDisplayMode(LPDWORD);
 BOOL    GetConsoleHistoryInfo(LPCONSOLE_HISTORY_INFO);
 BOOL    GetConsoleInputExeNameA(DWORD,LPSTR);
 BOOL    GetConsoleInputExeNameW(DWORD,LPWSTR);

 HANDLE  GetConsoleInputWaitHandle(void);
 DWORD   GetConsoleOriginalTitleA(LPSTR,DWORD);
 DWORD   GetConsoleOriginalTitleW(LPWSTR,DWORD);

 DWORD   GetConsoleProcessList(LPDWORD,DWORD);
 BOOL    GetConsoleScreenBufferInfo(HANDLE,LPCONSOLE_SCREEN_BUFFER_INFO);
 BOOL    GetConsoleScreenBufferInfoEx(HANDLE,LPCONSOLE_SCREEN_BUFFER_INFOEX);
 DWORD   GetConsoleTitleA(LPSTR,DWORD);
 DWORD   GetConsoleTitleW(LPWSTR,DWORD);

 HWND    GetConsoleWindow(void);
 BOOL    GetCurrentConsoleFont(HANDLE,BOOL,LPCONSOLE_FONT_INFO);
 BOOL    GetNumberOfConsoleMouseButtons(LPDWORD);
 HANDLE  OpenConsoleA(LPCSTR,DWORD,BOOL,DWORD);
 HANDLE  OpenConsoleW(LPCWSTR,DWORD,BOOL,DWORD);

 BOOL    ReadConsoleOutputA( HANDLE,LPCHAR_INFO,COORD,COORD,LPSMALL_RECT);
 BOOL    ReadConsoleOutputW( HANDLE,LPCHAR_INFO,COORD,COORD,LPSMALL_RECT);

 BOOL    ReadConsoleOutputAttribute( HANDLE,LPWORD,DWORD,COORD,LPDWORD);
 BOOL    ReadConsoleOutputCharacterA(HANDLE,LPSTR,DWORD,COORD,LPDWORD);
 BOOL    ReadConsoleOutputCharacterW(HANDLE,LPWSTR,DWORD,COORD,LPDWORD);

 BOOL    ScrollConsoleScreenBufferA( HANDLE,const SMALL_RECT *,const SMALL_RECT *,COORD,const CHAR_INFO *);
 BOOL    ScrollConsoleScreenBufferW( HANDLE,const SMALL_RECT *,const SMALL_RECT *com,COORD,const CHAR_INFO *);

 BOOL    SetConsoleActiveScreenBuffer( HANDLE);
 BOOL    SetConsoleCP(UINT);
 BOOL    SetConsoleCursorInfo( HANDLE,LPCONSOLE_CURSOR_INFO);
 BOOL    SetConsoleCursorPosition(HANDLE,COORD);
 BOOL    SetConsoleDisplayMode(HANDLE,DWORD,LPCOORD);
 BOOL    SetConsoleHistoryInfo(LPCONSOLE_HISTORY_INFO);
 BOOL    SetConsoleOutputCP(UINT);
 BOOL    SetConsoleScreenBufferInfoEx(HANDLE,LPCONSOLE_SCREEN_BUFFER_INFOEX);
 BOOL    SetConsoleScreenBufferSize(HANDLE,COORD);
 BOOL    SetConsoleTextAttribute( HANDLE,WORD);
 BOOL    SetConsoleTitleA(LPCSTR);
 BOOL    SetConsoleTitleW(LPCWSTR);

 BOOL    SetConsoleWindowInfo( HANDLE,BOOL,LPSMALL_RECT);
 BOOL    VerifyConsoleIoHandle(HANDLE);
 BOOL    WriteConsoleInputA(HANDLE,const INPUT_RECORD *,DWORD,LPDWORD);
 BOOL    WriteConsoleInputW(HANDLE,const INPUT_RECORD *,DWORD,LPDWORD);

 BOOL    WriteConsoleOutputA(HANDLE,const CHAR_INFO*,COORD,COORD,LPSMALL_RECT);
 BOOL    WriteConsoleOutputW(HANDLE,const CHAR_INFO*,COORD,COORD,LPSMALL_RECT);

 BOOL    WriteConsoleOutputAttribute(HANDLE,const WORD *,DWORD,COORD,LPDWORD);
 BOOL    WriteConsoleOutputCharacterA(HANDLE,LPCSTR,DWORD,COORD,LPDWORD);
 BOOL    WriteConsoleOutputCharacterW(HANDLE,LPCWSTR,DWORD,COORD,LPDWORD);







# 43 "include/windows.h" 2

# 1 "include/winver.h" 1 3
























# 1 "include/verrsrc.h" 1 3







































































































	


	





	



	

































typedef struct tagVS_FIXEDFILEINFO {
	DWORD   dwSignature;
	DWORD   dwStrucVersion;
	DWORD   dwFileVersionMS;
	DWORD   dwFileVersionLS;
	DWORD   dwProductVersionMS;
	DWORD   dwProductVersionLS;
	DWORD   dwFileFlagsMask;
	DWORD   dwFileFlags;
	DWORD   dwFileOS;
	DWORD   dwFileType;
	DWORD   dwFileSubtype;
	DWORD   dwFileDateMS;
	DWORD   dwFileDateLS;
} VS_FIXEDFILEINFO;








# 25 "include/winver.h" 2









DWORD  VerInstallFileA(DWORD,LPCSTR,LPCSTR,LPCSTR,LPCSTR,LPCSTR,LPSTR,PUINT);
DWORD  VerInstallFileW(DWORD,LPCWSTR,LPCWSTR,LPCWSTR,LPCWSTR,LPCWSTR,LPWSTR,PUINT);


 DWORD  VerFindFileA(DWORD,LPCSTR,LPCSTR,LPCSTR,LPSTR,PUINT,LPSTR,PUINT);
 DWORD  VerFindFileW(DWORD,LPCWSTR,LPCWSTR,LPCWSTR,LPWSTR,PUINT,LPWSTR,PUINT);

 DWORD  VerLanguageNameA(DWORD,LPSTR,DWORD);
 DWORD  VerLanguageNameW(DWORD,LPWSTR,DWORD);

 BOOL   VerQueryValueA(LPCVOID,LPCSTR,LPVOID*,PUINT);
 BOOL   VerQueryValueW(LPCVOID,LPCWSTR,LPVOID*,PUINT);

 DWORD  GetFileVersionInfoSizeA(LPCSTR,LPDWORD);
 DWORD  GetFileVersionInfoSizeW(LPCWSTR,LPDWORD);

 BOOL   GetFileVersionInfoA(LPCSTR,DWORD,DWORD,LPVOID);
 BOOL   GetFileVersionInfoW(LPCWSTR,DWORD,DWORD,LPVOID);

 DWORD  GetFileVersionInfoSizeExA(DWORD,LPCSTR,LPDWORD);
 DWORD  GetFileVersionInfoSizeExW(DWORD,LPCWSTR,LPDWORD);

 BOOL   GetFileVersionInfoExA(DWORD,LPCSTR,DWORD,DWORD,LPVOID);
 BOOL   GetFileVersionInfoExW(DWORD,LPCWSTR,DWORD,DWORD,LPVOID);









# 44 "include/windows.h" 2

# 1 "include/winreg.h" 1 3








































typedef struct value_entA
{   LPSTR	ve_valuename;
    DWORD	ve_valuelen;
    DWORD_PTR	ve_valueptr;
    DWORD	ve_type;
} VALENTA, *PVALENTA;

typedef struct value_entW {
    LPWSTR	ve_valuename;
    DWORD	ve_valuelen;
    DWORD_PTR	ve_valueptr;
    DWORD	ve_type;
} VALENTW, *PVALENTW;

typedef ACCESS_MASK REGSAM;
typedef LONG LSTATUS;





# 1 "include/reason.h" 1 3











































































# 62 "include/winreg.h" 2
































 BOOL       AbortSystemShutdownA(LPSTR);
 BOOL       AbortSystemShutdownW(LPWSTR);

 DWORD      InitiateShutdownA(char*,char*,DWORD,DWORD,DWORD);
 DWORD      InitiateShutdownW(WCHAR*,WCHAR*,DWORD,DWORD,DWORD);

 BOOL       InitiateSystemShutdownA(LPSTR,LPSTR,DWORD,BOOL,BOOL);
 BOOL       InitiateSystemShutdownW(LPWSTR,LPWSTR,DWORD,BOOL,BOOL);

 BOOL       InitiateSystemShutdownExA(LPSTR,LPSTR,DWORD,BOOL,BOOL,DWORD);
 BOOL       InitiateSystemShutdownExW(LPWSTR,LPWSTR,DWORD,BOOL,BOOL,DWORD);

 LSTATUS    RegCloseKey(HKEY);
 LSTATUS    RegConnectRegistryA(LPCSTR,HKEY,PHKEY);
 LSTATUS    RegConnectRegistryW(LPCWSTR,HKEY,PHKEY);

 LSTATUS    RegCopyTreeA(HKEY,const char*,HKEY);
 LSTATUS    RegCopyTreeW(HKEY,const WCHAR*,HKEY);

 LSTATUS    RegCreateKeyA(HKEY,LPCSTR,PHKEY);
 LSTATUS    RegCreateKeyW(HKEY,LPCWSTR,PHKEY);

 LSTATUS    RegCreateKeyExA(HKEY,LPCSTR,DWORD,LPSTR,DWORD,REGSAM,LPSECURITY_ATTRIBUTES,PHKEY,LPDWORD);
 LSTATUS    RegCreateKeyExW(HKEY,LPCWSTR,DWORD,LPWSTR,DWORD,REGSAM,LPSECURITY_ATTRIBUTES,PHKEY,LPDWORD);

 LSTATUS    RegDeleteKeyA(HKEY,LPCSTR);
 LSTATUS    RegDeleteKeyW(HKEY,LPCWSTR);

 LSTATUS    RegDeleteKeyExA(HKEY,LPCSTR,REGSAM,DWORD);
 LSTATUS    RegDeleteKeyExW(HKEY,LPCWSTR,REGSAM,DWORD);

 LSTATUS    RegDeleteKeyValueA(HKEY,LPCSTR,LPCSTR);
 LSTATUS    RegDeleteKeyValueW(HKEY,LPCWSTR,LPCWSTR);

 LSTATUS    RegDeleteTreeA(HKEY,LPCSTR);
 LSTATUS    RegDeleteTreeW(HKEY,LPCWSTR);

 LSTATUS    RegDeleteValueA(HKEY,LPCSTR);
 LSTATUS    RegDeleteValueW(HKEY,LPCWSTR);

 LSTATUS    RegDisablePredefinedCache(void);
 LSTATUS    RegEnumKeyA(HKEY,DWORD,LPSTR,DWORD);
 LSTATUS    RegEnumKeyW(HKEY,DWORD,LPWSTR,DWORD);

 LSTATUS    RegEnumKeyExA(HKEY,DWORD,LPSTR,LPDWORD,LPDWORD,LPSTR,LPDWORD,LPFILETIME);
 LSTATUS    RegEnumKeyExW(HKEY,DWORD,LPWSTR,LPDWORD,LPDWORD,LPWSTR,LPDWORD,LPFILETIME);

 LSTATUS    RegEnumValueA(HKEY,DWORD,LPSTR,LPDWORD,LPDWORD,LPDWORD,LPBYTE,LPDWORD);
 LSTATUS    RegEnumValueW(HKEY,DWORD,LPWSTR,LPDWORD,LPDWORD,LPDWORD,LPBYTE,LPDWORD);

 LSTATUS    RegFlushKey(HKEY);
 LSTATUS    RegGetKeySecurity(HKEY,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,LPDWORD);
 LSTATUS    RegGetValueA(HKEY,LPCSTR,LPCSTR,DWORD,LPDWORD,PVOID,LPDWORD);
 LSTATUS    RegGetValueW(HKEY,LPCWSTR,LPCWSTR,DWORD,LPDWORD,PVOID,LPDWORD);

 LSTATUS    RegLoadAppKeyA(const char*,HKEY*,REGSAM,DWORD,DWORD);
 LSTATUS    RegLoadAppKeyW(const WCHAR*,HKEY*,REGSAM,DWORD,DWORD);

 LSTATUS    RegLoadKeyA(HKEY,LPCSTR,LPCSTR);
 LSTATUS    RegLoadKeyW(HKEY,LPCWSTR,LPCWSTR);

 LSTATUS    RegLoadMUIStringA(HKEY,LPCSTR,LPSTR,DWORD,LPDWORD,DWORD,LPCSTR);
 LSTATUS    RegLoadMUIStringW(HKEY,LPCWSTR,LPWSTR,DWORD,LPDWORD,DWORD,LPCWSTR);

 LSTATUS    RegNotifyChangeKeyValue(HKEY,BOOL,DWORD,HANDLE,BOOL);
 LSTATUS    RegOpenCurrentUser(REGSAM,PHKEY);
 LSTATUS    RegOpenKeyA(HKEY,LPCSTR,PHKEY);
 LSTATUS    RegOpenKeyW(HKEY,LPCWSTR,PHKEY);

 LSTATUS    RegOpenKeyExW(HKEY,LPCWSTR,DWORD,REGSAM,PHKEY);
 LSTATUS    RegOpenKeyExA(HKEY,LPCSTR,DWORD,REGSAM,PHKEY);

 LSTATUS    RegOpenUserClassesRoot(HANDLE,DWORD,REGSAM,PHKEY);
 LSTATUS    RegOverridePredefKey(HKEY,HKEY);
 LSTATUS    RegQueryInfoKeyW(HKEY,LPWSTR,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPFILETIME);
 LSTATUS    RegQueryInfoKeyA(HKEY,LPSTR,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPDWORD,LPFILETIME);

 LSTATUS    RegQueryMultipleValuesA(HKEY,PVALENTA,DWORD,LPSTR,LPDWORD);
 LSTATUS    RegQueryMultipleValuesW(HKEY,PVALENTW,DWORD,LPWSTR,LPDWORD);

 LONG       RegQueryReflectionKey(HKEY,BOOL*);
 LSTATUS    RegQueryValueA(HKEY,LPCSTR,LPSTR,LPLONG);
 LSTATUS    RegQueryValueW(HKEY,LPCWSTR,LPWSTR,LPLONG);

 LSTATUS    RegQueryValueExA(HKEY,LPCSTR,LPDWORD,LPDWORD,LPBYTE,LPDWORD);
 LSTATUS    RegQueryValueExW(HKEY,LPCWSTR,LPDWORD,LPDWORD,LPBYTE,LPDWORD);

 LSTATUS    RegRenameKey(HKEY,LPCWSTR,LPCWSTR);
 LSTATUS    RegReplaceKeyA(HKEY,LPCSTR,LPCSTR,LPCSTR);
 LSTATUS    RegReplaceKeyW(HKEY,LPCWSTR,LPCWSTR,LPCWSTR);

 LSTATUS    RegRestoreKeyA(HKEY,LPCSTR,DWORD);
 LSTATUS    RegRestoreKeyW(HKEY,LPCWSTR,DWORD);

 LSTATUS    RegSaveKeyA(HKEY,LPCSTR,LPSECURITY_ATTRIBUTES);
 LSTATUS    RegSaveKeyW(HKEY,LPCWSTR,LPSECURITY_ATTRIBUTES);

 LSTATUS    RegSaveKeyExA(HKEY,LPCSTR,LPSECURITY_ATTRIBUTES,DWORD);
 LSTATUS    RegSaveKeyExW(HKEY,LPCWSTR,LPSECURITY_ATTRIBUTES,DWORD);

 LSTATUS    RegSetKeySecurity(HKEY,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR);
 LSTATUS    RegSetKeyValueA(HKEY,LPCSTR,LPCSTR,DWORD,const void*,DWORD);
 LSTATUS    RegSetKeyValueW(HKEY,LPCWSTR,LPCWSTR,DWORD,const void*,DWORD);
 LSTATUS    RegSetValueA(HKEY,LPCSTR,DWORD,LPCSTR,DWORD);
 LSTATUS    RegSetValueW(HKEY,LPCWSTR,DWORD,LPCWSTR,DWORD);

 LSTATUS    RegSetValueExA(HKEY,LPCSTR,DWORD,DWORD,const BYTE*,DWORD);
 LSTATUS    RegSetValueExW(HKEY,LPCWSTR,DWORD,DWORD,const BYTE*,DWORD);

 LSTATUS    RegUnLoadKeyA(HKEY,LPCSTR);
 LSTATUS    RegUnLoadKeyW(HKEY,LPCWSTR);







# 45 "include/windows.h" 2

# 1 "include/winnetwk.h" 1 3























































































typedef struct {
	DWORD	dwScope;
	DWORD	dwType;
	DWORD	dwDisplayType;
	DWORD	dwUsage;
	LPSTR	lpLocalName;
	LPSTR	lpRemoteName;
	LPSTR	lpComment ;
	LPSTR	lpProvider;
} NETRESOURCEA,*LPNETRESOURCEA;

typedef struct {
	DWORD	dwScope;
	DWORD	dwType;
	DWORD	dwDisplayType;
	DWORD	dwUsage;
	LPWSTR	lpLocalName;
	LPWSTR	lpRemoteName;
	LPWSTR	lpComment ;
	LPWSTR	lpProvider;
} NETRESOURCEW,*LPNETRESOURCEW;






















DWORD  WNetAddConnectionA(LPCSTR,LPCSTR,LPCSTR);
DWORD  WNetAddConnectionW(LPCWSTR,LPCWSTR,LPCWSTR);

DWORD  WNetAddConnection2A(LPNETRESOURCEA,LPCSTR,LPCSTR,DWORD);
DWORD  WNetAddConnection2W(LPNETRESOURCEW,LPCWSTR,LPCWSTR,DWORD);

DWORD  WNetAddConnection3A(HWND,LPNETRESOURCEA,LPCSTR,LPCSTR,DWORD);
DWORD  WNetAddConnection3W(HWND,LPNETRESOURCEW,LPCWSTR,LPCWSTR,DWORD);

DWORD  WNetCancelConnectionA(LPCSTR,BOOL);
DWORD  WNetCancelConnectionW(LPCWSTR,BOOL);

DWORD  WNetCancelConnection2A(LPCSTR,DWORD,BOOL);
DWORD  WNetCancelConnection2W(LPCWSTR,DWORD,BOOL);

DWORD  WNetGetConnectionA(LPCSTR,LPSTR,LPDWORD);
DWORD  WNetGetConnectionW(LPCWSTR,LPWSTR,LPDWORD);

DWORD  WNetGetLastErrorA(LPDWORD,LPSTR,DWORD,LPSTR,DWORD);
DWORD  WNetGetLastErrorW(LPDWORD,LPWSTR,DWORD,LPWSTR,DWORD);

DWORD  WNetRestoreConnectionA(HWND,LPCSTR);
DWORD  WNetRestoreConnectionW(HWND,LPCWSTR);

DWORD  WNetUseConnectionA(HWND,LPNETRESOURCEA,LPCSTR,LPCSTR,DWORD,LPSTR,LPDWORD,LPDWORD);
DWORD  WNetUseConnectionW(HWND,LPNETRESOURCEW,LPCWSTR,LPCWSTR,DWORD,LPWSTR,LPDWORD,LPDWORD);

DWORD  WNetSetConnectionA(LPCSTR,DWORD,LPVOID);
DWORD  WNetSetConnectionW(LPCWSTR,DWORD,LPVOID);






typedef struct {
    DWORD cbStructure;       
    HWND hwndOwner;          
    LPNETRESOURCEA lpConnRes;
    DWORD dwFlags;           
    DWORD dwDevNum;          
} CONNECTDLGSTRUCTA, *LPCONNECTDLGSTRUCTA;
typedef struct {
    DWORD cbStructure;       
    HWND hwndOwner;          
    LPNETRESOURCEW lpConnRes;
    DWORD dwFlags;           
    DWORD dwDevNum;          
} CONNECTDLGSTRUCTW, *LPCONNECTDLGSTRUCTW;











typedef struct {
    DWORD           cbStructure;      
    HWND            hwndOwner;        
    LPSTR           lpLocalName;      
    LPSTR           lpRemoteName;     
    DWORD           dwFlags;          
} DISCDLGSTRUCTA, *LPDISCDLGSTRUCTA;
typedef struct {
    DWORD           cbStructure;      
    HWND            hwndOwner;        
    LPWSTR          lpLocalName;      
    LPWSTR          lpRemoteName;     
    DWORD           dwFlags;          
} DISCDLGSTRUCTW, *LPDISCDLGSTRUCTW;







DWORD  WNetConnectionDialog(HWND,DWORD);
DWORD  WNetDisconnectDialog(HWND,DWORD);
DWORD  WNetConnectionDialog1A(LPCONNECTDLGSTRUCTA);
DWORD  WNetConnectionDialog1W(LPCONNECTDLGSTRUCTW);

DWORD  WNetDisconnectDialog1A(LPDISCDLGSTRUCTA);
DWORD  WNetDisconnectDialog1W(LPDISCDLGSTRUCTW);






DWORD  WNetOpenEnumA(DWORD,DWORD,DWORD,LPNETRESOURCEA,LPHANDLE);
DWORD  WNetOpenEnumW(DWORD,DWORD,DWORD,LPNETRESOURCEW,LPHANDLE);

DWORD  WNetEnumResourceA(HANDLE,LPDWORD,LPVOID,LPDWORD);
DWORD  WNetEnumResourceW(HANDLE,LPDWORD,LPVOID,LPDWORD);

DWORD  WNetGetResourceInformationA(LPNETRESOURCEA,LPVOID,LPDWORD,LPSTR*);
DWORD  WNetGetResourceInformationW(LPNETRESOURCEW,LPVOID,LPDWORD,LPWSTR*);

DWORD  WNetGetResourceParentA(LPNETRESOURCEA,LPVOID,LPDWORD);
DWORD  WNetGetResourceParentW(LPNETRESOURCEW,LPVOID,LPDWORD);

DWORD  WNetCloseEnum(HANDLE);








typedef struct {
    LPSTR    lpUniversalName;
} UNIVERSAL_NAME_INFOA, *LPUNIVERSAL_NAME_INFOA;
typedef struct {
    LPWSTR   lpUniversalName;
} UNIVERSAL_NAME_INFOW, *LPUNIVERSAL_NAME_INFOW;




typedef struct {
    LPSTR    lpUniversalName;
    LPSTR    lpConnectionName;
    LPSTR    lpRemainingPath;
}REMOTE_NAME_INFOA, *LPREMOTE_NAME_INFOA;
typedef struct {
    LPWSTR   lpUniversalName;
    LPWSTR   lpConnectionName;
    LPWSTR   lpRemainingPath;
}REMOTE_NAME_INFOW, *LPREMOTE_NAME_INFOW;




DWORD  WNetGetUniversalNameA(LPCSTR,DWORD,LPVOID,LPDWORD);
DWORD  WNetGetUniversalNameW(LPCWSTR,DWORD,LPVOID,LPDWORD);






DWORD  WNetGetUserA(LPCSTR,LPSTR,LPDWORD);
DWORD  WNetGetUserW(LPCWSTR,LPWSTR,LPDWORD);







DWORD  WNetGetProviderNameA(DWORD,LPSTR,LPDWORD);
DWORD  WNetGetProviderNameW(DWORD,LPWSTR,LPDWORD);


typedef struct {
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    DWORD dwHandle;
    WORD  wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
} NETINFOSTRUCT, *LPNETINFOSTRUCT;





DWORD  WNetGetNetworkInformationA(LPCSTR,LPNETINFOSTRUCT);
DWORD  WNetGetNetworkInformationW(LPCWSTR,LPNETINFOSTRUCT);
























































typedef struct {
	DWORD	cbStructure;
	DWORD	dwFlags;
	DWORD	dwSpeed;
	DWORD	dwDelay;
	DWORD	dwOptDataSize;
} NETCONNECTINFOSTRUCT,*LPNETCONNECTINFOSTRUCT;






DWORD  MultinetGetConnectionPerformanceA(LPNETRESOURCEA,LPNETCONNECTINFOSTRUCT);
DWORD  MultinetGetConnectionPerformanceW(LPNETRESOURCEW,LPNETCONNECTINFOSTRUCT);

DWORD  MultinetGetErrorTextA(DWORD,DWORD,DWORD);
DWORD  MultinetGetErrorTextW(DWORD,DWORD,DWORD);







typedef struct tagPASSWORD_CACHE_ENTRY
{
	WORD cbEntry;
	WORD cbResource;
	WORD cbPassword;
	BYTE iEntry;
	BYTE nType;
	BYTE abResource[1];
} PASSWORD_CACHE_ENTRY;

typedef BOOL ( *ENUMPASSWORDPROC)(PASSWORD_CACHE_ENTRY *, DWORD);
UINT  WNetEnumCachedPasswords( LPSTR, WORD, BYTE, ENUMPASSWORDPROC, DWORD);
DWORD  WNetGetCachedPassword( LPSTR, WORD, LPSTR, LPWORD, BYTE );
DWORD  WNetCachePassword( LPSTR, WORD, LPSTR, WORD, BYTE, WORD );






# 46 "include/windows.h" 2



























































# 23 "include/rpc.h" 2












# 1 "include/basetsd.h" 1 3























































































































































































































































































































# 35 "include/rpc.h" 2















typedef LONG RPC_STATUS;
typedef void* I_RPC_HANDLE;


# 1 "include/rpcdce.h" 1 3




































# 1 "include/specstrings.h" 1 3
























































































































































































































































































































































# 37 "include/rpcdce.h" 2







typedef GUID UUID;


typedef unsigned char* RPC_CSTR;
typedef unsigned short* RPC_WSTR;
typedef void* RPC_AUTH_IDENTITY_HANDLE;
typedef void* RPC_AUTHZ_HANDLE;
typedef void* RPC_IF_HANDLE;
typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
typedef RPC_BINDING_HANDLE handle_t;



typedef struct _RPC_BINDING_VECTOR
{
  ULONG Count;
  RPC_BINDING_HANDLE BindingH[1];
} RPC_BINDING_VECTOR;


typedef struct _UUID_VECTOR
{
  ULONG Count;
  UUID *Uuid[1];
} UUID_VECTOR;


typedef struct _RPC_IF_ID
{
  UUID Uuid;
  unsigned short VersMajor;
  unsigned short VersMinor;
} RPC_IF_ID;

typedef struct
{
  ULONG Count;
  RPC_IF_ID *IfId[1];
} RPC_IF_ID_VECTOR;

typedef struct
{
  unsigned int Count;
  ULONG Stats[1];
} RPC_STATS_VECTOR;

typedef struct _RPC_PROTSEQ_VECTORA
{
  unsigned int Count;
  unsigned char *Protseq[1];
} RPC_PROTSEQ_VECTORA;

typedef struct _RPC_PROTSEQ_VECTORW
{
  unsigned int Count;
  unsigned short *Protseq[1];
} RPC_PROTSEQ_VECTORW;



typedef I_RPC_HANDLE *RPC_EP_INQ_HANDLE;












































































































typedef RPC_STATUS  RPC_IF_CALLBACK_FN( RPC_IF_HANDLE InterfaceUuid, void *Context );
typedef void ( *RPC_AUTH_KEY_RETRIEVAL_FN)(void *, RPC_WSTR, ULONG, void **, RPC_STATUS *);

typedef struct _RPC_POLICY
{
  unsigned int  Length;
  ULONG EndpointFlags;
  ULONG NICFlags;
} RPC_POLICY,  *PRPC_POLICY;

typedef struct _SEC_WINNT_AUTH_IDENTITY_W
{
    unsigned short* User;
    ULONG UserLength;
    unsigned short* Domain;
    ULONG DomainLength;
    unsigned short* Password;
    ULONG PasswordLength;
    ULONG Flags;
} SEC_WINNT_AUTH_IDENTITY_W, *PSEC_WINNT_AUTH_IDENTITY_W;

typedef struct _SEC_WINNT_AUTH_IDENTITY_A
{
    unsigned char* User;
    ULONG UserLength;
    unsigned char* Domain;
    ULONG DomainLength;
    unsigned char* Password;
    ULONG PasswordLength;
    ULONG Flags;
} SEC_WINNT_AUTH_IDENTITY_A, *PSEC_WINNT_AUTH_IDENTITY_A;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W
{
    SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
    ULONG Flags;
    ULONG AuthenticationTarget;
    ULONG NumberOfAuthnSchemes;
    ULONG *AuthnSchemes;
    unsigned short *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_W;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A
{
    SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
    ULONG Flags;
    ULONG AuthenticationTarget;
    ULONG NumberOfAuthnSchemes;
    ULONG *AuthnSchemes;
    unsigned char *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_A;

typedef struct _RPC_SECURITY_QOS {
    ULONG Version;
    ULONG Capabilities;
    ULONG IdentityTracking;
    ULONG ImpersonationType;
} RPC_SECURITY_QOS, *PRPC_SECURITY_QOS;

typedef struct _RPC_SECURITY_QOS_V2_W
{
    ULONG Version;
    ULONG Capabilities;
    ULONG IdentityTracking;
    ULONG ImpersonationType;
    ULONG AdditionalSecurityInfoType;
    union
    {
        RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
    } u;
} RPC_SECURITY_QOS_V2_W, *PRPC_SECURITY_QOS_V2_W;

typedef struct _RPC_SECURITY_QOS_V2_A
{
    ULONG Version;
    ULONG Capabilities;
    ULONG IdentityTracking;
    ULONG ImpersonationType;
    ULONG AdditionalSecurityInfoType;
    union
    {
        RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
    } u;
} RPC_SECURITY_QOS_V2_A, *PRPC_SECURITY_QOS_V2_A;


























RPC_STATUS  DceErrorInqTextA(RPC_STATUS e, RPC_CSTR buffer);
RPC_STATUS  DceErrorInqTextW(RPC_STATUS e, RPC_WSTR buffer);


  void 
  RpcRaiseException( RPC_STATUS exception );
        
 int  RpcExceptionFilter(ULONG);

 RPC_STATUS 
  RpcBindingCopy( RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE* DestinationBinding );

 RPC_STATUS 
  RpcBindingFree( RPC_BINDING_HANDLE* Binding );

 RPC_STATUS 
  RpcBindingInqObject( RPC_BINDING_HANDLE Binding, UUID* ObjectUuid );
 RPC_STATUS 
  RpcBindingInqOption( RPC_BINDING_HANDLE Binding, ULONG Option, ULONG_PTR *OptionValue );
 RPC_STATUS 
  RpcBindingReset( RPC_BINDING_HANDLE Binding );
 RPC_STATUS 
  RpcBindingServerFromClient( RPC_BINDING_HANDLE ClientBinding, RPC_BINDING_HANDLE* ServerBinding );
 RPC_STATUS 
  RpcBindingSetObject( RPC_BINDING_HANDLE Binding, UUID* ObjectUuid );
 RPC_STATUS 
  RpcBindingSetOption( RPC_BINDING_HANDLE Binding, ULONG Option, ULONG_PTR OptionValue );
 RPC_STATUS 
  RpcObjectSetType( UUID* ObjUuid, UUID* TypeUuid );

 RPC_STATUS 
  RpcBindingFromStringBindingA( RPC_CSTR StringBinding, RPC_BINDING_HANDLE* Binding );
 RPC_STATUS 
  RpcBindingFromStringBindingW( RPC_WSTR StringBinding, RPC_BINDING_HANDLE* Binding );


 RPC_STATUS 
  RpcBindingToStringBindingA( RPC_BINDING_HANDLE Binding, RPC_CSTR *StringBinding );
 RPC_STATUS 
  RpcBindingToStringBindingW( RPC_BINDING_HANDLE Binding, RPC_WSTR *StringBinding );


 RPC_STATUS 
  RpcBindingVectorFree( RPC_BINDING_VECTOR** BindingVector );

 RPC_STATUS 
  RpcStringBindingComposeA( RPC_CSTR ObjUuid, RPC_CSTR Protseq, RPC_CSTR NetworkAddr,
                            RPC_CSTR Endpoint, RPC_CSTR Options, RPC_CSTR *StringBinding );
 RPC_STATUS 
  RpcStringBindingComposeW( RPC_WSTR ObjUuid, RPC_WSTR Protseq, RPC_WSTR NetworkAddr,
                            RPC_WSTR Endpoint, RPC_WSTR Options, RPC_WSTR *StringBinding );


 RPC_STATUS 
  RpcStringBindingParseA( RPC_CSTR StringBinding, RPC_CSTR *ObjUuid, RPC_CSTR *Protseq,
                          RPC_CSTR *NetworkAddr, RPC_CSTR *Endpoint, RPC_CSTR *NetworkOptions );
 RPC_STATUS 
  RpcStringBindingParseW( RPC_WSTR StringBinding, RPC_WSTR *ObjUuid, RPC_WSTR *Protseq,
                          RPC_WSTR *NetworkAddr, RPC_WSTR *Endpoint, RPC_WSTR *NetworkOptions );


 RPC_STATUS 
  RpcEpResolveBinding( RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec );

 RPC_STATUS 
  RpcEpRegisterA( RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR* BindingVector,
                  UUID_VECTOR* UuidVector, RPC_CSTR Annotation );
 RPC_STATUS 
  RpcEpRegisterW( RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR* BindingVector,
                  UUID_VECTOR* UuidVector, RPC_WSTR Annotation );


 RPC_STATUS 
  RpcEpRegisterNoReplaceA( RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR* BindingVector,
                           UUID_VECTOR* UuidVector, RPC_CSTR Annotation );
 RPC_STATUS 
  RpcEpRegisterNoReplaceW( RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR* BindingVector,
                           UUID_VECTOR* UuidVector, RPC_WSTR Annotation );


 RPC_STATUS 
  RpcEpUnregister( RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR* BindingVector,
                   UUID_VECTOR* UuidVector );

 RPC_STATUS 
  RpcServerInqBindings( RPC_BINDING_VECTOR** BindingVector );

 RPC_STATUS 
  RpcServerListen( unsigned int MinimumCallThreads, unsigned int MaxCalls, unsigned int DontWait );

 RPC_STATUS 
  RpcMgmtEnableIdleCleanup( void );

typedef int ( *RPC_MGMT_AUTHORIZATION_FN)( RPC_BINDING_HANDLE, ULONG, RPC_STATUS * );

 RPC_STATUS  RpcMgmtSetAuthorizationFn( RPC_MGMT_AUTHORIZATION_FN );

 RPC_STATUS  RpcMgmtSetCancelTimeout(LONG);

 RPC_STATUS 
  RpcMgmtWaitServerListen( void );

 RPC_STATUS 
  RpcMgmtInqStats( RPC_BINDING_HANDLE Binding, RPC_STATS_VECTOR **Statistics );

 RPC_STATUS 
  RpcMgmtStopServerListening( RPC_BINDING_HANDLE Binding );

 RPC_STATUS 
  RpcMgmtIsServerListening(RPC_BINDING_HANDLE Binding);

 RPC_STATUS 
  RpcMgmtInqIfIds( RPC_BINDING_HANDLE Binding, RPC_IF_ID_VECTOR** IfIdVector );

 RPC_STATUS 
  RpcMgmtEpEltInqBegin( RPC_BINDING_HANDLE EpBinding, ULONG InquiryType, RPC_IF_ID *IfId,
                        ULONG VersOption, UUID *ObjectUuid, RPC_EP_INQ_HANDLE *InquiryContext);

 RPC_STATUS 
  RpcMgmtSetComTimeout( RPC_BINDING_HANDLE Binding, unsigned int Timeout );

 RPC_STATUS 
  RpcMgmtSetServerStackSize( ULONG ThreadStackSize );

 RPC_STATUS 
RpcMgmtStatsVectorFree( RPC_STATS_VECTOR **StatsVector );

 RPC_STATUS 
  RpcServerRegisterIf( RPC_IF_HANDLE IfSpec, UUID* MgrTypeUuid, void* MgrEpv );

 RPC_STATUS 
  RpcServerRegisterIfEx( RPC_IF_HANDLE IfSpec, UUID* MgrTypeUuid, void* MgrEpv,
                         unsigned int Flags, unsigned int MaxCalls, RPC_IF_CALLBACK_FN* IfCallbackFn );

 RPC_STATUS 
  RpcServerRegisterIf2( RPC_IF_HANDLE IfSpec, UUID* MgrTypeUuid, void* MgrEpv,
                        unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN* IfCallbackFn );

 RPC_STATUS 
  RpcServerRegisterIf3( RPC_IF_HANDLE IfSpec, UUID* MgrTypeUuid, void* MgrEpv,
                        unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize,
                        RPC_IF_CALLBACK_FN* IfCallbackFn, void* SecurityDescriptor );

 RPC_STATUS 
  RpcServerUnregisterIf( RPC_IF_HANDLE IfSpec, UUID* MgrTypeUuid, unsigned int WaitForCallsToComplete );

 RPC_STATUS 
  RpcServerUnregisterIfEx( RPC_IF_HANDLE IfSpec, UUID* MgrTypeUuid, int RundownContextHandles );


 RPC_STATUS 
  RpcServerUseProtseqA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor);
 RPC_STATUS 
  RpcServerUseProtseqW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor);


 RPC_STATUS 
  RpcServerUseProtseqEpA( RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor );
 RPC_STATUS 
  RpcServerUseProtseqEpW( RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor );


 RPC_STATUS 
  RpcServerUseProtseqEpExA( RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor,
                            PRPC_POLICY Policy );
 RPC_STATUS 
  RpcServerUseProtseqEpExW( RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor,
                            PRPC_POLICY Policy );


 RPC_STATUS 
  RpcServerRegisterAuthInfoA( RPC_CSTR ServerPrincName, ULONG AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,
                              void *Arg );
 RPC_STATUS 
  RpcServerRegisterAuthInfoW( RPC_WSTR ServerPrincName, ULONG AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,
                              void *Arg );


 RPC_STATUS 
  RpcBindingSetAuthInfoExA( RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, ULONG AuthnLevel,
                            ULONG AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, ULONG AuthzSvr,
                            RPC_SECURITY_QOS *SecurityQos );

 RPC_STATUS 
  RpcBindingSetAuthInfoExW( RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, ULONG AuthnLevel,
                            ULONG AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, ULONG AuthzSvr,
                            RPC_SECURITY_QOS *SecurityQos );


 RPC_STATUS 
  RpcBindingSetAuthInfoA( RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, ULONG AuthnLevel,
                          ULONG AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, ULONG AuthzSvr );

 RPC_STATUS 
  RpcBindingSetAuthInfoW( RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, ULONG AuthnLevel,
                          ULONG AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, ULONG AuthzSvr );


 RPC_STATUS 
  RpcBindingInqAuthInfoExA( RPC_BINDING_HANDLE Binding, RPC_CSTR * ServerPrincName, ULONG *AuthnLevel,
                            ULONG *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, ULONG *AuthzSvc,
                            ULONG RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS );

 RPC_STATUS 
  RpcBindingInqAuthInfoExW( RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, ULONG *AuthnLevel,
                            ULONG *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, ULONG *AuthzSvc,
                            ULONG RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS );


 RPC_STATUS 
  RpcBindingInqAuthInfoA( RPC_BINDING_HANDLE Binding, RPC_CSTR * ServerPrincName, ULONG *AuthnLevel,
                          ULONG *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, ULONG *AuthzSvc );

 RPC_STATUS 
  RpcBindingInqAuthInfoW( RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, ULONG *AuthnLevel,
                          ULONG *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, ULONG *AuthzSvc );


 RPC_STATUS 
  RpcBindingInqAuthClientA( RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs,
                            RPC_CSTR *ServerPrincName, ULONG *AuthnLevel, ULONG *AuthnSvc,
                            ULONG *AuthzSvc );

 RPC_STATUS 
  RpcBindingInqAuthClientW( RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs,
                            RPC_WSTR *ServerPrincName, ULONG *AuthnLevel, ULONG *AuthnSvc,
                            ULONG *AuthzSvc );


 RPC_STATUS 
  RpcBindingInqAuthClientExA( RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs,
                              RPC_CSTR *ServerPrincName, ULONG *AuthnLevel, ULONG *AuthnSvc,
                              ULONG *AuthzSvc, ULONG Flags );

 RPC_STATUS 
  RpcBindingInqAuthClientExW( RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs,
                              RPC_WSTR *ServerPrincName, ULONG *AuthnLevel, ULONG *AuthnSvc,
                              ULONG *AuthzSvc, ULONG Flags );


 RPC_STATUS  RpcCancelThread(void*);
 RPC_STATUS  RpcCancelThreadEx(void*,LONG);

 RPC_STATUS 
  RpcImpersonateClient( RPC_BINDING_HANDLE Binding );

 RPC_STATUS 
  RpcNetworkIsProtseqValidA( RPC_CSTR protseq );
 RPC_STATUS 
  RpcNetworkIsProtseqValidW( RPC_WSTR protseq );


 RPC_STATUS 
  RpcNetworkInqProtseqsA( RPC_PROTSEQ_VECTORA** protseqs );
 RPC_STATUS 
  RpcNetworkInqProtseqsW( RPC_PROTSEQ_VECTORW** protseqs );


 RPC_STATUS 
  RpcProtseqVectorFreeA( RPC_PROTSEQ_VECTORA** protseqs );
 RPC_STATUS 
  RpcProtseqVectorFreeW( RPC_PROTSEQ_VECTORW** protseqs );


 RPC_STATUS 
  RpcRevertToSelf( void );
 RPC_STATUS 
  RpcRevertToSelfEx( RPC_BINDING_HANDLE Binding );

 RPC_STATUS 
  RpcStringFreeA(RPC_CSTR* String);
 RPC_STATUS 
  RpcStringFreeW(RPC_WSTR* String);


 RPC_STATUS 
  RpcIfInqId( RPC_IF_HANDLE RpcIfHandle, RPC_IF_ID *RpcIfId );

 RPC_STATUS 
  UuidToStringA( UUID* Uuid, RPC_CSTR* StringUuid );
 RPC_STATUS 
  UuidToStringW( UUID* Uuid, RPC_WSTR* StringUuid );


 RPC_STATUS 
  UuidFromStringA( RPC_CSTR StringUuid, UUID* Uuid );
 RPC_STATUS 
  UuidFromStringW( RPC_WSTR StringUuid, UUID* Uuid );


 RPC_STATUS 
  UuidCreate( UUID* Uuid );
 RPC_STATUS 
  UuidCreateSequential( UUID* Uuid );
 RPC_STATUS 
  UuidCreateNil( UUID* Uuid );
 signed int 
  UuidCompare( UUID* Uuid1, UUID* Uuid2, RPC_STATUS* Status_ );
 int 
  UuidEqual( UUID* Uuid1, UUID* Uuid2, RPC_STATUS* Status_ );
 unsigned short 
  UuidHash(UUID* Uuid, RPC_STATUS* Status_ );
 int 
  UuidIsNil( UUID* Uuid, RPC_STATUS* Status_ );

 RPC_STATUS 
  RpcServerInqDefaultPrincNameA( ULONG AuthnSvc, RPC_CSTR *PrincName );
 RPC_STATUS 
  RpcServerInqDefaultPrincNameW( ULONG AuthnSvc, RPC_WSTR *PrincName );







# 1 "include/rpcdcep.h" 1 3

























typedef struct _RPC_VERSION {
    unsigned short MajorVersion;
    unsigned short MinorVersion;
} RPC_VERSION;

typedef struct _RPC_SYNTAX_IDENTIFIER {
    GUID SyntaxGUID;
    RPC_VERSION SyntaxVersion;
} RPC_SYNTAX_IDENTIFIER, *PRPC_SYNTAX_IDENTIFIER;

typedef struct _RPC_MESSAGE
{
    RPC_BINDING_HANDLE Handle;
    ULONG DataRepresentation;
    void* Buffer;
    unsigned int BufferLength;
    unsigned int ProcNum;
    PRPC_SYNTAX_IDENTIFIER TransferSyntax;
    void* RpcInterfaceInformation;
    void* ReservedForRuntime;
    void* ManagerEpv;
    void* ImportContext;
    ULONG RpcFlags;
} RPC_MESSAGE, *PRPC_MESSAGE;
































typedef void  ( *RPC_DISPATCH_FUNCTION)(PRPC_MESSAGE Message);
typedef RPC_STATUS ( *RPC_FORWARD_FUNCTION)(UUID *InterfaceId, RPC_VERSION *InterfaceVersion, UUID *ObjectId, unsigned char *Rpcpro, void **ppDestEndpoint);

typedef struct
{
    unsigned int DispatchTableCount;
    RPC_DISPATCH_FUNCTION* DispatchTable;
    LONG_PTR Reserved;
} RPC_DISPATCH_TABLE, *PRPC_DISPATCH_TABLE;

typedef struct _RPC_PROTSEQ_ENDPOINT
{
    unsigned char* RpcProtocolSequence;
    unsigned char* Endpoint;
} RPC_PROTSEQ_ENDPOINT, *PRPC_PROTSEQ_ENDPOINT;




typedef struct _RPC_SERVER_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    void* DefaultManagerEpv;
    void const* InterpreterInfo;
    unsigned int Flags;
} RPC_SERVER_INTERFACE, *PRPC_SERVER_INTERFACE;

typedef struct _RPC_CLIENT_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    ULONG_PTR Reserved;
    void const* InterpreterInfo;
    unsigned int Flags;
} RPC_CLIENT_INTERFACE, *PRPC_CLIENT_INTERFACE;



typedef struct _RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR
{
    ULONG BufferSize;
    char *Buffer;
} RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR;






 RPC_STATUS 
  I_RpcNegotiateTransferSyntax( RPC_MESSAGE* Message );
 RPC_STATUS 
  I_RpcGetBuffer( RPC_MESSAGE* Message );
 RPC_STATUS 
  I_RpcGetBufferWithObject( RPC_MESSAGE* Message, UUID* ObjectUuid );
 RPC_STATUS 
  I_RpcSendReceive( RPC_MESSAGE* Message );
 RPC_STATUS 
  I_RpcFreeBuffer( RPC_MESSAGE* Message );
 RPC_STATUS 
  I_RpcSend( RPC_MESSAGE* Message );
 RPC_STATUS 
  I_RpcReceive( RPC_MESSAGE* Message );

 void 
  I_RpcFree( void* Object );
 void* 
  I_RpcAllocate( unsigned int Size )
      ;

 RPC_BINDING_HANDLE 
  I_RpcGetCurrentCallHandle( void );





























































 RPC_STATUS 
  I_RpcBindingInqLocalClientPID (RPC_BINDING_HANDLE Binding, ULONG *Pid );

 RPC_STATUS 
  I_RpcBindingInqTransportType( RPC_BINDING_HANDLE Binding, unsigned int* Type );

 LONG  I_RpcMapWin32Status(RPC_STATUS);






# 639 "include/rpcdce.h" 2


# 54 "include/rpc.h" 2


# 1 "include/rpcnterr.h" 1 3












































# 56 "include/rpc.h" 2

# 1 "include/excpt.h" 1 3



















































# 57 "include/rpc.h" 2

# 1 "include/winerror.h" 1 3

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 58 "include/rpc.h" 2


# 1 "include/rpcasync.h" 1 3




























typedef struct tagRPC_ERROR_ENUM_HANDLE
{
    ULONG Signature;
    void* CurrentPos;
    void* Head;
} RPC_ERROR_ENUM_HANDLE;

typedef enum tagExtendedErrorParamTypes
{
    eeptAnsiString = 1,
    eeptUnicodeString,
    eeptLongVal,
    eeptShortVal,
    eeptPointerVal,
    eeptNone,
    eeptBinary
} ExtendedErrorParamTypes;




typedef struct tagBinaryParam
{
    void *Buffer;
    short Size;
} BinaryParam;

typedef struct tagRPC_EE_INFO_PARAM
{
    ExtendedErrorParamTypes ParameterType;
    union
    {
        LPSTR AnsiString;
        LPWSTR UnicodeString;
        LONG LVal;
        short SVal;
        ULONGLONG PVal;
        BinaryParam BVal;
    } u;
} RPC_EE_INFO_PARAM;








typedef struct tagRPC_EXTENDED_ERROR_INFO
{
    ULONG Version;
    LPWSTR ComputerName;
    ULONG ProcessID;
    union
    {
        SYSTEMTIME SystemTime;
        FILETIME FileTime;
    } u;
    ULONG GeneratingComponent;
    ULONG Status;
    USHORT DetectionLocation;
    USHORT Flags;
    int NumberOfParameters;
    RPC_EE_INFO_PARAM Parameters[4];
} RPC_EXTENDED_ERROR_INFO;



typedef enum _RPC_NOTIFICATION_TYPES
{
    RpcNotificationTypeNone,
    RpcNotificationTypeEvent,
    RpcNotificationTypeApc,
    RpcNotificationTypeIoc,
    RpcNotificationTypeHwnd,
    RpcNotificationTypeCallback,
} RPC_NOTIFICATION_TYPES;

typedef enum _RPC_ASYNC_EVENT
{
    RpcCallComplete,
    RpcSendComplete,
    RpcReceiveComplete,
    RpcClientDisconnect,
    RpcClientCancel,
} RPC_ASYNC_EVENT;

struct _RPC_ASYNC_STATE;

typedef void  RPCNOTIFICATION_ROUTINE(struct _RPC_ASYNC_STATE *,void *,RPC_ASYNC_EVENT);
typedef RPCNOTIFICATION_ROUTINE *PFN_RPCNOTIFICATION_ROUTINE;

typedef union _RPC_ASYNC_NOTIFICATION_INFO
{
    struct
    {
        PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
        HANDLE hThread;
    } APC;
    struct
    {
        HANDLE hIOPort;
        DWORD dwNumberOfBytesTransferred;
        DWORD_PTR dwCompletionKey;
        LPOVERLAPPED lpOverlapped;
    } IOC;
    struct
    {
        HWND hWnd;
        UINT Msg;
    } HWND;
    HANDLE hEvent;
    PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
} RPC_ASYNC_NOTIFICATION_INFO, *PRPC_ASYNC_NOTIFICATION_INFO;




typedef struct _RPC_ASYNC_STATE
{
    unsigned int Size;
    ULONG Signature;
    LONG Lock;
    ULONG Flags;
    void *StubInfo;
    void *UserInfo;
    void *RuntimeInfo;
    RPC_ASYNC_EVENT Event;
    RPC_NOTIFICATION_TYPES NotificationType;
    RPC_ASYNC_NOTIFICATION_INFO u;
    LONG_PTR Reserved[4];
} RPC_ASYNC_STATE, *PRPC_ASYNC_STATE;











 RPC_STATUS  RpcAsyncInitializeHandle(PRPC_ASYNC_STATE,unsigned int);
 RPC_STATUS  RpcAsyncRegisterInfo(PRPC_ASYNC_STATE);
 RPC_STATUS  RpcAsyncGetCallStatus(PRPC_ASYNC_STATE);
 RPC_STATUS  RpcAsyncCompleteCall(PRPC_ASYNC_STATE,void *);
 RPC_STATUS  RpcAsyncAbortCall(PRPC_ASYNC_STATE,ULONG);
 RPC_STATUS  RpcAsyncCancelCall(PRPC_ASYNC_STATE,BOOL);
 RPC_STATUS  RpcAsyncCleanupThread(DWORD);
 RPC_STATUS  RpcErrorStartEnumeration(RPC_ERROR_ENUM_HANDLE*);
 RPC_STATUS  RpcErrorGetNextRecord(RPC_ERROR_ENUM_HANDLE*,BOOL,RPC_EXTENDED_ERROR_INFO*);
 RPC_STATUS  RpcErrorEndEnumeration(RPC_ERROR_ENUM_HANDLE*);
 RPC_STATUS  RpcErrorResetEnumeration(RPC_ERROR_ENUM_HANDLE*);
 RPC_STATUS  RpcErrorGetNumberOfRecords(RPC_ERROR_ENUM_HANDLE*,int*);
 RPC_STATUS  RpcErrorSaveErrorInfo(RPC_ERROR_ENUM_HANDLE*,PVOID*,SIZE_T*);
 RPC_STATUS  RpcErrorLoadErrorInfo(PVOID,SIZE_T,RPC_ERROR_ENUM_HANDLE*);
 RPC_STATUS  RpcErrorAddRecord(RPC_EXTENDED_ERROR_INFO*);
 RPC_STATUS  RpcErrorClearInformation(void);
 RPC_STATUS  RpcGetAuthorizationContextForClient(RPC_BINDING_HANDLE,BOOL,LPVOID,PLARGE_INTEGER,LUID,DWORD,PVOID,PVOID*);
 RPC_STATUS  RpcFreeAuthorizationContext(PVOID*);
 RPC_STATUS  RpcSsContextLockExclusive(RPC_BINDING_HANDLE,PVOID);
 RPC_STATUS  RpcSsContextLockShared(RPC_BINDING_HANDLE,PVOID);

 RPC_STATUS  I_RpcAsyncSetHandle(PRPC_MESSAGE,PRPC_ASYNC_STATE);
 RPC_STATUS  I_RpcAsyncAbortCall(PRPC_ASYNC_STATE,ULONG);
 int         I_RpcExceptionFilter(ULONG);






# 60 "include/rpc.h" 2




























# 8 "include/oaidl.h" 2

# 1 "include/rpcndr.h" 1 3


























# 1 "include/basetsd.h" 1 3























































































































































































































































































































# 27 "include/rpcndr.h" 2

# 1 "include/rpcsal.h" 1 3










































































































































































# 28 "include/rpcndr.h" 2









































typedef unsigned char byte;
typedef INT64 hyper;
typedef UINT64 MIDL_uhyper;
typedef unsigned char boolean;


typedef ULONG error_status_t;













void  MIDL_user_free(void *);
void *  MIDL_user_allocate(SIZE_T)   ;











typedef struct _NDR_SCONTEXT
{
  void *pad[2];
  void *userContext;
} *NDR_SCONTEXT;




typedef void ( *NDR_RUNDOWN)(void *context);
typedef void ( *NDR_NOTIFY_ROUTINE)(void);
typedef void ( *NDR_NOTIFY2_ROUTINE)(boolean flag);



















struct _MIDL_STUB_MESSAGE;
struct _MIDL_STUB_DESC;
struct _FULL_PTR_XLAT_TABLES;
struct NDR_ALLOC_ALL_NODES_CONTEXT;
struct NDR_POINTER_QUEUE_STATE;

typedef unsigned char *RPC_BUFPTR;
typedef ULONG RPC_LENGTH;
typedef void ( *EXPR_EVAL)(struct _MIDL_STUB_MESSAGE *);
typedef const unsigned char *PFORMAT_STRING;

typedef struct
{
  LONG Dimension;
  ULONG *BufferConformanceMark;
  ULONG *BufferVarianceMark;
  ULONG *MaxCountArray;
  ULONG *OffsetArray;
  ULONG *ActualCountArray;
} ARRAY_INFO, *PARRAY_INFO;

typedef struct
{
  ULONG WireCodeset;
  ULONG DesiredReceivingCodeset;
  void *CSArrayInfo;
} CS_STUB_INFO;

typedef struct _NDR_PIPE_DESC *PNDR_PIPE_DESC;
typedef struct _NDR_PIPE_MESSAGE *PNDR_PIPE_MESSAGE;
typedef struct _NDR_ASYNC_MESSAGE *PNDR_ASYNC_MESSAGE;
typedef struct _NDR_CORRELATION_INFO *PNDR_CORRELATION_INFO;

typedef struct _MIDL_STUB_MESSAGE
{
  PRPC_MESSAGE RpcMsg;
  unsigned char *Buffer;
  unsigned char *BufferStart;
  unsigned char *BufferEnd;
  unsigned char *BufferMark;
  ULONG BufferLength;
  ULONG MemorySize;
  unsigned char *Memory;
  unsigned char IsClient;
  unsigned char Pad;
  unsigned short uFlags2;
  int ReuseBuffer;
  struct NDR_ALLOC_ALL_NODES_CONTEXT *pAllocAllNodesContext;
  struct NDR_POINTER_QUEUE_STATE *pPointerQueueState;
  int IgnoreEmbeddedPointers;
  unsigned char *PointerBufferMark;
  unsigned char CorrDespIncrement;
  unsigned char uFlags;
  unsigned short UniquePtrCount;
  ULONG_PTR MaxCount;
  ULONG Offset;
  ULONG ActualCount;
  void * (  *pfnAllocate)(SIZE_T);
  void ( *pfnFree)(void *);
  unsigned char *StackTop;
  unsigned char *pPresentedType;
  unsigned char *pTransmitType;
  handle_t SavedHandle;
  const struct _MIDL_STUB_DESC *StubDesc;
  struct _FULL_PTR_XLAT_TABLES *FullPtrXlatTables;
  ULONG FullPtrRefId;
  ULONG PointerLength;
  unsigned int fInDontFree:1;
  unsigned int fDontCallFreeInst:1;
  unsigned int fUnused1 :1;
  unsigned int fHasReturn:1;
  unsigned int fHasExtensions:1;
  unsigned int fHasNewCorrDesc:1;
  unsigned int fIsIn:1;
  unsigned int fIsOut:1;
  unsigned int fIsOicf:1;
  unsigned int fBufferValid:1;
  unsigned int fHasMemoryValidateCallback:1;
  unsigned int fInFree:1;
  unsigned int fNeedMCCP:1;
  int fUnused2:3;
  int fUnused3:16;
  DWORD dwDestContext;
  void *pvDestContext;
  NDR_SCONTEXT *SavedContextHandles;
  LONG ParamNumber;
  struct IRpcChannelBuffer *pRpcChannelBuffer;
  PARRAY_INFO pArrayInfo;
  ULONG *SizePtrCountArray;
  ULONG *SizePtrOffsetArray;
  ULONG *SizePtrLengthArray;
  void *pArgQueue;
  DWORD dwStubPhase;
  void *LowStackMark;
  PNDR_ASYNC_MESSAGE pAsyncMsg;
  PNDR_CORRELATION_INFO pCorrInfo;
  unsigned char *pCorrMemory;
  void *pMemoryList;
  CS_STUB_INFO *pCSInfo;
  unsigned char *ConformanceMark;
  unsigned char *VarianceMark;
  INT_PTR Unused; 
  struct _NDR_PROC_CONTEXT *pContext;
  void* ContextHandleHash;
  void* pUserMarshalList;
  INT_PTR Reserved51_3;
  INT_PTR Reserved51_4;
  INT_PTR Reserved51_5;
} MIDL_STUB_MESSAGE, *PMIDL_STUB_MESSAGE;

typedef void * ( * GENERIC_BINDING_ROUTINE)(void *);
typedef void ( * GENERIC_UNBIND_ROUTINE)(void *, unsigned char *);

typedef struct _GENERIC_BINDING_ROUTINE_PAIR
{
  GENERIC_BINDING_ROUTINE pfnBind;
  GENERIC_UNBIND_ROUTINE pfnUnbind;
} GENERIC_BINDING_ROUTINE_PAIR, *PGENERIC_BINDING_ROUTINE_PAIR;

typedef struct __GENERIC_BINDING_INFO
{
  void *pObj;
  unsigned int Size;
  GENERIC_BINDING_ROUTINE pfnBind;
  GENERIC_UNBIND_ROUTINE pfnUnbind;
} GENERIC_BINDING_INFO, *PGENERIC_BINDING_INFO;

typedef void ( *XMIT_HELPER_ROUTINE)(PMIDL_STUB_MESSAGE);

typedef struct _XMIT_ROUTINE_QUINTUPLE
{
  XMIT_HELPER_ROUTINE pfnTranslateToXmit;
  XMIT_HELPER_ROUTINE pfnTranslateFromXmit;
  XMIT_HELPER_ROUTINE pfnFreeXmit;
  XMIT_HELPER_ROUTINE pfnFreeInst;
} XMIT_ROUTINE_QUINTUPLE, *PXMIT_ROUTINE_QUINTUPLE;

typedef ULONG ( *USER_MARSHAL_SIZING_ROUTINE)(ULONG *, ULONG, void *);
typedef unsigned char * ( *USER_MARSHAL_MARSHALLING_ROUTINE)(ULONG *, unsigned char *, void *);
typedef unsigned char * ( *USER_MARSHAL_UNMARSHALLING_ROUTINE)(ULONG *, unsigned char *, void *);
typedef void ( *USER_MARSHAL_FREEING_ROUTINE)(ULONG *, void *);

typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE
{
  USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;
  USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;
  USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;
  USER_MARSHAL_FREEING_ROUTINE pfnFree;
} USER_MARSHAL_ROUTINE_QUADRUPLE;






typedef enum
{
    USER_MARSHAL_CB_BUFFER_SIZE,
    USER_MARSHAL_CB_MARSHALL,
    USER_MARSHAL_CB_UNMARSHALL,
    USER_MARSHAL_CB_FREE
} USER_MARSHAL_CB_TYPE;

typedef struct _USER_MARSHAL_CB
{
    ULONG Flags;
    PMIDL_STUB_MESSAGE pStubMsg;
    PFORMAT_STRING pReserve;
    ULONG Signature;
    USER_MARSHAL_CB_TYPE CBType;
    PFORMAT_STRING pFormat;
    PFORMAT_STRING pTypeFormat;
} USER_MARSHAL_CB;








typedef struct _MALLOC_FREE_STRUCT
{
  void * (  *pfnAllocate)(SIZE_T);
  void   ( *pfnFree)(void *);
} MALLOC_FREE_STRUCT;

typedef struct _COMM_FAULT_OFFSETS
{
  short CommOffset;
  short FaultOffset;
} COMM_FAULT_OFFSETS;

typedef enum _IDL_CS_CONVERT
{
    IDL_CS_NO_CONVERT,
    IDL_CS_IN_PLACE_CONVERT,
    IDL_CS_NEW_BUFFER_CONVERT
} IDL_CS_CONVERT;

typedef void ( * CS_TYPE_NET_SIZE_ROUTINE)(RPC_BINDING_HANDLE,ULONG,ULONG,IDL_CS_CONVERT*,ULONG*,error_status_t*);
typedef void ( * CS_TYPE_TO_NETCS_ROUTINE)(RPC_BINDING_HANDLE,ULONG,void*,ULONG,byte*,ULONG*,error_status_t*);
typedef void ( * CS_TYPE_LOCAL_SIZE_ROUTINE)(RPC_BINDING_HANDLE,ULONG,ULONG,IDL_CS_CONVERT*,ULONG*,error_status_t*);
typedef void ( * CS_TYPE_FROM_NETCS_ROUTINE)(RPC_BINDING_HANDLE,ULONG,byte*,ULONG,ULONG,void*,ULONG*,error_status_t*);
typedef void ( * CS_TAG_GETTING_ROUTINE)(RPC_BINDING_HANDLE,int,ULONG*,ULONG*,ULONG*,error_status_t*);

typedef struct _NDR_CS_SIZE_CONVERT_ROUTINES
{
    CS_TYPE_NET_SIZE_ROUTINE   pfnNetSize;
    CS_TYPE_TO_NETCS_ROUTINE   pfnToNetCs;
    CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize;
    CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs;
} NDR_CS_SIZE_CONVERT_ROUTINES;

typedef struct _NDR_CS_ROUTINES
{
    NDR_CS_SIZE_CONVERT_ROUTINES *pSizeConvertRoutines;
    CS_TAG_GETTING_ROUTINE       *pTagGettingRoutines;
} NDR_CS_ROUTINES;

typedef struct _NDR_EXPR_DESC
{
    const unsigned short *pOffset;
    PFORMAT_STRING        pFormatExpr;
} NDR_EXPR_DESC;

typedef struct _MIDL_STUB_DESC
{
  void *RpcInterfaceInformation;
  void * (  *pfnAllocate)(SIZE_T);
  void ( *pfnFree)(void *);
  union {
    handle_t *pAutoHandle;
    handle_t *pPrimitiveHandle;
    PGENERIC_BINDING_INFO pGenericBindingInfo;
  } IMPLICIT_HANDLE_INFO;
  const NDR_RUNDOWN *apfnNdrRundownRoutines;
  const GENERIC_BINDING_ROUTINE_PAIR *aGenericBindingRoutinePairs;
  const EXPR_EVAL *apfnExprEval;
  const XMIT_ROUTINE_QUINTUPLE *aXmitQuintuple;
  const unsigned char *pFormatTypes;
  int fCheckBounds;
  ULONG Version;
  MALLOC_FREE_STRUCT *pMallocFreeStruct;
  LONG MIDLVersion;
  const COMM_FAULT_OFFSETS *CommFaultOffsets;
  const USER_MARSHAL_ROUTINE_QUADRUPLE *aUserMarshalQuadruple;
  const NDR_NOTIFY_ROUTINE *NotifyRoutineTable;
  ULONG_PTR mFlags;
  const NDR_CS_ROUTINES *CsRoutineTables;
  void *ProxyServerInfo;
  const NDR_EXPR_DESC *pExprInfo;
} MIDL_STUB_DESC;
typedef const MIDL_STUB_DESC *PMIDL_STUB_DESC;

typedef struct _MIDL_FORMAT_STRING
{
  short Pad;
  unsigned char Format[];
} MIDL_FORMAT_STRING;

typedef struct _MIDL_METHOD_PROPERTY
{
    ULONG     Id;
    ULONG_PTR Value;
} MIDL_METHOD_PROPERTY, *PMIDL_METHOD_PROPERTY;

typedef struct _MIDL_METHOD_PROPERTY_MAP
{
    ULONG                       Count;
    const MIDL_METHOD_PROPERTY *Properties;
} MIDL_METHOD_PROPERTY_MAP, *PMIDL_METHOD_PROPERTY_MAP;

typedef struct _MIDL_INTERFACE_METHOD_PROPERTIES
{
    unsigned short MethodCount;
    const MIDL_METHOD_PROPERTY_MAP * const *MethodProperties;
} MIDL_INTERFACE_METHOD_PROPERTIES;

typedef struct _MIDL_SYNTAX_INFO
{
  RPC_SYNTAX_IDENTIFIER TransferSyntax;
  RPC_DISPATCH_TABLE* DispatchTable;
  PFORMAT_STRING ProcString;
  const unsigned short* FmtStringOffset;
  PFORMAT_STRING TypeString;
  const void* aUserMarshalQuadruple;
  const MIDL_INTERFACE_METHOD_PROPERTIES *pMethodProperties;
  ULONG_PTR pReserved2;
} MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;

typedef void ( *STUB_THUNK)( PMIDL_STUB_MESSAGE );


typedef LONG ( *SERVER_ROUTINE)(void);




typedef struct _MIDL_SERVER_INFO_
{
  PMIDL_STUB_DESC pStubDesc;
  const SERVER_ROUTINE *DispatchTable;
  PFORMAT_STRING ProcString;
  const unsigned short *FmtStringOffset;
  const STUB_THUNK *ThunkTable;
  PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
  ULONG_PTR nCount;
  PMIDL_SYNTAX_INFO pSyntaxInfo;
} MIDL_SERVER_INFO, *PMIDL_SERVER_INFO;

typedef struct _MIDL_STUBLESS_PROXY_INFO
{
  PMIDL_STUB_DESC pStubDesc;
  PFORMAT_STRING ProcFormatString;
  const unsigned short *FormatStringOffset;
  PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
  ULONG_PTR nCount;
  PMIDL_SYNTAX_INFO pSyntaxInfo;
} MIDL_STUBLESS_PROXY_INFO, *PMIDL_STUBLESS_PROXY_INFO;






typedef union _CLIENT_CALL_RETURN
{
  void *Pointer;
  LONG_PTR Simple;
} CLIENT_CALL_RETURN;


typedef enum {
  STUB_UNMARSHAL,
  STUB_CALL_SERVER,
  STUB_MARSHAL,
  STUB_CALL_SERVER_NO_HRESULT
} STUB_PHASE;

typedef enum {
  PROXY_CALCSIZE,
  PROXY_GETBUFFER,
  PROXY_MARSHAL,
  PROXY_SENDRECEIVE,
  PROXY_UNMARSHAL
} PROXY_PHASE;

typedef enum {
  XLAT_SERVER = 1,
  XLAT_CLIENT
} XLAT_SIDE;

typedef struct _FULL_PTR_TO_REFID_ELEMENT {
  struct _FULL_PTR_TO_REFID_ELEMENT *Next;
  void *Pointer;
  ULONG RefId;
  unsigned char State;
} FULL_PTR_TO_REFID_ELEMENT, *PFULL_PTR_TO_REFID_ELEMENT;


typedef struct _FULL_PTR_XLAT_TABLES {
  struct {
    void **XlatTable;
    unsigned char *StateTable;
    ULONG NumberOfEntries;
  } RefIdToPointer;

  struct {
    PFULL_PTR_TO_REFID_ELEMENT *XlatTable;
    ULONG NumberOfBuckets;
    ULONG HashMask;
  } PointerToRefId;

  ULONG                   NextRefId;
  XLAT_SIDE               XlatSide;
} FULL_PTR_XLAT_TABLES,  *PFULL_PTR_XLAT_TABLES;

struct IRpcStubBuffer;

typedef void  * NDR_CCONTEXT;

typedef struct _SCONTEXT_QUEUE {
  ULONG NumberOfObjects;
  NDR_SCONTEXT *ArrayOfObjects;
} SCONTEXT_QUEUE, *PSCONTEXT_QUEUE;

typedef struct _NDR_USER_MARSHAL_INFO_LEVEL1
{
    void *Buffer;
    ULONG BufferSize;
    void * (  *pfnAllocate)(SIZE_T);
    void ( *pfnFree)(void *);
    struct IRpcChannelBuffer *pRpcChannelBuffer;
    ULONG_PTR Reserved[5];
} NDR_USER_MARSHAL_INFO_LEVEL1;

typedef struct _NDR_USER_MARSHAL_INFO
{
    ULONG InformationLevel;
    union
    {
        NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
    } ;
} NDR_USER_MARSHAL_INFO;



 RPC_BINDING_HANDLE 
  NDRCContextBinding( NDR_CCONTEXT CContext );

 void 
  NDRCContextMarshall( NDR_CCONTEXT CContext, void *pBuff );

 void 
  NDRCContextUnmarshall( NDR_CCONTEXT *pCContext, RPC_BINDING_HANDLE hBinding,
                         void *pBuff, ULONG DataRepresentation );

 void 
  NDRSContextMarshall( NDR_SCONTEXT CContext, void *pBuff, NDR_RUNDOWN userRunDownIn );

 NDR_SCONTEXT 
  NDRSContextUnmarshall( void *pBuff, ULONG DataRepresentation );

 void 
  NDRSContextMarshallEx( RPC_BINDING_HANDLE BindingHandle, NDR_SCONTEXT CContext,
                         void *pBuff, NDR_RUNDOWN userRunDownIn );

 void 
  NDRSContextMarshall2( RPC_BINDING_HANDLE BindingHandle, NDR_SCONTEXT CContext,
                        void *pBuff, NDR_RUNDOWN userRunDownIn, void * CtxGuard,
                        ULONG Flags );

 NDR_SCONTEXT 
  NDRSContextUnmarshallEx( RPC_BINDING_HANDLE BindingHandle, void *pBuff,
                           ULONG DataRepresentation );

 NDR_SCONTEXT 
  NDRSContextUnmarshall2( RPC_BINDING_HANDLE BindingHandle, void *pBuff,
                          ULONG DataRepresentation, void *CtxGuard,
                          ULONG Flags );

 void 
  NdrClientContextMarshall ( PMIDL_STUB_MESSAGE pStubMsg, NDR_CCONTEXT ContextHandle, int fCheck );

 void 
  NdrClientContextUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, NDR_CCONTEXT* pContextHandle,
                              RPC_BINDING_HANDLE BindHandle );

 void 
  NdrServerContextMarshall ( PMIDL_STUB_MESSAGE pStubMsg, NDR_SCONTEXT ContextHandle, NDR_RUNDOWN RundownRoutine );

 NDR_SCONTEXT 
  NdrServerContextUnmarshall( PMIDL_STUB_MESSAGE pStubMsg );

 void 
  NdrContextHandleSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );

 NDR_SCONTEXT 
  NdrContextHandleInitialize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

 void 
  NdrServerContextNewMarshall( PMIDL_STUB_MESSAGE pStubMsg, NDR_SCONTEXT ContextHandle,
                               NDR_RUNDOWN RundownRoutine, PFORMAT_STRING pFormat );

 NDR_SCONTEXT 
  NdrServerContextNewUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );

 RPC_STATUS 
  RpcSmDestroyClientContext( void **ContextHandle );

 void 
  RpcSsDestroyClientContext( void **ContextHandle );

 void 
  NdrSimpleTypeMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, unsigned char FormatChar );
 void 
  NdrSimpleTypeUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, unsigned char FormatChar );

 unsigned char* 
  NdrByteCountPointerMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );
 unsigned char* 
  NdrByteCountPointerUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc );
 void 
  NdrByteCountPointerBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );
 void 
  NdrByteCountPointerFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );

 unsigned char* 
  NdrRangeUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc );

















 unsigned char*   NdrPointerMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  unsigned char*   NdrPointerUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc );  void   NdrPointerBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  ULONG   NdrPointerMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );   void   NdrPointerFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); 
 unsigned char*   NdrSimpleStructMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  unsigned char*   NdrSimpleStructUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc );  void   NdrSimpleStructBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  ULONG   NdrSimpleStructMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );   void   NdrSimpleStructFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); 
 unsigned char*   NdrConformantStructMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  unsigned char*   NdrConformantStructUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc );  void   NdrConformantStructBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  ULONG   NdrConformantStructMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );   void   NdrConformantStructFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); 
 unsigned char*   NdrConformantVaryingStructMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  unsigned char*   NdrConformantVaryingStructUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc );  void   NdrConformantVaryingStructBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  ULONG   NdrConformantVaryingStructMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );   void   NdrConformantVaryingStructFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); 
 unsigned char*   NdrComplexStructMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  unsigned char*   NdrComplexStructUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc );  void   NdrComplexStructBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  ULONG   NdrComplexStructMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );   void   NdrComplexStructFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); 
 unsigned char*   NdrFixedArrayMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  unsigned char*   NdrFixedArrayUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc );  void   NdrFixedArrayBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  ULONG   NdrFixedArrayMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );   void   NdrFixedArrayFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); 
 unsigned char*   NdrConformantArrayMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  unsigned char*   NdrConformantArrayUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc );  void   NdrConformantArrayBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  ULONG   NdrConformantArrayMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );   void   NdrConformantArrayFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); 
 unsigned char*   NdrConformantVaryingArrayMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  unsigned char*   NdrConformantVaryingArrayUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc );  void   NdrConformantVaryingArrayBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  ULONG   NdrConformantVaryingArrayMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );   void   NdrConformantVaryingArrayFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); 
 unsigned char*   NdrVaryingArrayMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  unsigned char*   NdrVaryingArrayUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc );  void   NdrVaryingArrayBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  ULONG   NdrVaryingArrayMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );   void   NdrVaryingArrayFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); 
 unsigned char*   NdrComplexArrayMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  unsigned char*   NdrComplexArrayUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc );  void   NdrComplexArrayBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  ULONG   NdrComplexArrayMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );   void   NdrComplexArrayFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); 
 unsigned char*   NdrEncapsulatedUnionMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  unsigned char*   NdrEncapsulatedUnionUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc );  void   NdrEncapsulatedUnionBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  ULONG   NdrEncapsulatedUnionMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );   void   NdrEncapsulatedUnionFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); 
 unsigned char*   NdrNonEncapsulatedUnionMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  unsigned char*   NdrNonEncapsulatedUnionUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc );  void   NdrNonEncapsulatedUnionBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  ULONG   NdrNonEncapsulatedUnionMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );   void   NdrNonEncapsulatedUnionFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); 
 unsigned char*   NdrXmitOrRepAsMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  unsigned char*   NdrXmitOrRepAsUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc );  void   NdrXmitOrRepAsBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  ULONG   NdrXmitOrRepAsMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );   void   NdrXmitOrRepAsFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); 
 unsigned char*   NdrUserMarshalMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  unsigned char*   NdrUserMarshalUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc );  void   NdrUserMarshalBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  ULONG   NdrUserMarshalMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );   void   NdrUserMarshalFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); 
 unsigned char*   NdrInterfacePointerMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  unsigned char*   NdrInterfacePointerUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc );  void   NdrInterfacePointerBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  ULONG   NdrInterfacePointerMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );   void   NdrInterfacePointerFree( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat ); 

 unsigned char*   NdrConformantStringMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  unsigned char*   NdrConformantStringUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc );  void   NdrConformantStringBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  ULONG   NdrConformantStringMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat ); 
 unsigned char*   NdrNonConformantStringMarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  unsigned char*   NdrNonConformantStringUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, unsigned char** ppMemory, PFORMAT_STRING pFormat, unsigned char fMustAlloc );  void   NdrNonConformantStringBufferSize( PMIDL_STUB_MESSAGE pStubMsg, unsigned char* pMemory, PFORMAT_STRING pFormat );  ULONG   NdrNonConformantStringMemorySize( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat ); 




 void 
  NdrCorrelationInitialize( PMIDL_STUB_MESSAGE pStubMsg, void *pMemory, ULONG CacheSize, ULONG flags );
 void 
  NdrCorrelationPass( PMIDL_STUB_MESSAGE pStubMsg );
 void 
  NdrCorrelationFree( PMIDL_STUB_MESSAGE pStubMsg );

 void 
  NdrConvert2( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat, LONG NumberParams );
 void 
  NdrConvert( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );














 unsigned char* 
  NdrUserMarshalSimpleTypeConvert( ULONG *pFlags, unsigned char *pBuffer, unsigned char FormatChar );

CLIENT_CALL_RETURN 
  NdrClientCall( PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ... );
CLIENT_CALL_RETURN 
  NdrClientCall2( PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ... );
CLIENT_CALL_RETURN 
  NdrClientCall3( MIDL_STUBLESS_PROXY_INFO *info, ULONG proc, void *retval, ... );
CLIENT_CALL_RETURN 
  NdrAsyncClientCall( PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ... );
CLIENT_CALL_RETURN 
  Ndr64AsyncClientCall( MIDL_STUBLESS_PROXY_INFO *info, ULONG proc, void *retval, ... );
CLIENT_CALL_RETURN 
  NdrDcomAsyncClientCall( PMIDL_STUB_DESC pStubDescriptor, PFORMAT_STRING pFormat, ... );

 void 
  NdrServerCall2( PRPC_MESSAGE pRpcMsg );
 void 
  NdrServerCall( PRPC_MESSAGE pRpcMsg );
 void 
  NdrServerCallAll( PRPC_MESSAGE pRpcMsg );
 void 
  NdrAsyncServerCall( PRPC_MESSAGE pRpcMsg );

 LONG 
  NdrStubCall2( struct IRpcStubBuffer* pThis, struct IRpcChannelBuffer* pChannel, PRPC_MESSAGE pRpcMsg, DWORD * pdwStubPhase );
 LONG 
  NdrStubCall( struct IRpcStubBuffer* pThis, struct IRpcChannelBuffer* pChannel, PRPC_MESSAGE pRpcMsg, DWORD * pdwStubPhase );
 LONG 
  NdrAsyncStubCall( struct IRpcStubBuffer* pThis, struct IRpcChannelBuffer* pChannel, PRPC_MESSAGE pRpcMsg, DWORD * pdwStubPhase );
 LONG 
  NdrDcomAsyncStubCall( struct IRpcStubBuffer* pThis, struct IRpcChannelBuffer* pChannel, PRPC_MESSAGE pRpcMsg, DWORD * pdwStubPhase );

 void* 
  NdrAllocate( PMIDL_STUB_MESSAGE pStubMsg, SIZE_T Len )  ;

 void 
  NdrClearOutParameters( PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat, void *ArgAddr );

 RPC_STATUS 
  NdrMapCommAndFaultStatus( PMIDL_STUB_MESSAGE pStubMsg, ULONG *pCommStatus,
                            ULONG *pFaultStatus, RPC_STATUS Status_ );

 void 
  NdrOleFree( void* NodeToFree );
 void* 
  NdrOleAllocate( SIZE_T Size )   ;

 void 
  NdrClientInitialize( PRPC_MESSAGE pRpcMessage, PMIDL_STUB_MESSAGE pStubMsg,
                       PMIDL_STUB_DESC pStubDesc, unsigned int ProcNum );
 void 
  NdrClientInitializeNew( PRPC_MESSAGE pRpcMessage, PMIDL_STUB_MESSAGE pStubMsg,
                          PMIDL_STUB_DESC pStubDesc, unsigned int ProcNum );
 unsigned char* 
  NdrServerInitialize( PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDesc );
 unsigned char* 
  NdrServerInitializeNew( PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDesc );
 unsigned char* 
  NdrServerInitializeUnmarshall( PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDesc, PRPC_MESSAGE pRpcMsg );
 void 
  NdrServerInitializeMarshall( PRPC_MESSAGE pRpcMsg, PMIDL_STUB_MESSAGE pStubMsg  );
 void 
  NdrServerMarshall( struct IRpcStubBuffer *pThis, struct IRpcChannelBuffer *pChannel, PMIDL_STUB_MESSAGE pStubMsg, PFORMAT_STRING pFormat );
 void 
  NdrServerUnmarshall( struct IRpcChannelBuffer *pChannel, PRPC_MESSAGE pRpcMsg,
                       PMIDL_STUB_MESSAGE pStubMsg, PMIDL_STUB_DESC pStubDesc,
                       PFORMAT_STRING pFormat, void *pParamList );
 unsigned char* 
  NdrGetBuffer( PMIDL_STUB_MESSAGE stubmsg, ULONG buflen, RPC_BINDING_HANDLE handle )
   ;
 void 
  NdrFreeBuffer( PMIDL_STUB_MESSAGE pStubMsg );
 unsigned char* 
  NdrSendReceive( PMIDL_STUB_MESSAGE stubmsg, unsigned char *buffer );

 unsigned char * 
  NdrNsGetBuffer( PMIDL_STUB_MESSAGE pStubMsg, ULONG BufferLength, RPC_BINDING_HANDLE Handle );
 unsigned char * 
  NdrNsSendReceive( PMIDL_STUB_MESSAGE pStubMsg, unsigned char *pBufferEnd, RPC_BINDING_HANDLE *pAutoHandle );

 RPC_STATUS 
  NdrGetDcomProtocolVersion( PMIDL_STUB_MESSAGE pStubMsg, RPC_VERSION *pVersion );

 PFULL_PTR_XLAT_TABLES 
  NdrFullPointerXlatInit( ULONG NumberOfPointers, XLAT_SIDE XlatSide );
 void 
  NdrFullPointerXlatFree( PFULL_PTR_XLAT_TABLES pXlatTables );
 int 
  NdrFullPointerQueryPointer( PFULL_PTR_XLAT_TABLES pXlatTables, void *pPointer,
                              unsigned char QueryType, ULONG *pRefId );
 int 
  NdrFullPointerQueryRefId( PFULL_PTR_XLAT_TABLES pXlatTables, ULONG RefId,
                            unsigned char QueryType, void **ppPointer );
 void 
  NdrFullPointerInsertRefId( PFULL_PTR_XLAT_TABLES pXlatTables, ULONG RefId, void *pPointer );
 int 
  NdrFullPointerFree( PFULL_PTR_XLAT_TABLES pXlatTables, void *Pointer );

 void 
  NdrRpcSsEnableAllocate( PMIDL_STUB_MESSAGE pMessage );
 void 
  NdrRpcSsDisableAllocate( PMIDL_STUB_MESSAGE pMessage );
 void 
  NdrRpcSmSetClientToOsf( PMIDL_STUB_MESSAGE pMessage );
 void 
  NdrRpcSmClientFree( void *NodeToFree );
 void * 
  NdrRpcSmClientAllocate( SIZE_T Size )   ;
 void 
  NdrRpcSsDefaultFree( void *NodeToFree );
 void * 
  NdrRpcSsDefaultAllocate( SIZE_T Size )   ;

 RPC_STATUS 
  NdrGetUserMarshalInfo( ULONG *pFlags, ULONG InformationLevel, NDR_USER_MARSHAL_INFO *pMarshalInfo );





# 9 "include/oaidl.h" 2




# 1 "include/windows.h" 1 3








































































































# 13 "include/oaidl.h" 2

# 1 "include/ole2.h" 1 3
























# 1 "include/winerror.h" 1 3

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 25 "include/ole2.h" 2

# 1 "include/objbase.h" 1 3



















# 1 "include/rpc.h" 1 3






















# 1 "include/windows.h" 1 3








































































































# 23 "include/rpc.h" 2

































































# 20 "include/objbase.h" 2

# 1 "include/rpcndr.h" 1 3








































































































































































































































































































































































































































































































































































































































































































































































































































# 21 "include/objbase.h" 2

























































































































































































































































typedef struct IRpcStubBuffer IRpcStubBuffer;



typedef struct IRpcChannelBuffer IRpcChannelBuffer;



# 1 "include/combaseapi.h" 1 3



















# 1 "include/rpc.h" 1 3






















# 1 "include/windows.h" 1 3








































































































# 23 "include/rpc.h" 2

































































# 20 "include/combaseapi.h" 2

# 1 "include/rpcndr.h" 1 3








































































































































































































































































































































































































































































































































































































































































































































































































































# 21 "include/combaseapi.h" 2






# 1 "/usr/local/Cellar/mingw-w64/12.0.0/toolchain-x86_64/x86_64-w64-mingw32/include/stdlib.h" 1 3




































































































































































































































































































































































































































































































































































































































































































































































































# 27 "include/combaseapi.h" 2



# 1 "include/objidlbase.h" 1 3







# 1 "include/rpc.h" 1 3






















# 1 "include/windows.h" 1 3








































































































# 23 "include/rpc.h" 2

































































# 8 "include/objidlbase.h" 2

# 1 "include/rpcndr.h" 1 3








































































































































































































































































































































































































































































































































































































































































































































































































































# 9 "include/objidlbase.h" 2




# 1 "include/windows.h" 1 3








































































































# 13 "include/objidlbase.h" 2

# 1 "include/ole2.h" 1 3



























































































































































# 14 "include/objidlbase.h" 2









typedef struct IMarshal IMarshal;







typedef struct IAgileObject IAgileObject;







typedef struct IAgileReference IAgileReference;







typedef struct INoMarshal INoMarshal;







typedef struct IMarshal2 IMarshal2;







typedef struct IStdMarshalInfo IStdMarshalInfo;







typedef struct IExternalConnection IExternalConnection;







typedef struct IMultiQI IMultiQI;







typedef struct IMalloc IMalloc;







typedef struct IInternalUnknown IInternalUnknown;







typedef struct IEnumUnknown IEnumUnknown;







typedef struct ISurrogate ISurrogate;







typedef struct IGlobalInterfaceTable IGlobalInterfaceTable;







typedef struct IEnumString IEnumString;







typedef struct ISequentialStream ISequentialStream;







typedef struct IStream IStream;















typedef struct IRpcChannelBuffer2 IRpcChannelBuffer2;







typedef struct IRpcChannelBuffer3 IRpcChannelBuffer3;







typedef struct IAsyncRpcChannelBuffer IAsyncRpcChannelBuffer;







typedef struct IRpcSyntaxNegotiate IRpcSyntaxNegotiate;







typedef struct IRpcProxyBuffer IRpcProxyBuffer;















typedef struct IPSFactoryBuffer IPSFactoryBuffer;







typedef struct IChannelHook IChannelHook;







typedef struct IClientSecurity IClientSecurity;







typedef struct IServerSecurity IServerSecurity;







typedef struct IAsyncSetup IAsyncSetup;







typedef struct ISynchronize ISynchronize;







typedef struct ISynchronizeHandle ISynchronizeHandle;







typedef struct ISynchronizeEvent ISynchronizeEvent;







typedef struct ISynchronizeContainer ISynchronizeContainer;







typedef struct ISynchronizeMutex ISynchronizeMutex;







typedef struct ICancelMethodCalls ICancelMethodCalls;







typedef struct IAsyncManager IAsyncManager;







typedef struct ICallFactory ICallFactory;







typedef struct IRpcOptions IRpcOptions;







typedef struct IRpcHelper IRpcHelper;







typedef struct IReleaseMarshalBuffers IReleaseMarshalBuffers;







typedef struct IWaitMultiple IWaitMultiple;







typedef struct IAddrTrackingControl IAddrTrackingControl;







typedef struct IAddrExclusionControl IAddrExclusionControl;







typedef struct IComThreadingInfo IComThreadingInfo;







typedef struct IProcessInitControl IProcessInitControl;







typedef struct IGlobalOptions IGlobalOptions;







typedef struct IEnumContextProps IEnumContextProps;







typedef struct IContext IContext;







typedef struct IObjContext IObjContext;








# 1 "include/unknwn.h" 1 3







# 1 "include/rpc.h" 1 3






















# 1 "include/windows.h" 1 3








































































































# 23 "include/rpc.h" 2

































































# 8 "include/unknwn.h" 2

# 1 "include/rpcndr.h" 1 3








































































































































































































































































































































































































































































































































































































































































































































































































































# 9 "include/unknwn.h" 2




# 1 "include/windows.h" 1 3








































































































# 13 "include/unknwn.h" 2

# 1 "include/ole2.h" 1 3



























































































































































# 14 "include/unknwn.h" 2









typedef struct IUnknown IUnknown;







typedef struct IClassFactory IClassFactory;








# 1 "include/wtypes.h" 1 3







# 1 "include/rpc.h" 1 3






















# 1 "include/windows.h" 1 3








































































































# 23 "include/rpc.h" 2

































































# 8 "include/wtypes.h" 2

# 1 "include/rpcndr.h" 1 3








































































































































































































































































































































































































































































































































































































































































































































































































































# 9 "include/wtypes.h" 2




# 1 "include/windows.h" 1 3








































































































# 13 "include/wtypes.h" 2

# 1 "include/ole2.h" 1 3



























































































































































# 14 "include/wtypes.h" 2










# 1 "include/basetsd.h" 1 3























































































































































































































































































































# 24 "include/wtypes.h" 2

# 1 "include/guiddef.h" 1 3



























































































































































































# 25 "include/wtypes.h" 2











extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec;








































































































































typedef double  DOUBLE;

































































































typedef WCHAR OLECHAR;
typedef OLECHAR *LPOLESTR;
typedef const OLECHAR *LPCOLESTR;







typedef LONG SCODE;
typedef struct _COAUTHIDENTITY {
    USHORT *User;
    ULONG UserLength;
    USHORT *Domain;
    ULONG DomainLength;
    USHORT *Password;
    ULONG PasswordLength;
    ULONG Flags;
} COAUTHIDENTITY;
typedef struct _COAUTHINFO {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    LPWSTR pwszServerPrincName;
    DWORD dwAuthnLevel;
    DWORD dwImpersonationLevel;
    COAUTHIDENTITY *pAuthIdentityData;
    DWORD dwCapabilities;
} COAUTHINFO;
typedef enum tagMEMCTX {
    MEMCTX_TASK = 1,
    MEMCTX_SHARED = 2,
    MEMCTX_MACSYSTEM = 3,
    MEMCTX_UNKNOWN = -1,
    MEMCTX_SAME = -2
} MEMCTX;









typedef enum tagCLSCTX {
    CLSCTX_INPROC_SERVER = 0x1,
    CLSCTX_INPROC_HANDLER = 0x2,
    CLSCTX_LOCAL_SERVER = 0x4,
    CLSCTX_INPROC_SERVER16 = 0x8,
    CLSCTX_REMOTE_SERVER = 0x10,
    CLSCTX_INPROC_HANDLER16 = 0x20,
    CLSCTX_INPROC_SERVERX86 = 0x40,
    CLSCTX_INPROC_HANDLERX86 = 0x80,
    CLSCTX_ESERVER_HANDLER = 0x100,
    CLSCTX_NO_CODE_DOWNLOAD = 0x400,
    CLSCTX_NO_CUSTOM_MARSHAL = 0x1000,
    CLSCTX_ENABLE_CODE_DOWNLOAD = 0x2000,
    CLSCTX_NO_FAILURE_LOG = 0x4000,
    CLSCTX_DISABLE_AAA = 0x8000,
    CLSCTX_ENABLE_AAA = 0x10000,
    CLSCTX_FROM_DEFAULT_CONTEXT = 0x20000,
    CLSCTX_ACTIVATE_X86_SERVER = 0x40000,
    CLSCTX_ACTIVATE_32_BIT_SERVER = CLSCTX_ACTIVATE_X86_SERVER,
    CLSCTX_ACTIVATE_64_BIT_SERVER = 0x80000,
    CLSCTX_ENABLE_CLOAKING = 0x100000,
    CLSCTX_APPCONTAINER = 0x400000,
    CLSCTX_ACTIVATE_AAA_AS_IU = 0x800000,
    CLSCTX_RESERVED6 = 0x1000000,
    CLSCTX_ACTIVATE_ARM32_SERVER = 0x2000000,
    CLSCTX_PS_DLL = 0x80000000
} CLSCTX;



typedef enum tagMSHLFLAGS {
    MSHLFLAGS_NORMAL = 0,
    MSHLFLAGS_TABLESTRONG = 1,
    MSHLFLAGS_TABLEWEAK = 2,
    MSHLFLAGS_NOPING = 4
} MSHLFLAGS;
typedef enum tagMSHCTX {
    MSHCTX_LOCAL = 0,
    MSHCTX_NOSHAREDMEM = 1,
    MSHCTX_DIFFERENTMACHINE = 2,
    MSHCTX_INPROC = 3,
    MSHCTX_CROSSCTX = 4
} MSHCTX;
typedef struct _BYTE_BLOB {
    ULONG clSize;
    byte abData[1];
} BYTE_BLOB;
typedef BYTE_BLOB *UP_BYTE_BLOB;
typedef struct _FLAGGED_BYTE_BLOB {
    ULONG fFlags;
    ULONG clSize;
    byte abData[1];
} FLAGGED_BYTE_BLOB;
typedef FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB;
typedef struct _FLAGGED_WORD_BLOB {
    ULONG fFlags;
    ULONG clSize;
    unsigned short asData[1];
} FLAGGED_WORD_BLOB;
typedef FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB;
typedef struct _BYTE_SIZEDARR {
    ULONG clSize;
    byte *pData;
} BYTE_SIZEDARR;
typedef struct _SHORT_SIZEDARR {
    ULONG clSize;
    unsigned short *pData;
} WORD_SIZEDARR;
typedef struct _LONG_SIZEDARR {
    ULONG clSize;
    ULONG *pData;
} DWORD_SIZEDARR;
typedef struct _HYPER_SIZEDARR {
    ULONG clSize;
    hyper *pData;
} HYPER_SIZEDARR;






typedef struct _userCLIPFORMAT {
    LONG fContext;
    union __WIDL_wtypes_generated_name_00000001 {
        DWORD dwValue;
        LPWSTR pwszName;
    } u;
} userCLIPFORMAT;
typedef userCLIPFORMAT *wireCLIPFORMAT;
typedef WORD CLIPFORMAT;
typedef struct tagRemHGLOBAL {
    LONG fNullHGlobal;
    ULONG cbData;
    byte data[1];
} RemHGLOBAL;
typedef struct _userHGLOBAL {
    LONG fContext;
    union __WIDL_wtypes_generated_name_00000002 {
        LONG hInproc;
        FLAGGED_BYTE_BLOB *hRemote;
        INT64 hInproc64;
    } u;
} userHGLOBAL;
typedef userHGLOBAL *wireHGLOBAL;
typedef struct tagRemHMETAFILEPICT {
    LONG mm;
    LONG xExt;
    LONG yExt;
    ULONG cbData;
    byte data[1];
} RemHMETAFILEPICT;
typedef struct _userHMETAFILE {
    LONG fContext;
    union __WIDL_wtypes_generated_name_00000003 {
        LONG hInproc;
        BYTE_BLOB *hRemote;
        INT64 hInproc64;
    } u;
} userHMETAFILE;
typedef userHMETAFILE *wireHMETAFILE;
typedef struct _remoteMETAFILEPICT {
    LONG mm;
    LONG xExt;
    LONG yExt;
    userHMETAFILE *hMF;
} remoteMETAFILEPICT;
typedef struct _userHMETAFILEPICT {
    LONG fContext;
    union __WIDL_wtypes_generated_name_00000004 {
        LONG hInproc;
        remoteMETAFILEPICT *hRemote;
        INT64 hInproc64;
    } u;
} userHMETAFILEPICT;
typedef userHMETAFILEPICT *wireHMETAFILEPICT;
typedef struct tagRemHENHMETAFILE {
    ULONG cbData;
    byte data[1];
} RemHENHMETAFILE;
typedef struct _userHENHMETAFILE {
    LONG fContext;
    union __WIDL_wtypes_generated_name_00000005 {
        LONG hInproc;
        BYTE_BLOB *hRemote;
        INT64 hInproc64;
    } u;
} userHENHMETAFILE;
typedef userHENHMETAFILE *wireHENHMETAFILE;
typedef struct tagRemHBITMAP {
    ULONG cbData;
    byte data[1];
} RemHBITMAP;
typedef struct _userBITMAP {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    ULONG cbSize;
    byte pBuffer[1];
} userBITMAP;
typedef struct _userHBITMAP {
    LONG fContext;
    union __WIDL_wtypes_generated_name_00000006 {
        LONG hInproc;
        userBITMAP *hRemote;
        INT64 hInproc64;
    } u;
} userHBITMAP;
typedef userHBITMAP *wireHBITMAP;
typedef struct tagRemHPALETTE {
    ULONG cbData;
    byte data[1];
} RemHPALETTE;
typedef struct tagrpcLOGPALETTE {
    WORD palVersion;
    WORD palNumEntries;
    PALETTEENTRY palPalEntry[1];
} rpcLOGPALETTE;
typedef struct _userHPALETTE {
    LONG fContext;
    union __WIDL_wtypes_generated_name_00000007 {
        LONG hInproc;
        rpcLOGPALETTE *hRemote;
        INT64 hInproc64;
    } u;
} userHPALETTE;
typedef userHPALETTE *wireHPALETTE;








typedef void *HMETAFILEPICT;
typedef struct _RemotableHandle {
    LONG fContext;
    union __WIDL_wtypes_generated_name_00000008 {
        LONG hInproc;
        LONG hRemote;
    } u;
} RemotableHandle;
typedef RemotableHandle *wireHACCEL;
typedef RemotableHandle *wireHBRUSH;
typedef RemotableHandle *wireHDC;
typedef RemotableHandle *wireHFONT;
typedef RemotableHandle *wireHICON;
typedef RemotableHandle *wireHMENU;
typedef RemotableHandle *wireHWND;
typedef RemotableHandle *wireHMONITOR;




























typedef enum tagDVASPECT {
    DVASPECT_CONTENT = 1,
    DVASPECT_THUMBNAIL = 2,
    DVASPECT_ICON = 4,
    DVASPECT_DOCPRINT = 8
} DVASPECT;
typedef enum tagSTGC {
    STGC_DEFAULT = 0,
    STGC_OVERWRITE = 1,
    STGC_ONLYIFCURRENT = 2,
    STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4,
    STGC_CONSOLIDATE = 8
} STGC;
typedef enum tagSTGMOVE {
    STGMOVE_MOVE = 0,
    STGMOVE_COPY = 1,
    STGMOVE_SHALLOWCOPY = 2
} STGMOVE;
typedef enum tagSTATFLAG {
    STATFLAG_DEFAULT = 0,
    STATFLAG_NONAME = 1,
    STATFLAG_NOOPEN = 2
} STATFLAG;



typedef double  DATE;








typedef union tagCY {
    struct {
        ULONG Lo;
        LONG  Hi;
    } ;
    LONGLONG int64;
} CY;


typedef CY *LPCY;









typedef struct tagDEC {
  USHORT wReserved;
  union {
    struct {
      BYTE scale;
      BYTE sign;
    } ;
    USHORT signscale;
  } ;
  ULONG Hi32;
  union {
    struct {
      ULONG Lo32;
      ULONG Mid32;
    } ;
    ULONGLONG Lo64;
  } ;
} DECIMAL;



typedef DECIMAL *LPDECIMAL;
typedef FLAGGED_WORD_BLOB *wireBSTR;
typedef OLECHAR *BSTR;
typedef BSTR *LPBSTR;
typedef short VARIANT_BOOL;
typedef VARIANT_BOOL _VARIANT_BOOL;


typedef struct tagBSTRBLOB {
    ULONG cbSize;
    BYTE *pData;
} BSTRBLOB;
typedef struct tagBSTRBLOB *LPBSTRBLOB;




typedef struct tagBLOB {
    ULONG cbSize;
    BYTE *pBlobData;
} BLOB;
typedef struct tagBLOB *LPBLOB;

typedef struct tagCLIPDATA {
    ULONG cbSize;
    LONG ulClipFmt;
    BYTE *pClipData;
} CLIPDATA;

typedef ULONG PROPID;
typedef unsigned short VARTYPE;
enum VARENUM {
    VT_EMPTY = 0,
    VT_NULL = 1,
    VT_I2 = 2,
    VT_I4 = 3,
    VT_R4 = 4,
    VT_R8 = 5,
    VT_CY = 6,
    VT_DATE = 7,
    VT_BSTR = 8,
    VT_DISPATCH = 9,
    VT_ERROR = 10,
    VT_BOOL = 11,
    VT_VARIANT = 12,
    VT_UNKNOWN = 13,
    VT_DECIMAL = 14,
    VT_I1 = 16,
    VT_UI1 = 17,
    VT_UI2 = 18,
    VT_UI4 = 19,
    VT_I8 = 20,
    VT_UI8 = 21,
    VT_INT = 22,
    VT_UINT = 23,
    VT_VOID = 24,
    VT_HRESULT = 25,
    VT_PTR = 26,
    VT_SAFEARRAY = 27,
    VT_CARRAY = 28,
    VT_USERDEFINED = 29,
    VT_LPSTR = 30,
    VT_LPWSTR = 31,
    VT_RECORD = 36,
    VT_INT_PTR = 37,
    VT_UINT_PTR = 38,
    VT_FILETIME = 64,
    VT_BLOB = 65,
    VT_STREAM = 66,
    VT_STORAGE = 67,
    VT_STREAMED_OBJECT = 68,
    VT_STORED_OBJECT = 69,
    VT_BLOB_OBJECT = 70,
    VT_CF = 71,
    VT_CLSID = 72,
    VT_VERSIONED_STREAM = 73,
    VT_BSTR_BLOB = 0xfff,
    VT_VECTOR = 0x1000,
    VT_ARRAY = 0x2000,
    VT_BYREF = 0x4000,
    VT_RESERVED = 0x8000,
    VT_ILLEGAL = 0xffff,
    VT_ILLEGALMASKED = 0xfff,
    VT_TYPEMASK = 0xfff
};
typedef struct tagCSPLATFORM {
    DWORD dwPlatformId;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    DWORD dwProcessorArch;
} CSPLATFORM;
typedef struct tagQUERYCONTEXT {
    DWORD dwContext;
    CSPLATFORM Platform;
    LCID Locale;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
} QUERYCONTEXT;
typedef enum tagTYSPEC {
    TYSPEC_CLSID = 0,
    TYSPEC_FILEEXT = 1,
    TYSPEC_MIMETYPE = 2,
    TYSPEC_PROGID = 3,
    TYSPEC_FILENAME = 4,
    TYSPEC_PACKAGENAME = 5,
    TYSPEC_OBJECTID = 6
} TYSPEC;
typedef struct __WIDL_wtypes_generated_name_0000000A {
    DWORD tyspec;
    union __WIDL_wtypes_generated_name_00000009 {
        CLSID clsid;
        LPOLESTR pFileExt;
        LPOLESTR pMimeType;
        LPOLESTR pProgId;
        LPOLESTR pFileName;
        struct {
            LPOLESTR pPackageName;
            GUID PolicyId;
        } ByName;
        struct {
            GUID ObjectId;
            GUID PolicyId;
        } ByObjectId;
    } tagged_union;
} uCLSSPEC;


typedef struct _tagpropertykey {
    GUID fmtid;
    DWORD pid;
} PROPERTYKEY;














# 40 "include/unknwn.h" 2


















typedef IUnknown *LPUNKNOWN;





















extern const GUID IID_IUnknown ;
























typedef struct IUnknownVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IUnknown *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IUnknown *This);

    ULONG ( *Release)(
        IUnknown *This);

    
} IUnknownVtbl;

struct IUnknown {
    const IUnknownVtbl* lpVtbl;
};



























HRESULT  IUnknown_QueryInterface_Proxy(IUnknown* This, const IID* const riid, void **ppvObject);
void  IUnknown_QueryInterface_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer,
     PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
ULONG  IUnknown_AddRef_Proxy(IUnknown* This);
void  IUnknown_AddRef_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer,
     PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);
ULONG  IUnknown_Release_Proxy(IUnknown* This);
void  IUnknown_Release_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* pRpcChannelBuffer,
     PRPC_MESSAGE pRpcMessage, DWORD* pdwStubPhase);









typedef IClassFactory *LPCLASSFACTORY;
extern const GUID IID_IClassFactory ;

















typedef struct IClassFactoryVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IClassFactory *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IClassFactory *This);

    ULONG ( *Release)(
        IClassFactory *This);

    
    HRESULT ( *CreateInstance)(
        IClassFactory *This,
        IUnknown *pUnkOuter,
        const IID* const riid,
        void **ppvObject);

    HRESULT ( *LockServer)(
        IClassFactory *This,
        BOOL fLock);

    
} IClassFactoryVtbl;

struct IClassFactory {
    const IClassFactoryVtbl* lpVtbl;
};

































HRESULT  IClassFactory_RemoteCreateInstance_Proxy(
    IClassFactory* This,
    const IID* const riid,
    IUnknown **ppvObject);
void  IClassFactory_RemoteCreateInstance_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IClassFactory_RemoteLockServer_Proxy(
    IClassFactory* This,
    BOOL fLock);
void  IClassFactory_RemoteLockServer_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IClassFactory_CreateInstance_Proxy(
    IClassFactory* This,
    IUnknown *pUnkOuter,
    const IID* const riid,
    void **ppvObject);
HRESULT  IClassFactory_CreateInstance_Stub(
    IClassFactory* This,
    const IID* const riid,
    IUnknown **ppvObject);
HRESULT  IClassFactory_LockServer_Proxy(
    IClassFactory* This,
    BOOL fLock);
HRESULT  IClassFactory_LockServer_Stub(
    IClassFactory* This,
    BOOL fLock);













# 408 "include/objidlbase.h" 2







































typedef struct _COSERVERINFO {
    DWORD dwReserved1;
    LPWSTR pwszName;
    COAUTHINFO *pAuthInfo;
    DWORD dwReserved2;
} COSERVERINFO;






typedef IMarshal *LPMARSHAL;
extern const GUID IID_IMarshal ;












































typedef struct IMarshalVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IMarshal *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IMarshal *This);

    ULONG ( *Release)(
        IMarshal *This);

    
    HRESULT ( *GetUnmarshalClass)(
        IMarshal *This,
        const IID* const riid,
        void *pv,
        DWORD dwDestContext,
        void *pvDestContext,
        DWORD mshlflags,
        CLSID *pCid);

    HRESULT ( *GetMarshalSizeMax)(
        IMarshal *This,
        const IID* const riid,
        void *pv,
        DWORD dwDestContext,
        void *pvDestContext,
        DWORD mshlflags,
        DWORD *pSize);

    HRESULT ( *MarshalInterface)(
        IMarshal *This,
        IStream *pStm,
        const IID* const riid,
        void *pv,
        DWORD dwDestContext,
        void *pvDestContext,
        DWORD mshlflags);

    HRESULT ( *UnmarshalInterface)(
        IMarshal *This,
        IStream *pStm,
        const IID* const riid,
        void **ppv);

    HRESULT ( *ReleaseMarshalData)(
        IMarshal *This,
        IStream *pStm);

    HRESULT ( *DisconnectObject)(
        IMarshal *This,
        DWORD dwReserved);

    
} IMarshalVtbl;

struct IMarshal {
    const IMarshalVtbl* lpVtbl;
};


























































extern const GUID IID_IAgileObject ;









typedef struct IAgileObjectVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IAgileObject *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IAgileObject *This);

    ULONG ( *Release)(
        IAgileObject *This);

    
} IAgileObjectVtbl;

struct IAgileObject {
    const IAgileObjectVtbl* lpVtbl;
};
































extern const GUID IID_IAgileReference ;













typedef struct IAgileReferenceVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IAgileReference *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IAgileReference *This);

    ULONG ( *Release)(
        IAgileReference *This);

    
    HRESULT ( *Resolve)(
        IAgileReference *This,
        const IID* const riid,
        void **object);

    
} IAgileReferenceVtbl;

struct IAgileReference {
    const IAgileReferenceVtbl* lpVtbl;
};






































extern const GUID IID_INoMarshal ;









typedef struct INoMarshalVtbl {
    

    
    HRESULT ( *QueryInterface)(
        INoMarshal *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        INoMarshal *This);

    ULONG ( *Release)(
        INoMarshal *This);

    
} INoMarshalVtbl;

struct INoMarshal {
    const INoMarshalVtbl* lpVtbl;
};
































typedef IMarshal2 *LPMARSHAL2;
extern const GUID IID_IMarshal2 ;









typedef struct IMarshal2Vtbl {
    

    
    HRESULT ( *QueryInterface)(
        IMarshal2 *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IMarshal2 *This);

    ULONG ( *Release)(
        IMarshal2 *This);

    
    HRESULT ( *GetUnmarshalClass)(
        IMarshal2 *This,
        const IID* const riid,
        void *pv,
        DWORD dwDestContext,
        void *pvDestContext,
        DWORD mshlflags,
        CLSID *pCid);

    HRESULT ( *GetMarshalSizeMax)(
        IMarshal2 *This,
        const IID* const riid,
        void *pv,
        DWORD dwDestContext,
        void *pvDestContext,
        DWORD mshlflags,
        DWORD *pSize);

    HRESULT ( *MarshalInterface)(
        IMarshal2 *This,
        IStream *pStm,
        const IID* const riid,
        void *pv,
        DWORD dwDestContext,
        void *pvDestContext,
        DWORD mshlflags);

    HRESULT ( *UnmarshalInterface)(
        IMarshal2 *This,
        IStream *pStm,
        const IID* const riid,
        void **ppv);

    HRESULT ( *ReleaseMarshalData)(
        IMarshal2 *This,
        IStream *pStm);

    HRESULT ( *DisconnectObject)(
        IMarshal2 *This,
        DWORD dwReserved);

    
} IMarshal2Vtbl;

struct IMarshal2 {
    const IMarshal2Vtbl* lpVtbl;
};


























































typedef IStdMarshalInfo *LPSTDMARSHALINFO;
extern const GUID IID_IStdMarshalInfo ;














typedef struct IStdMarshalInfoVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IStdMarshalInfo *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IStdMarshalInfo *This);

    ULONG ( *Release)(
        IStdMarshalInfo *This);

    
    HRESULT ( *GetClassForHandler)(
        IStdMarshalInfo *This,
        DWORD dwDestContext,
        void *pvDestContext,
        CLSID *pClsid);

    
} IStdMarshalInfoVtbl;

struct IStdMarshalInfo {
    const IStdMarshalInfoVtbl* lpVtbl;
};






































typedef IExternalConnection *LPEXTERNALCONNECTION;
typedef enum tagEXTCONN {
    EXTCONN_STRONG = 0x1,
    EXTCONN_WEAK = 0x2,
    EXTCONN_CALLABLE = 0x4
} EXTCONN;
extern const GUID IID_IExternalConnection ;


















typedef struct IExternalConnectionVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IExternalConnection *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IExternalConnection *This);

    ULONG ( *Release)(
        IExternalConnection *This);

    
    DWORD ( *AddConnection)(
        IExternalConnection *This,
        DWORD extconn,
        DWORD reserved);

    DWORD ( *ReleaseConnection)(
        IExternalConnection *This,
        DWORD extconn,
        DWORD reserved,
        BOOL fLastReleaseCloses);

    
} IExternalConnectionVtbl;

struct IExternalConnection {
    const IExternalConnectionVtbl* lpVtbl;
};










































typedef IMultiQI *LPMULTIQI;
typedef struct tagMULTI_QI {
    const IID *pIID;
    IUnknown *pItf;
    HRESULT hr;
} MULTI_QI;
extern const GUID IID_IMultiQI ;













typedef struct IMultiQIVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IMultiQI *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IMultiQI *This);

    ULONG ( *Release)(
        IMultiQI *This);

    
    HRESULT ( *QueryMultipleInterfaces)(
        IMultiQI *This,
        ULONG cMQIs,
        MULTI_QI *pMQIs);

    
} IMultiQIVtbl;

struct IMultiQI {
    const IMultiQIVtbl* lpVtbl;
};






































typedef IMalloc *LPMALLOC;
extern const GUID IID_IMalloc ;




























typedef struct IMallocVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IMalloc *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IMalloc *This);

    ULONG ( *Release)(
        IMalloc *This);

    
    LPVOID ( *Alloc)(
        IMalloc *This,
        SIZE_T cb);

    LPVOID ( *Realloc)(
        IMalloc *This,
        LPVOID pv,
        SIZE_T cb);

    void ( *Free)(
        IMalloc *This,
        LPVOID pv);

    SIZE_T ( *GetSize)(
        IMalloc *This,
        LPVOID pv);

    int ( *DidAlloc)(
        IMalloc *This,
        LPVOID pv);

    void ( *HeapMinimize)(
        IMalloc *This);

    
} IMallocVtbl;

struct IMalloc {
    const IMallocVtbl* lpVtbl;
};


























































extern const GUID IID_IInternalUnknown ;













typedef struct IInternalUnknownVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IInternalUnknown *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IInternalUnknown *This);

    ULONG ( *Release)(
        IInternalUnknown *This);

    
    HRESULT ( *QueryInternalInterface)(
        IInternalUnknown *This,
        const IID* const riid,
        void **ppv);

    
} IInternalUnknownVtbl;

struct IInternalUnknown {
    const IInternalUnknownVtbl* lpVtbl;
};






































typedef IEnumUnknown *LPENUMUNKNOWN;
extern const GUID IID_IEnumUnknown ;























typedef struct IEnumUnknownVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IEnumUnknown *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IEnumUnknown *This);

    ULONG ( *Release)(
        IEnumUnknown *This);

    
    HRESULT ( *Next)(
        IEnumUnknown *This,
        ULONG celt,
        IUnknown **rgelt,
        ULONG *pceltFetched);

    HRESULT ( *Skip)(
        IEnumUnknown *This,
        ULONG celt);

    HRESULT ( *Reset)(
        IEnumUnknown *This);

    HRESULT ( *Clone)(
        IEnumUnknown *This,
        IEnumUnknown **ppenum);

    
} IEnumUnknownVtbl;

struct IEnumUnknown {
    const IEnumUnknownVtbl* lpVtbl;
};









































HRESULT  IEnumUnknown_RemoteNext_Proxy(
    IEnumUnknown* This,
    ULONG celt,
    IUnknown **rgelt,
    ULONG *pceltFetched);
void  IEnumUnknown_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IEnumUnknown_Next_Proxy(
    IEnumUnknown* This,
    ULONG celt,
    IUnknown **rgelt,
    ULONG *pceltFetched);
HRESULT  IEnumUnknown_Next_Stub(
    IEnumUnknown* This,
    ULONG celt,
    IUnknown **rgelt,
    ULONG *pceltFetched);









typedef ISurrogate *LPSURROGATE;
extern const GUID IID_ISurrogate ;















typedef struct ISurrogateVtbl {
    

    
    HRESULT ( *QueryInterface)(
        ISurrogate *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ISurrogate *This);

    ULONG ( *Release)(
        ISurrogate *This);

    
    HRESULT ( *LoadDllServer)(
        ISurrogate *This,
        const CLSID* const Clsid);

    HRESULT ( *FreeSurrogate)(
        ISurrogate *This);

    
} ISurrogateVtbl;

struct ISurrogate {
    const ISurrogateVtbl* lpVtbl;
};










































typedef IGlobalInterfaceTable *LPGLOBALINTERFACETABLE;
extern const GUID IID_IGlobalInterfaceTable ;






















typedef struct IGlobalInterfaceTableVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IGlobalInterfaceTable *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IGlobalInterfaceTable *This);

    ULONG ( *Release)(
        IGlobalInterfaceTable *This);

    
    HRESULT ( *RegisterInterfaceInGlobal)(
        IGlobalInterfaceTable *This,
        IUnknown *pUnk,
        const IID* const riid,
        DWORD *pdwCookie);

    HRESULT ( *RevokeInterfaceFromGlobal)(
        IGlobalInterfaceTable *This,
        DWORD dwCookie);

    HRESULT ( *GetInterfaceFromGlobal)(
        IGlobalInterfaceTable *This,
        DWORD dwCookie,
        const IID* const riid,
        void **ppv);

    
} IGlobalInterfaceTableVtbl;

struct IGlobalInterfaceTable {
    const IGlobalInterfaceTableVtbl* lpVtbl;
};














































typedef IEnumString *LPENUMSTRING;
extern const GUID IID_IEnumString ;























typedef struct IEnumStringVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IEnumString *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IEnumString *This);

    ULONG ( *Release)(
        IEnumString *This);

    
    HRESULT ( *Next)(
        IEnumString *This,
        ULONG celt,
        LPOLESTR *rgelt,
        ULONG *pceltFetched);

    HRESULT ( *Skip)(
        IEnumString *This,
        ULONG celt);

    HRESULT ( *Reset)(
        IEnumString *This);

    HRESULT ( *Clone)(
        IEnumString *This,
        IEnumString **ppenum);

    
} IEnumStringVtbl;

struct IEnumString {
    const IEnumStringVtbl* lpVtbl;
};









































HRESULT  IEnumString_RemoteNext_Proxy(
    IEnumString* This,
    ULONG celt,
    LPOLESTR *rgelt,
    ULONG *pceltFetched);
void  IEnumString_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IEnumString_Next_Proxy(
    IEnumString* This,
    ULONG celt,
    LPOLESTR *rgelt,
    ULONG *pceltFetched);
HRESULT  IEnumString_Next_Stub(
    IEnumString* This,
    ULONG celt,
    LPOLESTR *rgelt,
    ULONG *pceltFetched);









extern const GUID IID_ISequentialStream ;



















typedef struct ISequentialStreamVtbl {
    

    
    HRESULT ( *QueryInterface)(
        ISequentialStream *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ISequentialStream *This);

    ULONG ( *Release)(
        ISequentialStream *This);

    
    HRESULT ( *Read)(
        ISequentialStream *This,
        void *pv,
        ULONG cb,
        ULONG *pcbRead);

    HRESULT ( *Write)(
        ISequentialStream *This,
        const void *pv,
        ULONG cb,
        ULONG *pcbWritten);

    
} ISequentialStreamVtbl;

struct ISequentialStream {
    const ISequentialStreamVtbl* lpVtbl;
};

































HRESULT  ISequentialStream_RemoteRead_Proxy(
    ISequentialStream* This,
    byte *pv,
    ULONG cb,
    ULONG *pcbRead);
void  ISequentialStream_RemoteRead_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ISequentialStream_RemoteWrite_Proxy(
    ISequentialStream* This,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
void  ISequentialStream_RemoteWrite_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ISequentialStream_Read_Proxy(
    ISequentialStream* This,
    void *pv,
    ULONG cb,
    ULONG *pcbRead);
HRESULT  ISequentialStream_Read_Stub(
    ISequentialStream* This,
    byte *pv,
    ULONG cb,
    ULONG *pcbRead);
HRESULT  ISequentialStream_Write_Proxy(
    ISequentialStream* This,
    const void *pv,
    ULONG cb,
    ULONG *pcbWritten);
HRESULT  ISequentialStream_Write_Stub(
    ISequentialStream* This,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);









typedef IStream *LPSTREAM;
typedef struct tagSTATSTG {
    LPOLESTR pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
} STATSTG;
typedef enum tagSTGTY {
    STGTY_STORAGE = 1,
    STGTY_STREAM = 2,
    STGTY_LOCKBYTES = 3,
    STGTY_PROPERTY = 4
} STGTY;
typedef enum tagSTREAM_SEEK {
    STREAM_SEEK_SET = 0,
    STREAM_SEEK_CUR = 1,
    STREAM_SEEK_END = 2
} STREAM_SEEK;




typedef enum tagLOCKTYPE {
    LOCK_WRITE = 1,
    LOCK_EXCLUSIVE = 2,
    LOCK_ONLYONCE = 4
} LOCKTYPE;
extern const GUID IID_IStream ;














































typedef struct IStreamVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IStream *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IStream *This);

    ULONG ( *Release)(
        IStream *This);

    
    HRESULT ( *Read)(
        IStream *This,
        void *pv,
        ULONG cb,
        ULONG *pcbRead);

    HRESULT ( *Write)(
        IStream *This,
        const void *pv,
        ULONG cb,
        ULONG *pcbWritten);

    
    HRESULT ( *Seek)(
        IStream *This,
        LARGE_INTEGER dlibMove,
        DWORD dwOrigin,
        ULARGE_INTEGER *plibNewPosition);

    HRESULT ( *SetSize)(
        IStream *This,
        ULARGE_INTEGER libNewSize);

    HRESULT ( *CopyTo)(
        IStream *This,
        IStream *pstm,
        ULARGE_INTEGER cb,
        ULARGE_INTEGER *pcbRead,
        ULARGE_INTEGER *pcbWritten);

    HRESULT ( *Commit)(
        IStream *This,
        DWORD grfCommitFlags);

    HRESULT ( *Revert)(
        IStream *This);

    HRESULT ( *LockRegion)(
        IStream *This,
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType);

    HRESULT ( *UnlockRegion)(
        IStream *This,
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType);

    HRESULT ( *Stat)(
        IStream *This,
        STATSTG *pstatstg,
        DWORD grfStatFlag);

    HRESULT ( *Clone)(
        IStream *This,
        IStream **ppstm);

    
} IStreamVtbl;

struct IStream {
    const IStreamVtbl* lpVtbl;
};







































































HRESULT  IStream_RemoteSeek_Proxy(
    IStream* This,
    LARGE_INTEGER dlibMove,
    DWORD dwOrigin,
    ULARGE_INTEGER *plibNewPosition);
void  IStream_RemoteSeek_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IStream_RemoteCopyTo_Proxy(
    IStream* This,
    IStream *pstm,
    ULARGE_INTEGER cb,
    ULARGE_INTEGER *pcbRead,
    ULARGE_INTEGER *pcbWritten);
void  IStream_RemoteCopyTo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IStream_Seek_Proxy(
    IStream* This,
    LARGE_INTEGER dlibMove,
    DWORD dwOrigin,
    ULARGE_INTEGER *plibNewPosition);
HRESULT  IStream_Seek_Stub(
    IStream* This,
    LARGE_INTEGER dlibMove,
    DWORD dwOrigin,
    ULARGE_INTEGER *plibNewPosition);
HRESULT  IStream_CopyTo_Proxy(
    IStream* This,
    IStream *pstm,
    ULARGE_INTEGER cb,
    ULARGE_INTEGER *pcbRead,
    ULARGE_INTEGER *pcbWritten);
HRESULT  IStream_CopyTo_Stub(
    IStream* This,
    IStream *pstm,
    ULARGE_INTEGER cb,
    ULARGE_INTEGER *pcbRead,
    ULARGE_INTEGER *pcbWritten);









typedef IRpcChannelBuffer *LPRPCCHANNELBUFFER;
typedef ULONG RPCOLEDATAREP;
typedef struct tagRPCOLEMESSAGE {
    void *reserved1;
    RPCOLEDATAREP dataRepresentation;
    void *Buffer;
    ULONG cbBuffer;
    ULONG iMethod;
    void * reserved2[5];
    ULONG rpcFlags;
} RPCOLEMESSAGE;
typedef RPCOLEMESSAGE *PRPCOLEMESSAGE;
extern const GUID IID_IRpcChannelBuffer ;



























typedef struct IRpcChannelBufferVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IRpcChannelBuffer *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRpcChannelBuffer *This);

    ULONG ( *Release)(
        IRpcChannelBuffer *This);

    
    HRESULT ( *GetBuffer)(
        IRpcChannelBuffer *This,
        RPCOLEMESSAGE *pMessage,
        const IID* const riid);

    HRESULT ( *SendReceive)(
        IRpcChannelBuffer *This,
        RPCOLEMESSAGE *pMessage,
        ULONG *pStatus);

    HRESULT ( *FreeBuffer)(
        IRpcChannelBuffer *This,
        RPCOLEMESSAGE *pMessage);

    HRESULT ( *GetDestCtx)(
        IRpcChannelBuffer *This,
        DWORD *pdwDestContext,
        void **ppvDestContext);

    HRESULT ( *IsConnected)(
        IRpcChannelBuffer *This);

    
} IRpcChannelBufferVtbl;

struct IRpcChannelBuffer {
    const IRpcChannelBufferVtbl* lpVtbl;
};






















































typedef IRpcChannelBuffer2 *LPRPCCHANNELBUFFER2;
extern const GUID IID_IRpcChannelBuffer2 ;












typedef struct IRpcChannelBuffer2Vtbl {
    

    
    HRESULT ( *QueryInterface)(
        IRpcChannelBuffer2 *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRpcChannelBuffer2 *This);

    ULONG ( *Release)(
        IRpcChannelBuffer2 *This);

    
    HRESULT ( *GetBuffer)(
        IRpcChannelBuffer2 *This,
        RPCOLEMESSAGE *pMessage,
        const IID* const riid);

    HRESULT ( *SendReceive)(
        IRpcChannelBuffer2 *This,
        RPCOLEMESSAGE *pMessage,
        ULONG *pStatus);

    HRESULT ( *FreeBuffer)(
        IRpcChannelBuffer2 *This,
        RPCOLEMESSAGE *pMessage);

    HRESULT ( *GetDestCtx)(
        IRpcChannelBuffer2 *This,
        DWORD *pdwDestContext,
        void **ppvDestContext);

    HRESULT ( *IsConnected)(
        IRpcChannelBuffer2 *This);

    
    HRESULT ( *GetProtocolVersion)(
        IRpcChannelBuffer2 *This,
        DWORD *pdwVersion);

    
} IRpcChannelBuffer2Vtbl;

struct IRpcChannelBuffer2 {
    const IRpcChannelBuffer2Vtbl* lpVtbl;
};




























































typedef IRpcChannelBuffer3 *LPRPCCHANNELBUFFER3;
extern const GUID IID_IRpcChannelBuffer3 ;







































typedef struct IRpcChannelBuffer3Vtbl {
    

    
    HRESULT ( *QueryInterface)(
        IRpcChannelBuffer3 *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRpcChannelBuffer3 *This);

    ULONG ( *Release)(
        IRpcChannelBuffer3 *This);

    
    HRESULT ( *GetBuffer)(
        IRpcChannelBuffer3 *This,
        RPCOLEMESSAGE *pMessage,
        const IID* const riid);

    HRESULT ( *SendReceive)(
        IRpcChannelBuffer3 *This,
        RPCOLEMESSAGE *pMessage,
        ULONG *pStatus);

    HRESULT ( *FreeBuffer)(
        IRpcChannelBuffer3 *This,
        RPCOLEMESSAGE *pMessage);

    HRESULT ( *GetDestCtx)(
        IRpcChannelBuffer3 *This,
        DWORD *pdwDestContext,
        void **ppvDestContext);

    HRESULT ( *IsConnected)(
        IRpcChannelBuffer3 *This);

    
    HRESULT ( *GetProtocolVersion)(
        IRpcChannelBuffer3 *This,
        DWORD *pdwVersion);

    
    HRESULT ( *Send)(
        IRpcChannelBuffer3 *This,
        RPCOLEMESSAGE *pMsg,
        ULONG *pulStatus);

    HRESULT ( *Receive)(
        IRpcChannelBuffer3 *This,
        RPCOLEMESSAGE *pMsg,
        ULONG ulSize,
        ULONG *pulStatus);

    HRESULT ( *Cancel)(
        IRpcChannelBuffer3 *This,
        RPCOLEMESSAGE *pMsg);

    HRESULT ( *GetCallContext)(
        IRpcChannelBuffer3 *This,
        RPCOLEMESSAGE *pMsg,
        const IID* const riid,
        void **pInterface);

    HRESULT ( *GetDestCtxEx)(
        IRpcChannelBuffer3 *This,
        RPCOLEMESSAGE *pMsg,
        DWORD *pdwDestContext,
        void **ppvDestContext);

    HRESULT ( *GetState)(
        IRpcChannelBuffer3 *This,
        RPCOLEMESSAGE *pMsg,
        DWORD *pState);

    HRESULT ( *RegisterAsync)(
        IRpcChannelBuffer3 *This,
        RPCOLEMESSAGE *pMsg,
        IAsyncManager *pAsyncMgr);

    
} IRpcChannelBuffer3Vtbl;

struct IRpcChannelBuffer3 {
    const IRpcChannelBuffer3Vtbl* lpVtbl;
};


























































































extern const GUID IID_IAsyncRpcChannelBuffer ;























typedef struct IAsyncRpcChannelBufferVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IAsyncRpcChannelBuffer *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IAsyncRpcChannelBuffer *This);

    ULONG ( *Release)(
        IAsyncRpcChannelBuffer *This);

    
    HRESULT ( *GetBuffer)(
        IAsyncRpcChannelBuffer *This,
        RPCOLEMESSAGE *pMessage,
        const IID* const riid);

    HRESULT ( *SendReceive)(
        IAsyncRpcChannelBuffer *This,
        RPCOLEMESSAGE *pMessage,
        ULONG *pStatus);

    HRESULT ( *FreeBuffer)(
        IAsyncRpcChannelBuffer *This,
        RPCOLEMESSAGE *pMessage);

    HRESULT ( *GetDestCtx)(
        IAsyncRpcChannelBuffer *This,
        DWORD *pdwDestContext,
        void **ppvDestContext);

    HRESULT ( *IsConnected)(
        IAsyncRpcChannelBuffer *This);

    
    HRESULT ( *GetProtocolVersion)(
        IAsyncRpcChannelBuffer *This,
        DWORD *pdwVersion);

    
    HRESULT ( *Send)(
        IAsyncRpcChannelBuffer *This,
        RPCOLEMESSAGE *pMsg,
        ISynchronize *pSync,
        ULONG *pulStatus);

    HRESULT ( *Receive)(
        IAsyncRpcChannelBuffer *This,
        RPCOLEMESSAGE *pMsg,
        ULONG *pulStatus);

    HRESULT ( *GetDestCtxEx)(
        IAsyncRpcChannelBuffer *This,
        RPCOLEMESSAGE *pMsg,
        DWORD *pdwDestContext,
        void **ppvDestContext);

    
} IAsyncRpcChannelBufferVtbl;

struct IAsyncRpcChannelBuffer {
    const IAsyncRpcChannelBufferVtbl* lpVtbl;
};










































































extern const GUID IID_IRpcSyntaxNegotiate ;












typedef struct IRpcSyntaxNegotiateVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IRpcSyntaxNegotiate *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRpcSyntaxNegotiate *This);

    ULONG ( *Release)(
        IRpcSyntaxNegotiate *This);

    
    HRESULT ( *NegotiateSyntax)(
        IRpcSyntaxNegotiate *This,
        RPCOLEMESSAGE *pMsg);

    
} IRpcSyntaxNegotiateVtbl;

struct IRpcSyntaxNegotiate {
    const IRpcSyntaxNegotiateVtbl* lpVtbl;
};






































typedef IRpcProxyBuffer *LPRPCPROXYBUFFER;
extern const GUID IID_IRpcProxyBuffer ;















typedef struct IRpcProxyBufferVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IRpcProxyBuffer *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRpcProxyBuffer *This);

    ULONG ( *Release)(
        IRpcProxyBuffer *This);

    
    HRESULT ( *Connect)(
        IRpcProxyBuffer *This,
        IRpcChannelBuffer *pRpcChannelBuffer);

    void ( *Disconnect)(
        IRpcProxyBuffer *This);

    
} IRpcProxyBufferVtbl;

struct IRpcProxyBuffer {
    const IRpcProxyBufferVtbl* lpVtbl;
};










































typedef IRpcStubBuffer *LPRPCSTUBBUFFER;
extern const GUID IID_IRpcStubBuffer ;































typedef struct IRpcStubBufferVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IRpcStubBuffer *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRpcStubBuffer *This);

    ULONG ( *Release)(
        IRpcStubBuffer *This);

    
    HRESULT ( *Connect)(
        IRpcStubBuffer *This,
        IUnknown *pUnkServer);

    void ( *Disconnect)(
        IRpcStubBuffer *This);

    HRESULT ( *Invoke)(
        IRpcStubBuffer *This,
        RPCOLEMESSAGE *_prpcmsg,
        IRpcChannelBuffer *_pRpcChannelBuffer);

    IRpcStubBuffer * ( *IsIIDSupported)(
        IRpcStubBuffer *This,
        const IID* const riid);

    ULONG ( *CountRefs)(
        IRpcStubBuffer *This);

    HRESULT ( *DebugServerQueryInterface)(
        IRpcStubBuffer *This,
        void **ppv);

    void ( *DebugServerRelease)(
        IRpcStubBuffer *This,
        void *pv);

    
} IRpcStubBufferVtbl;

struct IRpcStubBuffer {
    const IRpcStubBufferVtbl* lpVtbl;
};






























































typedef IPSFactoryBuffer *LPPSFACTORYBUFFER;
extern const GUID IID_IPSFactoryBuffer ;




















typedef struct IPSFactoryBufferVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IPSFactoryBuffer *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IPSFactoryBuffer *This);

    ULONG ( *Release)(
        IPSFactoryBuffer *This);

    
    HRESULT ( *CreateProxy)(
        IPSFactoryBuffer *This,
        IUnknown *pUnkOuter,
        const IID* const riid,
        IRpcProxyBuffer **ppProxy,
        void **ppv);

    HRESULT ( *CreateStub)(
        IPSFactoryBuffer *This,
        const IID* const riid,
        IUnknown *pUnkServer,
        IRpcStubBuffer **ppStub);

    
} IPSFactoryBufferVtbl;

struct IPSFactoryBuffer {
    const IPSFactoryBufferVtbl* lpVtbl;
};










































typedef IChannelHook *LPCHANNELHOOK;
typedef struct SChannelHookCallInfo {
    IID iid;
    DWORD cbSize;
    GUID uCausality;
    DWORD dwServerPid;
    DWORD iMethod;
    void *pObject;
} SChannelHookCallInfo;
extern const GUID IID_IChannelHook ;
















































typedef struct IChannelHookVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IChannelHook *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IChannelHook *This);

    ULONG ( *Release)(
        IChannelHook *This);

    
    void ( *ClientGetSize)(
        IChannelHook *This,
        const GUID* const uExtent,
        const IID* const riid,
        ULONG *pDataSize);

    void ( *ClientFillBuffer)(
        IChannelHook *This,
        const GUID* const uExtent,
        const IID* const riid,
        ULONG *pDataSize,
        void *pDataBuffer);

    void ( *ClientNotify)(
        IChannelHook *This,
        const GUID* const uExtent,
        const IID* const riid,
        ULONG cbDataSize,
        void *pDataBuffer,
        DWORD lDataRep,
        HRESULT hrFault);

    void ( *ServerNotify)(
        IChannelHook *This,
        const GUID* const uExtent,
        const IID* const riid,
        ULONG cbDataSize,
        void *pDataBuffer,
        DWORD lDataRep);

    void ( *ServerGetSize)(
        IChannelHook *This,
        const GUID* const uExtent,
        const IID* const riid,
        HRESULT hrFault,
        ULONG *pDataSize);

    void ( *ServerFillBuffer)(
        IChannelHook *This,
        const GUID* const uExtent,
        const IID* const riid,
        ULONG *pDataSize,
        void *pDataBuffer,
        HRESULT hrFault);

    
} IChannelHookVtbl;

struct IChannelHook {
    const IChannelHookVtbl* lpVtbl;
};




















































extern const FMTID FMTID_SummaryInformation;

extern const FMTID FMTID_DocSummaryInformation;

extern const FMTID FMTID_UserDefinedProperties;







typedef struct tagSOLE_AUTHENTICATION_SERVICE {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    OLECHAR *pPrincipalName;
    HRESULT hr;
} SOLE_AUTHENTICATION_SERVICE;
typedef SOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE;
typedef struct tagSOLE_AUTHENTICATION_INFO {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    void *pAuthInfo;
} SOLE_AUTHENTICATION_INFO;




typedef struct tagSOLE_AUTHENTICATION_LIST {
    DWORD cAuthInfo;
    SOLE_AUTHENTICATION_INFO *aAuthInfo;
} SOLE_AUTHENTICATION_LIST;
typedef enum tagEOLE_AUTHENTICATION_CAPABILITIES {
    EOAC_NONE = 0x0,
    EOAC_MUTUAL_AUTH = 0x1,
    EOAC_SECURE_REFS = 0x2,
    EOAC_ACCESS_CONTROL = 0x4,
    EOAC_APPID = 0x8,
    EOAC_DYNAMIC = 0x10,
    EOAC_STATIC_CLOAKING = 0x20,
    EOAC_DYNAMIC_CLOAKING = 0x40,
    EOAC_ANY_AUTHORITY = 0x80,
    EOAC_MAKE_FULLSIC = 0x100,
    EOAC_REQUIRE_FULLSIC = 0x200,
    EOAC_AUTO_IMPERSONATE = 0x400,
    EOAC_DEFAULT = 0x800,
    EOAC_DISABLE_AAA = 0x1000,
    EOAC_NO_CUSTOM_MARSHAL = 0x2000
} EOLE_AUTHENTICATION_CAPABILITIES;
extern const GUID IID_IClientSecurity ;

































typedef struct IClientSecurityVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IClientSecurity *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IClientSecurity *This);

    ULONG ( *Release)(
        IClientSecurity *This);

    
    HRESULT ( *QueryBlanket)(
        IClientSecurity *This,
        IUnknown *pProxy,
        DWORD *pAuthnSvc,
        DWORD *pAuthzSvc,
        OLECHAR **pServerPrincName,
        DWORD *pAuthnLevel,
        DWORD *pImpLevel,
        void **pAuthInfo,
        DWORD *pCapabilities);

    HRESULT ( *SetBlanket)(
        IClientSecurity *This,
        IUnknown *pProxy,
        DWORD AuthnSvc,
        DWORD AuthzSvc,
        OLECHAR *pServerPrincName,
        DWORD AuthnLevel,
        DWORD ImpLevel,
        void *pAuthInfo,
        DWORD Capabilities);

    HRESULT ( *CopyProxy)(
        IClientSecurity *This,
        IUnknown *pProxy,
        IUnknown **ppCopy);

    
} IClientSecurityVtbl;

struct IClientSecurity {
    const IClientSecurityVtbl* lpVtbl;
};














































extern const GUID IID_IServerSecurity ;



























typedef struct IServerSecurityVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IServerSecurity *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IServerSecurity *This);

    ULONG ( *Release)(
        IServerSecurity *This);

    
    HRESULT ( *QueryBlanket)(
        IServerSecurity *This,
        DWORD *pAuthnSvc,
        DWORD *pAuthzSvc,
        OLECHAR **pServerPrincName,
        DWORD *pAuthnLevel,
        DWORD *pImpLevel,
        void **pPrivs,
        DWORD *pCapabilities);

    HRESULT ( *ImpersonateClient)(
        IServerSecurity *This);

    HRESULT ( *RevertToSelf)(
        IServerSecurity *This);

    BOOL ( *IsImpersonating)(
        IServerSecurity *This);

    
} IServerSecurityVtbl;

struct IServerSecurity {
    const IServerSecurityVtbl* lpVtbl;
};


















































extern const GUID IID_IAsyncSetup ;
















typedef struct IAsyncSetupVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IAsyncSetup *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IAsyncSetup *This);

    ULONG ( *Release)(
        IAsyncSetup *This);

    
    HRESULT ( *GetAsyncManager)(
        IAsyncSetup *This,
        const IID* const riid,
        IUnknown *pOuter,
        DWORD dwFlags,
        IUnknown **ppInner,
        IAsyncManager **ppAsyncMgr);

    
} IAsyncSetupVtbl;

struct IAsyncSetup {
    const IAsyncSetupVtbl* lpVtbl;
};






































extern const GUID IID_ISynchronize ;



















typedef struct ISynchronizeVtbl {
    

    
    HRESULT ( *QueryInterface)(
        ISynchronize *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ISynchronize *This);

    ULONG ( *Release)(
        ISynchronize *This);

    
    HRESULT ( *Wait)(
        ISynchronize *This,
        DWORD dwFlags,
        DWORD dwMilliseconds);

    HRESULT ( *Signal)(
        ISynchronize *This);

    HRESULT ( *Reset)(
        ISynchronize *This);

    
} ISynchronizeVtbl;

struct ISynchronize {
    const ISynchronizeVtbl* lpVtbl;
};














































extern const GUID IID_ISynchronizeHandle ;












typedef struct ISynchronizeHandleVtbl {
    

    
    HRESULT ( *QueryInterface)(
        ISynchronizeHandle *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ISynchronizeHandle *This);

    ULONG ( *Release)(
        ISynchronizeHandle *This);

    
    HRESULT ( *GetHandle)(
        ISynchronizeHandle *This,
        HANDLE *ph);

    
} ISynchronizeHandleVtbl;

struct ISynchronizeHandle {
    const ISynchronizeHandleVtbl* lpVtbl;
};






































extern const GUID IID_ISynchronizeEvent ;












typedef struct ISynchronizeEventVtbl {
    

    
    HRESULT ( *QueryInterface)(
        ISynchronizeEvent *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ISynchronizeEvent *This);

    ULONG ( *Release)(
        ISynchronizeEvent *This);

    
    HRESULT ( *GetHandle)(
        ISynchronizeEvent *This,
        HANDLE *ph);

    
    HRESULT ( *SetEventHandle)(
        ISynchronizeEvent *This,
        HANDLE *ph);

    
} ISynchronizeEventVtbl;

struct ISynchronizeEvent {
    const ISynchronizeEventVtbl* lpVtbl;
};












































extern const GUID IID_ISynchronizeContainer ;

















typedef struct ISynchronizeContainerVtbl {
    

    
    HRESULT ( *QueryInterface)(
        ISynchronizeContainer *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ISynchronizeContainer *This);

    ULONG ( *Release)(
        ISynchronizeContainer *This);

    
    HRESULT ( *AddSynchronize)(
        ISynchronizeContainer *This,
        ISynchronize *pSync);

    HRESULT ( *WaitMultiple)(
        ISynchronizeContainer *This,
        DWORD dwFlags,
        DWORD dwTimeOut,
        ISynchronize **ppSync);

    
} ISynchronizeContainerVtbl;

struct ISynchronizeContainer {
    const ISynchronizeContainerVtbl* lpVtbl;
};










































extern const GUID IID_ISynchronizeMutex ;












typedef struct ISynchronizeMutexVtbl {
    

    
    HRESULT ( *QueryInterface)(
        ISynchronizeMutex *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ISynchronizeMutex *This);

    ULONG ( *Release)(
        ISynchronizeMutex *This);

    
    HRESULT ( *Wait)(
        ISynchronizeMutex *This,
        DWORD dwFlags,
        DWORD dwMilliseconds);

    HRESULT ( *Signal)(
        ISynchronizeMutex *This);

    HRESULT ( *Reset)(
        ISynchronizeMutex *This);

    
    HRESULT ( *ReleaseMutex)(
        ISynchronizeMutex *This);

    
} ISynchronizeMutexVtbl;

struct ISynchronizeMutex {
    const ISynchronizeMutexVtbl* lpVtbl;
};




















































typedef ICancelMethodCalls *LPCANCELMETHODCALLS;
extern const GUID IID_ICancelMethodCalls ;















typedef struct ICancelMethodCallsVtbl {
    

    
    HRESULT ( *QueryInterface)(
        ICancelMethodCalls *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ICancelMethodCalls *This);

    ULONG ( *Release)(
        ICancelMethodCalls *This);

    
    HRESULT ( *Cancel)(
        ICancelMethodCalls *This,
        ULONG ulSeconds);

    HRESULT ( *TestCancel)(
        ICancelMethodCalls *This);

    
} ICancelMethodCallsVtbl;

struct ICancelMethodCalls {
    const ICancelMethodCallsVtbl* lpVtbl;
};










































typedef enum tagDCOM_CALL_STATE {
    DCOM_NONE = 0,
    DCOM_CALL_COMPLETE = 1,
    DCOM_CALL_CANCELED = 2
} DCOM_CALL_STATE;
extern const GUID IID_IAsyncManager ;



















typedef struct IAsyncManagerVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IAsyncManager *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IAsyncManager *This);

    ULONG ( *Release)(
        IAsyncManager *This);

    
    HRESULT ( *CompleteCall)(
        IAsyncManager *This,
        HRESULT Result);

    HRESULT ( *GetCallContext)(
        IAsyncManager *This,
        const IID* const riid,
        void **pInterface);

    HRESULT ( *GetState)(
        IAsyncManager *This,
        ULONG *pulStateFlags);

    
} IAsyncManagerVtbl;

struct IAsyncManager {
    const IAsyncManagerVtbl* lpVtbl;
};














































extern const GUID IID_ICallFactory ;















typedef struct ICallFactoryVtbl {
    

    
    HRESULT ( *QueryInterface)(
        ICallFactory *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ICallFactory *This);

    ULONG ( *Release)(
        ICallFactory *This);

    
    HRESULT ( *CreateCall)(
        ICallFactory *This,
        const IID* const riid,
        IUnknown *pCtrlUnk,
        const IID* const riid2,
        IUnknown **ppv);

    
} ICallFactoryVtbl;

struct ICallFactory {
    const ICallFactoryVtbl* lpVtbl;
};






































extern const GUID IID_IRpcOptions ;



















typedef struct IRpcOptionsVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IRpcOptions *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRpcOptions *This);

    ULONG ( *Release)(
        IRpcOptions *This);

    
    HRESULT ( *Set)(
        IRpcOptions *This,
        IUnknown *pPrx,
        DWORD dwProperty,
        ULONG_PTR dwValue);

    HRESULT ( *Query)(
        IRpcOptions *This,
        IUnknown *pPrx,
        DWORD dwProperty,
        ULONG_PTR *pdwValue);

    
} IRpcOptionsVtbl;

struct IRpcOptions {
    const IRpcOptionsVtbl* lpVtbl;
};




































enum {
    COMBND_RPCTIMEOUT = 1,
    COMBND_SERVER_LOCALITY = 2
};
enum {
    SERVER_LOCALITY_PROCESS_LOCAL = 0,
    SERVER_LOCALITY_MACHINE_LOCAL = 1,
    SERVER_LOCALITY_REMOTE = 2
};






extern const GUID IID_IRpcHelper ;
















typedef struct IRpcHelperVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IRpcHelper *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRpcHelper *This);

    ULONG ( *Release)(
        IRpcHelper *This);

    
    HRESULT ( *GetDCOMProtocolVersion)(
        IRpcHelper *This,
        DWORD *pComVersion);

    HRESULT ( *GetIIDFromOBJREF)(
        IRpcHelper *This,
        void *pObjRef,
        IID **piid);

    
} IRpcHelperVtbl;

struct IRpcHelper {
    const IRpcHelperVtbl* lpVtbl;
};










































extern const GUID IID_IReleaseMarshalBuffers ;














typedef struct IReleaseMarshalBuffersVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IReleaseMarshalBuffers *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IReleaseMarshalBuffers *This);

    ULONG ( *Release)(
        IReleaseMarshalBuffers *This);

    
    HRESULT ( *ReleaseMarshalBuffer)(
        IReleaseMarshalBuffers *This,
        RPCOLEMESSAGE *pMsg,
        DWORD dwFlags,
        IUnknown *pChnl);

    
} IReleaseMarshalBuffersVtbl;

struct IReleaseMarshalBuffers {
    const IReleaseMarshalBuffersVtbl* lpVtbl;
};






































extern const GUID IID_IWaitMultiple ;
















typedef struct IWaitMultipleVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IWaitMultiple *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IWaitMultiple *This);

    ULONG ( *Release)(
        IWaitMultiple *This);

    
    HRESULT ( *WaitMultiple)(
        IWaitMultiple *This,
        DWORD timeout,
        ISynchronize **pSync);

    HRESULT ( *AddSynchronize)(
        IWaitMultiple *This,
        ISynchronize *pSync);

    
} IWaitMultipleVtbl;

struct IWaitMultiple {
    const IWaitMultipleVtbl* lpVtbl;
};










































typedef IAddrTrackingControl *LPADDRTRACKINGCONTROL;
extern const GUID IID_IAddrTrackingControl ;















typedef struct IAddrTrackingControlVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IAddrTrackingControl *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IAddrTrackingControl *This);

    ULONG ( *Release)(
        IAddrTrackingControl *This);

    
    HRESULT ( *EnableCOMDynamicAddrTracking)(
        IAddrTrackingControl *This);

    HRESULT ( *DisableCOMDynamicAddrTracking)(
        IAddrTrackingControl *This);

    
} IAddrTrackingControlVtbl;

struct IAddrTrackingControl {
    const IAddrTrackingControlVtbl* lpVtbl;
};










































typedef IAddrExclusionControl *LPADDREXCLUSIONCONTROL;
extern const GUID IID_IAddrExclusionControl ;
















typedef struct IAddrExclusionControlVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IAddrExclusionControl *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IAddrExclusionControl *This);

    ULONG ( *Release)(
        IAddrExclusionControl *This);

    
    HRESULT ( *GetCurrentAddrExclusionList)(
        IAddrExclusionControl *This,
        const IID* const riid,
        void **ppEnumerator);

    HRESULT ( *UpdateAddrExclusionList)(
        IAddrExclusionControl *This,
        IUnknown *pEnumerator);

    
} IAddrExclusionControlVtbl;

struct IAddrExclusionControl {
    const IAddrExclusionControlVtbl* lpVtbl;
};




































typedef enum _APTTYPE {
    APTTYPE_CURRENT = -1,
    APTTYPE_STA = 0,
    APTTYPE_MTA = 1,
    APTTYPE_NA = 2,
    APTTYPE_MAINSTA = 3
} APTTYPE;
typedef enum _APTTYPEQUALIFIER {
    APTTYPEQUALIFIER_NONE = 0,
    APTTYPEQUALIFIER_IMPLICIT_MTA = 1,
    APTTYPEQUALIFIER_NA_ON_MTA = 2,
    APTTYPEQUALIFIER_NA_ON_STA = 3,
    APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 4,
    APTTYPEQUALIFIER_NA_ON_MAINSTA = 5
} APTTYPEQUALIFIER;
typedef enum _THDTYPE {
    THDTYPE_BLOCKMESSAGES = 0,
    THDTYPE_PROCESSMESSAGES = 1
} THDTYPE;






extern const GUID IID_IComThreadingInfo ;





















typedef struct IComThreadingInfoVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IComThreadingInfo *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IComThreadingInfo *This);

    ULONG ( *Release)(
        IComThreadingInfo *This);

    
    HRESULT ( *GetCurrentApartmentType)(
        IComThreadingInfo *This,
        APTTYPE *pAptType);

    HRESULT ( *GetCurrentThreadType)(
        IComThreadingInfo *This,
        THDTYPE *pThreadType);

    HRESULT ( *GetCurrentLogicalThreadId)(
        IComThreadingInfo *This,
        GUID *pguidLogicalThreadId);

    HRESULT ( *SetCurrentLogicalThreadId)(
        IComThreadingInfo *This,
        const GUID* const rguid);

    
} IComThreadingInfoVtbl;

struct IComThreadingInfo {
    const IComThreadingInfoVtbl* lpVtbl;
};


















































extern const GUID IID_IProcessInitControl ;












typedef struct IProcessInitControlVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IProcessInitControl *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IProcessInitControl *This);

    ULONG ( *Release)(
        IProcessInitControl *This);

    
    HRESULT ( *ResetInitializerTimeout)(
        IProcessInitControl *This,
        DWORD dwSecondsRemaining);

    
} IProcessInitControlVtbl;

struct IProcessInitControl {
    const IProcessInitControlVtbl* lpVtbl;
};
































typedef enum tagGLOBALOPT_PROPERTIES {
    COMGLB_EXCEPTION_HANDLING = 1,
    COMGLB_APPID = 2,
    COMGLB_RPC_THREADPOOL_SETTING = 3,
    COMGLB_RO_SETTINGS = 4,
    COMGLB_UNMARSHALING_POLICY = 5,
    COMGLB_PROPERTIES_RESERVED1 = 6,
    COMGLB_PROPERTIES_RESERVED2 = 7,
    COMGLB_PROPERTIES_RESERVED3 = 8
} GLOBALOPT_PROPERTIES;
typedef enum tagGLOBALOPT_EH_VALUES {
    COMGLB_EXCEPTION_HANDLE = 0,
    COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1,
    COMGLB_EXCEPTION_DONOT_HANDLE = COMGLB_EXCEPTION_DONOT_HANDLE_FATAL,
    COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 2
} GLOBALOPT_EH_VALUES;
typedef enum tagGLOBALOPT_RPCTP_VALUES {
    COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0,
    COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 1
} GLOBALOPT_RPCTP_VALUES;
typedef enum tagGLOBALOPT_RO_FLAGS {
    COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = 0x1,
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = 0x2,
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 0x4,
    COMGLB_FAST_RUNDOWN = 0x8,
    COMGLB_RESERVED1 = 0x10,
    COMGLB_RESERVED2 = 0x20,
    COMGLB_RESERVED3 = 0x40,
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = 0x80,
    COMGLB_RESERVED4 = 0x100,
    COMGLB_RESERVED5 = 0x200,
    COMGLB_RESERVED6 = 0x400
} GLOBALOPT_RO_FLAGS;
typedef enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES {
    COMGLB_UNMARSHALING_POLICY_NORMAL = 0,
    COMGLB_UNMARSHALING_POLICY_STRONG = 1,
    COMGLB_UNMARSHALING_POLICY_HYBRID = 2
} GLOBALOPT_UNMARSHALING_POLICY_VALUES;






extern const GUID IID_IGlobalOptions ;

















typedef struct IGlobalOptionsVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IGlobalOptions *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IGlobalOptions *This);

    ULONG ( *Release)(
        IGlobalOptions *This);

    
    HRESULT ( *Set)(
        IGlobalOptions *This,
        GLOBALOPT_PROPERTIES property,
        ULONG_PTR value);

    HRESULT ( *Query)(
        IGlobalOptions *This,
        GLOBALOPT_PROPERTIES property,
        ULONG_PTR *value);

    
} IGlobalOptionsVtbl;

struct IGlobalOptions {
    const IGlobalOptionsVtbl* lpVtbl;
};

























































































































































































































































































































































































































































































# 30 "include/combaseapi.h" 2

# 1 "include/guiddef.h" 1 3



























































































































































































# 31 "include/combaseapi.h" 2



# 1 "include/cguid.h" 1 3

























extern const IID GUID_NULL;
extern const IID IID_IRpcChannel;
extern const IID IID_IRpcStub;
extern const IID IID_IStubManager;
extern const IID IID_IRpcProxy;
extern const IID IID_IProxyManager;
extern const IID IID_IPSFactory;
extern const IID IID_IInternalMoniker;
extern const IID IID_IDfReserved1;
extern const IID IID_IDfReserved2;
extern const IID IID_IDfReserved3;
extern const CLSID CLSID_StdMarshal;
extern const CLSID CLSID_AggStdMarshal;
extern const CLSID CLSID_StdAsyncActManager;
extern const IID IID_IStub;
extern const IID IID_IProxy;
extern const IID IID_IEnumGeneric;
extern const IID IID_IEnumHolder;
extern const IID IID_IEnumCallback;
extern const IID IID_IOleManager;
extern const IID IID_IOlePresObj;
extern const IID IID_IDebug;
extern const IID IID_IDebugStream;
extern const CLSID CLSID_PSGenObject;
extern const CLSID CLSID_PSClientSite;
extern const CLSID CLSID_PSClassObject;
extern const CLSID CLSID_PSInPlaceActive;
extern const CLSID CLSID_PSInPlaceFrame;
extern const CLSID CLSID_PSDragDrop;
extern const CLSID CLSID_PSBindCtx;
extern const CLSID CLSID_PSEnumerators;
extern const CLSID CLSID_StaticMetafile;
extern const CLSID CLSID_StaticDib;
extern const CLSID CID_CDfsVolume;
extern const CLSID CLSID_DCOMAccessControl;
extern const CLSID CLSID_StdGlobalInterfaceTable;
extern const CLSID CLSID_ComBinding;
extern const CLSID CLSID_StdEvent;
extern const CLSID CLSID_ManualResetEvent;
extern const CLSID CLSID_SynchronizeContainer;
extern const CLSID CLSID_CCDFormKrnl;
extern const CLSID CLSID_CCDPropertyPage;
extern const CLSID CLSID_CCDFormDialog;
extern const CLSID CLSID_CCDCommandButton;
extern const CLSID CLSID_CCDComboBox;
extern const CLSID CLSID_CCDTextBox;
extern const CLSID CLSID_CCDCheckBox;
extern const CLSID CLSID_CCDLabel;
extern const CLSID CLSID_CCDOptionButton;
extern const CLSID CLSID_CCDListBox;
extern const CLSID CLSID_CCDScrollBar;
extern const CLSID CLSID_CCDGroupBox;
extern const CLSID CLSID_CCDGeneralPropertyPage;
extern const CLSID CLSID_CCDGenericPropertyPage;
extern const CLSID CLSID_CCDFontPropertyPage;
extern const CLSID CLSID_CCDColorPropertyPage;
extern const CLSID CLSID_CCDLabelPropertyPage;
extern const CLSID CLSID_CCDCheckBoxPropertyPage;
extern const CLSID CLSID_CCDTextBoxPropertyPage;
extern const CLSID CLSID_CCDOptionButtonPropertyPage;
extern const CLSID CLSID_CCDListBoxPropertyPage;
extern const CLSID CLSID_CCDCommandButtonPropertyPage;
extern const CLSID CLSID_CCDComboBoxPropertyPage;
extern const CLSID CLSID_CCDScrollBarPropertyPage;
extern const CLSID CLSID_CCDGroupBoxPropertyPage;
extern const CLSID CLSID_CCDXObjectPropertyPage;
extern const CLSID CLSID_CStdPropertyFrame;
extern const CLSID CLSID_CFormPropertyPage;
extern const CLSID CLSID_CGridPropertyPage;
extern const CLSID CLSID_CWSJArticlePage;
extern const CLSID CLSID_CSystemPage;
extern const CLSID CLSID_IdentityUnmarshal;
extern const CLSID CLSID_InProcFreeMarshaler;
extern const CLSID CLSID_Picture_Metafile;
extern const CLSID CLSID_Picture_EnhMetafile;
extern const CLSID CLSID_Picture_Dib;
extern const CLSID CLSID_GlobalOptions;
extern const GUID GUID_TRISTATE;







# 34 "include/combaseapi.h" 2






typedef struct tagServerInformation
{
    DWORD   dwServerPid;
    DWORD   dwServerTid;
    UINT64  ui64ServerAddress;
} ServerInformation, *PServerInformation;

enum AgileReferenceOptions
{
    AGILEREFERENCE_DEFAULT,
    AGILEREFERENCE_DELAYEDMARSHAL
};

HRESULT  CoDecodeProxy(DWORD client_pid, UINT64 proxy_addr, ServerInformation *server_info);
HRESULT  RoGetAgileReference(enum AgileReferenceOptions options, const IID* const riid, IUnknown *obj, IAgileReference **agile_reference);






# 278 "include/objbase.h" 2

# 1 "include/wtypes.h" 1 3







# 1 "include/rpc.h" 1 3






















# 1 "include/windows.h" 1 3








































































































# 23 "include/rpc.h" 2

































































# 8 "include/wtypes.h" 2

# 1 "include/rpcndr.h" 1 3








































































































































































































































































































































































































































































































































































































































































































































































































































# 9 "include/wtypes.h" 2




# 1 "include/windows.h" 1 3








































































































# 13 "include/wtypes.h" 2

# 1 "include/ole2.h" 1 3



























































































































































# 14 "include/wtypes.h" 2





























































































































































































































































































































































































































































































































































































































































































































































































# 279 "include/objbase.h" 2

# 1 "include/unknwn.h" 1 3







# 1 "include/rpc.h" 1 3






















# 1 "include/windows.h" 1 3








































































































# 23 "include/rpc.h" 2

































































# 8 "include/unknwn.h" 2

# 1 "include/rpcndr.h" 1 3








































































































































































































































































































































































































































































































































































































































































































































































































































# 9 "include/unknwn.h" 2




# 1 "include/windows.h" 1 3








































































































# 13 "include/unknwn.h" 2

# 1 "include/ole2.h" 1 3



























































































































































# 14 "include/unknwn.h" 2






























































































































































































































































































# 280 "include/objbase.h" 2

# 1 "include/objidl.h" 1 3







# 1 "include/rpc.h" 1 3






















# 1 "include/windows.h" 1 3








































































































# 23 "include/rpc.h" 2

































































# 8 "include/objidl.h" 2

# 1 "include/rpcndr.h" 1 3








































































































































































































































































































































































































































































































































































































































































































































































































































# 9 "include/objidl.h" 2




# 1 "include/windows.h" 1 3








































































































# 13 "include/objidl.h" 2

# 1 "include/ole2.h" 1 3



























































































































































# 14 "include/objidl.h" 2









































































































































































































































































































































































































typedef struct IMallocSpy IMallocSpy;







typedef struct IBindCtx IBindCtx;







typedef struct IEnumMoniker IEnumMoniker;







typedef struct IRunnableObject IRunnableObject;







typedef struct IRunningObjectTable IRunningObjectTable;







typedef struct IPersist IPersist;







typedef struct IPersistStream IPersistStream;







typedef struct IMoniker IMoniker;







typedef struct IROTData IROTData;







typedef struct IClassActivator IClassActivator;







typedef struct IEnumSTATSTG IEnumSTATSTG;







typedef struct IStorage IStorage;







typedef struct IPersistFile IPersistFile;







typedef struct IPersistStorage IPersistStorage;







typedef struct IRootStorage IRootStorage;







typedef struct ILockBytes ILockBytes;







typedef struct IFillLockBytes IFillLockBytes;







typedef struct IProgressNotify IProgressNotify;







typedef struct ILayoutStorage ILayoutStorage;







typedef struct IBlockingLock IBlockingLock;







typedef struct ITimeAndNoticeControl ITimeAndNoticeControl;







typedef struct IOplockStorage IOplockStorage;







typedef struct IEnumFORMATETC IEnumFORMATETC;







typedef struct IEnumSTATDATA IEnumSTATDATA;







typedef struct IAdviseSink IAdviseSink;







typedef struct IAdviseSink2 IAdviseSink2;







typedef struct IDataObject IDataObject;







typedef struct IDataAdviseHolder IDataAdviseHolder;







typedef struct IMessageFilter IMessageFilter;







typedef struct IDirectWriterLock IDirectWriterLock;







typedef struct IUrlMon IUrlMon;







typedef struct IForegroundTransfer IForegroundTransfer;







typedef struct IInitializeSpy IInitializeSpy;







typedef struct IThumbnailExtractor IThumbnailExtractor;







typedef struct IDummyHICONIncluder IDummyHICONIncluder;







typedef struct IApartmentShutdown IApartmentShutdown;








# 1 "include/unknwn.h" 1 3







# 1 "include/rpc.h" 1 3






















# 1 "include/windows.h" 1 3








































































































# 23 "include/rpc.h" 2

































































# 8 "include/unknwn.h" 2

# 1 "include/rpcndr.h" 1 3








































































































































































































































































































































































































































































































































































































































































































































































































































# 9 "include/unknwn.h" 2




# 1 "include/windows.h" 1 3








































































































# 13 "include/unknwn.h" 2

# 1 "include/ole2.h" 1 3



























































































































































# 14 "include/unknwn.h" 2






























































































































































































































































































# 696 "include/objidl.h" 2




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































typedef IMallocSpy *LPMALLOCSPY;
extern const GUID IID_IMallocSpy ;























































typedef struct IMallocSpyVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IMallocSpy *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IMallocSpy *This);

    ULONG ( *Release)(
        IMallocSpy *This);

    
    SIZE_T ( *PreAlloc)(
        IMallocSpy *This,
        SIZE_T cbRequest);

    LPVOID ( *PostAlloc)(
        IMallocSpy *This,
        LPVOID pActual);

    LPVOID ( *PreFree)(
        IMallocSpy *This,
        LPVOID pRequest,
        BOOL fSpyed);

    void ( *PostFree)(
        IMallocSpy *This,
        BOOL fSpyed);

    SIZE_T ( *PreRealloc)(
        IMallocSpy *This,
        LPVOID pRequest,
        SIZE_T cbRequest,
        LPVOID *ppNewRequest,
        BOOL fSpyed);

    LPVOID ( *PostRealloc)(
        IMallocSpy *This,
        LPVOID pActual,
        BOOL fSpyed);

    LPVOID ( *PreGetSize)(
        IMallocSpy *This,
        LPVOID pRequest,
        BOOL fSpyed);

    SIZE_T ( *PostGetSize)(
        IMallocSpy *This,
        SIZE_T cbActual,
        BOOL fSpyed);

    LPVOID ( *PreDidAlloc)(
        IMallocSpy *This,
        LPVOID pRequest,
        BOOL fSpyed);

    int ( *PostDidAlloc)(
        IMallocSpy *This,
        LPVOID pRequest,
        BOOL fSpyed,
        int fActual);

    void ( *PreHeapMinimize)(
        IMallocSpy *This);

    void ( *PostHeapMinimize)(
        IMallocSpy *This);

    
} IMallocSpyVtbl;

struct IMallocSpy {
    const IMallocSpyVtbl* lpVtbl;
};


















































































typedef IBindCtx *LPBINDCTX;
typedef IBindCtx *LPBC;
typedef struct tagBIND_OPTS {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
} BIND_OPTS;
typedef struct tagBIND_OPTS *LPBIND_OPTS;
typedef struct tagBIND_OPTS2 {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    DWORD dwTrackFlags;
    DWORD dwClassContext;
    LCID locale;
    COSERVERINFO *pServerInfo;
} BIND_OPTS2;
typedef struct tagBIND_OPTS2 *LPBIND_OPTS2;
typedef struct tagBIND_OPTS3 {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    DWORD dwTrackFlags;
    DWORD dwClassContext;
    LCID locale;
    COSERVERINFO *pServerInfo;
    HWND hwnd;
} BIND_OPTS3;
typedef struct tagBIND_OPTS3 *LPBIND_OPTS3;
typedef enum tagBIND_FLAGS {
    BIND_MAYBOTHERUSER = 1,
    BIND_JUSTTESTEXISTENCE = 2
} BIND_FLAGS;
extern const GUID IID_IBindCtx ;









































typedef struct IBindCtxVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IBindCtx *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IBindCtx *This);

    ULONG ( *Release)(
        IBindCtx *This);

    
    HRESULT ( *RegisterObjectBound)(
        IBindCtx *This,
        IUnknown *punk);

    HRESULT ( *RevokeObjectBound)(
        IBindCtx *This,
        IUnknown *punk);

    HRESULT ( *ReleaseBoundObjects)(
        IBindCtx *This);

    HRESULT ( *SetBindOptions)(
        IBindCtx *This,
        BIND_OPTS *pbindopts);

    HRESULT ( *GetBindOptions)(
        IBindCtx *This,
        BIND_OPTS *pbindopts);

    HRESULT ( *GetRunningObjectTable)(
        IBindCtx *This,
        IRunningObjectTable **pprot);

    HRESULT ( *RegisterObjectParam)(
        IBindCtx *This,
        LPOLESTR pszKey,
        IUnknown *punk);

    HRESULT ( *GetObjectParam)(
        IBindCtx *This,
        LPOLESTR pszKey,
        IUnknown **ppunk);

    HRESULT ( *EnumObjectParam)(
        IBindCtx *This,
        IEnumString **ppenum);

    HRESULT ( *RevokeObjectParam)(
        IBindCtx *This,
        LPOLESTR pszKey);

    
} IBindCtxVtbl;

struct IBindCtx {
    const IBindCtxVtbl* lpVtbl;
};

































































HRESULT  IBindCtx_RemoteSetBindOptions_Proxy(
    IBindCtx* This,
    BIND_OPTS2 *pbindopts);
void  IBindCtx_RemoteSetBindOptions_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IBindCtx_RemoteGetBindOptions_Proxy(
    IBindCtx* This,
    BIND_OPTS2 *pbindopts);
void  IBindCtx_RemoteGetBindOptions_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IBindCtx_SetBindOptions_Proxy(
    IBindCtx* This,
    BIND_OPTS *pbindopts);
HRESULT  IBindCtx_SetBindOptions_Stub(
    IBindCtx* This,
    BIND_OPTS2 *pbindopts);
HRESULT  IBindCtx_GetBindOptions_Proxy(
    IBindCtx* This,
    BIND_OPTS *pbindopts);
HRESULT  IBindCtx_GetBindOptions_Stub(
    IBindCtx* This,
    BIND_OPTS2 *pbindopts);









typedef IEnumMoniker *LPENUMMONIKER;
extern const GUID IID_IEnumMoniker ;























typedef struct IEnumMonikerVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IEnumMoniker *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IEnumMoniker *This);

    ULONG ( *Release)(
        IEnumMoniker *This);

    
    HRESULT ( *Next)(
        IEnumMoniker *This,
        ULONG celt,
        IMoniker **rgelt,
        ULONG *pceltFetched);

    HRESULT ( *Skip)(
        IEnumMoniker *This,
        ULONG celt);

    HRESULT ( *Reset)(
        IEnumMoniker *This);

    HRESULT ( *Clone)(
        IEnumMoniker *This,
        IEnumMoniker **ppenum);

    
} IEnumMonikerVtbl;

struct IEnumMoniker {
    const IEnumMonikerVtbl* lpVtbl;
};









































HRESULT  IEnumMoniker_RemoteNext_Proxy(
    IEnumMoniker* This,
    ULONG celt,
    IMoniker **rgelt,
    ULONG *pceltFetched);
void  IEnumMoniker_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IEnumMoniker_Next_Proxy(
    IEnumMoniker* This,
    ULONG celt,
    IMoniker **rgelt,
    ULONG *pceltFetched);
HRESULT  IEnumMoniker_Next_Stub(
    IEnumMoniker* This,
    ULONG celt,
    IMoniker **rgelt,
    ULONG *pceltFetched);









typedef IRunnableObject *LPRUNNABLEOBJECT;
extern const GUID IID_IRunnableObject ;

























typedef struct IRunnableObjectVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IRunnableObject *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRunnableObject *This);

    ULONG ( *Release)(
        IRunnableObject *This);

    
    HRESULT ( *GetRunningClass)(
        IRunnableObject *This,
        LPCLSID lpClsid);

    HRESULT ( *Run)(
        IRunnableObject *This,
        LPBINDCTX pbc);

    BOOL ( *IsRunning)(
        IRunnableObject *This);

    HRESULT ( *LockRunning)(
        IRunnableObject *This,
        BOOL fLock,
        BOOL fLastUnlockCloses);

    HRESULT ( *SetContainedObject)(
        IRunnableObject *This,
        BOOL fContained);

    
} IRunnableObjectVtbl;

struct IRunnableObject {
    const IRunnableObjectVtbl* lpVtbl;
};













































HRESULT  IRunnableObject_RemoteIsRunning_Proxy(
    IRunnableObject* This);
void  IRunnableObject_RemoteIsRunning_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
BOOL  IRunnableObject_IsRunning_Proxy(
    IRunnableObject* This);
HRESULT  IRunnableObject_IsRunning_Stub(
    IRunnableObject* This);












typedef IRunningObjectTable *LPRUNNINGOBJECTTABLE;
extern const GUID IID_IRunningObjectTable ;




































typedef struct IRunningObjectTableVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IRunningObjectTable *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRunningObjectTable *This);

    ULONG ( *Release)(
        IRunningObjectTable *This);

    
    HRESULT ( *Register)(
        IRunningObjectTable *This,
        DWORD grfFlags,
        IUnknown *punkObject,
        IMoniker *pmkObjectName,
        DWORD *pdwRegister);

    HRESULT ( *Revoke)(
        IRunningObjectTable *This,
        DWORD dwRegister);

    HRESULT ( *IsRunning)(
        IRunningObjectTable *This,
        IMoniker *pmkObjectName);

    HRESULT ( *GetObject)(
        IRunningObjectTable *This,
        IMoniker *pmkObjectName,
        IUnknown **ppunkObject);

    HRESULT ( *NoteChangeTime)(
        IRunningObjectTable *This,
        DWORD dwRegister,
        FILETIME *pfiletime);

    HRESULT ( *GetTimeOfLastChange)(
        IRunningObjectTable *This,
        IMoniker *pmkObjectName,
        FILETIME *pfiletime);

    HRESULT ( *EnumRunning)(
        IRunningObjectTable *This,
        IEnumMoniker **ppenumMoniker);

    
} IRunningObjectTableVtbl;

struct IRunningObjectTable {
    const IRunningObjectTableVtbl* lpVtbl;
};






























































typedef IPersist *LPPERSIST;
extern const GUID IID_IPersist ;












typedef struct IPersistVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IPersist *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IPersist *This);

    ULONG ( *Release)(
        IPersist *This);

    
    HRESULT ( *GetClassID)(
        IPersist *This,
        CLSID *pClassID);

    
} IPersistVtbl;

struct IPersist {
    const IPersistVtbl* lpVtbl;
};






































typedef IPersistStream *LPPERSISTSTREAM;
extern const GUID IID_IPersistStream ;






















typedef struct IPersistStreamVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IPersistStream *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IPersistStream *This);

    ULONG ( *Release)(
        IPersistStream *This);

    
    HRESULT ( *GetClassID)(
        IPersistStream *This,
        CLSID *pClassID);

    
    HRESULT ( *IsDirty)(
        IPersistStream *This);

    HRESULT ( *Load)(
        IPersistStream *This,
        IStream *pStm);

    HRESULT ( *Save)(
        IPersistStream *This,
        IStream *pStm,
        BOOL fClearDirty);

    HRESULT ( *GetSizeMax)(
        IPersistStream *This,
        ULARGE_INTEGER *pcbSize);

    
} IPersistStreamVtbl;

struct IPersistStream {
    const IPersistStreamVtbl* lpVtbl;
};
























































typedef IMoniker *LPMONIKER;
typedef enum tagMKSYS {
    MKSYS_NONE = 0,
    MKSYS_GENERICCOMPOSITE = 1,
    MKSYS_FILEMONIKER = 2,
    MKSYS_ANTIMONIKER = 3,
    MKSYS_ITEMMONIKER = 4,
    MKSYS_POINTERMONIKER = 5,
    MKSYS_CLASSMONIKER = 7,
    MKSYS_OBJREFMONIKER = 8,
    MKSYS_SESSIONMONIKER = 9,
    MKSYS_LUAMONIKER = 10
} MKSYS;
typedef enum tagMKREDUCE {
    MKRREDUCE_ONE = 3 << 16,
    MKRREDUCE_TOUSER = 2 << 16,
    MKRREDUCE_THROUGHUSER = 1 << 16,
    MKRREDUCE_ALL = 0
} MKRREDUCE;
extern const GUID IID_IMoniker ;














































































typedef struct IMonikerVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IMoniker *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IMoniker *This);

    ULONG ( *Release)(
        IMoniker *This);

    
    HRESULT ( *GetClassID)(
        IMoniker *This,
        CLSID *pClassID);

    
    HRESULT ( *IsDirty)(
        IMoniker *This);

    HRESULT ( *Load)(
        IMoniker *This,
        IStream *pStm);

    HRESULT ( *Save)(
        IMoniker *This,
        IStream *pStm,
        BOOL fClearDirty);

    HRESULT ( *GetSizeMax)(
        IMoniker *This,
        ULARGE_INTEGER *pcbSize);

    
    HRESULT ( *BindToObject)(
        IMoniker *This,
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        const IID* const riidResult,
        void **ppvResult);

    HRESULT ( *BindToStorage)(
        IMoniker *This,
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        const IID* const riid,
        void **ppvObj);

    HRESULT ( *Reduce)(
        IMoniker *This,
        IBindCtx *pbc,
        DWORD dwReduceHowFar,
        IMoniker **ppmkToLeft,
        IMoniker **ppmkReduced);

    HRESULT ( *ComposeWith)(
        IMoniker *This,
        IMoniker *pmkRight,
        BOOL fOnlyIfNotGeneric,
        IMoniker **ppmkComposite);

    HRESULT ( *Enum)(
        IMoniker *This,
        BOOL fForward,
        IEnumMoniker **ppenumMoniker);

    HRESULT ( *IsEqual)(
        IMoniker *This,
        IMoniker *pmkOtherMoniker);

    HRESULT ( *Hash)(
        IMoniker *This,
        DWORD *pdwHash);

    HRESULT ( *IsRunning)(
        IMoniker *This,
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        IMoniker *pmkNewlyRunning);

    HRESULT ( *GetTimeOfLastChange)(
        IMoniker *This,
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        FILETIME *pFileTime);

    HRESULT ( *Inverse)(
        IMoniker *This,
        IMoniker **ppmk);

    HRESULT ( *CommonPrefixWith)(
        IMoniker *This,
        IMoniker *pmkOther,
        IMoniker **ppmkPrefix);

    HRESULT ( *RelativePathTo)(
        IMoniker *This,
        IMoniker *pmkOther,
        IMoniker **ppmkRelPath);

    HRESULT ( *GetDisplayName)(
        IMoniker *This,
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        LPOLESTR *ppszDisplayName);

    HRESULT ( *ParseDisplayName)(
        IMoniker *This,
        IBindCtx *pbc,
        IMoniker *pmkToLeft,
        LPOLESTR pszDisplayName,
        ULONG *pchEaten,
        IMoniker **ppmkOut);

    HRESULT ( *IsSystemMoniker)(
        IMoniker *This,
        DWORD *pdwMksys);

    
} IMonikerVtbl;

struct IMoniker {
    const IMonikerVtbl* lpVtbl;
};













































































































HRESULT  IMoniker_RemoteBindToObject_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID* const riidResult,
    IUnknown **ppvResult);
void  IMoniker_RemoteBindToObject_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IMoniker_RemoteBindToStorage_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID* const riid,
    IUnknown **ppvObj);
void  IMoniker_RemoteBindToStorage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IMoniker_BindToObject_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID* const riidResult,
    void **ppvResult);
HRESULT  IMoniker_BindToObject_Stub(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID* const riidResult,
    IUnknown **ppvResult);
HRESULT  IMoniker_BindToStorage_Proxy(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID* const riid,
    void **ppvObj);
HRESULT  IMoniker_BindToStorage_Stub(
    IMoniker* This,
    IBindCtx *pbc,
    IMoniker *pmkToLeft,
    const IID* const riid,
    IUnknown **ppvObj);









extern const GUID IID_IROTData ;














typedef struct IROTDataVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IROTData *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IROTData *This);

    ULONG ( *Release)(
        IROTData *This);

    
    HRESULT ( *GetComparisonData)(
        IROTData *This,
        byte *pbData,
        ULONG cbMax,
        ULONG *pcbData);

    
} IROTDataVtbl;

struct IROTData {
    const IROTDataVtbl* lpVtbl;
};






































extern const GUID IID_IClassActivator ;
















typedef struct IClassActivatorVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IClassActivator *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IClassActivator *This);

    ULONG ( *Release)(
        IClassActivator *This);

    
    HRESULT ( *GetClassObject)(
        IClassActivator *This,
        const CLSID* const rclsid,
        DWORD dwClassContext,
        LCID locale,
        const IID* const riid,
        void **ppv);

    
} IClassActivatorVtbl;

struct IClassActivator {
    const IClassActivatorVtbl* lpVtbl;
};






































typedef IEnumSTATSTG *LPENUMSTATSTG;
extern const GUID IID_IEnumSTATSTG ;























typedef struct IEnumSTATSTGVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IEnumSTATSTG *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IEnumSTATSTG *This);

    ULONG ( *Release)(
        IEnumSTATSTG *This);

    
    HRESULT ( *Next)(
        IEnumSTATSTG *This,
        ULONG celt,
        STATSTG *rgelt,
        ULONG *pceltFetched);

    HRESULT ( *Skip)(
        IEnumSTATSTG *This,
        ULONG celt);

    HRESULT ( *Reset)(
        IEnumSTATSTG *This);

    HRESULT ( *Clone)(
        IEnumSTATSTG *This,
        IEnumSTATSTG **ppenum);

    
} IEnumSTATSTGVtbl;

struct IEnumSTATSTG {
    const IEnumSTATSTGVtbl* lpVtbl;
};









































HRESULT  IEnumSTATSTG_RemoteNext_Proxy(
    IEnumSTATSTG* This,
    ULONG celt,
    STATSTG *rgelt,
    ULONG *pceltFetched);
void  IEnumSTATSTG_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IEnumSTATSTG_Next_Proxy(
    IEnumSTATSTG* This,
    ULONG celt,
    STATSTG *rgelt,
    ULONG *pceltFetched);
HRESULT  IEnumSTATSTG_Next_Stub(
    IEnumSTATSTG* This,
    ULONG celt,
    STATSTG *rgelt,
    ULONG *pceltFetched);









typedef IStorage *LPSTORAGE;
typedef struct tagRemSNB {
    ULONG ulCntStr;
    ULONG ulCntChar;
    OLECHAR rgString[1];
} RemSNB;
typedef RemSNB *wireSNB;
typedef OLECHAR **SNB;
extern const GUID IID_IStorage ;






















































































typedef struct IStorageVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IStorage *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IStorage *This);

    ULONG ( *Release)(
        IStorage *This);

    
    HRESULT ( *CreateStream)(
        IStorage *This,
        LPCOLESTR pwcsName,
        DWORD grfMode,
        DWORD reserved1,
        DWORD reserved2,
        IStream **ppstm);

    HRESULT ( *OpenStream)(
        IStorage *This,
        LPCOLESTR pwcsName,
        void *reserved1,
        DWORD grfMode,
        DWORD reserved2,
        IStream **ppstm);

    HRESULT ( *CreateStorage)(
        IStorage *This,
        LPCOLESTR pwcsName,
        DWORD grfMode,
        DWORD dwStgFmt,
        DWORD reserved2,
        IStorage **ppstg);

    HRESULT ( *OpenStorage)(
        IStorage *This,
        LPCOLESTR pwcsName,
        IStorage *pstgPriority,
        DWORD grfMode,
        SNB snbExclude,
        DWORD reserved,
        IStorage **ppstg);

    HRESULT ( *CopyTo)(
        IStorage *This,
        DWORD ciidExclude,
        const IID *rgiidExclude,
        SNB snbExclude,
        IStorage *pstgDest);

    HRESULT ( *MoveElementTo)(
        IStorage *This,
        LPCOLESTR pwcsName,
        IStorage *pstgDest,
        LPCOLESTR pwcsNewName,
        DWORD grfFlags);

    HRESULT ( *Commit)(
        IStorage *This,
        DWORD grfCommitFlags);

    HRESULT ( *Revert)(
        IStorage *This);

    HRESULT ( *EnumElements)(
        IStorage *This,
        DWORD reserved1,
        void *reserved2,
        DWORD reserved3,
        IEnumSTATSTG **ppenum);

    HRESULT ( *DestroyElement)(
        IStorage *This,
        LPCOLESTR pwcsName);

    HRESULT ( *RenameElement)(
        IStorage *This,
        LPCOLESTR pwcsOldName,
        LPCOLESTR pwcsNewName);

    HRESULT ( *SetElementTimes)(
        IStorage *This,
        LPCOLESTR pwcsName,
        const FILETIME *pctime,
        const FILETIME *patime,
        const FILETIME *pmtime);

    HRESULT ( *SetClass)(
        IStorage *This,
        const CLSID* const clsid);

    HRESULT ( *SetStateBits)(
        IStorage *This,
        DWORD grfStateBits,
        DWORD grfMask);

    HRESULT ( *Stat)(
        IStorage *This,
        STATSTG *pstatstg,
        DWORD grfStatFlag);

    
} IStorageVtbl;

struct IStorage {
    const IStorageVtbl* lpVtbl;
};





















































































HRESULT  IStorage_RemoteOpenStream_Proxy(
    IStorage* This,
    LPCOLESTR pwcsName,
    ULONG cbReserved1,
    byte *reserved1,
    DWORD grfMode,
    DWORD reserved2,
    IStream **ppstm);
void  IStorage_RemoteOpenStream_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IStorage_RemoteEnumElements_Proxy(
    IStorage* This,
    DWORD reserved1,
    ULONG cbReserved2,
    byte *reserved2,
    DWORD reserved3,
    IEnumSTATSTG **ppenum);
void  IStorage_RemoteEnumElements_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IStorage_OpenStream_Proxy(
    IStorage* This,
    LPCOLESTR pwcsName,
    void *reserved1,
    DWORD grfMode,
    DWORD reserved2,
    IStream **ppstm);
HRESULT  IStorage_OpenStream_Stub(
    IStorage* This,
    LPCOLESTR pwcsName,
    ULONG cbReserved1,
    byte *reserved1,
    DWORD grfMode,
    DWORD reserved2,
    IStream **ppstm);
HRESULT  IStorage_EnumElements_Proxy(
    IStorage* This,
    DWORD reserved1,
    void *reserved2,
    DWORD reserved3,
    IEnumSTATSTG **ppenum);
HRESULT  IStorage_EnumElements_Stub(
    IStorage* This,
    DWORD reserved1,
    ULONG cbReserved2,
    byte *reserved2,
    DWORD reserved3,
    IEnumSTATSTG **ppenum);









typedef IPersistFile *LPPERSISTFILE;
extern const GUID IID_IPersistFile ;


























typedef struct IPersistFileVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IPersistFile *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IPersistFile *This);

    ULONG ( *Release)(
        IPersistFile *This);

    
    HRESULT ( *GetClassID)(
        IPersistFile *This,
        CLSID *pClassID);

    
    HRESULT ( *IsDirty)(
        IPersistFile *This);

    HRESULT ( *Load)(
        IPersistFile *This,
        LPCOLESTR pszFileName,
        DWORD dwMode);

    HRESULT ( *Save)(
        IPersistFile *This,
        LPCOLESTR pszFileName,
        BOOL fRemember);

    HRESULT ( *SaveCompleted)(
        IPersistFile *This,
        LPCOLESTR pszFileName);

    HRESULT ( *GetCurFile)(
        IPersistFile *This,
        LPOLESTR *ppszFileName);

    
} IPersistFileVtbl;

struct IPersistFile {
    const IPersistFileVtbl* lpVtbl;
};




























































typedef IPersistStorage *LPPERSISTSTORAGE;
extern const GUID IID_IPersistStorage ;




























typedef struct IPersistStorageVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IPersistStorage *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IPersistStorage *This);

    ULONG ( *Release)(
        IPersistStorage *This);

    
    HRESULT ( *GetClassID)(
        IPersistStorage *This,
        CLSID *pClassID);

    
    HRESULT ( *IsDirty)(
        IPersistStorage *This);

    HRESULT ( *InitNew)(
        IPersistStorage *This,
        IStorage *pStg);

    HRESULT ( *Load)(
        IPersistStorage *This,
        IStorage *pStg);

    HRESULT ( *Save)(
        IPersistStorage *This,
        IStorage *pStgSave,
        BOOL fSameAsLoad);

    HRESULT ( *SaveCompleted)(
        IPersistStorage *This,
        IStorage *pStgNew);

    HRESULT ( *HandsOffStorage)(
        IPersistStorage *This);

    
} IPersistStorageVtbl;

struct IPersistStorage {
    const IPersistStorageVtbl* lpVtbl;
};
































































typedef IRootStorage *LPROOTSTORAGE;
extern const GUID IID_IRootStorage ;












typedef struct IRootStorageVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IRootStorage *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRootStorage *This);

    ULONG ( *Release)(
        IRootStorage *This);

    
    HRESULT ( *SwitchToFile)(
        IRootStorage *This,
        LPOLESTR pszFile);

    
} IRootStorageVtbl;

struct IRootStorage {
    const IRootStorageVtbl* lpVtbl;
};






































typedef ILockBytes *LPLOCKBYTES;
extern const GUID IID_ILockBytes ;









































typedef struct ILockBytesVtbl {
    

    
    HRESULT ( *QueryInterface)(
        ILockBytes *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ILockBytes *This);

    ULONG ( *Release)(
        ILockBytes *This);

    
    HRESULT ( *ReadAt)(
        ILockBytes *This,
        ULARGE_INTEGER ulOffset,
        void *pv,
        ULONG cb,
        ULONG *pcbRead);

    HRESULT ( *WriteAt)(
        ILockBytes *This,
        ULARGE_INTEGER ulOffset,
        const void *pv,
        ULONG cb,
        ULONG *pcbWritten);

    HRESULT ( *Flush)(
        ILockBytes *This);

    HRESULT ( *SetSize)(
        ILockBytes *This,
        ULARGE_INTEGER cb);

    HRESULT ( *LockRegion)(
        ILockBytes *This,
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType);

    HRESULT ( *UnlockRegion)(
        ILockBytes *This,
        ULARGE_INTEGER libOffset,
        ULARGE_INTEGER cb,
        DWORD dwLockType);

    HRESULT ( *Stat)(
        ILockBytes *This,
        STATSTG *pstatstg,
        DWORD grfStatFlag);

    
} ILockBytesVtbl;

struct ILockBytes {
    const ILockBytesVtbl* lpVtbl;
};





















































HRESULT  ILockBytes_RemoteReadAt_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    byte *pv,
    ULONG cb,
    ULONG *pcbRead);
void  ILockBytes_RemoteReadAt_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ILockBytes_RemoteWriteAt_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
void  ILockBytes_RemoteWriteAt_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ILockBytes_ReadAt_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    void *pv,
    ULONG cb,
    ULONG *pcbRead);
HRESULT  ILockBytes_ReadAt_Stub(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    byte *pv,
    ULONG cb,
    ULONG *pcbRead);
HRESULT  ILockBytes_WriteAt_Proxy(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    const void *pv,
    ULONG cb,
    ULONG *pcbWritten);
HRESULT  ILockBytes_WriteAt_Stub(
    ILockBytes* This,
    ULARGE_INTEGER ulOffset,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);









extern const GUID IID_IFillLockBytes ;


























typedef struct IFillLockBytesVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IFillLockBytes *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IFillLockBytes *This);

    ULONG ( *Release)(
        IFillLockBytes *This);

    
    HRESULT ( *FillAppend)(
        IFillLockBytes *This,
        const void *pv,
        ULONG cb,
        ULONG *pcbWritten);

    HRESULT ( *FillAt)(
        IFillLockBytes *This,
        ULARGE_INTEGER ulOffset,
        const void *pv,
        ULONG cb,
        ULONG *pcbWritten);

    HRESULT ( *SetFillSize)(
        IFillLockBytes *This,
        ULARGE_INTEGER ulSize);

    HRESULT ( *Terminate)(
        IFillLockBytes *This,
        BOOL bCanceled);

    
} IFillLockBytesVtbl;

struct IFillLockBytes {
    const IFillLockBytesVtbl* lpVtbl;
};









































HRESULT  IFillLockBytes_RemoteFillAppend_Proxy(
    IFillLockBytes* This,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
void  IFillLockBytes_RemoteFillAppend_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IFillLockBytes_RemoteFillAt_Proxy(
    IFillLockBytes* This,
    ULARGE_INTEGER ulOffset,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
void  IFillLockBytes_RemoteFillAt_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IFillLockBytes_FillAppend_Proxy(
    IFillLockBytes* This,
    const void *pv,
    ULONG cb,
    ULONG *pcbWritten);
HRESULT  IFillLockBytes_FillAppend_Stub(
    IFillLockBytes* This,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);
HRESULT  IFillLockBytes_FillAt_Proxy(
    IFillLockBytes* This,
    ULARGE_INTEGER ulOffset,
    const void *pv,
    ULONG cb,
    ULONG *pcbWritten);
HRESULT  IFillLockBytes_FillAt_Stub(
    IFillLockBytes* This,
    ULARGE_INTEGER ulOffset,
    const byte *pv,
    ULONG cb,
    ULONG *pcbWritten);









extern const GUID IID_IProgressNotify ;















typedef struct IProgressNotifyVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IProgressNotify *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IProgressNotify *This);

    ULONG ( *Release)(
        IProgressNotify *This);

    
    HRESULT ( *OnProgress)(
        IProgressNotify *This,
        DWORD dwProgressCurrent,
        DWORD dwProgressMaximum,
        BOOL fAccurate,
        BOOL fOwner);

    
} IProgressNotifyVtbl;

struct IProgressNotify {
    const IProgressNotifyVtbl* lpVtbl;
};






































typedef struct tagStorageLayout {
    DWORD LayoutType;
    OLECHAR *pwcsElementName;
    LARGE_INTEGER cOffset;
    LARGE_INTEGER cBytes;
} StorageLayout;
extern const GUID IID_ILayoutStorage ;


























typedef struct ILayoutStorageVtbl {
    

    
    HRESULT ( *QueryInterface)(
        ILayoutStorage *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ILayoutStorage *This);

    ULONG ( *Release)(
        ILayoutStorage *This);

    
    HRESULT ( *LayoutScript)(
        ILayoutStorage *This,
        StorageLayout *pStorageLayout,
        DWORD nEntries,
        DWORD glfInterleavedFlag);

    HRESULT ( *BeginMonitor)(
        ILayoutStorage *This);

    HRESULT ( *EndMonitor)(
        ILayoutStorage *This);

    HRESULT ( *ReLayoutDocfile)(
        ILayoutStorage *This,
        OLECHAR *pwcsNewDfName);

    HRESULT ( *ReLayoutDocfileOnILockBytes)(
        ILayoutStorage *This,
        ILockBytes *pILockBytes);

    
} ILayoutStorageVtbl;

struct ILayoutStorage {
    const ILayoutStorageVtbl* lpVtbl;
};






















































extern const GUID IID_IBlockingLock ;















typedef struct IBlockingLockVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IBlockingLock *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IBlockingLock *This);

    ULONG ( *Release)(
        IBlockingLock *This);

    
    HRESULT ( *Lock)(
        IBlockingLock *This,
        DWORD dwTimeout);

    HRESULT ( *Unlock)(
        IBlockingLock *This);

    
} IBlockingLockVtbl;

struct IBlockingLock {
    const IBlockingLockVtbl* lpVtbl;
};










































extern const GUID IID_ITimeAndNoticeControl ;













typedef struct ITimeAndNoticeControlVtbl {
    

    
    HRESULT ( *QueryInterface)(
        ITimeAndNoticeControl *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ITimeAndNoticeControl *This);

    ULONG ( *Release)(
        ITimeAndNoticeControl *This);

    
    HRESULT ( *SuppressChanges)(
        ITimeAndNoticeControl *This,
        DWORD res1,
        DWORD res2);

    
} ITimeAndNoticeControlVtbl;

struct ITimeAndNoticeControl {
    const ITimeAndNoticeControlVtbl* lpVtbl;
};






































extern const GUID IID_IOplockStorage ;

























typedef struct IOplockStorageVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IOplockStorage *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOplockStorage *This);

    ULONG ( *Release)(
        IOplockStorage *This);

    
    HRESULT ( *CreateStorageEx)(
        IOplockStorage *This,
        LPCWSTR pwcsName,
        DWORD grfMode,
        DWORD stgfmt,
        DWORD grfAttrs,
        const IID* const riid,
        void **ppstgOpen);

    HRESULT ( *OpenStorageEx)(
        IOplockStorage *This,
        LPCWSTR pwcsName,
        DWORD grfMode,
        DWORD stgfmt,
        DWORD grfAttrs,
        const IID* const riid,
        void **ppstgOpen);

    
} IOplockStorageVtbl;

struct IOplockStorage {
    const IOplockStorageVtbl* lpVtbl;
};










































typedef IEnumFORMATETC *LPENUMFORMATETC;
typedef struct tagDVTARGETDEVICE {
    DWORD tdSize;
    WORD tdDriverNameOffset;
    WORD tdDeviceNameOffset;
    WORD tdPortNameOffset;
    WORD tdExtDevmodeOffset;
    BYTE tdData[1];
} DVTARGETDEVICE;
typedef CLIPFORMAT *LPCLIPFORMAT;
typedef struct tagFORMATETC {
    CLIPFORMAT cfFormat;
    DVTARGETDEVICE *ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
} FORMATETC;
typedef struct tagFORMATETC *LPFORMATETC;
extern const GUID IID_IEnumFORMATETC ;























typedef struct IEnumFORMATETCVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IEnumFORMATETC *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IEnumFORMATETC *This);

    ULONG ( *Release)(
        IEnumFORMATETC *This);

    
    HRESULT ( *Next)(
        IEnumFORMATETC *This,
        ULONG celt,
        FORMATETC *rgelt,
        ULONG *pceltFetched);

    HRESULT ( *Skip)(
        IEnumFORMATETC *This,
        ULONG celt);

    HRESULT ( *Reset)(
        IEnumFORMATETC *This);

    HRESULT ( *Clone)(
        IEnumFORMATETC *This,
        IEnumFORMATETC **ppenum);

    
} IEnumFORMATETCVtbl;

struct IEnumFORMATETC {
    const IEnumFORMATETCVtbl* lpVtbl;
};









































HRESULT  IEnumFORMATETC_RemoteNext_Proxy(
    IEnumFORMATETC* This,
    ULONG celt,
    FORMATETC *rgelt,
    ULONG *pceltFetched);
void  IEnumFORMATETC_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IEnumFORMATETC_Next_Proxy(
    IEnumFORMATETC* This,
    ULONG celt,
    FORMATETC *rgelt,
    ULONG *pceltFetched);
HRESULT  IEnumFORMATETC_Next_Stub(
    IEnumFORMATETC* This,
    ULONG celt,
    FORMATETC *rgelt,
    ULONG *pceltFetched);









typedef IEnumSTATDATA *LPENUMSTATDATA;
typedef enum tagADVF {
    ADVF_NODATA = 1,
    ADVF_PRIMEFIRST = 2,
    ADVF_ONLYONCE = 4,
    ADVF_DATAONSTOP = 64,
    ADVFCACHE_NOHANDLER = 8,
    ADVFCACHE_FORCEBUILTIN = 16,
    ADVFCACHE_ONSAVE = 32
} ADVF;
typedef struct tagSTATDATA {
    FORMATETC formatetc;
    DWORD advf;
    IAdviseSink *pAdvSink;
    DWORD dwConnection;
} STATDATA;
typedef struct tagSTATDATA *LPSTATDATA;
extern const GUID IID_IEnumSTATDATA ;























typedef struct IEnumSTATDATAVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IEnumSTATDATA *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IEnumSTATDATA *This);

    ULONG ( *Release)(
        IEnumSTATDATA *This);

    
    HRESULT ( *Next)(
        IEnumSTATDATA *This,
        ULONG celt,
        STATDATA *rgelt,
        ULONG *pceltFetched);

    HRESULT ( *Skip)(
        IEnumSTATDATA *This,
        ULONG celt);

    HRESULT ( *Reset)(
        IEnumSTATDATA *This);

    HRESULT ( *Clone)(
        IEnumSTATDATA *This,
        IEnumSTATDATA **ppenum);

    
} IEnumSTATDATAVtbl;

struct IEnumSTATDATA {
    const IEnumSTATDATAVtbl* lpVtbl;
};









































HRESULT  IEnumSTATDATA_RemoteNext_Proxy(
    IEnumSTATDATA* This,
    ULONG celt,
    STATDATA *rgelt,
    ULONG *pceltFetched);
void  IEnumSTATDATA_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IEnumSTATDATA_Next_Proxy(
    IEnumSTATDATA* This,
    ULONG celt,
    STATDATA *rgelt,
    ULONG *pceltFetched);
HRESULT  IEnumSTATDATA_Next_Stub(
    IEnumSTATDATA* This,
    ULONG celt,
    STATDATA *rgelt,
    ULONG *pceltFetched);









typedef IAdviseSink *LPADVISESINK;
typedef enum tagTYMED {
    TYMED_HGLOBAL = 1,
    TYMED_FILE = 2,
    TYMED_ISTREAM = 4,
    TYMED_ISTORAGE = 8,
    TYMED_GDI = 16,
    TYMED_MFPICT = 32,
    TYMED_ENHMF = 64,
    TYMED_NULL = 0
} TYMED;
typedef struct tagRemSTGMEDIUM {
    DWORD tymed;
    DWORD dwHandleType;
    ULONG pData;
    ULONG pUnkForRelease;
    ULONG cbData;
    byte data[1];
} RemSTGMEDIUM;
typedef struct tagSTGMEDIUM {
    DWORD tymed;
    union {
        HBITMAP hBitmap;
        HMETAFILEPICT hMetaFilePict;
        HENHMETAFILE hEnhMetaFile;
        HGLOBAL hGlobal;
        LPOLESTR lpszFileName;
        IStream *pstm;
        IStorage *pstg;
    } ;
    IUnknown *pUnkForRelease;
} uSTGMEDIUM;
typedef struct _GDI_OBJECT {
    DWORD ObjectType;
    union __WIDL_objidl_generated_name_0000000B {
        wireHBITMAP hBitmap;
        wireHPALETTE hPalette;
        wireHGLOBAL hGeneric;
    } u;
} GDI_OBJECT;



typedef struct _userSTGMEDIUM {
    struct  {
        DWORD tymed;
        union __WIDL_objidl_generated_name_0000000C {
            wireHMETAFILEPICT hMetaFilePict;
            wireHENHMETAFILE hHEnhMetaFile;
            GDI_OBJECT *hGdiHandle;
            wireHGLOBAL hGlobal;
            LPOLESTR lpszFileName;
            BYTE_BLOB *pstm;
            BYTE_BLOB *pstg;
        } u;
    } ;
    IUnknown *pUnkForRelease;
} userSTGMEDIUM;



typedef userSTGMEDIUM *wireSTGMEDIUM;
typedef uSTGMEDIUM STGMEDIUM;
typedef userSTGMEDIUM *wireASYNC_STGMEDIUM;
typedef STGMEDIUM ASYNC_STGMEDIUM;
typedef STGMEDIUM *LPSTGMEDIUM;
typedef struct _userFLAG_STGMEDIUM {
    LONG ContextFlags;
    LONG fPassOwnership;
    userSTGMEDIUM Stgmed;
} userFLAG_STGMEDIUM;
typedef userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM;
typedef struct _FLAG_STGMEDIUM {
    LONG ContextFlags;
    LONG fPassOwnership;
    STGMEDIUM Stgmed;
} FLAG_STGMEDIUM;
extern const GUID IID_IAdviseSink ;


























typedef struct IAdviseSinkVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IAdviseSink *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IAdviseSink *This);

    ULONG ( *Release)(
        IAdviseSink *This);

    
    void ( *OnDataChange)(
        IAdviseSink *This,
        FORMATETC *pFormatetc,
        STGMEDIUM *pStgmed);

    void ( *OnViewChange)(
        IAdviseSink *This,
        DWORD dwAspect,
        LONG lindex);

    void ( *OnRename)(
        IAdviseSink *This,
        IMoniker *pmk);

    void ( *OnSave)(
        IAdviseSink *This);

    void ( *OnClose)(
        IAdviseSink *This);

    
} IAdviseSinkVtbl;

struct IAdviseSink {
    const IAdviseSinkVtbl* lpVtbl;
};













































HRESULT  IAdviseSink_RemoteOnDataChange_Proxy(
    IAdviseSink* This,
    FORMATETC *pFormatetc,
    ASYNC_STGMEDIUM *pStgmed);
void  IAdviseSink_RemoteOnDataChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IAdviseSink_RemoteOnViewChange_Proxy(
    IAdviseSink* This,
    DWORD dwAspect,
    LONG lindex);
void  IAdviseSink_RemoteOnViewChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IAdviseSink_RemoteOnRename_Proxy(
    IAdviseSink* This,
    IMoniker *pmk);
void  IAdviseSink_RemoteOnRename_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IAdviseSink_RemoteOnSave_Proxy(
    IAdviseSink* This);
void  IAdviseSink_RemoteOnSave_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IAdviseSink_RemoteOnClose_Proxy(
    IAdviseSink* This);
void  IAdviseSink_RemoteOnClose_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void  IAdviseSink_OnDataChange_Proxy(
    IAdviseSink* This,
    FORMATETC *pFormatetc,
    STGMEDIUM *pStgmed);
HRESULT  IAdviseSink_OnDataChange_Stub(
    IAdviseSink* This,
    FORMATETC *pFormatetc,
    ASYNC_STGMEDIUM *pStgmed);
void  IAdviseSink_OnViewChange_Proxy(
    IAdviseSink* This,
    DWORD dwAspect,
    LONG lindex);
HRESULT  IAdviseSink_OnViewChange_Stub(
    IAdviseSink* This,
    DWORD dwAspect,
    LONG lindex);
void  IAdviseSink_OnRename_Proxy(
    IAdviseSink* This,
    IMoniker *pmk);
HRESULT  IAdviseSink_OnRename_Stub(
    IAdviseSink* This,
    IMoniker *pmk);
void  IAdviseSink_OnSave_Proxy(
    IAdviseSink* This);
HRESULT  IAdviseSink_OnSave_Stub(
    IAdviseSink* This);
void  IAdviseSink_OnClose_Proxy(
    IAdviseSink* This);
HRESULT  IAdviseSink_OnClose_Stub(
    IAdviseSink* This);









typedef IAdviseSink2 *LPADVISESINK2;
extern const GUID IID_IAdviseSink2 ;












typedef struct IAdviseSink2Vtbl {
    

    
    HRESULT ( *QueryInterface)(
        IAdviseSink2 *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IAdviseSink2 *This);

    ULONG ( *Release)(
        IAdviseSink2 *This);

    
    void ( *OnDataChange)(
        IAdviseSink2 *This,
        FORMATETC *pFormatetc,
        STGMEDIUM *pStgmed);

    void ( *OnViewChange)(
        IAdviseSink2 *This,
        DWORD dwAspect,
        LONG lindex);

    void ( *OnRename)(
        IAdviseSink2 *This,
        IMoniker *pmk);

    void ( *OnSave)(
        IAdviseSink2 *This);

    void ( *OnClose)(
        IAdviseSink2 *This);

    
    void ( *OnLinkSrcChange)(
        IAdviseSink2 *This,
        IMoniker *pmk);

    
} IAdviseSink2Vtbl;

struct IAdviseSink2 {
    const IAdviseSink2Vtbl* lpVtbl;
};



















































HRESULT  IAdviseSink2_RemoteOnLinkSrcChange_Proxy(
    IAdviseSink2* This,
    IMoniker *pmk);
void  IAdviseSink2_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
void  IAdviseSink2_OnLinkSrcChange_Proxy(
    IAdviseSink2* This,
    IMoniker *pmk);
HRESULT  IAdviseSink2_OnLinkSrcChange_Stub(
    IAdviseSink2* This,
    IMoniker *pmk);









typedef IDataObject *LPDATAOBJECT;
typedef enum tagDATADIR {
    DATADIR_GET = 1,
    DATADIR_SET = 2
} DATADIR;
extern const GUID IID_IDataObject ;













































typedef struct IDataObjectVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IDataObject *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IDataObject *This);

    ULONG ( *Release)(
        IDataObject *This);

    
    HRESULT ( *GetData)(
        IDataObject *This,
        FORMATETC *pformatetcIn,
        STGMEDIUM *pmedium);

    HRESULT ( *GetDataHere)(
        IDataObject *This,
        FORMATETC *pformatetc,
        STGMEDIUM *pmedium);

    HRESULT ( *QueryGetData)(
        IDataObject *This,
        FORMATETC *pformatetc);

    HRESULT ( *GetCanonicalFormatEtc)(
        IDataObject *This,
        FORMATETC *pformatectIn,
        FORMATETC *pformatetcOut);

    HRESULT ( *SetData)(
        IDataObject *This,
        FORMATETC *pformatetc,
        STGMEDIUM *pmedium,
        BOOL fRelease);

    HRESULT ( *EnumFormatEtc)(
        IDataObject *This,
        DWORD dwDirection,
        IEnumFORMATETC **ppenumFormatEtc);

    HRESULT ( *DAdvise)(
        IDataObject *This,
        FORMATETC *pformatetc,
        DWORD advf,
        IAdviseSink *pAdvSink,
        DWORD *pdwConnection);

    HRESULT ( *DUnadvise)(
        IDataObject *This,
        DWORD dwConnection);

    HRESULT ( *EnumDAdvise)(
        IDataObject *This,
        IEnumSTATDATA **ppenumAdvise);

    
} IDataObjectVtbl;

struct IDataObject {
    const IDataObjectVtbl* lpVtbl;
};





























































HRESULT  IDataObject_RemoteGetData_Proxy(
    IDataObject* This,
    FORMATETC *pformatetcIn,
    STGMEDIUM *pRemoteMedium);
void  IDataObject_RemoteGetData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IDataObject_RemoteGetDataHere_Proxy(
    IDataObject* This,
    FORMATETC *pformatetc,
    STGMEDIUM *pRemoteMedium);
void  IDataObject_RemoteGetDataHere_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IDataObject_RemoteSetData_Proxy(
    IDataObject* This,
    FORMATETC *pformatetc,
    FLAG_STGMEDIUM *pmedium,
    BOOL fRelease);
void  IDataObject_RemoteSetData_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IDataObject_GetData_Proxy(
    IDataObject* This,
    FORMATETC *pformatetcIn,
    STGMEDIUM *pmedium);
HRESULT  IDataObject_GetData_Stub(
    IDataObject* This,
    FORMATETC *pformatetcIn,
    STGMEDIUM *pRemoteMedium);
HRESULT  IDataObject_GetDataHere_Proxy(
    IDataObject* This,
    FORMATETC *pformatetc,
    STGMEDIUM *pmedium);
HRESULT  IDataObject_GetDataHere_Stub(
    IDataObject* This,
    FORMATETC *pformatetc,
    STGMEDIUM *pRemoteMedium);
HRESULT  IDataObject_SetData_Proxy(
    IDataObject* This,
    FORMATETC *pformatetc,
    STGMEDIUM *pmedium,
    BOOL fRelease);
HRESULT  IDataObject_SetData_Stub(
    IDataObject* This,
    FORMATETC *pformatetc,
    FLAG_STGMEDIUM *pmedium,
    BOOL fRelease);









typedef IDataAdviseHolder *LPDATAADVISEHOLDER;
extern const GUID IID_IDataAdviseHolder ;



























typedef struct IDataAdviseHolderVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IDataAdviseHolder *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IDataAdviseHolder *This);

    ULONG ( *Release)(
        IDataAdviseHolder *This);

    
    HRESULT ( *Advise)(
        IDataAdviseHolder *This,
        IDataObject *pDataObject,
        FORMATETC *pFetc,
        DWORD advf,
        IAdviseSink *pAdvise,
        DWORD *pdwConnection);

    HRESULT ( *Unadvise)(
        IDataAdviseHolder *This,
        DWORD dwConnection);

    HRESULT ( *EnumAdvise)(
        IDataAdviseHolder *This,
        IEnumSTATDATA **ppenumAdvise);

    HRESULT ( *SendOnDataChange)(
        IDataAdviseHolder *This,
        IDataObject *pDataObject,
        DWORD dwReserved,
        DWORD advf);

    
} IDataAdviseHolderVtbl;

struct IDataAdviseHolder {
    const IDataAdviseHolderVtbl* lpVtbl;
};


















































typedef IMessageFilter *LPMESSAGEFILTER;
typedef enum tagCALLTYPE {
    CALLTYPE_TOPLEVEL = 1,
    CALLTYPE_NESTED = 2,
    CALLTYPE_ASYNC = 3,
    CALLTYPE_TOPLEVEL_CALLPENDING = 4,
    CALLTYPE_ASYNC_CALLPENDING = 5
} CALLTYPE;
typedef enum tagSERVERCALL {
    SERVERCALL_ISHANDLED = 0,
    SERVERCALL_REJECTED = 1,
    SERVERCALL_RETRYLATER = 2
} SERVERCALL;
typedef enum tagPENDINGTYPE {
    PENDINGTYPE_TOPLEVEL = 1,
    PENDINGTYPE_NESTED = 2
} PENDINGTYPE;
typedef enum tagPENDINGMSG {
    PENDINGMSG_CANCELCALL = 0,
    PENDINGMSG_WAITNOPROCESS = 1,
    PENDINGMSG_WAITDEFPROCESS = 2
} PENDINGMSG;
typedef struct tagINTERFACEINFO {
    IUnknown *pUnk;
    IID iid;
    WORD wMethod;
} INTERFACEINFO;
typedef struct tagINTERFACEINFO *LPINTERFACEINFO;
extern const GUID IID_IMessageFilter ;

























typedef struct IMessageFilterVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IMessageFilter *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IMessageFilter *This);

    ULONG ( *Release)(
        IMessageFilter *This);

    
    DWORD ( *HandleInComingCall)(
        IMessageFilter *This,
        DWORD dwCallType,
        HTASK htaskCaller,
        DWORD dwTickCount,
        LPINTERFACEINFO lpInterfaceInfo);

    DWORD ( *RetryRejectedCall)(
        IMessageFilter *This,
        HTASK htaskCallee,
        DWORD dwTickCount,
        DWORD dwRejectType);

    DWORD ( *MessagePending)(
        IMessageFilter *This,
        HTASK htaskCallee,
        DWORD dwTickCount,
        DWORD dwPendingType);

    
} IMessageFilterVtbl;

struct IMessageFilter {
    const IMessageFilterVtbl* lpVtbl;
};














































extern const GUID IID_IDirectWriterLock ;


















typedef struct IDirectWriterLockVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IDirectWriterLock *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IDirectWriterLock *This);

    ULONG ( *Release)(
        IDirectWriterLock *This);

    
    HRESULT ( *WaitForWriteAccess)(
        IDirectWriterLock *This,
        DWORD dwTimeout);

    HRESULT ( *ReleaseWriteAccess)(
        IDirectWriterLock *This);

    HRESULT ( *HaveWriteAccess)(
        IDirectWriterLock *This);

    
} IDirectWriterLockVtbl;

struct IDirectWriterLock {
    const IDirectWriterLockVtbl* lpVtbl;
};














































extern const GUID IID_IUrlMon ;





















typedef struct IUrlMonVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IUrlMon *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IUrlMon *This);

    ULONG ( *Release)(
        IUrlMon *This);

    
    HRESULT ( *AsyncGetClassBits)(
        IUrlMon *This,
        const CLSID* const rclsid,
        LPCWSTR pszTYPE,
        LPCWSTR pszExt,
        DWORD dwFileVersionMS,
        DWORD dwFileVersionLS,
        LPCWSTR pszCodeBase,
        IBindCtx *pbc,
        DWORD dwClassContext,
        const IID* const riid,
        DWORD flags);

    
} IUrlMonVtbl;

struct IUrlMon {
    const IUrlMonVtbl* lpVtbl;
};






































extern const GUID IID_IForegroundTransfer ;












typedef struct IForegroundTransferVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IForegroundTransfer *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IForegroundTransfer *This);

    ULONG ( *Release)(
        IForegroundTransfer *This);

    
    HRESULT ( *AllowForegroundTransfer)(
        IForegroundTransfer *This,
        void *lpvReserved);

    
} IForegroundTransferVtbl;

struct IForegroundTransfer {
    const IForegroundTransferVtbl* lpVtbl;
};






































typedef IInitializeSpy *LPINITIALIZESPY;
extern const GUID IID_IInitializeSpy ;
























typedef struct IInitializeSpyVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IInitializeSpy *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IInitializeSpy *This);

    ULONG ( *Release)(
        IInitializeSpy *This);

    
    HRESULT ( *PreInitialize)(
        IInitializeSpy *This,
        DWORD dwCoInit,
        DWORD dwCurThreadAptRefs);

    HRESULT ( *PostInitialize)(
        IInitializeSpy *This,
        HRESULT hrCoInit,
        DWORD dwCoInit,
        DWORD dwNewThreadAptRefs);

    HRESULT ( *PreUninitialize)(
        IInitializeSpy *This,
        DWORD dwCurThreadAptRefs);

    HRESULT ( *PostUninitialize)(
        IInitializeSpy *This,
        DWORD dwNewThreadAptRefs);

    
} IInitializeSpyVtbl;

struct IInitializeSpy {
    const IInitializeSpyVtbl* lpVtbl;
};


















































extern const GUID IID_IThumbnailExtractor ;




















typedef struct IThumbnailExtractorVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IThumbnailExtractor *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IThumbnailExtractor *This);

    ULONG ( *Release)(
        IThumbnailExtractor *This);

    
    HRESULT ( *ExtractThumbnail)(
        IThumbnailExtractor *This,
        IStorage *pStg,
        ULONG ulLength,
        ULONG ulHeight,
        ULONG *pulOutputLength,
        ULONG *pulOutputHeight,
        HBITMAP *phOutputBitmap);

    HRESULT ( *OnFileUpdated)(
        IThumbnailExtractor *This,
        IStorage *pStg);

    
} IThumbnailExtractorVtbl;

struct IThumbnailExtractor {
    const IThumbnailExtractorVtbl* lpVtbl;
};










































extern const GUID IID_IDummyHICONIncluder ;













typedef struct IDummyHICONIncluderVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IDummyHICONIncluder *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IDummyHICONIncluder *This);

    ULONG ( *Release)(
        IDummyHICONIncluder *This);

    
    HRESULT ( *Dummy)(
        IDummyHICONIncluder *This,
        HICON hIcon,
        HDC hdc);

    
} IDummyHICONIncluderVtbl;

struct IDummyHICONIncluder {
    const IDummyHICONIncluderVtbl* lpVtbl;
};






































extern const GUID IID_IApartmentShutdown ;












typedef struct IApartmentShutdownVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IApartmentShutdown *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IApartmentShutdown *This);

    ULONG ( *Release)(
        IApartmentShutdown *This);

    
    void ( *OnUninitialize)(
        IApartmentShutdown *This,
        UINT64 identifier);

    
} IApartmentShutdownVtbl;

struct IApartmentShutdown {
    const IApartmentShutdownVtbl* lpVtbl;
};


































ULONG            SNB_UserSize     (ULONG *, ULONG, SNB *);
unsigned char *  SNB_UserMarshal  (ULONG *, unsigned char *, SNB *);
unsigned char *  SNB_UserUnmarshal(ULONG *, unsigned char *, SNB *);
void             SNB_UserFree     (ULONG *, SNB *);
ULONG            CLIPFORMAT_UserSize     (ULONG *, ULONG, CLIPFORMAT *);
unsigned char *  CLIPFORMAT_UserMarshal  (ULONG *, unsigned char *, CLIPFORMAT *);
unsigned char *  CLIPFORMAT_UserUnmarshal(ULONG *, unsigned char *, CLIPFORMAT *);
void             CLIPFORMAT_UserFree     (ULONG *, CLIPFORMAT *);
ULONG            STGMEDIUM_UserSize     (ULONG *, ULONG, STGMEDIUM *);
unsigned char *  STGMEDIUM_UserMarshal  (ULONG *, unsigned char *, STGMEDIUM *);
unsigned char *  STGMEDIUM_UserUnmarshal(ULONG *, unsigned char *, STGMEDIUM *);
void             STGMEDIUM_UserFree     (ULONG *, STGMEDIUM *);
ULONG            ASYNC_STGMEDIUM_UserSize     (ULONG *, ULONG, ASYNC_STGMEDIUM *);
unsigned char *  ASYNC_STGMEDIUM_UserMarshal  (ULONG *, unsigned char *, ASYNC_STGMEDIUM *);
unsigned char *  ASYNC_STGMEDIUM_UserUnmarshal(ULONG *, unsigned char *, ASYNC_STGMEDIUM *);
void             ASYNC_STGMEDIUM_UserFree     (ULONG *, ASYNC_STGMEDIUM *);
ULONG            FLAG_STGMEDIUM_UserSize     (ULONG *, ULONG, FLAG_STGMEDIUM *);
unsigned char *  FLAG_STGMEDIUM_UserMarshal  (ULONG *, unsigned char *, FLAG_STGMEDIUM *);
unsigned char *  FLAG_STGMEDIUM_UserUnmarshal(ULONG *, unsigned char *, FLAG_STGMEDIUM *);
void             FLAG_STGMEDIUM_UserFree     (ULONG *, FLAG_STGMEDIUM *);
ULONG            HBITMAP_UserSize     (ULONG *, ULONG, HBITMAP *);
unsigned char *  HBITMAP_UserMarshal  (ULONG *, unsigned char *, HBITMAP *);
unsigned char *  HBITMAP_UserUnmarshal(ULONG *, unsigned char *, HBITMAP *);
void             HBITMAP_UserFree     (ULONG *, HBITMAP *);
ULONG            HICON_UserSize     (ULONG *, ULONG, HICON *);
unsigned char *  HICON_UserMarshal  (ULONG *, unsigned char *, HICON *);
unsigned char *  HICON_UserUnmarshal(ULONG *, unsigned char *, HICON *);
void             HICON_UserFree     (ULONG *, HICON *);
ULONG            HDC_UserSize     (ULONG *, ULONG, HDC *);
unsigned char *  HDC_UserMarshal  (ULONG *, unsigned char *, HDC *);
unsigned char *  HDC_UserUnmarshal(ULONG *, unsigned char *, HDC *);
void             HDC_UserFree     (ULONG *, HDC *);








# 281 "include/objbase.h" 2
















 DWORD  CoBuildVersion(void);

typedef enum tagCOINIT
{
    COINIT_APARTMENTTHREADED  = 0x2, 
    COINIT_MULTITHREADED      = 0x0, 
    COINIT_DISABLE_OLE1DDE    = 0x4, 
    COINIT_SPEED_OVER_MEMORY  = 0x8  
} COINIT;

typedef struct CO_MTA_USAGE_COOKIE__ {int unused; } *CO_MTA_USAGE_COOKIE ;

 HRESULT  CoInitialize(LPVOID lpReserved);
 HRESULT  CoInitializeEx(LPVOID lpReserved, DWORD dwCoInit);
 void  CoUninitialize(void);
 DWORD  CoGetCurrentProcess(void);
 HRESULT  CoGetCurrentLogicalThreadId(GUID *id);
 HRESULT  CoGetApartmentType(APTTYPE *type, APTTYPEQUALIFIER *qualifier);
 HRESULT  CoIncrementMTAUsage(CO_MTA_USAGE_COOKIE *cookie);
 HRESULT  CoDecrementMTAUsage(CO_MTA_USAGE_COOKIE cookie);

 HINSTANCE  CoLoadLibrary(LPOLESTR lpszLibName, BOOL bAutoFree);
 void  CoFreeAllLibraries(void);
 void  CoFreeLibrary(HINSTANCE hLibrary);
 void  CoFreeUnusedLibraries(void);
 void  CoFreeUnusedLibrariesEx(DWORD dwUnloadDelay, DWORD dwReserved);

 HRESULT  CoCreateInstance(const CLSID* const,LPUNKNOWN,DWORD,const IID* const,LPVOID*);
 HRESULT  CoCreateInstanceEx(const CLSID* const,LPUNKNOWN,DWORD,COSERVERINFO*,ULONG,MULTI_QI*);
 HRESULT  CoCreateInstanceFromApp(const CLSID* const,IUnknown*,DWORD,void*,DWORD,MULTI_QI*);
 HRESULT  CoGetInstanceFromFile(COSERVERINFO*, CLSID*,IUnknown*,DWORD,DWORD,OLECHAR*,DWORD,MULTI_QI*);
 HRESULT  CoGetInstanceFromIStorage(COSERVERINFO*,CLSID*,IUnknown*,DWORD,IStorage*,DWORD,MULTI_QI*);

 HRESULT  CoGetMalloc(DWORD dwMemContext, LPMALLOC* lpMalloc);
 void  CoTaskMemFree(LPVOID ptr);
 LPVOID  CoTaskMemAlloc(SIZE_T size)   ;
 LPVOID  CoTaskMemRealloc(LPVOID ptr, SIZE_T size)  ;

 HRESULT  CoRegisterMallocSpy(LPMALLOCSPY pMallocSpy);
 HRESULT  CoRevokeMallocSpy(void);

 HRESULT  CoGetContextToken( ULONG_PTR *token );


typedef enum tagREGCLS
{
    REGCLS_SINGLEUSE = 0,
    REGCLS_MULTIPLEUSE = 1,
    REGCLS_MULTI_SEPARATE = 2,
    REGCLS_SUSPENDED = 4,
    REGCLS_SURROGATE = 8
} REGCLS;

 HRESULT  CoGetClassObject(const CLSID* const rclsid, DWORD dwClsContext, COSERVERINFO *pServerInfo, const IID* const iid, LPVOID *ppv);
 HRESULT  CoRegisterClassObject(const CLSID* const rclsid,LPUNKNOWN pUnk,DWORD dwClsContext,DWORD flags,LPDWORD lpdwRegister);
 HRESULT  CoRevokeClassObject(DWORD dwRegister);
 HRESULT  CoGetPSClsid(const IID* const riid,CLSID *pclsid);
 HRESULT  CoRegisterPSClsid(const IID* const riid, const CLSID* const rclsid);
 HRESULT  CoRegisterSurrogate(LPSURROGATE pSurrogate);
 HRESULT  CoSuspendClassObjects(void);
 HRESULT  CoResumeClassObjects(void);
 ULONG  CoAddRefServerProcess(void);
 ULONG  CoReleaseServerProcess(void);


 HRESULT  CoCreateFreeThreadedMarshaler(LPUNKNOWN punkOuter, LPUNKNOWN* ppunkMarshal);
 HRESULT  CoGetInterfaceAndReleaseStream(LPSTREAM pStm, const IID* const iid, LPVOID* ppv);
 HRESULT  CoGetMarshalSizeMax(ULONG* pulSize, const IID* const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags);
 HRESULT  CoGetStandardMarshal(const IID* const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags, LPMARSHAL* ppMarshal);
 HRESULT  CoMarshalHresult(LPSTREAM pstm, HRESULT hresult);
 HRESULT  CoMarshalInterface(LPSTREAM pStm, const IID* const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags);
 HRESULT  CoMarshalInterThreadInterfaceInStream(const IID* const riid, LPUNKNOWN pUnk, LPSTREAM* ppStm);
 HRESULT  CoReleaseMarshalData(LPSTREAM pStm);
 HRESULT  CoDisconnectObject(LPUNKNOWN lpUnk, DWORD reserved);
 HRESULT  CoUnmarshalHresult(LPSTREAM pstm, HRESULT* phresult);
 HRESULT  CoUnmarshalInterface(LPSTREAM pStm, const IID* const riid, LPVOID* ppv);
 HRESULT  CoLockObjectExternal(LPUNKNOWN pUnk, BOOL fLock, BOOL fLastUnlockReleases);
 BOOL  CoIsHandlerConnected(LPUNKNOWN pUnk);
 HRESULT  CoDisableCallCancellation(void *reserved);
 HRESULT  CoEnableCallCancellation(void *reserved);


 HRESULT  CoInitializeSecurity(PSECURITY_DESCRIPTOR pSecDesc, LONG cAuthSvc, SOLE_AUTHENTICATION_SERVICE* asAuthSvc, void* pReserved1, DWORD dwAuthnLevel, DWORD dwImpLevel, void* pReserved2, DWORD dwCapabilities, void* pReserved3);
 HRESULT  CoGetCallContext(const IID* const riid, void** ppInterface);
 HRESULT  CoSwitchCallContext(IUnknown *pContext, IUnknown **ppOldContext);
 HRESULT  CoQueryAuthenticationServices(DWORD* pcAuthSvc, SOLE_AUTHENTICATION_SERVICE** asAuthSvc);

 HRESULT  CoQueryProxyBlanket(IUnknown* pProxy, DWORD* pwAuthnSvc, DWORD* pAuthzSvc, OLECHAR** pServerPrincName, DWORD* pAuthnLevel, DWORD* pImpLevel, RPC_AUTH_IDENTITY_HANDLE* pAuthInfo, DWORD* pCapabilities);
 HRESULT  CoSetProxyBlanket(IUnknown* pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR* pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, RPC_AUTH_IDENTITY_HANDLE pAuthInfo, DWORD dwCapabilities);
 HRESULT  CoCopyProxy(IUnknown* pProxy, IUnknown** ppCopy);

 HRESULT  CoImpersonateClient(void);
 HRESULT  CoQueryClientBlanket(DWORD* pAuthnSvc, DWORD* pAuthzSvc, OLECHAR** pServerPrincName, DWORD* pAuthnLevel, DWORD* pImpLevel, RPC_AUTHZ_HANDLE* pPrivs, DWORD* pCapabilities);
 HRESULT  CoRevertToSelf(void);


 HRESULT  CoGetTreatAsClass(const CLSID* const clsidOld, LPCLSID pClsidNew);
 HRESULT  CoTreatAsClass(const CLSID* const clsidOld, const CLSID* const clsidNew);
 HRESULT  CoAllowSetForegroundWindow(IUnknown *pUnk, LPVOID lpvReserved);
 HRESULT  CoGetObjectContext(const IID* const riid, LPVOID *ppv);
 HRESULT  CoRegisterInitializeSpy(IInitializeSpy *spy, ULARGE_INTEGER *cookie);
 HRESULT  CoRevokeInitializeSpy(ULARGE_INTEGER cookie);

 HRESULT  CoCreateGuid(GUID* pguid);
 BOOL  CoIsOle1Class(const CLSID* const rclsid);

 BOOL  CoDosDateTimeToFileTime(WORD nDosDate, WORD nDosTime, FILETIME* lpFileTime);
 BOOL  CoFileTimeToDosDateTime(FILETIME* lpFileTime, WORD* lpDosDate, WORD* lpDosTime);
 HRESULT  CoFileTimeNow(FILETIME* lpFileTime);
 HRESULT  CoRegisterMessageFilter(LPMESSAGEFILTER lpMessageFilter,LPMESSAGEFILTER *lplpMessageFilter);
 HRESULT  CoRegisterChannelHook(const GUID* const ExtensionGuid, IChannelHook *pChannelHook);

typedef enum tagCOWAIT_FLAGS
{
    COWAIT_DEFAULT        = 0x00000000,
    COWAIT_WAITALL        = 0x00000001,
    COWAIT_ALERTABLE      = 0x00000002,
    COWAIT_INPUTAVAILABLE = 0x00000004
} COWAIT_FLAGS;

 HRESULT  CoWaitForMultipleHandles(DWORD dwFlags,DWORD dwTimeout,ULONG cHandles,LPHANDLE pHandles,LPDWORD lpdwindex);




 HRESULT  StringFromCLSID(const CLSID* const id, LPOLESTR*);
 HRESULT  CLSIDFromString(LPCOLESTR, LPCLSID);
 HRESULT  CLSIDFromProgID(LPCOLESTR progid, LPCLSID riid);
 HRESULT  ProgIDFromCLSID(const CLSID* const clsid, LPOLESTR *lplpszProgID);
 INT  StringFromGUID2(const GUID* const id, LPOLESTR str, INT cmax);
 HRESULT  IIDFromString(LPCOLESTR str, IID *iid);
 HRESULT  StringFromIID(const IID* const riid, LPOLESTR*);




HRESULT  DllGetClassObject(const CLSID* const rclsid, const IID* const riid, LPVOID * ppv);
HRESULT  DllCanUnloadNow(void);




 HRESULT  CreateDataAdviseHolder(LPDATAADVISEHOLDER* ppDAHolder);
 HRESULT  CreateDataCache(LPUNKNOWN pUnkOuter, const CLSID* const rclsid, const IID* const iid, LPVOID* ppv);




 HRESULT  BindMoniker(LPMONIKER pmk, DWORD grfOpt, const IID* const iidResult, LPVOID* ppvResult);
 HRESULT  CoGetObject(LPCWSTR pszName, BIND_OPTS *pBindOptions, const IID* const riid, void **ppv);
 HRESULT  CreateAntiMoniker(LPMONIKER * ppmk);
 HRESULT  CreateBindCtx(DWORD reserved, LPBC* ppbc);
 HRESULT  CreateClassMoniker(const CLSID* const rclsid, LPMONIKER* ppmk);
 HRESULT  CreateFileMoniker(LPCOLESTR lpszPathName, LPMONIKER* ppmk);
 HRESULT  CreateGenericComposite(LPMONIKER pmkFirst, LPMONIKER pmkRest, LPMONIKER* ppmkComposite);
 HRESULT  CreateItemMoniker(LPCOLESTR lpszDelim, LPCOLESTR  lpszItem, LPMONIKER* ppmk);
 HRESULT  CreateObjrefMoniker(LPUNKNOWN punk, LPMONIKER * ppmk);
 HRESULT  CreatePointerMoniker(LPUNKNOWN punk, LPMONIKER * ppmk);
 HRESULT  GetClassFile(LPCOLESTR filePathName,CLSID *pclsid);
 HRESULT  GetRunningObjectTable(DWORD reserved, LPRUNNINGOBJECTTABLE *pprot);
 HRESULT  MkParseDisplayName(LPBC pbc, LPCOLESTR szUserName, ULONG * pchEaten, LPMONIKER * ppmk);
 HRESULT  MonikerCommonPrefixWith(IMoniker* pmkThis,IMoniker* pmkOther,IMoniker** ppmkCommon);
 HRESULT  MonikerRelativePathTo(LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER * ppmkRelPath, BOOL dwReserved);




























typedef struct tagSTGOPTIONS
{
    USHORT usVersion;
    USHORT reserved;
    ULONG ulSectorSize;
    const WCHAR* pwcsTemplateFile;
} STGOPTIONS;

 HRESULT  StgCreateDocfile(LPCOLESTR pwcsName,DWORD grfMode,DWORD reserved,IStorage **ppstgOpen);
 HRESULT  StgCreateStorageEx(const WCHAR*,DWORD,DWORD,DWORD,STGOPTIONS*,void*,const IID* const,void**);
 HRESULT  StgIsStorageFile(LPCOLESTR fn);
 HRESULT  StgIsStorageILockBytes(ILockBytes *plkbyt);
 HRESULT  StgOpenStorage(const OLECHAR* pwcsName,IStorage* pstgPriority,DWORD grfMode,SNB snbExclude,DWORD reserved,IStorage**ppstgOpen);
 HRESULT  StgOpenStorageEx(const WCHAR* pwcwName,DWORD grfMode,DWORD stgfmt,DWORD grfAttrs,STGOPTIONS *pStgOptions, void *reserved, const IID* const riid, void **ppObjectOpen);

 HRESULT  StgCreateDocfileOnILockBytes(ILockBytes *plkbyt,DWORD grfMode, DWORD reserved, IStorage** ppstgOpen);
 HRESULT  StgOpenStorageOnILockBytes(ILockBytes *plkbyt, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstgOpen);
 HRESULT  StgSetTimes( OLECHAR const *lpszName, FILETIME const *pctime, FILETIME const *patime, FILETIME const *pmtime);









# 1 "include/propidl.h" 1 3







# 1 "include/rpc.h" 1 3






















# 1 "include/windows.h" 1 3








































































































# 23 "include/rpc.h" 2

































































# 8 "include/propidl.h" 2

# 1 "include/rpcndr.h" 1 3








































































































































































































































































































































































































































































































































































































































































































































































































































# 9 "include/propidl.h" 2




# 1 "include/windows.h" 1 3








































































































# 13 "include/propidl.h" 2

# 1 "include/ole2.h" 1 3



























































































































































# 14 "include/propidl.h" 2









typedef struct IPropertyStorage IPropertyStorage;







typedef struct IPropertySetStorage IPropertySetStorage;







typedef struct IEnumSTATPROPSTG IEnumSTATPROPSTG;







typedef struct IEnumSTATPROPSETSTG IEnumSTATPROPSETSTG;








# 1 "include/objidl.h" 1 3







# 1 "include/rpc.h" 1 3






















# 1 "include/windows.h" 1 3








































































































# 23 "include/rpc.h" 2

































































# 8 "include/objidl.h" 2

# 1 "include/rpcndr.h" 1 3








































































































































































































































































































































































































































































































































































































































































































































































































































# 9 "include/objidl.h" 2




# 1 "include/windows.h" 1 3








































































































# 13 "include/objidl.h" 2

# 1 "include/ole2.h" 1 3



























































































































































# 14 "include/objidl.h" 2





























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 56 "include/propidl.h" 2

# 1 "include/oaidl.h" 1 3







# 1 "include/rpc.h" 1 3






















# 1 "include/windows.h" 1 3








































































































# 23 "include/rpc.h" 2

































































# 8 "include/oaidl.h" 2

# 1 "include/rpcndr.h" 1 3








































































































































































































































































































































































































































































































































































































































































































































































































































# 9 "include/oaidl.h" 2




# 1 "include/windows.h" 1 3








































































































# 13 "include/oaidl.h" 2

# 1 "include/ole2.h" 1 3



























































































































































# 14 "include/oaidl.h" 2









typedef struct IDispatch IDispatch;







typedef struct IEnumVARIANT IEnumVARIANT;







typedef struct ITypeComp ITypeComp;







typedef struct ITypeInfo ITypeInfo;







typedef struct ITypeInfo2 ITypeInfo2;







typedef struct ITypeLib ITypeLib;







typedef struct ITypeLib2 ITypeLib2;







typedef struct ITypeChangeEvents ITypeChangeEvents;







typedef struct IErrorInfo IErrorInfo;







typedef struct ICreateErrorInfo ICreateErrorInfo;







typedef struct ISupportErrorInfo ISupportErrorInfo;







typedef struct ITypeFactory ITypeFactory;







typedef struct ITypeMarshal ITypeMarshal;







typedef struct IRecordInfo IRecordInfo;







typedef struct ICreateTypeInfo ICreateTypeInfo;







typedef struct ICreateTypeInfo2 ICreateTypeInfo2;







typedef struct ICreateTypeLib ICreateTypeLib;







typedef struct ICreateTypeLib2 ICreateTypeLib2;







typedef struct IErrorLog IErrorLog;







typedef struct IPropertyBag IPropertyBag;








# 1 "include/objidl.h" 1 3







# 1 "include/rpc.h" 1 3






















# 1 "include/windows.h" 1 3








































































































# 23 "include/rpc.h" 2

































































# 8 "include/objidl.h" 2

# 1 "include/rpcndr.h" 1 3








































































































































































































































































































































































































































































































































































































































































































































































































































# 9 "include/objidl.h" 2




# 1 "include/windows.h" 1 3








































































































# 13 "include/objidl.h" 2

# 1 "include/ole2.h" 1 3



























































































































































# 14 "include/objidl.h" 2





























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 184 "include/oaidl.h" 2











































extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec;
extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec;
typedef CY CURRENCY;
typedef struct tagSAFEARRAYBOUND {
    ULONG cElements;
    LONG lLbound;
} SAFEARRAYBOUND;
typedef struct tagSAFEARRAYBOUND *LPSAFEARRAYBOUND;
typedef struct _wireVARIANT *wireVARIANT;
typedef struct _wireBRECORD *wireBRECORD;
typedef struct _wireSAFEARR_BSTR {
    ULONG Size;
    wireBSTR *aBstr;
} SAFEARR_BSTR;
typedef struct _wireSAFEARR_UNKNOWN {
    ULONG Size;
    IUnknown **apUnknown;
} SAFEARR_UNKNOWN;
typedef struct _wireSAFEARR_DISPATCH {
    ULONG Size;
    IDispatch **apDispatch;
} SAFEARR_DISPATCH;
typedef struct _wireSAFEARR_VARIANT {
    ULONG Size;
    wireVARIANT *aVariant;
} SAFEARR_VARIANT;
typedef struct _wireSAFEARR_BRECORD {
    ULONG Size;
    wireBRECORD *aRecord;
} SAFEARR_BRECORD;
typedef struct _wireSAFEARR_HAVEIID {
    ULONG Size;
    IUnknown **apUnknown;
    IID iid;
} SAFEARR_HAVEIID;
typedef enum tagSF_TYPE {
    SF_ERROR = VT_ERROR,
    SF_I1 = VT_I1,
    SF_I2 = VT_I2,
    SF_I4 = VT_I4,
    SF_I8 = VT_I8,
    SF_BSTR = VT_BSTR,
    SF_UNKNOWN = VT_UNKNOWN,
    SF_DISPATCH = VT_DISPATCH,
    SF_VARIANT = VT_VARIANT,
    SF_RECORD = VT_RECORD,
    SF_HAVEIID = VT_UNKNOWN | VT_RESERVED
} SF_TYPE;
typedef struct _wireSAFEARRAY_UNION {
    ULONG sfType;
    union __WIDL_oaidl_generated_name_0000000D {
        SAFEARR_BSTR BstrStr;
        SAFEARR_UNKNOWN UnknownStr;
        SAFEARR_DISPATCH DispatchStr;
        SAFEARR_VARIANT VariantStr;
        SAFEARR_BRECORD RecordStr;
        SAFEARR_HAVEIID HaveIidStr;
        BYTE_SIZEDARR ByteStr;
        WORD_SIZEDARR WordStr;
        DWORD_SIZEDARR LongStr;
        HYPER_SIZEDARR HyperStr;
    } u;
} SAFEARRAYUNION;
typedef struct _wireSAFEARRAY {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    SAFEARRAYUNION uArrayStructs;
    SAFEARRAYBOUND rgsabound[1];
} *wireSAFEARRAY;
typedef wireSAFEARRAY *wirePSAFEARRAY;
typedef struct tagSAFEARRAY {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    PVOID pvData;
    SAFEARRAYBOUND rgsabound[1];
} SAFEARRAY;
typedef SAFEARRAY *LPSAFEARRAY;









































typedef struct tagVARIANT VARIANT;
struct tagVARIANT {
    union {
        struct  {
            VARTYPE vt;
            WORD wReserved1;
            WORD wReserved2;
            WORD wReserved3;
            union {
                signed char cVal;
                USHORT uiVal;
                ULONG ulVal;
                INT intVal;
                UINT uintVal;
                BYTE bVal;
                SHORT iVal;
                LONG lVal;
                FLOAT fltVal;
                DOUBLE dblVal;
                VARIANT_BOOL boolVal;
                SCODE scode;
                DATE date;
                BSTR bstrVal;
                CY cyVal;
                IUnknown *punkVal;
                IDispatch *pdispVal;
                SAFEARRAY *parray;
                LONGLONG llVal;
                ULONGLONG ullVal;
                signed char *pcVal;
                USHORT *puiVal;
                ULONG *pulVal;
                INT *pintVal;
                UINT *puintVal;
                BYTE *pbVal;
                SHORT *piVal;
                LONG *plVal;
                FLOAT *pfltVal;
                DOUBLE *pdblVal;
                VARIANT_BOOL *pboolVal;
                SCODE *pscode;
                DATE *pdate;
                BSTR *pbstrVal;
                VARIANT *pvarVal;
                PVOID byref;
                CY *pcyVal;
                DECIMAL *pdecVal;
                IUnknown **ppunkVal;
                IDispatch **ppdispVal;
                SAFEARRAY **pparray;
                LONGLONG *pllVal;
                ULONGLONG *pullVal;
                struct  {
                    PVOID pvRecord;
                    IRecordInfo *pRecInfo;
                } ;
            } ;
        } ;
        DECIMAL decVal;
    } ;
};
typedef VARIANT *LPVARIANT;
typedef VARIANT VARIANTARG;
typedef VARIANTARG *LPVARIANTARG;










struct _wireBRECORD {
    ULONG fFlags;
    ULONG clSize;
    IRecordInfo *pRecInfo;
    byte *pRecord;
};
struct _wireVARIANT {
    DWORD clSize;
    DWORD rpcReserved;
    USHORT vt;
    USHORT wReserved1;
    USHORT wReserved2;
    USHORT wReserved3;
    union {
        signed char cVal;
        USHORT uiVal;
        ULONG ulVal;
        INT intVal;
        UINT uintVal;
        BYTE bVal;
        SHORT iVal;
        LONG lVal;
        FLOAT fltVal;
        DOUBLE dblVal;
        VARIANT_BOOL boolVal;
        SCODE scode;
        DATE date;
        wireBSTR bstrVal;
        CY cyVal;
        DECIMAL decVal;
        IUnknown *punkVal;
        IDispatch *pdispVal;
        wireSAFEARRAY parray;
        signed char *pcVal;
        USHORT *puiVal;
        ULONG *pulVal;
        INT *pintVal;
        UINT *puintVal;
        BYTE *pbVal;
        SHORT *piVal;
        LONG *plVal;
        FLOAT *pfltVal;
        DOUBLE *pdblVal;
        VARIANT_BOOL *pboolVal;
        SCODE *pscode;
        DATE *pdate;
        wireBSTR *pbstrVal;
        wireVARIANT *pvarVal;
        CY *pcyVal;
        DECIMAL *pdecVal;
        IUnknown **ppunkVal;
        IDispatch **ppdispVal;
        wireSAFEARRAY *pparray;
        wireBRECORD brecVal;
    } ;
};
typedef LONG DISPID;
typedef DWORD HREFTYPE;
typedef DISPID MEMBERID;
typedef enum tagTYPEKIND {
    TKIND_ENUM = 0,
    TKIND_RECORD = 1,
    TKIND_MODULE = 2,
    TKIND_INTERFACE = 3,
    TKIND_DISPATCH = 4,
    TKIND_COCLASS = 5,
    TKIND_ALIAS = 6,
    TKIND_UNION = 7,
    TKIND_MAX = 8
} TYPEKIND;
typedef struct tagTYPEDESC {
    union {
        struct tagTYPEDESC *lptdesc;
        struct tagARRAYDESC *lpadesc;
        HREFTYPE hreftype;
    } ;
    VARTYPE vt;
} TYPEDESC;
typedef struct tagARRAYDESC {
    TYPEDESC tdescElem;
    USHORT cDims;
    SAFEARRAYBOUND rgbounds[1];
} ARRAYDESC;
typedef struct tagPARAMDESCEX {
    ULONG cBytes;
    VARIANTARG varDefaultValue;
} PARAMDESCEX;
typedef struct tagPARAMDESCEX *LPPARAMDESCEX;
typedef struct tagPARAMDESC {
    LPPARAMDESCEX pparamdescex;
    USHORT wParamFlags;
} PARAMDESC;
typedef struct tagPARAMDESC *LPPARAMDESC;
















typedef struct tagIDLDESC {
    ULONG_PTR dwReserved;
    USHORT wIDLFlags;
} IDLDESC;
typedef struct tagIDLDESC *LPIDLDESC;
















typedef struct tagELEMDESC {
  TYPEDESC tdesc;
  union {
    IDLDESC idldesc;
    PARAMDESC paramdesc;
  } ;
} ELEMDESC, *LPELEMDESC;

typedef struct tagTYPEATTR {
    GUID guid;
    LCID lcid;
    DWORD dwReserved;
    MEMBERID memidConstructor;
    MEMBERID memidDestructor;
    LPOLESTR lpstrSchema;
    ULONG cbSizeInstance;
    TYPEKIND typekind;
    WORD cFuncs;
    WORD cVars;
    WORD cImplTypes;
    WORD cbSizeVft;
    WORD cbAlignment;
    WORD wTypeFlags;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    TYPEDESC tdescAlias;
    IDLDESC idldescType;
} TYPEATTR;
typedef struct tagTYPEATTR *LPTYPEATTR;
typedef struct tagDISPPARAMS {
    VARIANTARG *rgvarg;
    DISPID *rgdispidNamedArgs;
    UINT cArgs;
    UINT cNamedArgs;
} DISPPARAMS;













typedef struct tagEXCEPINFO {
  WORD wCode;
  WORD wReserved;
  BSTR bstrSource;
  BSTR bstrDescription;
  BSTR bstrHelpFile;
  DWORD dwHelpContext;
  PVOID pvReserved;
  HRESULT ( *pfnDeferredFillIn)(struct tagEXCEPINFO *);
  SCODE scode;
} EXCEPINFO, *LPEXCEPINFO;

typedef enum tagCALLCONV {
    CC_FASTCALL = 0,
    CC_CDECL = 1,
    CC_MSCPASCAL = 2,
    CC_PASCAL = CC_MSCPASCAL,
    CC_MACPASCAL = 3,
    CC_STDCALL = 4,
    CC_FPFASTCALL = 5,
    CC_SYSCALL = 6,
    CC_MPWCDECL = 7,
    CC_MPWPASCAL = 8,
    CC_MAX = 9
} CALLCONV;
typedef enum tagFUNCKIND {
    FUNC_VIRTUAL = 0,
    FUNC_PUREVIRTUAL = 1,
    FUNC_NONVIRTUAL = 2,
    FUNC_STATIC = 3,
    FUNC_DISPATCH = 4
} FUNCKIND;
typedef enum tagINVOKEKIND {
    INVOKE_FUNC = 1,
    INVOKE_PROPERTYGET = 2,
    INVOKE_PROPERTYPUT = 4,
    INVOKE_PROPERTYPUTREF = 8
} INVOKEKIND;
typedef struct tagFUNCDESC {
    MEMBERID memid;
    SCODE *lprgscode;
    ELEMDESC *lprgelemdescParam;
    FUNCKIND funckind;
    INVOKEKIND invkind;
    CALLCONV callconv;
    SHORT cParams;
    SHORT cParamsOpt;
    SHORT oVft;
    SHORT cScodes;
    ELEMDESC elemdescFunc;
    WORD wFuncFlags;
} FUNCDESC;
typedef struct tagFUNCDESC *LPFUNCDESC;
typedef enum tagVARKIND {
    VAR_PERINSTANCE = 0,
    VAR_STATIC = 1,
    VAR_CONST = 2,
    VAR_DISPATCH = 3
} VARKIND;








typedef struct tagVARDESC {
    MEMBERID memid;
    LPOLESTR lpstrSchema;
    union {
        ULONG oInst;
        VARIANT *lpvarValue;
    } ;
    ELEMDESC elemdescVar;
    WORD wVarFlags;
    VARKIND varkind;
} VARDESC;
typedef struct tagVARDESC *LPVARDESC;
typedef enum tagTYPEFLAGS {
    TYPEFLAG_FAPPOBJECT = 0x1,
    TYPEFLAG_FCANCREATE = 0x2,
    TYPEFLAG_FLICENSED = 0x4,
    TYPEFLAG_FPREDECLID = 0x8,
    TYPEFLAG_FHIDDEN = 0x10,
    TYPEFLAG_FCONTROL = 0x20,
    TYPEFLAG_FDUAL = 0x40,
    TYPEFLAG_FNONEXTENSIBLE = 0x80,
    TYPEFLAG_FOLEAUTOMATION = 0x100,
    TYPEFLAG_FRESTRICTED = 0x200,
    TYPEFLAG_FAGGREGATABLE = 0x400,
    TYPEFLAG_FREPLACEABLE = 0x800,
    TYPEFLAG_FDISPATCHABLE = 0x1000,
    TYPEFLAG_FREVERSEBIND = 0x2000,
    TYPEFLAG_FPROXY = 0x4000
} TYPEFLAGS;
typedef enum tagFUNCFLAGS {
    FUNCFLAG_FRESTRICTED = 0x1,
    FUNCFLAG_FSOURCE = 0x2,
    FUNCFLAG_FBINDABLE = 0x4,
    FUNCFLAG_FREQUESTEDIT = 0x8,
    FUNCFLAG_FDISPLAYBIND = 0x10,
    FUNCFLAG_FDEFAULTBIND = 0x20,
    FUNCFLAG_FHIDDEN = 0x40,
    FUNCFLAG_FUSESGETLASTERROR = 0x80,
    FUNCFLAG_FDEFAULTCOLLELEM = 0x100,
    FUNCFLAG_FUIDEFAULT = 0x200,
    FUNCFLAG_FNONBROWSABLE = 0x400,
    FUNCFLAG_FREPLACEABLE = 0x800,
    FUNCFLAG_FIMMEDIATEBIND = 0x1000
} FUNCFLAGS;
typedef enum tagVARFLAGS {
    VARFLAG_FREADONLY = 0x1,
    VARFLAG_FSOURCE = 0x2,
    VARFLAG_FBINDABLE = 0x4,
    VARFLAG_FREQUESTEDIT = 0x8,
    VARFLAG_FDISPLAYBIND = 0x10,
    VARFLAG_FDEFAULTBIND = 0x20,
    VARFLAG_FHIDDEN = 0x40,
    VARFLAG_FRESTRICTED = 0x80,
    VARFLAG_FDEFAULTCOLLELEM = 0x100,
    VARFLAG_FUIDEFAULT = 0x200,
    VARFLAG_FNONBROWSABLE = 0x400,
    VARFLAG_FREPLACEABLE = 0x800,
    VARFLAG_FIMMEDIATEBIND = 0x1000
} VARFLAGS;
typedef struct tagCLEANLOCALSTORAGE {
    IUnknown *pInterface;
    PVOID pStorage;
    DWORD flags;
} CLEANLOCALSTORAGE;
typedef struct tagCUSTDATAITEM {
    GUID guid;
    VARIANTARG varValue;
} CUSTDATAITEM;
typedef struct tagCUSTDATAITEM *LPCUSTDATAITEM;
typedef struct tagCUSTDATA {
    DWORD cCustData;
    LPCUSTDATAITEM prgCustData;
} CUSTDATA;
typedef struct tagCUSTDATA *LPCUSTDATA;









typedef IDispatch *LPDISPATCH;
















extern const GUID IID_IDispatch ;


































typedef struct IDispatchVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IDispatch *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IDispatch *This);

    ULONG ( *Release)(
        IDispatch *This);

    
    HRESULT ( *GetTypeInfoCount)(
        IDispatch *This,
        UINT *pctinfo);

    HRESULT ( *GetTypeInfo)(
        IDispatch *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT ( *GetIDsOfNames)(
        IDispatch *This,
        const IID* const riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT ( *Invoke)(
        IDispatch *This,
        DISPID dispIdMember,
        const IID* const riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    
} IDispatchVtbl;

struct IDispatch {
    const IDispatchVtbl* lpVtbl;
};









































HRESULT  IDispatch_RemoteInvoke_Proxy(
    IDispatch* This,
    DISPID dispIdMember,
    const IID* const riid,
    LCID lcid,
    DWORD dwFlags,
    DISPPARAMS *pDispParams,
    VARIANT *pVarResult,
    EXCEPINFO *pExcepInfo,
    UINT *pArgErr,
    UINT cVarRef,
    UINT *rgVarRefIdx,
    VARIANTARG *rgVarRef);
void  IDispatch_RemoteInvoke_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IDispatch_Invoke_Proxy(
    IDispatch* This,
    DISPID dispIdMember,
    const IID* const riid,
    LCID lcid,
    WORD wFlags,
    DISPPARAMS *pDispParams,
    VARIANT *pVarResult,
    EXCEPINFO *pExcepInfo,
    UINT *puArgErr);
HRESULT  IDispatch_Invoke_Stub(
    IDispatch* This,
    DISPID dispIdMember,
    const IID* const riid,
    LCID lcid,
    DWORD dwFlags,
    DISPPARAMS *pDispParams,
    VARIANT *pVarResult,
    EXCEPINFO *pExcepInfo,
    UINT *pArgErr,
    UINT cVarRef,
    UINT *rgVarRefIdx,
    VARIANTARG *rgVarRef);









typedef IEnumVARIANT *LPENUMVARIANT;
extern const GUID IID_IEnumVARIANT ;























typedef struct IEnumVARIANTVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IEnumVARIANT *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IEnumVARIANT *This);

    ULONG ( *Release)(
        IEnumVARIANT *This);

    
    HRESULT ( *Next)(
        IEnumVARIANT *This,
        ULONG celt,
        VARIANT *rgVar,
        ULONG *pCeltFetched);

    HRESULT ( *Skip)(
        IEnumVARIANT *This,
        ULONG celt);

    HRESULT ( *Reset)(
        IEnumVARIANT *This);

    HRESULT ( *Clone)(
        IEnumVARIANT *This,
        IEnumVARIANT **ppEnum);

    
} IEnumVARIANTVtbl;

struct IEnumVARIANT {
    const IEnumVARIANTVtbl* lpVtbl;
};









































HRESULT  IEnumVARIANT_RemoteNext_Proxy(
    IEnumVARIANT* This,
    ULONG celt,
    VARIANT *rgVar,
    ULONG *pCeltFetched);
void  IEnumVARIANT_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IEnumVARIANT_Next_Proxy(
    IEnumVARIANT* This,
    ULONG celt,
    VARIANT *rgVar,
    ULONG *pCeltFetched);
HRESULT  IEnumVARIANT_Next_Stub(
    IEnumVARIANT* This,
    ULONG celt,
    VARIANT *rgVar,
    ULONG *pCeltFetched);









typedef ITypeComp *LPTYPECOMP;
typedef enum tagDESCKIND {
    DESCKIND_NONE = 0,
    DESCKIND_FUNCDESC = 1,
    DESCKIND_VARDESC = 2,
    DESCKIND_TYPECOMP = 3,
    DESCKIND_IMPLICITAPPOBJ = 4,
    DESCKIND_MAX = 5
} DESCKIND;
typedef union tagBINDPTR {
    FUNCDESC *lpfuncdesc;
    VARDESC *lpvardesc;
    ITypeComp *lptcomp;
} BINDPTR;
typedef union tagBINDPTR *LPBINDPTR;
extern const GUID IID_ITypeComp ;























typedef struct ITypeCompVtbl {
    

    
    HRESULT ( *QueryInterface)(
        ITypeComp *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ITypeComp *This);

    ULONG ( *Release)(
        ITypeComp *This);

    
    HRESULT ( *Bind)(
        ITypeComp *This,
        LPOLESTR szName,
        ULONG lHashVal,
        WORD wFlags,
        ITypeInfo **ppTInfo,
        DESCKIND *pDescKind,
        BINDPTR *pBindPtr);

    HRESULT ( *BindType)(
        ITypeComp *This,
        LPOLESTR szName,
        ULONG lHashVal,
        ITypeInfo **ppTInfo,
        ITypeComp **ppTComp);

    
} ITypeCompVtbl;

struct ITypeComp {
    const ITypeCompVtbl* lpVtbl;
};

































HRESULT  ITypeComp_RemoteBind_Proxy(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    WORD wFlags,
    ITypeInfo **ppTInfo,
    DESCKIND *pDescKind,
    LPFUNCDESC *ppFuncDesc,
    LPVARDESC *ppVarDesc,
    ITypeComp **ppTypeComp,
    CLEANLOCALSTORAGE *pDummy);
void  ITypeComp_RemoteBind_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeComp_RemoteBindType_Proxy(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    ITypeInfo **ppTInfo);
void  ITypeComp_RemoteBindType_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeComp_Bind_Proxy(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    WORD wFlags,
    ITypeInfo **ppTInfo,
    DESCKIND *pDescKind,
    BINDPTR *pBindPtr);
HRESULT  ITypeComp_Bind_Stub(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    WORD wFlags,
    ITypeInfo **ppTInfo,
    DESCKIND *pDescKind,
    LPFUNCDESC *ppFuncDesc,
    LPVARDESC *ppVarDesc,
    ITypeComp **ppTypeComp,
    CLEANLOCALSTORAGE *pDummy);
HRESULT  ITypeComp_BindType_Proxy(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    ITypeInfo **ppTInfo,
    ITypeComp **ppTComp);
HRESULT  ITypeComp_BindType_Stub(
    ITypeComp* This,
    LPOLESTR szName,
    ULONG lHashVal,
    ITypeInfo **ppTInfo);









typedef ITypeInfo *LPTYPEINFO;
extern const GUID IID_ITypeInfo ;
































































































typedef struct ITypeInfoVtbl {
    

    
    HRESULT ( *QueryInterface)(
        ITypeInfo *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ITypeInfo *This);

    ULONG ( *Release)(
        ITypeInfo *This);

    
    HRESULT ( *GetTypeAttr)(
        ITypeInfo *This,
        TYPEATTR **ppTypeAttr);

    HRESULT ( *GetTypeComp)(
        ITypeInfo *This,
        ITypeComp **ppTComp);

    HRESULT ( *GetFuncDesc)(
        ITypeInfo *This,
        UINT index,
        FUNCDESC **ppFuncDesc);

    HRESULT ( *GetVarDesc)(
        ITypeInfo *This,
        UINT index,
        VARDESC **ppVarDesc);

    HRESULT ( *GetNames)(
        ITypeInfo *This,
        MEMBERID memid,
        BSTR *rgBstrNames,
        UINT cMaxNames,
        UINT *pcNames);

    HRESULT ( *GetRefTypeOfImplType)(
        ITypeInfo *This,
        UINT index,
        HREFTYPE *pRefType);

    HRESULT ( *GetImplTypeFlags)(
        ITypeInfo *This,
        UINT index,
        INT *pImplTypeFlags);

    HRESULT ( *GetIDsOfNames)(
        ITypeInfo *This,
        LPOLESTR *rgszNames,
        UINT cNames,
        MEMBERID *pMemId);

    HRESULT ( *Invoke)(
        ITypeInfo *This,
        PVOID pvInstance,
        MEMBERID memid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    HRESULT ( *GetDocumentation)(
        ITypeInfo *This,
        MEMBERID memid,
        BSTR *pBstrName,
        BSTR *pBstrDocString,
        DWORD *pdwHelpContext,
        BSTR *pBstrHelpFile);

    HRESULT ( *GetDllEntry)(
        ITypeInfo *This,
        MEMBERID memid,
        INVOKEKIND invKind,
        BSTR *pBstrDllName,
        BSTR *pBstrName,
        WORD *pwOrdinal);

    HRESULT ( *GetRefTypeInfo)(
        ITypeInfo *This,
        HREFTYPE hRefType,
        ITypeInfo **ppTInfo);

    HRESULT ( *AddressOfMember)(
        ITypeInfo *This,
        MEMBERID memid,
        INVOKEKIND invKind,
        PVOID *ppv);

    HRESULT ( *CreateInstance)(
        ITypeInfo *This,
        IUnknown *pUnkOuter,
        const IID* const riid,
        PVOID *ppvObj);

    HRESULT ( *GetMops)(
        ITypeInfo *This,
        MEMBERID memid,
        BSTR *pBstrMops);

    HRESULT ( *GetContainingTypeLib)(
        ITypeInfo *This,
        ITypeLib **ppTLib,
        UINT *pIndex);

    void ( *ReleaseTypeAttr)(
        ITypeInfo *This,
        TYPEATTR *pTypeAttr);

    void ( *ReleaseFuncDesc)(
        ITypeInfo *This,
        FUNCDESC *pFuncDesc);

    void ( *ReleaseVarDesc)(
        ITypeInfo *This,
        VARDESC *pVarDesc);

    
} ITypeInfoVtbl;

struct ITypeInfo {
    const ITypeInfoVtbl* lpVtbl;
};





































































































HRESULT  ITypeInfo_RemoteGetTypeAttr_Proxy(
    ITypeInfo* This,
    LPTYPEATTR *ppTypeAttr,
    CLEANLOCALSTORAGE *pDummy);
void  ITypeInfo_RemoteGetTypeAttr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeInfo_RemoteGetFuncDesc_Proxy(
    ITypeInfo* This,
    UINT index,
    LPFUNCDESC *ppFuncDesc,
    CLEANLOCALSTORAGE *pDummy);
void  ITypeInfo_RemoteGetFuncDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeInfo_RemoteGetVarDesc_Proxy(
    ITypeInfo* This,
    UINT index,
    LPVARDESC *ppVarDesc,
    CLEANLOCALSTORAGE *pDummy);
void  ITypeInfo_RemoteGetVarDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeInfo_RemoteGetNames_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    BSTR *rgBstrNames,
    UINT cMaxNames,
    UINT *pcNames);
void  ITypeInfo_RemoteGetNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeInfo_LocalGetIDsOfNames_Proxy(
    ITypeInfo* This);
void  ITypeInfo_LocalGetIDsOfNames_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeInfo_LocalInvoke_Proxy(
    ITypeInfo* This);
void  ITypeInfo_LocalInvoke_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeInfo_RemoteGetDocumentation_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    DWORD refPtrFlags,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
void  ITypeInfo_RemoteGetDocumentation_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeInfo_RemoteGetDllEntry_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    INVOKEKIND invKind,
    DWORD refPtrFlags,
    BSTR *pBstrDllName,
    BSTR *pBstrName,
    WORD *pwOrdinal);
void  ITypeInfo_RemoteGetDllEntry_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeInfo_LocalAddressOfMember_Proxy(
    ITypeInfo* This);
void  ITypeInfo_LocalAddressOfMember_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeInfo_RemoteCreateInstance_Proxy(
    ITypeInfo* This,
    const IID* const riid,
    IUnknown **ppvObj);
void  ITypeInfo_RemoteCreateInstance_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeInfo_RemoteGetContainingTypeLib_Proxy(
    ITypeInfo* This,
    ITypeLib **ppTLib,
    UINT *pIndex);
void  ITypeInfo_RemoteGetContainingTypeLib_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeInfo_LocalReleaseTypeAttr_Proxy(
    ITypeInfo* This);
void  ITypeInfo_LocalReleaseTypeAttr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeInfo_LocalReleaseFuncDesc_Proxy(
    ITypeInfo* This);
void  ITypeInfo_LocalReleaseFuncDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeInfo_LocalReleaseVarDesc_Proxy(
    ITypeInfo* This);
void  ITypeInfo_LocalReleaseVarDesc_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeInfo_GetTypeAttr_Proxy(
    ITypeInfo* This,
    TYPEATTR **ppTypeAttr);
HRESULT  ITypeInfo_GetTypeAttr_Stub(
    ITypeInfo* This,
    LPTYPEATTR *ppTypeAttr,
    CLEANLOCALSTORAGE *pDummy);
HRESULT  ITypeInfo_GetFuncDesc_Proxy(
    ITypeInfo* This,
    UINT index,
    FUNCDESC **ppFuncDesc);
HRESULT  ITypeInfo_GetFuncDesc_Stub(
    ITypeInfo* This,
    UINT index,
    LPFUNCDESC *ppFuncDesc,
    CLEANLOCALSTORAGE *pDummy);
HRESULT  ITypeInfo_GetVarDesc_Proxy(
    ITypeInfo* This,
    UINT index,
    VARDESC **ppVarDesc);
HRESULT  ITypeInfo_GetVarDesc_Stub(
    ITypeInfo* This,
    UINT index,
    LPVARDESC *ppVarDesc,
    CLEANLOCALSTORAGE *pDummy);
HRESULT  ITypeInfo_GetNames_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    BSTR *rgBstrNames,
    UINT cMaxNames,
    UINT *pcNames);
HRESULT  ITypeInfo_GetNames_Stub(
    ITypeInfo* This,
    MEMBERID memid,
    BSTR *rgBstrNames,
    UINT cMaxNames,
    UINT *pcNames);
HRESULT  ITypeInfo_GetIDsOfNames_Proxy(
    ITypeInfo* This,
    LPOLESTR *rgszNames,
    UINT cNames,
    MEMBERID *pMemId);
HRESULT  ITypeInfo_GetIDsOfNames_Stub(
    ITypeInfo* This);
HRESULT  ITypeInfo_Invoke_Proxy(
    ITypeInfo* This,
    PVOID pvInstance,
    MEMBERID memid,
    WORD wFlags,
    DISPPARAMS *pDispParams,
    VARIANT *pVarResult,
    EXCEPINFO *pExcepInfo,
    UINT *puArgErr);
HRESULT  ITypeInfo_Invoke_Stub(
    ITypeInfo* This);
HRESULT  ITypeInfo_GetDocumentation_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
HRESULT  ITypeInfo_GetDocumentation_Stub(
    ITypeInfo* This,
    MEMBERID memid,
    DWORD refPtrFlags,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
HRESULT  ITypeInfo_GetDllEntry_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    INVOKEKIND invKind,
    BSTR *pBstrDllName,
    BSTR *pBstrName,
    WORD *pwOrdinal);
HRESULT  ITypeInfo_GetDllEntry_Stub(
    ITypeInfo* This,
    MEMBERID memid,
    INVOKEKIND invKind,
    DWORD refPtrFlags,
    BSTR *pBstrDllName,
    BSTR *pBstrName,
    WORD *pwOrdinal);
HRESULT  ITypeInfo_AddressOfMember_Proxy(
    ITypeInfo* This,
    MEMBERID memid,
    INVOKEKIND invKind,
    PVOID *ppv);
HRESULT  ITypeInfo_AddressOfMember_Stub(
    ITypeInfo* This);
HRESULT  ITypeInfo_CreateInstance_Proxy(
    ITypeInfo* This,
    IUnknown *pUnkOuter,
    const IID* const riid,
    PVOID *ppvObj);
HRESULT  ITypeInfo_CreateInstance_Stub(
    ITypeInfo* This,
    const IID* const riid,
    IUnknown **ppvObj);
HRESULT  ITypeInfo_GetContainingTypeLib_Proxy(
    ITypeInfo* This,
    ITypeLib **ppTLib,
    UINT *pIndex);
HRESULT  ITypeInfo_GetContainingTypeLib_Stub(
    ITypeInfo* This,
    ITypeLib **ppTLib,
    UINT *pIndex);
void  ITypeInfo_ReleaseTypeAttr_Proxy(
    ITypeInfo* This,
    TYPEATTR *pTypeAttr);
HRESULT  ITypeInfo_ReleaseTypeAttr_Stub(
    ITypeInfo* This);
void  ITypeInfo_ReleaseFuncDesc_Proxy(
    ITypeInfo* This,
    FUNCDESC *pFuncDesc);
HRESULT  ITypeInfo_ReleaseFuncDesc_Stub(
    ITypeInfo* This);
void  ITypeInfo_ReleaseVarDesc_Proxy(
    ITypeInfo* This,
    VARDESC *pVarDesc);
HRESULT  ITypeInfo_ReleaseVarDesc_Stub(
    ITypeInfo* This);









typedef ITypeInfo2 *LPTYPEINFO2;
extern const GUID IID_ITypeInfo2 ;












































































typedef struct ITypeInfo2Vtbl {
    

    
    HRESULT ( *QueryInterface)(
        ITypeInfo2 *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ITypeInfo2 *This);

    ULONG ( *Release)(
        ITypeInfo2 *This);

    
    HRESULT ( *GetTypeAttr)(
        ITypeInfo2 *This,
        TYPEATTR **ppTypeAttr);

    HRESULT ( *GetTypeComp)(
        ITypeInfo2 *This,
        ITypeComp **ppTComp);

    HRESULT ( *GetFuncDesc)(
        ITypeInfo2 *This,
        UINT index,
        FUNCDESC **ppFuncDesc);

    HRESULT ( *GetVarDesc)(
        ITypeInfo2 *This,
        UINT index,
        VARDESC **ppVarDesc);

    HRESULT ( *GetNames)(
        ITypeInfo2 *This,
        MEMBERID memid,
        BSTR *rgBstrNames,
        UINT cMaxNames,
        UINT *pcNames);

    HRESULT ( *GetRefTypeOfImplType)(
        ITypeInfo2 *This,
        UINT index,
        HREFTYPE *pRefType);

    HRESULT ( *GetImplTypeFlags)(
        ITypeInfo2 *This,
        UINT index,
        INT *pImplTypeFlags);

    HRESULT ( *GetIDsOfNames)(
        ITypeInfo2 *This,
        LPOLESTR *rgszNames,
        UINT cNames,
        MEMBERID *pMemId);

    HRESULT ( *Invoke)(
        ITypeInfo2 *This,
        PVOID pvInstance,
        MEMBERID memid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    HRESULT ( *GetDocumentation)(
        ITypeInfo2 *This,
        MEMBERID memid,
        BSTR *pBstrName,
        BSTR *pBstrDocString,
        DWORD *pdwHelpContext,
        BSTR *pBstrHelpFile);

    HRESULT ( *GetDllEntry)(
        ITypeInfo2 *This,
        MEMBERID memid,
        INVOKEKIND invKind,
        BSTR *pBstrDllName,
        BSTR *pBstrName,
        WORD *pwOrdinal);

    HRESULT ( *GetRefTypeInfo)(
        ITypeInfo2 *This,
        HREFTYPE hRefType,
        ITypeInfo **ppTInfo);

    HRESULT ( *AddressOfMember)(
        ITypeInfo2 *This,
        MEMBERID memid,
        INVOKEKIND invKind,
        PVOID *ppv);

    HRESULT ( *CreateInstance)(
        ITypeInfo2 *This,
        IUnknown *pUnkOuter,
        const IID* const riid,
        PVOID *ppvObj);

    HRESULT ( *GetMops)(
        ITypeInfo2 *This,
        MEMBERID memid,
        BSTR *pBstrMops);

    HRESULT ( *GetContainingTypeLib)(
        ITypeInfo2 *This,
        ITypeLib **ppTLib,
        UINT *pIndex);

    void ( *ReleaseTypeAttr)(
        ITypeInfo2 *This,
        TYPEATTR *pTypeAttr);

    void ( *ReleaseFuncDesc)(
        ITypeInfo2 *This,
        FUNCDESC *pFuncDesc);

    void ( *ReleaseVarDesc)(
        ITypeInfo2 *This,
        VARDESC *pVarDesc);

    
    HRESULT ( *GetTypeKind)(
        ITypeInfo2 *This,
        TYPEKIND *pTypeKind);

    HRESULT ( *GetTypeFlags)(
        ITypeInfo2 *This,
        ULONG *pTypeFlags);

    HRESULT ( *GetFuncIndexOfMemId)(
        ITypeInfo2 *This,
        MEMBERID memid,
        INVOKEKIND invKind,
        UINT *pFuncIndex);

    HRESULT ( *GetVarIndexOfMemId)(
        ITypeInfo2 *This,
        MEMBERID memid,
        UINT *pVarIndex);

    HRESULT ( *GetCustData)(
        ITypeInfo2 *This,
        const GUID* const guid,
        VARIANT *pVarVal);

    HRESULT ( *GetFuncCustData)(
        ITypeInfo2 *This,
        UINT index,
        const GUID* const guid,
        VARIANT *pVarVal);

    HRESULT ( *GetParamCustData)(
        ITypeInfo2 *This,
        UINT indexFunc,
        UINT indexParam,
        const GUID* const guid,
        VARIANT *pVarVal);

    HRESULT ( *GetVarCustData)(
        ITypeInfo2 *This,
        UINT index,
        const GUID* const guid,
        VARIANT *pVarVal);

    HRESULT ( *GetImplTypeCustData)(
        ITypeInfo2 *This,
        UINT index,
        const GUID* const guid,
        VARIANT *pVarVal);

    HRESULT ( *GetDocumentation2)(
        ITypeInfo2 *This,
        MEMBERID memid,
        LCID lcid,
        BSTR *pbstrHelpString,
        DWORD *pdwHelpStringContext,
        BSTR *pbstrHelpStringDll);

    HRESULT ( *GetAllCustData)(
        ITypeInfo2 *This,
        CUSTDATA *pCustData);

    HRESULT ( *GetAllFuncCustData)(
        ITypeInfo2 *This,
        UINT index,
        CUSTDATA *pCustData);

    HRESULT ( *GetAllParamCustData)(
        ITypeInfo2 *This,
        UINT indexFunc,
        UINT indexParam,
        CUSTDATA *pCustData);

    HRESULT ( *GetAllVarCustData)(
        ITypeInfo2 *This,
        UINT index,
        CUSTDATA *pCustData);

    HRESULT ( *GetAllImplTypeCustData)(
        ITypeInfo2 *This,
        UINT index,
        CUSTDATA *pCustData);

    
} ITypeInfo2Vtbl;

struct ITypeInfo2 {
    const ITypeInfo2Vtbl* lpVtbl;
};



































































































































































HRESULT  ITypeInfo2_RemoteGetDocumentation2_Proxy(
    ITypeInfo2* This,
    MEMBERID memid,
    LCID lcid,
    DWORD refPtrFlags,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);
void  ITypeInfo2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeInfo2_GetDocumentation2_Proxy(
    ITypeInfo2* This,
    MEMBERID memid,
    LCID lcid,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);
HRESULT  ITypeInfo2_GetDocumentation2_Stub(
    ITypeInfo2* This,
    MEMBERID memid,
    LCID lcid,
    DWORD refPtrFlags,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);









typedef ITypeLib *LPTYPELIB;
typedef enum tagSYSKIND {
    SYS_WIN16 = 0,
    SYS_WIN32 = 1,
    SYS_MAC = 2,
    SYS_WIN64 = 3
} SYSKIND;
typedef enum tagLIBFLAGS {
    LIBFLAG_FRESTRICTED = 0x1,
    LIBFLAG_FCONTROL = 0x2,
    LIBFLAG_FHIDDEN = 0x4,
    LIBFLAG_FHASDISKIMAGE = 0x8
} LIBFLAGS;
typedef struct tagTLIBATTR {
    GUID guid;
    LCID lcid;
    SYSKIND syskind;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    WORD wLibFlags;
} TLIBATTR;
typedef struct tagTLIBATTR *LPTLIBATTR;
extern const GUID IID_ITypeLib ;




















































typedef struct ITypeLibVtbl {
    

    
    HRESULT ( *QueryInterface)(
        ITypeLib *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ITypeLib *This);

    ULONG ( *Release)(
        ITypeLib *This);

    
    UINT ( *GetTypeInfoCount)(
        ITypeLib *This);

    HRESULT ( *GetTypeInfo)(
        ITypeLib *This,
        UINT index,
        ITypeInfo **ppTInfo);

    HRESULT ( *GetTypeInfoType)(
        ITypeLib *This,
        UINT index,
        TYPEKIND *pTKind);

    HRESULT ( *GetTypeInfoOfGuid)(
        ITypeLib *This,
        const GUID* const guid,
        ITypeInfo **ppTinfo);

    HRESULT ( *GetLibAttr)(
        ITypeLib *This,
        TLIBATTR **ppTLibAttr);

    HRESULT ( *GetTypeComp)(
        ITypeLib *This,
        ITypeComp **ppTComp);

    HRESULT ( *GetDocumentation)(
        ITypeLib *This,
        INT index,
        BSTR *pBstrName,
        BSTR *pBstrDocString,
        DWORD *pdwHelpContext,
        BSTR *pBstrHelpFile);

    HRESULT ( *IsName)(
        ITypeLib *This,
        LPOLESTR szNameBuf,
        ULONG lHashVal,
        BOOL *pfName);

    HRESULT ( *FindName)(
        ITypeLib *This,
        LPOLESTR szNameBuf,
        ULONG lHashVal,
        ITypeInfo **ppTInfo,
        MEMBERID *rgMemId,
        USHORT *pcFound);

    void ( *ReleaseTLibAttr)(
        ITypeLib *This,
        TLIBATTR *pTLibAttr);

    
} ITypeLibVtbl;

struct ITypeLib {
    const ITypeLibVtbl* lpVtbl;
};

































































HRESULT  ITypeLib_RemoteGetTypeInfoCount_Proxy(
    ITypeLib* This,
    UINT *pcTInfo);
void  ITypeLib_RemoteGetTypeInfoCount_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeLib_RemoteGetLibAttr_Proxy(
    ITypeLib* This,
    LPTLIBATTR *ppTLibAttr,
    CLEANLOCALSTORAGE *pDummy);
void  ITypeLib_RemoteGetLibAttr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeLib_RemoteGetDocumentation_Proxy(
    ITypeLib* This,
    INT index,
    DWORD refPtrFlags,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
void  ITypeLib_RemoteGetDocumentation_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeLib_RemoteIsName_Proxy(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    BOOL *pfName,
    BSTR *pBstrLibName);
void  ITypeLib_RemoteIsName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeLib_RemoteFindName_Proxy(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    ITypeInfo **ppTInfo,
    MEMBERID *rgMemId,
    USHORT *pcFound,
    BSTR *pBstrLibName);
void  ITypeLib_RemoteFindName_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeLib_LocalReleaseTLibAttr_Proxy(
    ITypeLib* This);
void  ITypeLib_LocalReleaseTLibAttr_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
UINT  ITypeLib_GetTypeInfoCount_Proxy(
    ITypeLib* This);
HRESULT  ITypeLib_GetTypeInfoCount_Stub(
    ITypeLib* This,
    UINT *pcTInfo);
HRESULT  ITypeLib_GetLibAttr_Proxy(
    ITypeLib* This,
    TLIBATTR **ppTLibAttr);
HRESULT  ITypeLib_GetLibAttr_Stub(
    ITypeLib* This,
    LPTLIBATTR *ppTLibAttr,
    CLEANLOCALSTORAGE *pDummy);
HRESULT  ITypeLib_GetDocumentation_Proxy(
    ITypeLib* This,
    INT index,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
HRESULT  ITypeLib_GetDocumentation_Stub(
    ITypeLib* This,
    INT index,
    DWORD refPtrFlags,
    BSTR *pBstrName,
    BSTR *pBstrDocString,
    DWORD *pdwHelpContext,
    BSTR *pBstrHelpFile);
HRESULT  ITypeLib_IsName_Proxy(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    BOOL *pfName);
HRESULT  ITypeLib_IsName_Stub(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    BOOL *pfName,
    BSTR *pBstrLibName);
HRESULT  ITypeLib_FindName_Proxy(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    ITypeInfo **ppTInfo,
    MEMBERID *rgMemId,
    USHORT *pcFound);
HRESULT  ITypeLib_FindName_Stub(
    ITypeLib* This,
    LPOLESTR szNameBuf,
    ULONG lHashVal,
    ITypeInfo **ppTInfo,
    MEMBERID *rgMemId,
    USHORT *pcFound,
    BSTR *pBstrLibName);
void  ITypeLib_ReleaseTLibAttr_Proxy(
    ITypeLib* This,
    TLIBATTR *pTLibAttr);
HRESULT  ITypeLib_ReleaseTLibAttr_Stub(
    ITypeLib* This);









typedef ITypeLib2 *LPTYPELIB2;
extern const GUID IID_ITypeLib2 ;



























typedef struct ITypeLib2Vtbl {
    

    
    HRESULT ( *QueryInterface)(
        ITypeLib2 *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ITypeLib2 *This);

    ULONG ( *Release)(
        ITypeLib2 *This);

    
    UINT ( *GetTypeInfoCount)(
        ITypeLib2 *This);

    HRESULT ( *GetTypeInfo)(
        ITypeLib2 *This,
        UINT index,
        ITypeInfo **ppTInfo);

    HRESULT ( *GetTypeInfoType)(
        ITypeLib2 *This,
        UINT index,
        TYPEKIND *pTKind);

    HRESULT ( *GetTypeInfoOfGuid)(
        ITypeLib2 *This,
        const GUID* const guid,
        ITypeInfo **ppTinfo);

    HRESULT ( *GetLibAttr)(
        ITypeLib2 *This,
        TLIBATTR **ppTLibAttr);

    HRESULT ( *GetTypeComp)(
        ITypeLib2 *This,
        ITypeComp **ppTComp);

    HRESULT ( *GetDocumentation)(
        ITypeLib2 *This,
        INT index,
        BSTR *pBstrName,
        BSTR *pBstrDocString,
        DWORD *pdwHelpContext,
        BSTR *pBstrHelpFile);

    HRESULT ( *IsName)(
        ITypeLib2 *This,
        LPOLESTR szNameBuf,
        ULONG lHashVal,
        BOOL *pfName);

    HRESULT ( *FindName)(
        ITypeLib2 *This,
        LPOLESTR szNameBuf,
        ULONG lHashVal,
        ITypeInfo **ppTInfo,
        MEMBERID *rgMemId,
        USHORT *pcFound);

    void ( *ReleaseTLibAttr)(
        ITypeLib2 *This,
        TLIBATTR *pTLibAttr);

    
    HRESULT ( *GetCustData)(
        ITypeLib2 *This,
        const GUID* const guid,
        VARIANT *pVarVal);

    HRESULT ( *GetLibStatistics)(
        ITypeLib2 *This,
        ULONG *pcUniqueNames,
        ULONG *pcchUniqueNames);

    HRESULT ( *GetDocumentation2)(
        ITypeLib2 *This,
        INT index,
        LCID lcid,
        BSTR *pbstrHelpString,
        DWORD *pdwHelpStringContext,
        BSTR *pbstrHelpStringDll);

    HRESULT ( *GetAllCustData)(
        ITypeLib2 *This,
        CUSTDATA *pCustData);

    
} ITypeLib2Vtbl;

struct ITypeLib2 {
    const ITypeLib2Vtbl* lpVtbl;
};



















































































HRESULT  ITypeLib2_RemoteGetLibStatistics_Proxy(
    ITypeLib2* This,
    ULONG *pcUniqueNames,
    ULONG *pcchUniqueNames);
void  ITypeLib2_RemoteGetLibStatistics_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeLib2_RemoteGetDocumentation2_Proxy(
    ITypeLib2* This,
    INT index,
    LCID lcid,
    DWORD refPtrFlags,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);
void  ITypeLib2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  ITypeLib2_GetLibStatistics_Proxy(
    ITypeLib2* This,
    ULONG *pcUniqueNames,
    ULONG *pcchUniqueNames);
HRESULT  ITypeLib2_GetLibStatistics_Stub(
    ITypeLib2* This,
    ULONG *pcUniqueNames,
    ULONG *pcchUniqueNames);
HRESULT  ITypeLib2_GetDocumentation2_Proxy(
    ITypeLib2* This,
    INT index,
    LCID lcid,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);
HRESULT  ITypeLib2_GetDocumentation2_Stub(
    ITypeLib2* This,
    INT index,
    LCID lcid,
    DWORD refPtrFlags,
    BSTR *pbstrHelpString,
    DWORD *pdwHelpStringContext,
    BSTR *pbstrHelpStringDll);









typedef ITypeChangeEvents *LPTYPECHANGEEVENTS;
typedef enum tagCHANGEKIND {
    CHANGEKIND_ADDMEMBER = 0,
    CHANGEKIND_DELETEMEMBER = 1,
    CHANGEKIND_SETNAMES = 2,
    CHANGEKIND_SETDOCUMENTATION = 3,
    CHANGEKIND_GENERAL = 4,
    CHANGEKIND_INVALIDATE = 5,
    CHANGEKIND_CHANGEFAILED = 6,
    CHANGEKIND_MAX = 7
} CHANGEKIND;
extern const GUID IID_ITypeChangeEvents ;




















typedef struct ITypeChangeEventsVtbl {
    

    
    HRESULT ( *QueryInterface)(
        ITypeChangeEvents *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ITypeChangeEvents *This);

    ULONG ( *Release)(
        ITypeChangeEvents *This);

    
    HRESULT ( *RequestTypeChange)(
        ITypeChangeEvents *This,
        CHANGEKIND changeKind,
        ITypeInfo *pTInfoBefore,
        LPOLESTR pStrName,
        INT *pfCancel);

    HRESULT ( *AfterTypeChange)(
        ITypeChangeEvents *This,
        CHANGEKIND changeKind,
        ITypeInfo *pTInfoAfter,
        LPOLESTR pStrName);

    
} ITypeChangeEventsVtbl;

struct ITypeChangeEvents {
    const ITypeChangeEventsVtbl* lpVtbl;
};










































typedef IErrorInfo *LPERRORINFO;
extern const GUID IID_IErrorInfo ;
























typedef struct IErrorInfoVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IErrorInfo *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IErrorInfo *This);

    ULONG ( *Release)(
        IErrorInfo *This);

    
    HRESULT ( *GetGUID)(
        IErrorInfo *This,
        GUID *pGUID);

    HRESULT ( *GetSource)(
        IErrorInfo *This,
        BSTR *pBstrSource);

    HRESULT ( *GetDescription)(
        IErrorInfo *This,
        BSTR *pBstrDescription);

    HRESULT ( *GetHelpFile)(
        IErrorInfo *This,
        BSTR *pBstrHelpFile);

    HRESULT ( *GetHelpContext)(
        IErrorInfo *This,
        DWORD *pdwHelpContext);

    
} IErrorInfoVtbl;

struct IErrorInfo {
    const IErrorInfoVtbl* lpVtbl;
};






















































typedef ICreateErrorInfo *LPCREATEERRORINFO;
extern const GUID IID_ICreateErrorInfo ;
























typedef struct ICreateErrorInfoVtbl {
    

    
    HRESULT ( *QueryInterface)(
        ICreateErrorInfo *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ICreateErrorInfo *This);

    ULONG ( *Release)(
        ICreateErrorInfo *This);

    
    HRESULT ( *SetGUID)(
        ICreateErrorInfo *This,
        const GUID* const rguid);

    HRESULT ( *SetSource)(
        ICreateErrorInfo *This,
        LPOLESTR szSource);

    HRESULT ( *SetDescription)(
        ICreateErrorInfo *This,
        LPOLESTR szDescription);

    HRESULT ( *SetHelpFile)(
        ICreateErrorInfo *This,
        LPOLESTR szHelpFile);

    HRESULT ( *SetHelpContext)(
        ICreateErrorInfo *This,
        DWORD dwHelpContext);

    
} ICreateErrorInfoVtbl;

struct ICreateErrorInfo {
    const ICreateErrorInfoVtbl* lpVtbl;
};






















































typedef ISupportErrorInfo *LPSUPPORTERRORINFO;
extern const GUID IID_ISupportErrorInfo ;












typedef struct ISupportErrorInfoVtbl {
    

    
    HRESULT ( *QueryInterface)(
        ISupportErrorInfo *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ISupportErrorInfo *This);

    ULONG ( *Release)(
        ISupportErrorInfo *This);

    
    HRESULT ( *InterfaceSupportsErrorInfo)(
        ISupportErrorInfo *This,
        const IID* const riid);

    
} ISupportErrorInfoVtbl;

struct ISupportErrorInfo {
    const ISupportErrorInfoVtbl* lpVtbl;
};






































extern const GUID IID_ITypeFactory ;














typedef struct ITypeFactoryVtbl {
    

    
    HRESULT ( *QueryInterface)(
        ITypeFactory *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ITypeFactory *This);

    ULONG ( *Release)(
        ITypeFactory *This);

    
    HRESULT ( *CreateFromTypeInfo)(
        ITypeFactory *This,
        ITypeInfo *pTypeInfo,
        const IID* const riid,
        IUnknown **ppv);

    
} ITypeFactoryVtbl;

struct ITypeFactory {
    const ITypeFactoryVtbl* lpVtbl;
};






































extern const GUID IID_ITypeMarshal ;

































typedef struct ITypeMarshalVtbl {
    

    
    HRESULT ( *QueryInterface)(
        ITypeMarshal *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ITypeMarshal *This);

    ULONG ( *Release)(
        ITypeMarshal *This);

    
    HRESULT ( *Size)(
        ITypeMarshal *This,
        PVOID pvType,
        DWORD dwDestContext,
        PVOID pvDestContext,
        ULONG *pSize);

    HRESULT ( *Marshal)(
        ITypeMarshal *This,
        PVOID pvType,
        DWORD dwDestContext,
        PVOID pvDestContext,
        ULONG cbBufferLength,
        BYTE *pBuffer,
        ULONG *pcbWritten);

    HRESULT ( *Unmarshal)(
        ITypeMarshal *This,
        PVOID pvType,
        DWORD dwFlags,
        ULONG cbBufferLength,
        BYTE *pBuffer,
        ULONG *pcbRead);

    HRESULT ( *Free)(
        ITypeMarshal *This,
        PVOID pvType);

    
} ITypeMarshalVtbl;

struct ITypeMarshal {
    const ITypeMarshalVtbl* lpVtbl;
};


















































typedef IRecordInfo *LPRECORDINFO;
extern const GUID IID_IRecordInfo ;







































































typedef struct IRecordInfoVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IRecordInfo *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IRecordInfo *This);

    ULONG ( *Release)(
        IRecordInfo *This);

    
    HRESULT ( *RecordInit)(
        IRecordInfo *This,
        PVOID pvNew);

    HRESULT ( *RecordClear)(
        IRecordInfo *This,
        PVOID pvExisting);

    HRESULT ( *RecordCopy)(
        IRecordInfo *This,
        PVOID pvExisting,
        PVOID pvNew);

    HRESULT ( *GetGuid)(
        IRecordInfo *This,
        GUID *pguid);

    HRESULT ( *GetName)(
        IRecordInfo *This,
        BSTR *pbstrName);

    HRESULT ( *GetSize)(
        IRecordInfo *This,
        ULONG *pcbSize);

    HRESULT ( *GetTypeInfo)(
        IRecordInfo *This,
        ITypeInfo **ppTypeInfo);

    HRESULT ( *GetField)(
        IRecordInfo *This,
        PVOID pvData,
        LPCOLESTR szFieldName,
        VARIANT *pvarField);

    HRESULT ( *GetFieldNoCopy)(
        IRecordInfo *This,
        PVOID pvData,
        LPCOLESTR szFieldName,
        VARIANT *pvarField,
        PVOID *ppvDataCArray);

    HRESULT ( *PutField)(
        IRecordInfo *This,
        ULONG wFlags,
        PVOID pvData,
        LPCOLESTR szFieldName,
        VARIANT *pvarField);

    HRESULT ( *PutFieldNoCopy)(
        IRecordInfo *This,
        ULONG wFlags,
        PVOID pvData,
        LPCOLESTR szFieldName,
        VARIANT *pvarField);

    HRESULT ( *GetFieldNames)(
        IRecordInfo *This,
        ULONG *pcNames,
        BSTR *rgBstrNames);

    BOOL ( *IsMatchingType)(
        IRecordInfo *This,
        IRecordInfo *pRecordInfo);

    PVOID ( *RecordCreate)(
        IRecordInfo *This);

    HRESULT ( *RecordCreateCopy)(
        IRecordInfo *This,
        PVOID pvSource,
        PVOID *ppvDest);

    HRESULT ( *RecordDestroy)(
        IRecordInfo *This,
        PVOID pvRecord);

    
} IRecordInfoVtbl;

struct IRecordInfo {
    const IRecordInfoVtbl* lpVtbl;
};


































































































typedef ICreateTypeInfo *LPCREATETYPEINFO;
extern const GUID IID_ICreateTypeInfo ;






























































































typedef struct ICreateTypeInfoVtbl {
    

    
    HRESULT ( *QueryInterface)(
        ICreateTypeInfo *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ICreateTypeInfo *This);

    ULONG ( *Release)(
        ICreateTypeInfo *This);

    
    HRESULT ( *SetGuid)(
        ICreateTypeInfo *This,
        const GUID* const guid);

    HRESULT ( *SetTypeFlags)(
        ICreateTypeInfo *This,
        UINT uTypeFlags);

    HRESULT ( *SetDocString)(
        ICreateTypeInfo *This,
        LPOLESTR pStrDoc);

    HRESULT ( *SetHelpContext)(
        ICreateTypeInfo *This,
        DWORD dwHelpContext);

    HRESULT ( *SetVersion)(
        ICreateTypeInfo *This,
        WORD wMajorVerNum,
        WORD wMinorVerNum);

    HRESULT ( *AddRefTypeInfo)(
        ICreateTypeInfo *This,
        ITypeInfo *pTInfo,
        HREFTYPE *phRefType);

    HRESULT ( *AddFuncDesc)(
        ICreateTypeInfo *This,
        UINT index,
        FUNCDESC *pFuncDesc);

    HRESULT ( *AddImplType)(
        ICreateTypeInfo *This,
        UINT index,
        HREFTYPE hRefType);

    HRESULT ( *SetImplTypeFlags)(
        ICreateTypeInfo *This,
        UINT index,
        INT implTypeFlags);

    HRESULT ( *SetAlignment)(
        ICreateTypeInfo *This,
        WORD cbAlignment);

    HRESULT ( *SetSchema)(
        ICreateTypeInfo *This,
        LPOLESTR pStrSchema);

    HRESULT ( *AddVarDesc)(
        ICreateTypeInfo *This,
        UINT index,
        VARDESC *pVarDesc);

    HRESULT ( *SetFuncAndParamNames)(
        ICreateTypeInfo *This,
        UINT index,
        LPOLESTR *rgszNames,
        UINT cNames);

    HRESULT ( *SetVarName)(
        ICreateTypeInfo *This,
        UINT index,
        LPOLESTR szName);

    HRESULT ( *SetTypeDescAlias)(
        ICreateTypeInfo *This,
        TYPEDESC *pTDescAlias);

    HRESULT ( *DefineFuncAsDllEntry)(
        ICreateTypeInfo *This,
        UINT index,
        LPOLESTR szDllName,
        LPOLESTR szProcName);

    HRESULT ( *SetFuncDocString)(
        ICreateTypeInfo *This,
        UINT index,
        LPOLESTR szDocString);

    HRESULT ( *SetVarDocString)(
        ICreateTypeInfo *This,
        UINT index,
        LPOLESTR szDocString);

    HRESULT ( *SetFuncHelpContext)(
        ICreateTypeInfo *This,
        UINT index,
        DWORD dwHelpContext);

    HRESULT ( *SetVarHelpContext)(
        ICreateTypeInfo *This,
        UINT index,
        DWORD dwHelpContext);

    HRESULT ( *SetMops)(
        ICreateTypeInfo *This,
        UINT index,
        BSTR bstrMops);

    HRESULT ( *SetTypeIdldesc)(
        ICreateTypeInfo *This,
        IDLDESC *pIdlDesc);

    HRESULT ( *LayOut)(
        ICreateTypeInfo *This);

    
} ICreateTypeInfoVtbl;

struct ICreateTypeInfo {
    const ICreateTypeInfoVtbl* lpVtbl;
};






























































































































typedef ICreateTypeInfo2 *LPCREATETYPEINFO2;
extern const GUID IID_ICreateTypeInfo2 ;



































































typedef struct ICreateTypeInfo2Vtbl {
    

    
    HRESULT ( *QueryInterface)(
        ICreateTypeInfo2 *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ICreateTypeInfo2 *This);

    ULONG ( *Release)(
        ICreateTypeInfo2 *This);

    
    HRESULT ( *SetGuid)(
        ICreateTypeInfo2 *This,
        const GUID* const guid);

    HRESULT ( *SetTypeFlags)(
        ICreateTypeInfo2 *This,
        UINT uTypeFlags);

    HRESULT ( *SetDocString)(
        ICreateTypeInfo2 *This,
        LPOLESTR pStrDoc);

    HRESULT ( *SetHelpContext)(
        ICreateTypeInfo2 *This,
        DWORD dwHelpContext);

    HRESULT ( *SetVersion)(
        ICreateTypeInfo2 *This,
        WORD wMajorVerNum,
        WORD wMinorVerNum);

    HRESULT ( *AddRefTypeInfo)(
        ICreateTypeInfo2 *This,
        ITypeInfo *pTInfo,
        HREFTYPE *phRefType);

    HRESULT ( *AddFuncDesc)(
        ICreateTypeInfo2 *This,
        UINT index,
        FUNCDESC *pFuncDesc);

    HRESULT ( *AddImplType)(
        ICreateTypeInfo2 *This,
        UINT index,
        HREFTYPE hRefType);

    HRESULT ( *SetImplTypeFlags)(
        ICreateTypeInfo2 *This,
        UINT index,
        INT implTypeFlags);

    HRESULT ( *SetAlignment)(
        ICreateTypeInfo2 *This,
        WORD cbAlignment);

    HRESULT ( *SetSchema)(
        ICreateTypeInfo2 *This,
        LPOLESTR pStrSchema);

    HRESULT ( *AddVarDesc)(
        ICreateTypeInfo2 *This,
        UINT index,
        VARDESC *pVarDesc);

    HRESULT ( *SetFuncAndParamNames)(
        ICreateTypeInfo2 *This,
        UINT index,
        LPOLESTR *rgszNames,
        UINT cNames);

    HRESULT ( *SetVarName)(
        ICreateTypeInfo2 *This,
        UINT index,
        LPOLESTR szName);

    HRESULT ( *SetTypeDescAlias)(
        ICreateTypeInfo2 *This,
        TYPEDESC *pTDescAlias);

    HRESULT ( *DefineFuncAsDllEntry)(
        ICreateTypeInfo2 *This,
        UINT index,
        LPOLESTR szDllName,
        LPOLESTR szProcName);

    HRESULT ( *SetFuncDocString)(
        ICreateTypeInfo2 *This,
        UINT index,
        LPOLESTR szDocString);

    HRESULT ( *SetVarDocString)(
        ICreateTypeInfo2 *This,
        UINT index,
        LPOLESTR szDocString);

    HRESULT ( *SetFuncHelpContext)(
        ICreateTypeInfo2 *This,
        UINT index,
        DWORD dwHelpContext);

    HRESULT ( *SetVarHelpContext)(
        ICreateTypeInfo2 *This,
        UINT index,
        DWORD dwHelpContext);

    HRESULT ( *SetMops)(
        ICreateTypeInfo2 *This,
        UINT index,
        BSTR bstrMops);

    HRESULT ( *SetTypeIdldesc)(
        ICreateTypeInfo2 *This,
        IDLDESC *pIdlDesc);

    HRESULT ( *LayOut)(
        ICreateTypeInfo2 *This);

    
    HRESULT ( *DeleteFuncDesc)(
        ICreateTypeInfo2 *This,
        UINT index);

    HRESULT ( *DeleteFuncDescByMemId)(
        ICreateTypeInfo2 *This,
        MEMBERID memid,
        INVOKEKIND invKind);

    HRESULT ( *DeleteVarDesc)(
        ICreateTypeInfo2 *This,
        UINT index);

    HRESULT ( *DeleteVarDescByMemId)(
        ICreateTypeInfo2 *This,
        MEMBERID memid);

    HRESULT ( *DeleteImplType)(
        ICreateTypeInfo2 *This,
        UINT index);

    HRESULT ( *SetCustData)(
        ICreateTypeInfo2 *This,
        const GUID* const guid,
        VARIANT *pVarVal);

    HRESULT ( *SetFuncCustData)(
        ICreateTypeInfo2 *This,
        UINT index,
        const GUID* const guid,
        VARIANT *pVarVal);

    HRESULT ( *SetParamCustData)(
        ICreateTypeInfo2 *This,
        UINT indexFunc,
        UINT indexParam,
        const GUID* const guid,
        VARIANT *pVarVal);

    HRESULT ( *SetVarCustData)(
        ICreateTypeInfo2 *This,
        UINT index,
        const GUID* const guid,
        VARIANT *pVarVal);

    HRESULT ( *SetImplTypeCustData)(
        ICreateTypeInfo2 *This,
        UINT index,
        const GUID* const guid,
        VARIANT *pVarVal);

    HRESULT ( *SetHelpStringContext)(
        ICreateTypeInfo2 *This,
        ULONG dwHelpStringContext);

    HRESULT ( *SetFuncHelpStringContext)(
        ICreateTypeInfo2 *This,
        UINT index,
        ULONG dwHelpStringContext);

    HRESULT ( *SetVarHelpStringContext)(
        ICreateTypeInfo2 *This,
        UINT index,
        ULONG dwHelpStringContext);

    HRESULT ( *Invalidate)(
        ICreateTypeInfo2 *This);

    HRESULT ( *SetName)(
        ICreateTypeInfo2 *This,
        LPOLESTR szName);

    
} ICreateTypeInfo2Vtbl;

struct ICreateTypeInfo2 {
    const ICreateTypeInfo2Vtbl* lpVtbl;
};




























































































































































































typedef ICreateTypeLib *LPCREATETYPELIB;
extern const GUID IID_ICreateTypeLib ;










































typedef struct ICreateTypeLibVtbl {
    

    
    HRESULT ( *QueryInterface)(
        ICreateTypeLib *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ICreateTypeLib *This);

    ULONG ( *Release)(
        ICreateTypeLib *This);

    
    HRESULT ( *CreateTypeInfo)(
        ICreateTypeLib *This,
        LPOLESTR szName,
        TYPEKIND tkind,
        ICreateTypeInfo **ppCTInfo);

    HRESULT ( *SetName)(
        ICreateTypeLib *This,
        LPOLESTR szName);

    HRESULT ( *SetVersion)(
        ICreateTypeLib *This,
        WORD wMajorVerNum,
        WORD wMinorVerNum);

    HRESULT ( *SetGuid)(
        ICreateTypeLib *This,
        const GUID* const guid);

    HRESULT ( *SetDocString)(
        ICreateTypeLib *This,
        LPOLESTR szDoc);

    HRESULT ( *SetHelpFileName)(
        ICreateTypeLib *This,
        LPOLESTR szHelpFileName);

    HRESULT ( *SetHelpContext)(
        ICreateTypeLib *This,
        DWORD dwHelpContext);

    HRESULT ( *SetLcid)(
        ICreateTypeLib *This,
        LCID lcid);

    HRESULT ( *SetLibFlags)(
        ICreateTypeLib *This,
        UINT uLibFlags);

    HRESULT ( *SaveAllChanges)(
        ICreateTypeLib *This);

    
} ICreateTypeLibVtbl;

struct ICreateTypeLib {
    const ICreateTypeLibVtbl* lpVtbl;
};










































































typedef ICreateTypeLib2 *LPCREATETYPELIB2;
extern const GUID IID_ICreateTypeLib2 ;






















typedef struct ICreateTypeLib2Vtbl {
    

    
    HRESULT ( *QueryInterface)(
        ICreateTypeLib2 *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        ICreateTypeLib2 *This);

    ULONG ( *Release)(
        ICreateTypeLib2 *This);

    
    HRESULT ( *CreateTypeInfo)(
        ICreateTypeLib2 *This,
        LPOLESTR szName,
        TYPEKIND tkind,
        ICreateTypeInfo **ppCTInfo);

    HRESULT ( *SetName)(
        ICreateTypeLib2 *This,
        LPOLESTR szName);

    HRESULT ( *SetVersion)(
        ICreateTypeLib2 *This,
        WORD wMajorVerNum,
        WORD wMinorVerNum);

    HRESULT ( *SetGuid)(
        ICreateTypeLib2 *This,
        const GUID* const guid);

    HRESULT ( *SetDocString)(
        ICreateTypeLib2 *This,
        LPOLESTR szDoc);

    HRESULT ( *SetHelpFileName)(
        ICreateTypeLib2 *This,
        LPOLESTR szHelpFileName);

    HRESULT ( *SetHelpContext)(
        ICreateTypeLib2 *This,
        DWORD dwHelpContext);

    HRESULT ( *SetLcid)(
        ICreateTypeLib2 *This,
        LCID lcid);

    HRESULT ( *SetLibFlags)(
        ICreateTypeLib2 *This,
        UINT uLibFlags);

    HRESULT ( *SaveAllChanges)(
        ICreateTypeLib2 *This);

    
    HRESULT ( *DeleteTypeInfo)(
        ICreateTypeLib2 *This,
        LPOLESTR szName);

    HRESULT ( *SetCustData)(
        ICreateTypeLib2 *This,
        const GUID* const guid,
        VARIANT *pVarVal);

    HRESULT ( *SetHelpStringContext)(
        ICreateTypeLib2 *This,
        ULONG dwHelpStringContext);

    HRESULT ( *SetHelpStringDll)(
        ICreateTypeLib2 *This,
        LPOLESTR szFileName);

    
} ICreateTypeLib2Vtbl;

struct ICreateTypeLib2 {
    const ICreateTypeLib2Vtbl* lpVtbl;
};




























































































typedef IErrorLog *LPERRORLOG;
extern const GUID IID_IErrorLog ;













typedef struct IErrorLogVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IErrorLog *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IErrorLog *This);

    ULONG ( *Release)(
        IErrorLog *This);

    
    HRESULT ( *AddError)(
        IErrorLog *This,
        LPCOLESTR pszPropName,
        EXCEPINFO *pExcepInfo);

    
} IErrorLogVtbl;

struct IErrorLog {
    const IErrorLogVtbl* lpVtbl;
};






































typedef IPropertyBag *LPPROPERTYBAG;
extern const GUID IID_IPropertyBag ;


















typedef struct IPropertyBagVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IPropertyBag *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IPropertyBag *This);

    ULONG ( *Release)(
        IPropertyBag *This);

    
    HRESULT ( *Read)(
        IPropertyBag *This,
        LPCOLESTR pszPropName,
        VARIANT *pVar,
        IErrorLog *pErrorLog);

    HRESULT ( *Write)(
        IPropertyBag *This,
        LPCOLESTR pszPropName,
        VARIANT *pVar);

    
} IPropertyBagVtbl;

struct IPropertyBag {
    const IPropertyBagVtbl* lpVtbl;
};

































HRESULT  IPropertyBag_RemoteRead_Proxy(
    IPropertyBag* This,
    LPCOLESTR pszPropName,
    VARIANT *pVar,
    IErrorLog *pErrorLog,
    DWORD varType,
    IUnknown *pUnkObj);
void  IPropertyBag_RemoteRead_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IPropertyBag_Read_Proxy(
    IPropertyBag* This,
    LPCOLESTR pszPropName,
    VARIANT *pVar,
    IErrorLog *pErrorLog);
HRESULT  IPropertyBag_Read_Stub(
    IPropertyBag* This,
    LPCOLESTR pszPropName,
    VARIANT *pVar,
    IErrorLog *pErrorLog,
    DWORD varType,
    IUnknown *pUnkObj);





ULONG            VARIANT_UserSize     (ULONG *, ULONG, VARIANT *);
unsigned char *  VARIANT_UserMarshal  (ULONG *, unsigned char *, VARIANT *);
unsigned char *  VARIANT_UserUnmarshal(ULONG *, unsigned char *, VARIANT *);
void             VARIANT_UserFree     (ULONG *, VARIANT *);
ULONG            BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char *  BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char *  BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void             BSTR_UserFree     (ULONG *, BSTR *);
ULONG            CLEANLOCALSTORAGE_UserSize     (ULONG *, ULONG, CLEANLOCALSTORAGE *);
unsigned char *  CLEANLOCALSTORAGE_UserMarshal  (ULONG *, unsigned char *, CLEANLOCALSTORAGE *);
unsigned char *  CLEANLOCALSTORAGE_UserUnmarshal(ULONG *, unsigned char *, CLEANLOCALSTORAGE *);
void             CLEANLOCALSTORAGE_UserFree     (ULONG *, CLEANLOCALSTORAGE *);








# 57 "include/propidl.h" 2




































typedef IPropertyStorage *LPPROPERTYSTORAGE;


































typedef struct tagPROPVARIANT PROPVARIANT;
typedef struct tagCAC {
    ULONG cElems;
    char *pElems;
} CAC;
typedef struct tagCAUB {
    ULONG cElems;
    unsigned char *pElems;
} CAUB;
typedef struct tagCAI {
    ULONG cElems;
    short *pElems;
} CAI;
typedef struct tagCAUI {
    ULONG cElems;
    USHORT *pElems;
} CAUI;
typedef struct tagCAL {
    ULONG cElems;
    LONG *pElems;
} CAL;
typedef struct tagCAUL {
    ULONG cElems;
    ULONG *pElems;
} CAUL;
typedef struct tagCAFLT {
    ULONG cElems;
    float *pElems;
} CAFLT;
typedef struct tagCADBL {
    ULONG cElems;
    double *pElems;
} CADBL;
typedef struct tagCACY {
    ULONG cElems;
    CY *pElems;
} CACY;
typedef struct tagCADATE {
    ULONG cElems;
    DATE *pElems;
} CADATE;
typedef struct tagCABSTR {
    ULONG cElems;
    BSTR *pElems;
} CABSTR;
typedef struct tagCABSTRBLOB {
    ULONG cElems;
    BSTRBLOB *pElems;
} CABSTRBLOB;
typedef struct tagCABOOL {
    ULONG cElems;
    VARIANT_BOOL *pElems;
} CABOOL;
typedef struct tagCASCODE {
    ULONG cElems;
    SCODE *pElems;
} CASCODE;
typedef struct tagCAPROPVARIANT {
    ULONG cElems;
    PROPVARIANT *pElems;
} CAPROPVARIANT;
typedef struct tagCAH {
    ULONG cElems;
    LARGE_INTEGER *pElems;
} CAH;
typedef struct tagCAUH {
    ULONG cElems;
    ULARGE_INTEGER *pElems;
} CAUH;
typedef struct tagCALPSTR {
    ULONG cElems;
    LPSTR *pElems;
} CALPSTR;
typedef struct tagCALPWSTR {
    ULONG cElems;
    LPWSTR *pElems;
} CALPWSTR;
typedef struct tagCAFILETIME {
    ULONG cElems;
    FILETIME *pElems;
} CAFILETIME;
typedef struct tagCACLIPDATA {
    ULONG cElems;
    CLIPDATA *pElems;
} CACLIPDATA;
typedef struct tagCACLSID {
    ULONG cElems;
    CLSID *pElems;
} CACLSID;
struct tagPROPVARIANT {
    VARTYPE vt;
    WORD wReserved1;
    WORD wReserved2;
    WORD wReserved3;
     union {
        char cVal;
        UCHAR bVal;
        short iVal;
        USHORT uiVal;
        VARIANT_BOOL boolVal;
        LONG lVal;
        ULONG ulVal;
        float fltVal;
        SCODE scode;
        LARGE_INTEGER hVal;
        ULARGE_INTEGER uhVal;
        double dblVal;
        CY cyVal;
        DATE date;
        FILETIME filetime;
        CLSID *puuid;
        BLOB blob;
        CLIPDATA *pclipdata;
        IStream *pStream;
        IStorage *pStorage;
        BSTR bstrVal;
        BSTRBLOB bstrblobVal;
        LPSTR pszVal;
        LPWSTR pwszVal;
        IUnknown *punkVal;
        IDispatch *pdispVal;
        CAC cac;
        CAUB caub;
        CAI cai;
        CAUI caui;
        CABOOL cabool;
        CAL cal;
        CAUL caul;
        CAFLT caflt;
        CASCODE cascode;
        CAH cah;
        CAUH cauh;
        CADBL cadbl;
        CACY cacy;
        CADATE cadate;
        CAFILETIME cafiletime;
        CACLSID cauuid;
        CACLIPDATA caclipdata;
        CABSTR cabstr;
        CABSTRBLOB cabstrblob;
        CALPSTR calpstr;
        CALPWSTR calpwstr;
        CAPROPVARIANT capropvar;
        LPSAFEARRAY parray;
        CHAR *pcVal;
        UCHAR *pbVal;
        SHORT *piVal;
        USHORT *puiVal;
        LONG *plVal;
        ULONG *pulVal;
        INT *pintVal;
        UINT *puintVal;
        FLOAT *pfltVal;
        DOUBLE *pdblVal;
        VARIANT_BOOL *pboolVal;
        DECIMAL *pdecVal;
        SCODE *pscode;
        CY *pcyVal;
        DATE *pdate;
        BSTR *pbstrVal;
        IUnknown **ppunkVal;
        IDispatch **ppdispVal;
        LPSAFEARRAY *pparray;
        PROPVARIANT *pvarVal;
    } ;
};
typedef struct tagPROPVARIANT *LPPROPVARIANT;





















































typedef struct tagPROPSPEC {
    ULONG ulKind;
    union {
        PROPID propid;
        LPOLESTR lpwstr;
    } ;
} PROPSPEC;
typedef struct tagSTATPROPSTG {
    LPOLESTR lpwstrName;
    PROPID propid;
    VARTYPE vt;
} STATPROPSTG;





typedef struct tagSTATPROPSETSTG {
    FMTID fmtid;
    CLSID clsid;
    DWORD grfFlags;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD dwOSVersion;
} STATPROPSETSTG;
extern const GUID IID_IPropertyStorage ;


























































typedef struct IPropertyStorageVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IPropertyStorage *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IPropertyStorage *This);

    ULONG ( *Release)(
        IPropertyStorage *This);

    
    HRESULT ( *ReadMultiple)(
        IPropertyStorage *This,
        ULONG cpspec,
        const PROPSPEC rgpspec[],
        PROPVARIANT rgpropvar[]);

    HRESULT ( *WriteMultiple)(
        IPropertyStorage *This,
        ULONG cpspec,
        const PROPSPEC rgpspec[],
        const PROPVARIANT rgpropvar[],
        PROPID propidNameFirst);

    HRESULT ( *DeleteMultiple)(
        IPropertyStorage *This,
        ULONG cpspec,
        const PROPSPEC rgpspec[]);

    HRESULT ( *ReadPropertyNames)(
        IPropertyStorage *This,
        ULONG cpropid,
        const PROPID rgpropid[],
        LPOLESTR rglpwstrName[]);

    HRESULT ( *WritePropertyNames)(
        IPropertyStorage *This,
        ULONG cpropid,
        const PROPID rgpropid[],
        const LPOLESTR rglpwstrName[]);

    HRESULT ( *DeletePropertyNames)(
        IPropertyStorage *This,
        ULONG cpropid,
        const PROPID rgpropid[]);

    HRESULT ( *Commit)(
        IPropertyStorage *This,
        DWORD grfCommitFlags);

    HRESULT ( *Revert)(
        IPropertyStorage *This);

    HRESULT ( *Enum)(
        IPropertyStorage *This,
        IEnumSTATPROPSTG **ppenum);

    HRESULT ( *SetTimes)(
        IPropertyStorage *This,
        const FILETIME *pctime,
        const FILETIME *patime,
        const FILETIME *pmtime);

    HRESULT ( *SetClass)(
        IPropertyStorage *This,
        const CLSID* const clsid);

    HRESULT ( *Stat)(
        IPropertyStorage *This,
        STATPROPSETSTG *statpsstg);

    
} IPropertyStorageVtbl;

struct IPropertyStorage {
    const IPropertyStorageVtbl* lpVtbl;
};


















































































typedef IPropertySetStorage *LPPROPERTYSETSTORAGE;
extern const GUID IID_IPropertySetStorage ;



























typedef struct IPropertySetStorageVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IPropertySetStorage *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IPropertySetStorage *This);

    ULONG ( *Release)(
        IPropertySetStorage *This);

    
    HRESULT ( *Create)(
        IPropertySetStorage *This,
        const FMTID* const rfmtid,
        const CLSID *pclsid,
        DWORD grfFlags,
        DWORD grfMode,
        IPropertyStorage **ppprstg);

    HRESULT ( *Open)(
        IPropertySetStorage *This,
        const FMTID* const rfmtid,
        DWORD grfMode,
        IPropertyStorage **ppprstg);

    HRESULT ( *Delete)(
        IPropertySetStorage *This,
        const FMTID* const rfmtid);

    HRESULT ( *Enum)(
        IPropertySetStorage *This,
        IEnumSTATPROPSETSTG **ppenum);

    
} IPropertySetStorageVtbl;

struct IPropertySetStorage {
    const IPropertySetStorageVtbl* lpVtbl;
};


















































typedef IEnumSTATPROPSTG *LPENUMSTATPROPSTG;
extern const GUID IID_IEnumSTATPROPSTG ;























typedef struct IEnumSTATPROPSTGVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IEnumSTATPROPSTG *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IEnumSTATPROPSTG *This);

    ULONG ( *Release)(
        IEnumSTATPROPSTG *This);

    
    HRESULT ( *Next)(
        IEnumSTATPROPSTG *This,
        ULONG celt,
        STATPROPSTG *rgelt,
        ULONG *pceltFetched);

    HRESULT ( *Skip)(
        IEnumSTATPROPSTG *This,
        ULONG celt);

    HRESULT ( *Reset)(
        IEnumSTATPROPSTG *This);

    HRESULT ( *Clone)(
        IEnumSTATPROPSTG *This,
        IEnumSTATPROPSTG **ppenum);

    
} IEnumSTATPROPSTGVtbl;

struct IEnumSTATPROPSTG {
    const IEnumSTATPROPSTGVtbl* lpVtbl;
};









































HRESULT  IEnumSTATPROPSTG_RemoteNext_Proxy(
    IEnumSTATPROPSTG* This,
    ULONG celt,
    STATPROPSTG *rgelt,
    ULONG *pceltFetched);
void  IEnumSTATPROPSTG_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IEnumSTATPROPSTG_Next_Proxy(
    IEnumSTATPROPSTG* This,
    ULONG celt,
    STATPROPSTG *rgelt,
    ULONG *pceltFetched);
HRESULT  IEnumSTATPROPSTG_Next_Stub(
    IEnumSTATPROPSTG* This,
    ULONG celt,
    STATPROPSTG *rgelt,
    ULONG *pceltFetched);









typedef IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG;
extern const GUID IID_IEnumSTATPROPSETSTG ;























typedef struct IEnumSTATPROPSETSTGVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IEnumSTATPROPSETSTG *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IEnumSTATPROPSETSTG *This);

    ULONG ( *Release)(
        IEnumSTATPROPSETSTG *This);

    
    HRESULT ( *Next)(
        IEnumSTATPROPSETSTG *This,
        ULONG celt,
        STATPROPSETSTG *rgelt,
        ULONG *pceltFetched);

    HRESULT ( *Skip)(
        IEnumSTATPROPSETSTG *This,
        ULONG celt);

    HRESULT ( *Reset)(
        IEnumSTATPROPSETSTG *This);

    HRESULT ( *Clone)(
        IEnumSTATPROPSETSTG *This,
        IEnumSTATPROPSETSTG **ppenum);

    
} IEnumSTATPROPSETSTGVtbl;

struct IEnumSTATPROPSETSTG {
    const IEnumSTATPROPSETSTGVtbl* lpVtbl;
};









































HRESULT  IEnumSTATPROPSETSTG_RemoteNext_Proxy(
    IEnumSTATPROPSETSTG* This,
    ULONG celt,
    STATPROPSETSTG *rgelt,
    ULONG *pceltFetched);
void  IEnumSTATPROPSETSTG_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IEnumSTATPROPSETSTG_Next_Proxy(
    IEnumSTATPROPSETSTG* This,
    ULONG celt,
    STATPROPSETSTG *rgelt,
    ULONG *pceltFetched);
HRESULT  IEnumSTATPROPSETSTG_Next_Stub(
    IEnumSTATPROPSETSTG* This,
    ULONG celt,
    STATPROPSETSTG *rgelt,
    ULONG *pceltFetched);



typedef struct SERIALIZEDPROPERTYVALUE {
    DWORD dwType;
    BYTE rgb[1];
} SERIALIZEDPROPERTYVALUE;
HRESULT  FreePropVariantArray(ULONG,PROPVARIANT*);
HRESULT  PropVariantClear(PROPVARIANT*);
HRESULT  PropVariantCopy(PROPVARIANT*,const PROPVARIANT*);






HRESULT  StgCreatePropStg(IUnknown *, const FMTID* const, const CLSID *, DWORD, DWORD, IPropertyStorage **);
HRESULT  StgOpenPropStg(IUnknown *, const FMTID* const, DWORD, DWORD, IPropertyStorage **);
HRESULT  StgCreatePropSetStg(IStorage *, DWORD, IPropertySetStorage **);

HRESULT  FmtIdToPropStgName(const FMTID *, LPOLESTR);
HRESULT  PropStgNameToFmtId(const LPOLESTR, FMTID *);




ULONG            BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char *  BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char *  BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void             BSTR_UserFree     (ULONG *, BSTR *);
ULONG            LPSAFEARRAY_UserSize     (ULONG *, ULONG, LPSAFEARRAY *);
unsigned char *  LPSAFEARRAY_UserMarshal  (ULONG *, unsigned char *, LPSAFEARRAY *);
unsigned char *  LPSAFEARRAY_UserUnmarshal(ULONG *, unsigned char *, LPSAFEARRAY *);
void             LPSAFEARRAY_UserFree     (ULONG *, LPSAFEARRAY *);








# 515 "include/objbase.h" 2












# 26 "include/ole2.h" 2

# 1 "include/oleauto.h" 1 3






















# 1 "include/oaidl.h" 1 3







# 1 "include/rpc.h" 1 3






















# 1 "include/windows.h" 1 3








































































































# 23 "include/rpc.h" 2

































































# 8 "include/oaidl.h" 2

# 1 "include/rpcndr.h" 1 3








































































































































































































































































































































































































































































































































































































































































































































































































































# 9 "include/oaidl.h" 2




# 1 "include/windows.h" 1 3








































































































# 13 "include/oaidl.h" 2

# 1 "include/ole2.h" 1 3



























































































































































# 14 "include/oaidl.h" 2

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 23 "include/oleauto.h" 2





extern const GUID IID_StdOle  ;

















 ULONG  OaBuildVersion(void);


 void  SysFreeString(BSTR);
 BSTR  SysAllocString(const OLECHAR*)  ;
 BSTR  SysAllocStringByteLen(LPCSTR,UINT)  ;
 BSTR  SysAllocStringLen(const OLECHAR*,UINT)  ;
 INT   SysReAllocString(LPBSTR,const OLECHAR*);
 int   SysReAllocStringLen(BSTR*,const OLECHAR*,UINT);
 UINT  SysStringByteLen(BSTR);
 UINT  SysStringLen(BSTR);


 HRESULT  SetErrorInfo(ULONG,IErrorInfo*);
 HRESULT  GetErrorInfo(ULONG,IErrorInfo**);
 HRESULT  CreateErrorInfo(ICreateErrorInfo**);


 SAFEARRAY*  SafeArrayCreate(VARTYPE,UINT,SAFEARRAYBOUND*);
 SAFEARRAY*  SafeArrayCreateEx(VARTYPE,UINT,SAFEARRAYBOUND*,LPVOID);
 SAFEARRAY*  SafeArrayCreateVector(VARTYPE,LONG,ULONG);
 SAFEARRAY*  SafeArrayCreateVectorEx(VARTYPE,LONG,ULONG,LPVOID);

 HRESULT  SafeArrayAllocDescriptor(UINT,SAFEARRAY**);
 HRESULT  SafeArrayAllocDescriptorEx(VARTYPE,UINT,SAFEARRAY**);
 HRESULT  SafeArrayAllocData(SAFEARRAY*);
 HRESULT  SafeArrayDestroyDescriptor(SAFEARRAY*);
 HRESULT  SafeArrayPutElement(SAFEARRAY*,LONG*,void*);
 HRESULT  SafeArrayGetElement(SAFEARRAY*,LONG*,void*);
 HRESULT  SafeArrayLock(SAFEARRAY*);
 HRESULT  SafeArrayUnlock(SAFEARRAY*);
 HRESULT  SafeArrayGetUBound(SAFEARRAY*,UINT,LONG*);
 HRESULT  SafeArrayGetLBound(SAFEARRAY*,UINT,LONG*);
 UINT     SafeArrayGetDim(SAFEARRAY*);
 UINT     SafeArrayGetElemsize(SAFEARRAY*);
 HRESULT  SafeArrayGetVartype(SAFEARRAY*,VARTYPE*);
 HRESULT  SafeArrayAccessData(SAFEARRAY*,void**);
 HRESULT  SafeArrayUnaccessData(SAFEARRAY*);
 HRESULT  SafeArrayPtrOfIndex(SAFEARRAY*,LONG*,void **);
 HRESULT  SafeArrayCopyData(SAFEARRAY*,SAFEARRAY*);
 HRESULT  SafeArrayDestroyData(SAFEARRAY*);
 HRESULT  SafeArrayDestroy(SAFEARRAY*);
 HRESULT  SafeArrayCopy(SAFEARRAY*,SAFEARRAY**);
 HRESULT  SafeArrayRedim(SAFEARRAY*,SAFEARRAYBOUND*);
 HRESULT  SafeArraySetRecordInfo(SAFEARRAY*,IRecordInfo*);
 HRESULT  SafeArrayGetRecordInfo(SAFEARRAY*,IRecordInfo**);
 HRESULT  SafeArraySetIID(SAFEARRAY*,const GUID* const);
 HRESULT  SafeArrayGetIID(SAFEARRAY*,GUID*);

 HRESULT  VectorFromBstr(BSTR,SAFEARRAY**);
 HRESULT  BstrFromVector(SAFEARRAY*,BSTR*);





 HRESULT  RegisterActiveObject(LPUNKNOWN,const CLSID* const,DWORD,LPDWORD);
 HRESULT  RevokeActiveObject(DWORD,LPVOID);
 HRESULT  GetActiveObject(const CLSID* const,LPVOID,LPUNKNOWN*);


 HRESULT  GetRecordInfoFromTypeInfo(ITypeInfo*,IRecordInfo**);
 HRESULT  GetRecordInfoFromGuids(const GUID* const,ULONG,ULONG,LCID,const GUID* const,IRecordInfo**);






















































































 void     VariantInit(VARIANT*);
 HRESULT  VariantClear(VARIANT*);
 HRESULT  VariantCopy(VARIANTARG *dst, const VARIANTARG *src);
 HRESULT  VariantCopyInd(VARIANT *dst, const VARIANTARG *src);
 HRESULT  VariantChangeType(VARIANTARG *dst, const VARIANTARG *src, USHORT flags, VARTYPE vt);
 HRESULT  VariantChangeTypeEx(VARIANTARG *dst, const VARIANTARG *src, LCID lcid, USHORT flags, VARTYPE vt);




































 HRESULT  VarUI1FromI2(SHORT,BYTE*);
 HRESULT  VarUI1FromI4(LONG,BYTE*);
 HRESULT  VarUI1FromI8(LONG64,BYTE*);
 HRESULT  VarUI1FromR4(FLOAT,BYTE*);
 HRESULT  VarUI1FromR8(DOUBLE,BYTE*);
 HRESULT  VarUI1FromDate(DATE,BYTE*);
 HRESULT  VarUI1FromBool(VARIANT_BOOL,BYTE*);
 HRESULT  VarUI1FromI1(signed char,BYTE*);
 HRESULT  VarUI1FromUI2(USHORT,BYTE*);
 HRESULT  VarUI1FromUI4(ULONG,BYTE*);
 HRESULT  VarUI1FromUI8(ULONG64,BYTE*);
 HRESULT  VarUI1FromStr(const OLECHAR*,LCID,ULONG,BYTE*);
 HRESULT  VarUI1FromCy(CY,BYTE*);
 HRESULT  VarUI1FromDec(const DECIMAL*,BYTE*);
 HRESULT  VarUI1FromDisp(IDispatch*,LCID,BYTE*);

 HRESULT  VarI2FromUI1(BYTE,SHORT*);
 HRESULT  VarI2FromI4(LONG,SHORT*);
 HRESULT  VarI2FromI8(LONG64,SHORT*);
 HRESULT  VarI2FromR4(FLOAT,SHORT*);
 HRESULT  VarI2FromR8(DOUBLE,SHORT*);
 HRESULT  VarI2FromDate(DATE,SHORT*);
 HRESULT  VarI2FromBool(VARIANT_BOOL,SHORT*);
 HRESULT  VarI2FromI1(signed char,SHORT*);
 HRESULT  VarI2FromUI2(USHORT,SHORT*);
 HRESULT  VarI2FromUI4(ULONG,SHORT*);
 HRESULT  VarI2FromUI8(ULONG64,SHORT*);
 HRESULT  VarI2FromStr(const OLECHAR*,LCID,ULONG,SHORT*);
 HRESULT  VarI2FromCy(CY,SHORT*);
 HRESULT  VarI2FromDec(const DECIMAL*,SHORT*);
 HRESULT  VarI2FromDisp(IDispatch*,LCID,SHORT*);

 HRESULT  VarI4FromUI1(BYTE,LONG*);
 HRESULT  VarI4FromI2(SHORT,LONG*);
 HRESULT  VarI4FromI8(LONG64,LONG*);
 HRESULT  VarI4FromR4(FLOAT,LONG*);
 HRESULT  VarI4FromR8(DOUBLE,LONG*);
 HRESULT  VarI4FromDate(DATE,LONG*);
 HRESULT  VarI4FromBool(VARIANT_BOOL,LONG*);
 HRESULT  VarI4FromI1(signed char,LONG*);
 HRESULT  VarI4FromUI2(USHORT,LONG*);
 HRESULT  VarI4FromUI4(ULONG,LONG*);
 HRESULT  VarI4FromUI8(ULONG64,LONG*);
 HRESULT  VarI4FromStr(const OLECHAR*,LCID,ULONG,LONG*);
 HRESULT  VarI4FromCy(CY,LONG*);
 HRESULT  VarI4FromDec(const DECIMAL*,LONG*);
 HRESULT  VarI4FromDisp(IDispatch*,LCID,LONG*);

 HRESULT  VarI8FromUI1(BYTE,LONG64*);
 HRESULT  VarI8FromI2(SHORT,LONG64*);
 HRESULT  VarI8FromI4(LONG,LONG64*);
 HRESULT  VarI8FromR4(FLOAT,LONG64*);
 HRESULT  VarI8FromR8(DOUBLE,LONG64*);
 HRESULT  VarI8FromDate(DATE,LONG64*);
 HRESULT  VarI8FromStr(const OLECHAR*,LCID,ULONG,LONG64*);
 HRESULT  VarI8FromBool(VARIANT_BOOL,LONG64*);
 HRESULT  VarI8FromI1(signed char,LONG64*);
 HRESULT  VarI8FromUI2(USHORT,LONG64*);
 HRESULT  VarI8FromUI4(ULONG,LONG64*);
 HRESULT  VarI8FromUI8(ULONG64,LONG64*);
 HRESULT  VarI8FromDec(const DECIMAL *pdecIn,LONG64*);
 HRESULT  VarI8FromInt(INT intIn,LONG64*);
 HRESULT  VarI8FromCy(CY,LONG64*);
 HRESULT  VarI8FromDisp(IDispatch*,LCID,LONG64*);

 HRESULT  VarR4FromUI1(BYTE,FLOAT*);
 HRESULT  VarR4FromI2(SHORT,FLOAT*);
 HRESULT  VarR4FromI4(LONG,FLOAT*);
 HRESULT  VarR4FromI8(LONG64,FLOAT*);
 HRESULT  VarR4FromR8(DOUBLE,FLOAT*);
 HRESULT  VarR4FromDate(DATE,FLOAT*);
 HRESULT  VarR4FromBool(VARIANT_BOOL,FLOAT*);
 HRESULT  VarR4FromI1(signed char,FLOAT*);
 HRESULT  VarR4FromUI2(USHORT,FLOAT*);
 HRESULT  VarR4FromUI4(ULONG,FLOAT*);
 HRESULT  VarR4FromUI8(ULONG64,FLOAT*);
 HRESULT  VarR4FromStr(const OLECHAR*,LCID,ULONG,FLOAT*);
 HRESULT  VarR4FromCy(CY,FLOAT*);
 HRESULT  VarR4FromDec(const DECIMAL*,FLOAT*);
 HRESULT  VarR4FromDisp(IDispatch*,LCID,FLOAT*);

 HRESULT  VarR8FromUI1(BYTE,double*);
 HRESULT  VarR8FromI2(SHORT,double*);
 HRESULT  VarR8FromI4(LONG,double*);
 HRESULT  VarR8FromI8(LONG64,double*);
 HRESULT  VarR8FromR4(FLOAT,double*);
 HRESULT  VarR8FromDate(DATE,double*);
 HRESULT  VarR8FromBool(VARIANT_BOOL,double*);
 HRESULT  VarR8FromI1(signed char,double*);
 HRESULT  VarR8FromUI2(USHORT,double*);
 HRESULT  VarR8FromUI4(ULONG,double*);
 HRESULT  VarR8FromUI8(ULONG64,double*);
 HRESULT  VarR8FromStr(const OLECHAR*,LCID,ULONG,double*);
 HRESULT  VarR8FromCy(CY,double*);
 HRESULT  VarR8FromDec(const DECIMAL*,double*);
 HRESULT  VarR8FromDisp(IDispatch*,LCID,double*);

 HRESULT  VarDateFromUI1(BYTE,DATE*);
 HRESULT  VarDateFromI2(SHORT,DATE*);
 HRESULT  VarDateFromI4(LONG,DATE*);
 HRESULT  VarDateFromI8(LONG64,DATE*);
 HRESULT  VarDateFromR4(FLOAT,DATE*);
 HRESULT  VarDateFromR8(DOUBLE,DATE*);
 HRESULT  VarDateFromStr(const OLECHAR*,LCID,ULONG,DATE*);
 HRESULT  VarDateFromI1(signed char,DATE*);
 HRESULT  VarDateFromUI2(USHORT,DATE*);
 HRESULT  VarDateFromUI4(ULONG,DATE*);
 HRESULT  VarDateFromUI8(ULONG64,DATE*);
 HRESULT  VarDateFromBool(VARIANT_BOOL,DATE*);
 HRESULT  VarDateFromCy(CY,DATE*);
 HRESULT  VarDateFromDec(const DECIMAL*,DATE*);
 HRESULT  VarDateFromDisp(IDispatch*,LCID,DATE*);

 HRESULT  VarCyFromUI1(BYTE,CY*);
 HRESULT  VarCyFromI2(SHORT sIn,CY*);
 HRESULT  VarCyFromI4(LONG,CY*);
 HRESULT  VarCyFromI8(LONG64,CY*);
 HRESULT  VarCyFromR4(FLOAT,CY*);
 HRESULT  VarCyFromR8(DOUBLE,CY*);
 HRESULT  VarCyFromDate(DATE,CY*);
 HRESULT  VarCyFromStr(const OLECHAR*,LCID,ULONG,CY*);
 HRESULT  VarCyFromBool(VARIANT_BOOL,CY*);
 HRESULT  VarCyFromI1(signed char,CY*);
 HRESULT  VarCyFromUI2(USHORT,CY*);
 HRESULT  VarCyFromUI4(ULONG,CY*);
 HRESULT  VarCyFromUI8(ULONG64,CY*);
 HRESULT  VarCyFromDec(const DECIMAL*,CY*);
 HRESULT  VarCyFromDisp(IDispatch*,LCID,CY*);

 HRESULT  VarBstrFromUI1(BYTE,LCID,ULONG,BSTR*);
 HRESULT  VarBstrFromI2(SHORT,LCID,ULONG,BSTR*);
 HRESULT  VarBstrFromI4(LONG,LCID,ULONG,BSTR*);
 HRESULT  VarBstrFromI8(LONG64,LCID,ULONG,BSTR*);
 HRESULT  VarBstrFromR4(FLOAT,LCID,ULONG,BSTR*);
 HRESULT  VarBstrFromR8(DOUBLE,LCID,ULONG,BSTR*);
 HRESULT  VarBstrFromDate(DATE,LCID,ULONG,BSTR*);
 HRESULT  VarBstrFromBool(VARIANT_BOOL,LCID,ULONG,BSTR*);
 HRESULT  VarBstrFromI1(signed char,LCID,ULONG,BSTR*);
 HRESULT  VarBstrFromUI2(USHORT,LCID,ULONG,BSTR*);
 HRESULT  VarBstrFromUI8(ULONG64,LCID,ULONG,BSTR*);
 HRESULT  VarBstrFromUI4(ULONG,LCID,ULONG,BSTR*);
 HRESULT  VarBstrFromCy(CY,LCID,ULONG,BSTR*);
 HRESULT  VarBstrFromDec(const DECIMAL*,LCID,ULONG,BSTR*);
 HRESULT  VarBstrFromDisp(IDispatch*,LCID,ULONG,BSTR*);

 HRESULT  VarBoolFromUI1(BYTE,VARIANT_BOOL*);
 HRESULT  VarBoolFromI2(SHORT,VARIANT_BOOL*);
 HRESULT  VarBoolFromI4(LONG,VARIANT_BOOL*);
 HRESULT  VarBoolFromI8(LONG64,VARIANT_BOOL*);
 HRESULT  VarBoolFromR4(FLOAT,VARIANT_BOOL*);
 HRESULT  VarBoolFromR8(DOUBLE,VARIANT_BOOL*);
 HRESULT  VarBoolFromDate(DATE,VARIANT_BOOL*);
 HRESULT  VarBoolFromStr(const OLECHAR*,LCID,ULONG,VARIANT_BOOL*);
 HRESULT  VarBoolFromI1(signed char,VARIANT_BOOL*);
 HRESULT  VarBoolFromUI2(USHORT,VARIANT_BOOL*);
 HRESULT  VarBoolFromUI4(ULONG,VARIANT_BOOL*);
 HRESULT  VarBoolFromUI8(ULONG64,VARIANT_BOOL*);
 HRESULT  VarBoolFromCy(CY,VARIANT_BOOL*);
 HRESULT  VarBoolFromDec(const DECIMAL*,VARIANT_BOOL*);
 HRESULT  VarBoolFromDisp(IDispatch*,LCID,VARIANT_BOOL*);

 HRESULT  VarI1FromUI1(BYTE,signed char*);
 HRESULT  VarI1FromI2(SHORT,signed char*);
 HRESULT  VarI1FromI4(LONG,signed char*);
 HRESULT  VarI1FromI8(LONG64,signed char*);
 HRESULT  VarI1FromR4(FLOAT,signed char*);
 HRESULT  VarI1FromR8(DOUBLE,signed char*);
 HRESULT  VarI1FromDate(DATE,signed char*);
 HRESULT  VarI1FromStr(const OLECHAR*,LCID,ULONG,signed char*);
 HRESULT  VarI1FromBool(VARIANT_BOOL,signed char*);
 HRESULT  VarI1FromUI2(USHORT,signed char*);
 HRESULT  VarI1FromUI4(ULONG,signed char*);
 HRESULT  VarI1FromUI8(ULONG64,signed char*);
 HRESULT  VarI1FromCy(CY,signed char*);
 HRESULT  VarI1FromDec(const DECIMAL*,signed char*);
 HRESULT  VarI1FromDisp(IDispatch*,LCID,signed char*);

 HRESULT  VarUI2FromUI1(BYTE,USHORT*);
 HRESULT  VarUI2FromI2(SHORT,USHORT*);
 HRESULT  VarUI2FromI4(LONG,USHORT*);
 HRESULT  VarUI2FromI8(LONG64,USHORT*);
 HRESULT  VarUI2FromR4(FLOAT,USHORT*);
 HRESULT  VarUI2FromR8(DOUBLE,USHORT*);
 HRESULT  VarUI2FromDate(DATE,USHORT*);
 HRESULT  VarUI2FromStr(const OLECHAR*,LCID,ULONG,USHORT*);
 HRESULT  VarUI2FromBool(VARIANT_BOOL,USHORT*);
 HRESULT  VarUI2FromI1(signed char,USHORT*);
 HRESULT  VarUI2FromUI4(ULONG,USHORT*);
 HRESULT  VarUI2FromUI8(ULONG64,USHORT*);
 HRESULT  VarUI2FromCy(CY,USHORT*);
 HRESULT  VarUI2FromDec(const DECIMAL*,USHORT*);
 HRESULT  VarUI2FromDisp(IDispatch*,LCID,USHORT*);

 HRESULT  VarUI4FromStr(const OLECHAR*,LCID,ULONG,ULONG*);
 HRESULT  VarUI4FromUI1(BYTE,ULONG*);
 HRESULT  VarUI4FromI2(SHORT,ULONG*);
 HRESULT  VarUI4FromI4(LONG,ULONG*);
 HRESULT  VarUI4FromI8(LONG64,ULONG*);
 HRESULT  VarUI4FromR4(FLOAT,ULONG*);
 HRESULT  VarUI4FromR8(DOUBLE,ULONG*);
 HRESULT  VarUI4FromDate(DATE,ULONG*);
 HRESULT  VarUI4FromBool(VARIANT_BOOL,ULONG*);
 HRESULT  VarUI4FromI1(signed char,ULONG*);
 HRESULT  VarUI4FromUI2(USHORT,ULONG*);
 HRESULT  VarUI4FromUI8(ULONG64,ULONG*);
 HRESULT  VarUI4FromCy(CY,ULONG*);
 HRESULT  VarUI4FromDec(const DECIMAL*,ULONG*);
 HRESULT  VarUI4FromDisp(IDispatch*,LCID,ULONG*);

 HRESULT  VarUI8FromUI1(BYTE,ULONG64*);
 HRESULT  VarUI8FromI2(SHORT,ULONG64*);
 HRESULT  VarUI8FromI4(LONG,ULONG64*);
 HRESULT  VarUI8FromI8(LONG64,ULONG64*);
 HRESULT  VarUI8FromR4(FLOAT,ULONG64*);
 HRESULT  VarUI8FromR8(DOUBLE,ULONG64*);
 HRESULT  VarUI8FromDate(DATE,ULONG64*);
 HRESULT  VarUI8FromStr(const OLECHAR*,LCID,ULONG,ULONG64*);
 HRESULT  VarUI8FromBool(VARIANT_BOOL,ULONG64*);
 HRESULT  VarUI8FromI1(signed char,ULONG64*);
 HRESULT  VarUI8FromUI2(USHORT,ULONG64*);
 HRESULT  VarUI8FromUI4(ULONG,ULONG64*);
 HRESULT  VarUI8FromDec(const DECIMAL*,ULONG64*);
 HRESULT  VarUI8FromInt(INT,ULONG64*);
 HRESULT  VarUI8FromCy(CY,ULONG64*);
 HRESULT  VarUI8FromDisp(IDispatch*,LCID,ULONG64*);

 HRESULT  VarDecFromUI1(BYTE,DECIMAL*);
 HRESULT  VarDecFromI2(SHORT,DECIMAL*);
 HRESULT  VarDecFromI4(LONG,DECIMAL*);
 HRESULT  VarDecFromI8(LONG64,DECIMAL*);
 HRESULT  VarDecFromR4(FLOAT,DECIMAL*);
 HRESULT  VarDecFromR8(DOUBLE,DECIMAL*);
 HRESULT  VarDecFromDate(DATE,DECIMAL*);
 HRESULT  VarDecFromStr(const OLECHAR*,LCID,ULONG,DECIMAL*);
 HRESULT  VarDecFromBool(VARIANT_BOOL,DECIMAL*);
 HRESULT  VarDecFromI1(signed char,DECIMAL*);
 HRESULT  VarDecFromUI2(USHORT,DECIMAL*);
 HRESULT  VarDecFromUI4(ULONG,DECIMAL*);
 HRESULT  VarDecFromUI8(ULONG64,DECIMAL*);
 HRESULT  VarDecFromCy(CY,DECIMAL*);
 HRESULT  VarDecFromDisp(IDispatch*,LCID,DECIMAL*);













































































 HRESULT  VarR4CmpR8(float,double);

 HRESULT  VarR8Pow(double,double,double*);
 HRESULT  VarR8Round(double,int,double*);

 HRESULT  VarDecAbs(const DECIMAL*,DECIMAL*);
 HRESULT  VarDecAdd(const DECIMAL*,const DECIMAL*,DECIMAL*);
 HRESULT  VarDecCmp(const DECIMAL*,const DECIMAL*);
 HRESULT  VarDecCmpR8(const DECIMAL*,DOUBLE);
 HRESULT  VarDecDiv(const DECIMAL*,const DECIMAL*,DECIMAL*);
 HRESULT  VarDecFix(const DECIMAL*,DECIMAL*);
 HRESULT  VarDecInt(const DECIMAL*,DECIMAL*);
 HRESULT  VarDecMul(const DECIMAL*,const DECIMAL*,DECIMAL*);
 HRESULT  VarDecNeg(const DECIMAL*,DECIMAL*);
 HRESULT  VarDecRound(const DECIMAL*,int,DECIMAL*);
 HRESULT  VarDecSub(const DECIMAL*,const DECIMAL*,DECIMAL*);

 HRESULT  VarCyAbs(CY,CY*);
 HRESULT  VarCyAdd(CY,CY,CY*);
 HRESULT  VarCyCmp(CY,CY);
 HRESULT  VarCyCmpR8(CY,DOUBLE);
 HRESULT  VarCyFix(CY,CY*);
 HRESULT  VarCyInt(CY,CY*);
 HRESULT  VarCyMul(CY,CY,CY*);
 HRESULT  VarCyMulI4(CY,LONG,CY*);
 HRESULT  VarCyMulI8(CY,LONG64,CY*);
 HRESULT  VarCyNeg(CY,CY*);
 HRESULT  VarCyRound(CY,INT,CY*);
 HRESULT  VarCySub(CY,CY,CY*);

 HRESULT  VarAdd(LPVARIANT,LPVARIANT,LPVARIANT);
 HRESULT  VarAnd(LPVARIANT,LPVARIANT,LPVARIANT);
 HRESULT  VarCat(LPVARIANT,LPVARIANT,LPVARIANT);
 HRESULT  VarDiv(LPVARIANT,LPVARIANT,LPVARIANT);
 HRESULT  VarEqv(LPVARIANT,LPVARIANT,LPVARIANT);
 HRESULT  VarIdiv(LPVARIANT,LPVARIANT,LPVARIANT);
 HRESULT  VarImp(LPVARIANT,LPVARIANT,LPVARIANT);
 HRESULT  VarMod(LPVARIANT,LPVARIANT,LPVARIANT);
 HRESULT  VarMul(LPVARIANT,LPVARIANT,LPVARIANT);
 HRESULT  VarOr(LPVARIANT,LPVARIANT,LPVARIANT);
 HRESULT  VarPow(LPVARIANT,LPVARIANT,LPVARIANT);
 HRESULT  VarSub(LPVARIANT,LPVARIANT,LPVARIANT);
 HRESULT  VarXor(LPVARIANT,LPVARIANT,LPVARIANT);

 HRESULT  VarAbs(LPVARIANT,LPVARIANT);
 HRESULT  VarFix(LPVARIANT,LPVARIANT);
 HRESULT  VarInt(LPVARIANT,LPVARIANT);
 HRESULT  VarNeg(LPVARIANT,LPVARIANT);
 HRESULT  VarNot(LPVARIANT,LPVARIANT);

 HRESULT  VarRound(LPVARIANT,int,LPVARIANT);

 HRESULT  VarCmp(LPVARIANT,LPVARIANT,LCID,ULONG);

 HRESULT  VarBstrCmp(BSTR,BSTR,LCID,ULONG);
 HRESULT  VarBstrCat(BSTR,BSTR,BSTR*);


typedef struct {
    SYSTEMTIME st;
    USHORT wDayOfYear;
} UDATE;

typedef struct
{
    INT   cDig;       
    ULONG dwInFlags;  
    ULONG dwOutFlags; 
    INT   cchUsed;    
    INT   nBaseShift; 
    INT   nPwr10;     
} NUMPARSE;































 HRESULT  VarParseNumFromStr(const OLECHAR*,LCID,ULONG,NUMPARSE*,BYTE*);
 HRESULT  VarNumFromParseNum(NUMPARSE*,BYTE*,ULONG,VARIANT*);

 INT  DosDateTimeToVariantTime(USHORT,USHORT,double*);
 INT  VariantTimeToDosDateTime(double,USHORT*,USHORT*);

 INT  VariantTimeToSystemTime(DOUBLE,LPSYSTEMTIME);
 INT  SystemTimeToVariantTime(LPSYSTEMTIME,double*);

 HRESULT  VarDateFromUdate(UDATE*,ULONG,DATE*);
 HRESULT  VarDateFromUdateEx(UDATE*,LCID,ULONG,DATE*);
 HRESULT  VarUdateFromDate(DATE,ULONG,UDATE*);


 HRESULT  VarWeekdayName(int,int,int,ULONG,BSTR*);
 HRESULT  VarMonthName(int,int,ULONG,BSTR*);
 HRESULT  GetAltMonthNames(LCID,LPOLESTR**);

 HRESULT  VarFormat(LPVARIANT,LPOLESTR,int,int,ULONG,BSTR*);
 HRESULT  VarFormatCurrency(LPVARIANT,int,int,int,int,ULONG,BSTR*);
 HRESULT  VarFormatDateTime(LPVARIANT,int,ULONG,BSTR*);
 HRESULT  VarFormatNumber(LPVARIANT,int,int,int,int,ULONG,BSTR*);
 HRESULT  VarFormatPercent(LPVARIANT,int,int,int,int,ULONG,BSTR*);

 HRESULT  VarFormatFromTokens(LPVARIANT,LPOLESTR,LPBYTE,ULONG,BSTR*,LCID);
 HRESULT  VarTokenizeFormatString(LPOLESTR,LPBYTE,int,int,int,LCID,int*);







typedef struct tagPARAMDATA
{
    OLECHAR *szName; 
    VARTYPE  vt;     
} PARAMDATA, *LPPARAMDATA;


typedef struct tagMETHODDATA
{
    OLECHAR   *szName;   
    PARAMDATA *ppdata;   
    DISPID     dispid;   
    UINT       iMeth;    
    CALLCONV   cc;       
    UINT       cArgs;    
    WORD       wFlags;   
    VARTYPE    vtReturn; 
} METHODDATA, *LPMETHODDATA;


typedef struct tagINTERFACEDATA
{
    METHODDATA *pmethdata;  
    UINT        cMembers;   
} INTERFACEDATA, *LPINTERFACEDATA;

typedef enum tagREGKIND
{
    REGKIND_DEFAULT,
    REGKIND_REGISTER,
    REGKIND_NONE
} REGKIND;

 HRESULT  DispGetParam(DISPPARAMS*,UINT,VARTYPE,VARIANT*,UINT*);
 HRESULT  DispGetIDsOfNames(ITypeInfo*,OLECHAR**,UINT,DISPID*);
 HRESULT  DispInvoke(void*,ITypeInfo*,DISPID,WORD,DISPPARAMS*,VARIANT*,EXCEPINFO*,UINT*);
 HRESULT  CreateDispTypeInfo(INTERFACEDATA*,LCID,ITypeInfo**);
 HRESULT  CreateStdDispatch(IUnknown*,void*,ITypeInfo*,IUnknown**);
 HRESULT  DispCallFunc(void*,ULONG_PTR,CALLCONV,VARTYPE,UINT,VARTYPE*,VARIANTARG**,VARIANT*);






 ULONG  LHashValOfNameSysA(SYSKIND,LCID,LPCSTR);
 ULONG  LHashValOfNameSys(SYSKIND,LCID,LPCOLESTR);

















 HRESULT  CreateTypeLib(SYSKIND,const OLECHAR*,ICreateTypeLib**);
 HRESULT  CreateTypeLib2(SYSKIND,LPCOLESTR,ICreateTypeLib2**);
 HRESULT  LoadRegTypeLib(const GUID* const,WORD,WORD,LCID,ITypeLib**);
 HRESULT  LoadTypeLib(const OLECHAR*,ITypeLib**);
 HRESULT  LoadTypeLibEx(LPCOLESTR,REGKIND,ITypeLib**);
 HRESULT  QueryPathOfRegTypeLib(const GUID* const,WORD,WORD,LCID,LPBSTR);
 HRESULT  RegisterTypeLib(ITypeLib*,LPCOLESTR,LPCOLESTR);
 HRESULT  UnRegisterTypeLib(const GUID* const,WORD,WORD,LCID,SYSKIND);
 HRESULT  RegisterTypeLibForUser(ITypeLib*,OLECHAR*,OLECHAR*);
 HRESULT  UnRegisterTypeLibForUser(const GUID* const,WORD,WORD,LCID,SYSKIND);

 void  ClearCustData(LPCUSTDATA);







# 27 "include/ole2.h" 2

# 1 "include/oleidl.h" 1 3







# 1 "include/rpc.h" 1 3






















# 1 "include/windows.h" 1 3








































































































# 23 "include/rpc.h" 2

































































# 8 "include/oleidl.h" 2

# 1 "include/rpcndr.h" 1 3








































































































































































































































































































































































































































































































































































































































































































































































































































# 9 "include/oleidl.h" 2




# 1 "include/windows.h" 1 3








































































































# 13 "include/oleidl.h" 2

# 1 "include/ole2.h" 1 3



























































































































































# 14 "include/oleidl.h" 2









typedef struct IOleWindow IOleWindow;







typedef struct IOleInPlaceObject IOleInPlaceObject;







typedef struct IOleInPlaceUIWindow IOleInPlaceUIWindow;







typedef struct IOleInPlaceFrame IOleInPlaceFrame;







typedef struct IOleInPlaceActiveObject IOleInPlaceActiveObject;







typedef struct IOleInPlaceSite IOleInPlaceSite;







typedef struct IParseDisplayName IParseDisplayName;







typedef struct IOleContainer IOleContainer;







typedef struct IOleItemContainer IOleItemContainer;







typedef struct IOleLink IOleLink;







typedef struct IOleClientSite IOleClientSite;







typedef struct IOleCache IOleCache;







typedef struct IOleCache2 IOleCache2;







typedef struct IOleCacheControl IOleCacheControl;







typedef struct IEnumOLEVERB IEnumOLEVERB;







typedef struct IOleObject IOleObject;







typedef struct IOleAdviseHolder IOleAdviseHolder;







typedef struct IContinue IContinue;







typedef struct IViewObject IViewObject;







typedef struct IViewObject2 IViewObject2;







typedef struct IDropSource IDropSource;







typedef struct IDropTarget IDropTarget;







typedef struct IDropSourceNotify IDropSourceNotify;








# 1 "include/objidl.h" 1 3







# 1 "include/rpc.h" 1 3






















# 1 "include/windows.h" 1 3








































































































# 23 "include/rpc.h" 2

































































# 8 "include/objidl.h" 2

# 1 "include/rpcndr.h" 1 3








































































































































































































































































































































































































































































































































































































































































































































































































































# 9 "include/objidl.h" 2




# 1 "include/windows.h" 1 3








































































































# 13 "include/objidl.h" 2

# 1 "include/ole2.h" 1 3



























































































































































# 14 "include/objidl.h" 2





























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 208 "include/oleidl.h" 2














# 1 "include/winuser.h" 1 3


























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 222 "include/oleidl.h" 2






extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec;
extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec;
typedef enum tagOLERENDER {
    OLERENDER_NONE = 0,
    OLERENDER_DRAW = 1,
    OLERENDER_FORMAT = 2,
    OLERENDER_ASIS = 3
} OLERENDER;
typedef enum tagOLERENDER *LPOLERENDER;
typedef struct tagOBJECTDESCRIPTOR {
    ULONG cbSize;
    CLSID clsid;
    DWORD dwDrawAspect;
    SIZEL sizel;
    POINTL pointl;
    DWORD dwStatus;
    DWORD dwFullUserTypeName;
    DWORD dwSrcOfCopy;
} OBJECTDESCRIPTOR;
typedef struct tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR;
typedef struct tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR;
typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;
typedef struct tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR;
typedef struct tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR;









typedef IOleWindow *LPOLEWINDOW;
extern const GUID IID_IOleWindow ;















typedef struct IOleWindowVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IOleWindow *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleWindow *This);

    ULONG ( *Release)(
        IOleWindow *This);

    
    HRESULT ( *GetWindow)(
        IOleWindow *This,
        HWND *phwnd);

    HRESULT ( *ContextSensitiveHelp)(
        IOleWindow *This,
        BOOL fEnterMode);

    
} IOleWindowVtbl;

struct IOleWindow {
    const IOleWindowVtbl* lpVtbl;
};










































typedef IOleInPlaceObject *LPOLEINPLACEOBJECT;
extern const GUID IID_IOleInPlaceObject ;






















typedef struct IOleInPlaceObjectVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IOleInPlaceObject *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleInPlaceObject *This);

    ULONG ( *Release)(
        IOleInPlaceObject *This);

    
    HRESULT ( *GetWindow)(
        IOleInPlaceObject *This,
        HWND *phwnd);

    HRESULT ( *ContextSensitiveHelp)(
        IOleInPlaceObject *This,
        BOOL fEnterMode);

    
    HRESULT ( *InPlaceDeactivate)(
        IOleInPlaceObject *This);

    HRESULT ( *UIDeactivate)(
        IOleInPlaceObject *This);

    HRESULT ( *SetObjectRects)(
        IOleInPlaceObject *This,
        LPCRECT lprcPosRect,
        LPCRECT lprcClipRect);

    HRESULT ( *ReactivateAndUndo)(
        IOleInPlaceObject *This);

    
} IOleInPlaceObjectVtbl;

struct IOleInPlaceObject {
    const IOleInPlaceObjectVtbl* lpVtbl;
};




























































typedef IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;
typedef RECT BORDERWIDTHS;
typedef LPRECT LPBORDERWIDTHS;
typedef LPCRECT LPCBORDERWIDTHS;
extern const GUID IID_IOleInPlaceUIWindow ;






















typedef struct IOleInPlaceUIWindowVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IOleInPlaceUIWindow *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleInPlaceUIWindow *This);

    ULONG ( *Release)(
        IOleInPlaceUIWindow *This);

    
    HRESULT ( *GetWindow)(
        IOleInPlaceUIWindow *This,
        HWND *phwnd);

    HRESULT ( *ContextSensitiveHelp)(
        IOleInPlaceUIWindow *This,
        BOOL fEnterMode);

    
    HRESULT ( *GetBorder)(
        IOleInPlaceUIWindow *This,
        LPRECT lprectBorder);

    HRESULT ( *RequestBorderSpace)(
        IOleInPlaceUIWindow *This,
        LPCBORDERWIDTHS pborderwidths);

    HRESULT ( *SetBorderSpace)(
        IOleInPlaceUIWindow *This,
        LPCBORDERWIDTHS pborderwidths);

    HRESULT ( *SetActiveObject)(
        IOleInPlaceUIWindow *This,
        IOleInPlaceActiveObject *pActiveObject,
        LPCOLESTR pszObjName);

    
} IOleInPlaceUIWindowVtbl;

struct IOleInPlaceUIWindow {
    const IOleInPlaceUIWindowVtbl* lpVtbl;
};































































typedef IOleInPlaceFrame *LPOLEINPLACEFRAME;
typedef struct tagOleInPlaceFrameInfo {
    UINT cb;
    BOOL fMDIApp;
    HWND hwndFrame;
    HACCEL haccel;
    UINT cAccelEntries;
} OLEINPLACEFRAMEINFO;
typedef struct tagOleInPlaceFrameInfo *LPOLEINPLACEFRAMEINFO;
typedef struct tagOleMenuGroupWidths {
    LONG width[6];
} OLEMENUGROUPWIDTHS;
typedef struct tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;
typedef HGLOBAL HOLEMENU;
extern const GUID IID_IOleInPlaceFrame ;































typedef struct IOleInPlaceFrameVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IOleInPlaceFrame *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleInPlaceFrame *This);

    ULONG ( *Release)(
        IOleInPlaceFrame *This);

    
    HRESULT ( *GetWindow)(
        IOleInPlaceFrame *This,
        HWND *phwnd);

    HRESULT ( *ContextSensitiveHelp)(
        IOleInPlaceFrame *This,
        BOOL fEnterMode);

    
    HRESULT ( *GetBorder)(
        IOleInPlaceFrame *This,
        LPRECT lprectBorder);

    HRESULT ( *RequestBorderSpace)(
        IOleInPlaceFrame *This,
        LPCBORDERWIDTHS pborderwidths);

    HRESULT ( *SetBorderSpace)(
        IOleInPlaceFrame *This,
        LPCBORDERWIDTHS pborderwidths);

    HRESULT ( *SetActiveObject)(
        IOleInPlaceFrame *This,
        IOleInPlaceActiveObject *pActiveObject,
        LPCOLESTR pszObjName);

    
    HRESULT ( *InsertMenus)(
        IOleInPlaceFrame *This,
        HMENU hmenuShared,
        LPOLEMENUGROUPWIDTHS lpMenuWidths);

    HRESULT ( *SetMenu)(
        IOleInPlaceFrame *This,
        HMENU hmenuShared,
        HOLEMENU holemenu,
        HWND hwndActiveObject);

    HRESULT ( *RemoveMenus)(
        IOleInPlaceFrame *This,
        HMENU hmenuShared);

    HRESULT ( *SetStatusText)(
        IOleInPlaceFrame *This,
        LPCOLESTR pszStatusText);

    HRESULT ( *EnableModeless)(
        IOleInPlaceFrame *This,
        BOOL fEnable);

    HRESULT ( *TranslateAccelerator)(
        IOleInPlaceFrame *This,
        LPMSG lpmsg,
        WORD wID);

    
} IOleInPlaceFrameVtbl;

struct IOleInPlaceFrame {
    const IOleInPlaceFrameVtbl* lpVtbl;
};






















































































typedef IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;
extern const GUID IID_IOleInPlaceActiveObject ;


























typedef struct IOleInPlaceActiveObjectVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IOleInPlaceActiveObject *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleInPlaceActiveObject *This);

    ULONG ( *Release)(
        IOleInPlaceActiveObject *This);

    
    HRESULT ( *GetWindow)(
        IOleInPlaceActiveObject *This,
        HWND *phwnd);

    HRESULT ( *ContextSensitiveHelp)(
        IOleInPlaceActiveObject *This,
        BOOL fEnterMode);

    
    HRESULT ( *TranslateAccelerator)(
        IOleInPlaceActiveObject *This,
        LPMSG lpmsg);

    HRESULT ( *OnFrameWindowActivate)(
        IOleInPlaceActiveObject *This,
        BOOL fActivate);

    HRESULT ( *OnDocWindowActivate)(
        IOleInPlaceActiveObject *This,
        BOOL fActivate);

    HRESULT ( *ResizeBorder)(
        IOleInPlaceActiveObject *This,
        LPCRECT prcBorder,
        IOleInPlaceUIWindow *pUIWindow,
        BOOL fFrameWindow);

    HRESULT ( *EnableModeless)(
        IOleInPlaceActiveObject *This,
        BOOL fEnable);

    
} IOleInPlaceActiveObjectVtbl;

struct IOleInPlaceActiveObject {
    const IOleInPlaceActiveObjectVtbl* lpVtbl;
};























































HRESULT  IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(
    IOleInPlaceActiveObject* This);
void  IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(
    IOleInPlaceActiveObject* This,
    LPCRECT prcBorder,
    const IID* const riid,
    IOleInPlaceUIWindow *pUIWindow,
    BOOL fFrameWindow);
void  IOleInPlaceActiveObject_RemoteResizeBorder_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IOleInPlaceActiveObject_TranslateAccelerator_Proxy(
    IOleInPlaceActiveObject* This,
    LPMSG lpmsg);
HRESULT  IOleInPlaceActiveObject_TranslateAccelerator_Stub(
    IOleInPlaceActiveObject* This);
HRESULT  IOleInPlaceActiveObject_ResizeBorder_Proxy(
    IOleInPlaceActiveObject* This,
    LPCRECT prcBorder,
    IOleInPlaceUIWindow *pUIWindow,
    BOOL fFrameWindow);
HRESULT  IOleInPlaceActiveObject_ResizeBorder_Stub(
    IOleInPlaceActiveObject* This,
    LPCRECT prcBorder,
    const IID* const riid,
    IOleInPlaceUIWindow *pUIWindow,
    BOOL fFrameWindow);









typedef IOleInPlaceSite *LPOLEINPLACESITE;
extern const GUID IID_IOleInPlaceSite ;











































typedef struct IOleInPlaceSiteVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IOleInPlaceSite *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleInPlaceSite *This);

    ULONG ( *Release)(
        IOleInPlaceSite *This);

    
    HRESULT ( *GetWindow)(
        IOleInPlaceSite *This,
        HWND *phwnd);

    HRESULT ( *ContextSensitiveHelp)(
        IOleInPlaceSite *This,
        BOOL fEnterMode);

    
    HRESULT ( *CanInPlaceActivate)(
        IOleInPlaceSite *This);

    HRESULT ( *OnInPlaceActivate)(
        IOleInPlaceSite *This);

    HRESULT ( *OnUIActivate)(
        IOleInPlaceSite *This);

    HRESULT ( *GetWindowContext)(
        IOleInPlaceSite *This,
        IOleInPlaceFrame **ppFrame,
        IOleInPlaceUIWindow **ppDoc,
        LPRECT lprcPosRect,
        LPRECT lprcClipRect,
        LPOLEINPLACEFRAMEINFO lpFrameInfo);

    HRESULT ( *Scroll)(
        IOleInPlaceSite *This,
        SIZE scrollExtent);

    HRESULT ( *OnUIDeactivate)(
        IOleInPlaceSite *This,
        BOOL fUndoable);

    HRESULT ( *OnInPlaceDeactivate)(
        IOleInPlaceSite *This);

    HRESULT ( *DiscardUndoState)(
        IOleInPlaceSite *This);

    HRESULT ( *DeactivateAndUndo)(
        IOleInPlaceSite *This);

    HRESULT ( *OnPosRectChange)(
        IOleInPlaceSite *This,
        LPCRECT lprcPosRect);

    
} IOleInPlaceSiteVtbl;

struct IOleInPlaceSite {
    const IOleInPlaceSiteVtbl* lpVtbl;
};




















































































typedef IParseDisplayName *LPPARSEDISPLAYNAME;
extern const GUID IID_IParseDisplayName ;















typedef struct IParseDisplayNameVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IParseDisplayName *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IParseDisplayName *This);

    ULONG ( *Release)(
        IParseDisplayName *This);

    
    HRESULT ( *ParseDisplayName)(
        IParseDisplayName *This,
        IBindCtx *pbc,
        LPOLESTR pszDisplayName,
        ULONG *pchEaten,
        IMoniker **ppmkOut);

    
} IParseDisplayNameVtbl;

struct IParseDisplayName {
    const IParseDisplayNameVtbl* lpVtbl;
};






































typedef IOleContainer *LPOLECONTAINER;
extern const GUID IID_IOleContainer ;
















typedef struct IOleContainerVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IOleContainer *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleContainer *This);

    ULONG ( *Release)(
        IOleContainer *This);

    
    HRESULT ( *ParseDisplayName)(
        IOleContainer *This,
        IBindCtx *pbc,
        LPOLESTR pszDisplayName,
        ULONG *pchEaten,
        IMoniker **ppmkOut);

    
    HRESULT ( *EnumObjects)(
        IOleContainer *This,
        DWORD grfFlags,
        IEnumUnknown **ppenum);

    HRESULT ( *LockContainer)(
        IOleContainer *This,
        BOOL fLock);

    
} IOleContainerVtbl;

struct IOleContainer {
    const IOleContainerVtbl* lpVtbl;
};
















































typedef IOleItemContainer *LPOLEITEMCONTAINER;
typedef enum tagBINDSPEED {
    BINDSPEED_INDEFINITE = 1,
    BINDSPEED_MODERATE = 2,
    BINDSPEED_IMMEDIATE = 3
} BINDSPEED;
typedef enum tagOLECONTF {
    OLECONTF_EMBEDDINGS = 1,
    OLECONTF_LINKS = 2,
    OLECONTF_OTHERS = 4,
    OLECONTF_ONLYUSER = 8,
    OLECONTF_ONLYIFRUNNING = 16
} OLECONTF;



extern const GUID IID_IOleItemContainer ;

























typedef struct IOleItemContainerVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IOleItemContainer *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleItemContainer *This);

    ULONG ( *Release)(
        IOleItemContainer *This);

    
    HRESULT ( *ParseDisplayName)(
        IOleItemContainer *This,
        IBindCtx *pbc,
        LPOLESTR pszDisplayName,
        ULONG *pchEaten,
        IMoniker **ppmkOut);

    
    HRESULT ( *EnumObjects)(
        IOleItemContainer *This,
        DWORD grfFlags,
        IEnumUnknown **ppenum);

    HRESULT ( *LockContainer)(
        IOleItemContainer *This,
        BOOL fLock);

    
    HRESULT ( *GetObject)(
        IOleItemContainer *This,
        LPOLESTR pszItem,
        DWORD dwSpeedNeeded,
        IBindCtx *pbc,
        const IID* const riid,
        void **ppvObject);

    HRESULT ( *GetObjectStorage)(
        IOleItemContainer *This,
        LPOLESTR pszItem,
        IBindCtx *pbc,
        const IID* const riid,
        void **ppvStorage);

    HRESULT ( *IsRunning)(
        IOleItemContainer *This,
        LPOLESTR pszItem);

    
} IOleItemContainerVtbl;

struct IOleItemContainer {
    const IOleItemContainerVtbl* lpVtbl;
};






























































typedef IOleLink *LPOLELINK;
typedef enum tagOLEUPDATE {
    OLEUPDATE_ALWAYS = 1,
    OLEUPDATE_ONCALL = 3
} OLEUPDATE;
typedef enum tagOLEUPDATE *POLEUPDATE;
typedef enum tagOLEUPDATE *LPOLEUPDATE;
typedef enum tagOLELINKBIND {
    OLELINKBIND_EVENIFCLASSDIFF = 1
} OLELINKBIND;
extern const GUID IID_IOleLink ;












































typedef struct IOleLinkVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IOleLink *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleLink *This);

    ULONG ( *Release)(
        IOleLink *This);

    
    HRESULT ( *SetUpdateOptions)(
        IOleLink *This,
        DWORD dwUpdateOpt);

    HRESULT ( *GetUpdateOptions)(
        IOleLink *This,
        DWORD *pdwUpdateOpt);

    HRESULT ( *SetSourceMoniker)(
        IOleLink *This,
        IMoniker *pmk,
        const CLSID* const rclsid);

    HRESULT ( *GetSourceMoniker)(
        IOleLink *This,
        IMoniker **ppmk);

    HRESULT ( *SetSourceDisplayName)(
        IOleLink *This,
        LPCOLESTR pszStatusText);

    HRESULT ( *GetSourceDisplayName)(
        IOleLink *This,
        LPOLESTR *ppszDisplayName);

    HRESULT ( *BindToSource)(
        IOleLink *This,
        DWORD bindflags,
        IBindCtx *pbc);

    HRESULT ( *BindIfRunning)(
        IOleLink *This);

    HRESULT ( *GetBoundSource)(
        IOleLink *This,
        IUnknown **ppunk);

    HRESULT ( *UnbindSource)(
        IOleLink *This);

    HRESULT ( *Update)(
        IOleLink *This,
        IBindCtx *pbc);

    
} IOleLinkVtbl;

struct IOleLink {
    const IOleLinkVtbl* lpVtbl;
};














































































typedef IOleClientSite *LPOLECLIENTSITE;
extern const GUID IID_IOleClientSite ;





























typedef struct IOleClientSiteVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IOleClientSite *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleClientSite *This);

    ULONG ( *Release)(
        IOleClientSite *This);

    
    HRESULT ( *SaveObject)(
        IOleClientSite *This);

    HRESULT ( *GetMoniker)(
        IOleClientSite *This,
        DWORD dwAssign,
        DWORD dwWhichMoniker,
        IMoniker **ppmk);

    HRESULT ( *GetContainer)(
        IOleClientSite *This,
        IOleContainer **ppContainer);

    HRESULT ( *ShowObject)(
        IOleClientSite *This);

    HRESULT ( *OnShowWindow)(
        IOleClientSite *This,
        BOOL fShow);

    HRESULT ( *RequestNewObjectLayout)(
        IOleClientSite *This);

    
} IOleClientSiteVtbl;

struct IOleClientSite {
    const IOleClientSiteVtbl* lpVtbl;
};


























































typedef IOleCache *LPOLECACHE;
extern const GUID IID_IOleCache ;




























typedef struct IOleCacheVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IOleCache *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleCache *This);

    ULONG ( *Release)(
        IOleCache *This);

    
    HRESULT ( *Cache)(
        IOleCache *This,
        FORMATETC *pformatetc,
        DWORD advf,
        DWORD *pdwConnection);

    HRESULT ( *Uncache)(
        IOleCache *This,
        DWORD dwConnection);

    HRESULT ( *EnumCache)(
        IOleCache *This,
        IEnumSTATDATA **ppenumSTATDATA);

    HRESULT ( *InitCache)(
        IOleCache *This,
        IDataObject *pDataObject);

    HRESULT ( *SetData)(
        IOleCache *This,
        FORMATETC *pformatetc,
        STGMEDIUM *pmedium,
        BOOL fRelease);

    
} IOleCacheVtbl;

struct IOleCache {
    const IOleCacheVtbl* lpVtbl;
};






















































typedef IOleCache2 *LPOLECACHE2;


















typedef enum tagDISCARDCACHE {
    DISCARDCACHE_SAVEIFDIRTY = 0,
    DISCARDCACHE_NOSAVE = 1
} DISCARDCACHE;
extern const GUID IID_IOleCache2 ;

















typedef struct IOleCache2Vtbl {
    

    
    HRESULT ( *QueryInterface)(
        IOleCache2 *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleCache2 *This);

    ULONG ( *Release)(
        IOleCache2 *This);

    
    HRESULT ( *Cache)(
        IOleCache2 *This,
        FORMATETC *pformatetc,
        DWORD advf,
        DWORD *pdwConnection);

    HRESULT ( *Uncache)(
        IOleCache2 *This,
        DWORD dwConnection);

    HRESULT ( *EnumCache)(
        IOleCache2 *This,
        IEnumSTATDATA **ppenumSTATDATA);

    HRESULT ( *InitCache)(
        IOleCache2 *This,
        IDataObject *pDataObject);

    HRESULT ( *SetData)(
        IOleCache2 *This,
        FORMATETC *pformatetc,
        STGMEDIUM *pmedium,
        BOOL fRelease);

    
    HRESULT ( *UpdateCache)(
        IOleCache2 *This,
        LPDATAOBJECT pDataObject,
        DWORD grfUpdf,
        LPVOID pReserved);

    HRESULT ( *DiscardCache)(
        IOleCache2 *This,
        DWORD dwDiscardOptions);

    
} IOleCache2Vtbl;

struct IOleCache2 {
    const IOleCache2Vtbl* lpVtbl;
};























































HRESULT  IOleCache2_RemoteUpdateCache_Proxy(
    IOleCache2* This,
    LPDATAOBJECT pDataObject,
    DWORD grfUpdf,
    LONG_PTR pReserved);
void  IOleCache2_RemoteUpdateCache_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IOleCache2_UpdateCache_Proxy(
    IOleCache2* This,
    LPDATAOBJECT pDataObject,
    DWORD grfUpdf,
    LPVOID pReserved);
HRESULT  IOleCache2_UpdateCache_Stub(
    IOleCache2* This,
    LPDATAOBJECT pDataObject,
    DWORD grfUpdf,
    LONG_PTR pReserved);









typedef IOleCacheControl *LPOLECACHECONTROL;
extern const GUID IID_IOleCacheControl ;















typedef struct IOleCacheControlVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IOleCacheControl *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleCacheControl *This);

    ULONG ( *Release)(
        IOleCacheControl *This);

    
    HRESULT ( *OnRun)(
        IOleCacheControl *This,
        LPDATAOBJECT pDataObject);

    HRESULT ( *OnStop)(
        IOleCacheControl *This);

    
} IOleCacheControlVtbl;

struct IOleCacheControl {
    const IOleCacheControlVtbl* lpVtbl;
};










































typedef IEnumOLEVERB *LPENUMOLEVERB;
typedef struct tagOLEVERB {
    LONG lVerb;
    LPOLESTR lpszVerbName;
    DWORD fuFlags;
    DWORD grfAttribs;
} OLEVERB;
typedef struct tagOLEVERB *LPOLEVERB;
typedef enum tagOLEVERBATTRIB {
    OLEVERBATTRIB_NEVERDIRTIES = 1,
    OLEVERBATTRIB_ONCONTAINERMENU = 2
} OLEVERBATTRIB;
extern const GUID IID_IEnumOLEVERB ;























typedef struct IEnumOLEVERBVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IEnumOLEVERB *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IEnumOLEVERB *This);

    ULONG ( *Release)(
        IEnumOLEVERB *This);

    
    HRESULT ( *Next)(
        IEnumOLEVERB *This,
        ULONG celt,
        LPOLEVERB rgelt,
        ULONG *pceltFetched);

    HRESULT ( *Skip)(
        IEnumOLEVERB *This,
        ULONG celt);

    HRESULT ( *Reset)(
        IEnumOLEVERB *This);

    HRESULT ( *Clone)(
        IEnumOLEVERB *This,
        IEnumOLEVERB **ppenum);

    
} IEnumOLEVERBVtbl;

struct IEnumOLEVERB {
    const IEnumOLEVERBVtbl* lpVtbl;
};









































HRESULT  IEnumOLEVERB_RemoteNext_Proxy(
    IEnumOLEVERB* This,
    ULONG celt,
    LPOLEVERB rgelt,
    ULONG *pceltFetched);
void  IEnumOLEVERB_RemoteNext_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IEnumOLEVERB_Next_Proxy(
    IEnumOLEVERB* This,
    ULONG celt,
    LPOLEVERB rgelt,
    ULONG *pceltFetched);
HRESULT  IEnumOLEVERB_Next_Stub(
    IEnumOLEVERB* This,
    ULONG celt,
    LPOLEVERB rgelt,
    ULONG *pceltFetched);









typedef IOleObject *LPOLEOBJECT;
typedef enum tagOLEGETMONIKER {
    OLEGETMONIKER_ONLYIFTHERE = 1,
    OLEGETMONIKER_FORCEASSIGN = 2,
    OLEGETMONIKER_UNASSIGN = 3,
    OLEGETMONIKER_TEMPFORUSER = 4
} OLEGETMONIKER;
typedef enum tagOLEWHICHMK {
    OLEWHICHMK_CONTAINER = 1,
    OLEWHICHMK_OBJREL = 2,
    OLEWHICHMK_OBJFULL = 3
} OLEWHICHMK;
typedef enum tagUSERCLASSTYPE {
    USERCLASSTYPE_FULL = 1,
    USERCLASSTYPE_SHORT = 2,
    USERCLASSTYPE_APPNAME = 3
} USERCLASSTYPE;
typedef enum tagOLEMISC {
    OLEMISC_RECOMPOSEONRESIZE = 0x1,
    OLEMISC_ONLYICONIC = 0x2,
    OLEMISC_INSERTNOTREPLACE = 0x4,
    OLEMISC_STATIC = 0x8,
    OLEMISC_CANTLINKINSIDE = 0x10,
    OLEMISC_CANLINKBYOLE1 = 0x20,
    OLEMISC_ISLINKOBJECT = 0x40,
    OLEMISC_INSIDEOUT = 0x80,
    OLEMISC_ACTIVATEWHENVISIBLE = 0x100,
    OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x200,
    OLEMISC_INVISIBLEATRUNTIME = 0x400,
    OLEMISC_ALWAYSRUN = 0x800,
    OLEMISC_ACTSLIKEBUTTON = 0x1000,
    OLEMISC_ACTSLIKELABEL = 0x2000,
    OLEMISC_NOUIACTIVATE = 0x4000,
    OLEMISC_ALIGNABLE = 0x8000,
    OLEMISC_SIMPLEFRAME = 0x10000,
    OLEMISC_SETCLIENTSITEFIRST = 0x20000,
    OLEMISC_IMEMODE = 0x40000,
    OLEMISC_IGNOREACTIVATEWHENVISIBLE = 0x80000,
    OLEMISC_WANTSTOMENUMERGE = 0x100000,
    OLEMISC_SUPPORTSMULTILEVELUNDO = 0x200000
} OLEMISC;
typedef enum tagOLECLOSE {
    OLECLOSE_SAVEIFDIRTY = 0,
    OLECLOSE_NOSAVE = 1,
    OLECLOSE_PROMPTSAVE = 2
} OLECLOSE;
extern const GUID IID_IOleObject ;

























































































typedef struct IOleObjectVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IOleObject *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleObject *This);

    ULONG ( *Release)(
        IOleObject *This);

    
    HRESULT ( *SetClientSite)(
        IOleObject *This,
        IOleClientSite *pClientSite);

    HRESULT ( *GetClientSite)(
        IOleObject *This,
        IOleClientSite **ppClientSite);

    HRESULT ( *SetHostNames)(
        IOleObject *This,
        LPCOLESTR szContainerApp,
        LPCOLESTR szContainerObj);

    HRESULT ( *Close)(
        IOleObject *This,
        DWORD dwSaveOption);

    HRESULT ( *SetMoniker)(
        IOleObject *This,
        DWORD dwWhichMoniker,
        IMoniker *pmk);

    HRESULT ( *GetMoniker)(
        IOleObject *This,
        DWORD dwAssign,
        DWORD dwWhichMoniker,
        IMoniker **ppmk);

    HRESULT ( *InitFromData)(
        IOleObject *This,
        IDataObject *pDataObject,
        BOOL fCreation,
        DWORD dwReserved);

    HRESULT ( *GetClipboardData)(
        IOleObject *This,
        DWORD dwReserved,
        IDataObject **ppDataObject);

    HRESULT ( *DoVerb)(
        IOleObject *This,
        LONG iVerb,
        LPMSG lpmsg,
        IOleClientSite *pActiveSite,
        LONG lindex,
        HWND hwndParent,
        LPCRECT lprcPosRect);

    HRESULT ( *EnumVerbs)(
        IOleObject *This,
        IEnumOLEVERB **ppEnumOleVerb);

    HRESULT ( *Update)(
        IOleObject *This);

    HRESULT ( *IsUpToDate)(
        IOleObject *This);

    HRESULT ( *GetUserClassID)(
        IOleObject *This,
        CLSID *pClsid);

    HRESULT ( *GetUserType)(
        IOleObject *This,
        DWORD dwFormOfType,
        LPOLESTR *pszUserType);

    HRESULT ( *SetExtent)(
        IOleObject *This,
        DWORD dwDrawAspect,
        SIZEL *psizel);

    HRESULT ( *GetExtent)(
        IOleObject *This,
        DWORD dwDrawAspect,
        SIZEL *psizel);

    HRESULT ( *Advise)(
        IOleObject *This,
        IAdviseSink *pAdvSink,
        DWORD *pdwConnection);

    HRESULT ( *Unadvise)(
        IOleObject *This,
        DWORD dwConnection);

    HRESULT ( *EnumAdvise)(
        IOleObject *This,
        IEnumSTATDATA **ppenumAdvise);

    HRESULT ( *GetMiscStatus)(
        IOleObject *This,
        DWORD dwAspect,
        DWORD *pdwStatus);

    HRESULT ( *SetColorScheme)(
        IOleObject *This,
        LOGPALETTE *pLogpal);

    
} IOleObjectVtbl;

struct IOleObject {
    const IOleObjectVtbl* lpVtbl;
};






















































































































typedef IOleAdviseHolder *LPOLEADVISEHOLDER;
extern const GUID IID_IOleAdviseHolder ;




























typedef struct IOleAdviseHolderVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IOleAdviseHolder *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IOleAdviseHolder *This);

    ULONG ( *Release)(
        IOleAdviseHolder *This);

    
    HRESULT ( *Advise)(
        IOleAdviseHolder *This,
        IAdviseSink *pAdvise,
        DWORD *pdwConnection);

    HRESULT ( *Unadvise)(
        IOleAdviseHolder *This,
        DWORD dwConnection);

    HRESULT ( *EnumAdvise)(
        IOleAdviseHolder *This,
        IEnumSTATDATA **ppenumAdvise);

    HRESULT ( *SendOnRename)(
        IOleAdviseHolder *This,
        IMoniker *pmk);

    HRESULT ( *SendOnSave)(
        IOleAdviseHolder *This);

    HRESULT ( *SendOnClose)(
        IOleAdviseHolder *This);

    
} IOleAdviseHolderVtbl;

struct IOleAdviseHolder {
    const IOleAdviseHolderVtbl* lpVtbl;
};


























































extern const GUID IID_IContinue ;












typedef struct IContinueVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IContinue *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IContinue *This);

    ULONG ( *Release)(
        IContinue *This);

    
    HRESULT ( *FContinue)(
        IContinue *This);

    
} IContinueVtbl;

struct IContinue {
    const IContinueVtbl* lpVtbl;
};






































typedef IViewObject *LPVIEWOBJECT;
extern const GUID IID_IViewObject ;
















































typedef struct IViewObjectVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IViewObject *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IViewObject *This);

    ULONG ( *Release)(
        IViewObject *This);

    
    HRESULT ( *Draw)(
        IViewObject *This,
        DWORD dwDrawAspect,
        LONG lindex,
        void *pvAspect,
        DVTARGETDEVICE *ptd,
        HDC hdcTargetDev,
        HDC hdcDraw,
        LPCRECTL lprcBounds,
        LPCRECTL lprcWBounds,
        BOOL ( *pfnContinue)(ULONG_PTR dwContinue),
        ULONG_PTR dwContinue);

    HRESULT ( *GetColorSet)(
        IViewObject *This,
        DWORD dwDrawAspect,
        LONG lindex,
        void *pvAspect,
        DVTARGETDEVICE *ptd,
        HDC hicTargetDev,
        LOGPALETTE **ppColorSet);

    HRESULT ( *Freeze)(
        IViewObject *This,
        DWORD dwDrawAspect,
        LONG lindex,
        void *pvAspect,
        DWORD *pdwFreeze);

    HRESULT ( *Unfreeze)(
        IViewObject *This,
        DWORD dwFreeze);

    HRESULT ( *SetAdvise)(
        IViewObject *This,
        DWORD aspects,
        DWORD advf,
        IAdviseSink *pAdvSink);

    HRESULT ( *GetAdvise)(
        IViewObject *This,
        DWORD *pAspects,
        DWORD *pAdvf,
        IAdviseSink **ppAdvSink);

    
} IViewObjectVtbl;

struct IViewObject {
    const IViewObjectVtbl* lpVtbl;
};

















































HRESULT  IViewObject_RemoteDraw_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DVTARGETDEVICE *ptd,
    ULONG_PTR hdcTargetDev,
    ULONG_PTR hdcDraw,
    LPCRECTL lprcBounds,
    LPCRECTL lprcWBounds,
    IContinue *pContinue);
void  IViewObject_RemoteDraw_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IViewObject_RemoteGetColorSet_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DVTARGETDEVICE *ptd,
    ULONG_PTR hicTargetDev,
    LOGPALETTE **ppColorSet);
void  IViewObject_RemoteGetColorSet_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IViewObject_RemoteFreeze_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DWORD *pdwFreeze);
void  IViewObject_RemoteFreeze_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IViewObject_RemoteGetAdvise_Proxy(
    IViewObject* This,
    DWORD *pAspects,
    DWORD *pAdvf,
    IAdviseSink **ppAdvSink);
void  IViewObject_RemoteGetAdvise_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT  IViewObject_Draw_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    void *pvAspect,
    DVTARGETDEVICE *ptd,
    HDC hdcTargetDev,
    HDC hdcDraw,
    LPCRECTL lprcBounds,
    LPCRECTL lprcWBounds,
    BOOL ( *pfnContinue)(ULONG_PTR dwContinue),
    ULONG_PTR dwContinue);
HRESULT  IViewObject_Draw_Stub(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DVTARGETDEVICE *ptd,
    ULONG_PTR hdcTargetDev,
    ULONG_PTR hdcDraw,
    LPCRECTL lprcBounds,
    LPCRECTL lprcWBounds,
    IContinue *pContinue);
HRESULT  IViewObject_GetColorSet_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    void *pvAspect,
    DVTARGETDEVICE *ptd,
    HDC hicTargetDev,
    LOGPALETTE **ppColorSet);
HRESULT  IViewObject_GetColorSet_Stub(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DVTARGETDEVICE *ptd,
    ULONG_PTR hicTargetDev,
    LOGPALETTE **ppColorSet);
HRESULT  IViewObject_Freeze_Proxy(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    void *pvAspect,
    DWORD *pdwFreeze);
HRESULT  IViewObject_Freeze_Stub(
    IViewObject* This,
    DWORD dwDrawAspect,
    LONG lindex,
    ULONG_PTR pvAspect,
    DWORD *pdwFreeze);
HRESULT  IViewObject_GetAdvise_Proxy(
    IViewObject* This,
    DWORD *pAspects,
    DWORD *pAdvf,
    IAdviseSink **ppAdvSink);
HRESULT  IViewObject_GetAdvise_Stub(
    IViewObject* This,
    DWORD *pAspects,
    DWORD *pAdvf,
    IAdviseSink **ppAdvSink);









typedef IViewObject2 *LPVIEWOBJECT2;
extern const GUID IID_IViewObject2 ;















typedef struct IViewObject2Vtbl {
    

    
    HRESULT ( *QueryInterface)(
        IViewObject2 *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IViewObject2 *This);

    ULONG ( *Release)(
        IViewObject2 *This);

    
    HRESULT ( *Draw)(
        IViewObject2 *This,
        DWORD dwDrawAspect,
        LONG lindex,
        void *pvAspect,
        DVTARGETDEVICE *ptd,
        HDC hdcTargetDev,
        HDC hdcDraw,
        LPCRECTL lprcBounds,
        LPCRECTL lprcWBounds,
        BOOL ( *pfnContinue)(ULONG_PTR dwContinue),
        ULONG_PTR dwContinue);

    HRESULT ( *GetColorSet)(
        IViewObject2 *This,
        DWORD dwDrawAspect,
        LONG lindex,
        void *pvAspect,
        DVTARGETDEVICE *ptd,
        HDC hicTargetDev,
        LOGPALETTE **ppColorSet);

    HRESULT ( *Freeze)(
        IViewObject2 *This,
        DWORD dwDrawAspect,
        LONG lindex,
        void *pvAspect,
        DWORD *pdwFreeze);

    HRESULT ( *Unfreeze)(
        IViewObject2 *This,
        DWORD dwFreeze);

    HRESULT ( *SetAdvise)(
        IViewObject2 *This,
        DWORD aspects,
        DWORD advf,
        IAdviseSink *pAdvSink);

    HRESULT ( *GetAdvise)(
        IViewObject2 *This,
        DWORD *pAspects,
        DWORD *pAdvf,
        IAdviseSink **ppAdvSink);

    
    HRESULT ( *GetExtent)(
        IViewObject2 *This,
        DWORD dwDrawAspect,
        LONG lindex,
        DVTARGETDEVICE *ptd,
        LPSIZEL lpsizel);

    
} IViewObject2Vtbl;

struct IViewObject2 {
    const IViewObject2Vtbl* lpVtbl;
};
































































typedef IDropSource *LPDROPSOURCE;
extern const GUID IID_IDropSource ;
















typedef struct IDropSourceVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IDropSource *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IDropSource *This);

    ULONG ( *Release)(
        IDropSource *This);

    
    HRESULT ( *QueryContinueDrag)(
        IDropSource *This,
        BOOL fEscapePressed,
        DWORD grfKeyState);

    HRESULT ( *GiveFeedback)(
        IDropSource *This,
        DWORD dwEffect);

    
} IDropSourceVtbl;

struct IDropSource {
    const IDropSourceVtbl* lpVtbl;
};










































typedef IDropTarget *LPDROPTARGET;






















extern const GUID IID_IDropTarget ;





























typedef struct IDropTargetVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IDropTarget *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IDropTarget *This);

    ULONG ( *Release)(
        IDropTarget *This);

    
    HRESULT ( *DragEnter)(
        IDropTarget *This,
        IDataObject *pDataObj,
        DWORD grfKeyState,
        POINTL pt,
        DWORD *pdwEffect);

    HRESULT ( *DragOver)(
        IDropTarget *This,
        DWORD grfKeyState,
        POINTL pt,
        DWORD *pdwEffect);

    HRESULT ( *DragLeave)(
        IDropTarget *This);

    HRESULT ( *Drop)(
        IDropTarget *This,
        IDataObject *pDataObj,
        DWORD grfKeyState,
        POINTL pt,
        DWORD *pdwEffect);

    
} IDropTargetVtbl;

struct IDropTarget {
    const IDropTargetVtbl* lpVtbl;
};


















































extern const GUID IID_IDropSourceNotify ;















typedef struct IDropSourceNotifyVtbl {
    

    
    HRESULT ( *QueryInterface)(
        IDropSourceNotify *This,
        const IID* const riid,
        void **ppvObject);

    ULONG ( *AddRef)(
        IDropSourceNotify *This);

    ULONG ( *Release)(
        IDropSourceNotify *This);

    
    HRESULT ( *DragTargetEnter)(
        IDropSourceNotify *This,
        HWND hwnd);

    HRESULT ( *DragTargetLeave)(
        IDropSourceNotify *This);

    
} IDropSourceNotifyVtbl;

struct IDropSourceNotify {
    const IDropSourceNotifyVtbl* lpVtbl;
};






































ULONG            HWND_UserSize     (ULONG *, ULONG, HWND *);
unsigned char *  HWND_UserMarshal  (ULONG *, unsigned char *, HWND *);
unsigned char *  HWND_UserUnmarshal(ULONG *, unsigned char *, HWND *);
void             HWND_UserFree     (ULONG *, HWND *);
ULONG            HMENU_UserSize     (ULONG *, ULONG, HMENU *);
unsigned char *  HMENU_UserMarshal  (ULONG *, unsigned char *, HMENU *);
unsigned char *  HMENU_UserUnmarshal(ULONG *, unsigned char *, HMENU *);
void             HMENU_UserFree     (ULONG *, HMENU *);
ULONG            HGLOBAL_UserSize     (ULONG *, ULONG, HGLOBAL *);
unsigned char *  HGLOBAL_UserMarshal  (ULONG *, unsigned char *, HGLOBAL *);
unsigned char *  HGLOBAL_UserUnmarshal(ULONG *, unsigned char *, HGLOBAL *);
void             HGLOBAL_UserFree     (ULONG *, HGLOBAL *);
ULONG            HACCEL_UserSize     (ULONG *, ULONG, HACCEL *);
unsigned char *  HACCEL_UserMarshal  (ULONG *, unsigned char *, HACCEL *);
unsigned char *  HACCEL_UserUnmarshal(ULONG *, unsigned char *, HACCEL *);
void             HACCEL_UserFree     (ULONG *, HACCEL *);
ULONG            CLIPFORMAT_UserSize     (ULONG *, ULONG, CLIPFORMAT *);
unsigned char *  CLIPFORMAT_UserMarshal  (ULONG *, unsigned char *, CLIPFORMAT *);
unsigned char *  CLIPFORMAT_UserUnmarshal(ULONG *, unsigned char *, CLIPFORMAT *);
void             CLIPFORMAT_UserFree     (ULONG *, CLIPFORMAT *);
ULONG            STGMEDIUM_UserSize     (ULONG *, ULONG, STGMEDIUM *);
unsigned char *  STGMEDIUM_UserMarshal  (ULONG *, unsigned char *, STGMEDIUM *);
unsigned char *  STGMEDIUM_UserUnmarshal(ULONG *, unsigned char *, STGMEDIUM *);
void             STGMEDIUM_UserFree     (ULONG *, STGMEDIUM *);
ULONG            HDC_UserSize     (ULONG *, ULONG, HDC *);
unsigned char *  HDC_UserMarshal  (ULONG *, unsigned char *, HDC *);
unsigned char *  HDC_UserUnmarshal(ULONG *, unsigned char *, HDC *);
void             HDC_UserFree     (ULONG *, HDC *);








# 28 "include/ole2.h" 2

struct tagMSG;

























 HRESULT   RegisterDragDrop(HWND,LPDROPTARGET);
 HRESULT   RevokeDragDrop(HWND);
 HRESULT   DoDragDrop(LPDATAOBJECT,LPDROPSOURCE,DWORD,DWORD*);
 HRESULT   OleLoadFromStream(IStream *pStm,const IID* const iidInterface,void** ppvObj);
 HRESULT   OleSaveToStream(IPersistStream *pPStm,IStream *pStm);
 HOLEMENU  OleCreateMenuDescriptor(HMENU hmenuCombined,LPOLEMENUGROUPWIDTHS lpMenuWidths);
 HRESULT   OleDestroyMenuDescriptor(HOLEMENU hmenuDescriptor);
 HRESULT   OleSetMenuDescriptor(HOLEMENU hmenuDescriptor,HWND hwndFrame,HWND hwndActiveObject,LPOLEINPLACEFRAME lpFrame,LPOLEINPLACEACTIVEOBJECT lpActiveObject);

 HRESULT  WriteClassStg(IStorage *pstg, const CLSID* const rclsid);
 HRESULT  ReadClassStg(IStorage *pstg,CLSID *pclsid);
 HRESULT  WriteClassStm(IStream *pStm,const CLSID* const rclsid);
 HRESULT  ReadClassStm(IStream *pStm,CLSID *pclsid);


 HRESULT      OleSave(LPPERSISTSTORAGE pPS, LPSTORAGE pStg, BOOL fSameAsLoad);
 HRESULT      OleRegGetUserType(const CLSID* const clsid, DWORD dwFormOfType, LPOLESTR* pszUserType);
 HRESULT      OleRegGetMiscStatus (const CLSID* const clsid, DWORD dwAspect, DWORD* pdwStatus);
 HRESULT      OleRegEnumFormatEtc (const CLSID* const clsid, DWORD dwDirection, LPENUMFORMATETC* ppenumFormatetc);
 HRESULT      CreateStreamOnHGlobal (HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPSTREAM* ppstm);
 HRESULT      GetHGlobalFromStream(LPSTREAM pstm, HGLOBAL* phglobal);
 HRESULT      OleRegEnumVerbs (const CLSID* const clsid, LPENUMOLEVERB* ppenum);
 BOOL         OleIsRunning(LPOLEOBJECT pObject);
 HRESULT      OleCreateLinkFromData(LPDATAOBJECT pSrcDataObj, const IID* const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
 HRESULT      OleSetContainedObject(LPUNKNOWN pUnknown, BOOL fContained);
 HRESULT      OleNoteObjectVisible(LPUNKNOWN pUnknown, BOOL fVisible);
 HRESULT      OleQueryLinkFromData(IDataObject* pSrcDataObject);
 HRESULT      OleQueryCreateFromData(LPDATAOBJECT pSrcDataObject);
 HRESULT      OleRun(LPUNKNOWN pUnknown);
 HRESULT      OleDraw(LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw, LPCRECT lprcBounds);
 void         ReleaseStgMedium(LPSTGMEDIUM);
 HRESULT      OleGetClipboard(IDataObject** ppDataObj);
 HRESULT      OleIsCurrentClipboard(LPDATAOBJECT);
 HRESULT      OleSetClipboard(LPDATAOBJECT);
 HRESULT      OleCreateStaticFromData(LPDATAOBJECT pSrcDataObj, const IID* const iid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
 HRESULT      ReadFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT* pcf, LPOLESTR* lplpszUserType);
 HRESULT      OleLoad(LPSTORAGE pStg, const IID* const riid, LPOLECLIENTSITE pClientSite, LPVOID* ppvObj);
 HRESULT      GetHGlobalFromILockBytes(LPLOCKBYTES plkbyt, HGLOBAL* phglobal);
 HRESULT      CreateILockBytesOnHGlobal(HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPLOCKBYTES* pplkbyt);
 HRESULT      CreateDataAdviseHolder(LPDATAADVISEHOLDER* ppDAHolder);
 HGLOBAL      OleGetIconOfClass(const CLSID* const rclsid, LPOLESTR lpszLabel, BOOL fUseTypeAsLabel);
 HGLOBAL      OleGetIconOfFile(LPOLESTR lpszPath, BOOL fUseFileAsLabel);
 HGLOBAL      OleMetafilePictFromIconAndLabel(HICON hIcon, LPOLESTR lpszLabel, LPOLESTR lpszSourceFile, UINT iIconIndex);
 HRESULT      OleLockRunning(LPUNKNOWN pUnknown, BOOL fLock, BOOL fLastUnlockCloses);
 HRESULT      OleCreateFromFile(const CLSID* const rclsid, LPCOLESTR lpszFileName, const IID* const riid,
                                                 DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
 HRESULT      OleCreateFromFileEx(const CLSID* const clsid, LPCOLESTR filename, const IID* const iid, DWORD flags,
                                                   DWORD renderopt, ULONG num_fmts, DWORD *adv_flags, LPFORMATETC fmts, IAdviseSink *sink,
                                                   DWORD *conns, LPOLECLIENTSITE client_site, LPSTORAGE storage, LPVOID* obj);
 HRESULT      OleCreateLink(LPMONIKER pmkLinkSrc, const IID* const riid, DWORD renderopt, LPFORMATETC lpFormatEtc,LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
 HRESULT      OleCreate(const CLSID* const rclsid, const IID* const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite,LPSTORAGE pStg, LPVOID* ppvObj);
 HRESULT      OleFlushClipboard(void);
 HRESULT      GetConvertStg(LPSTORAGE pStg);
 HRESULT      SetConvertStg(LPSTORAGE pStg, BOOL fConvert);
 BOOL         IsAccelerator(HACCEL hAccel, int cAccelEntries, struct tagMSG* lpMsg, WORD* lpwCmd);
 HRESULT      OleCreateLinkToFile(LPCOLESTR lpszFileName, const IID* const riid, DWORD renderopt, LPFORMATETC lpFormatEtc,
                                                   LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
 HANDLE       OleDuplicateData(HANDLE hSrc, CLIPFORMAT cfFormat, UINT uiFlags);
 HRESULT      WriteFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType);
 HRESULT      OleTranslateAccelerator (LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEFRAMEINFO lpFrameInfo, struct tagMSG* lpmsg);
 HRESULT      OleCreateFromData(LPDATAOBJECT pSrcDataObj, const IID* const riid, DWORD renderopt, LPFORMATETC pFormatEtc,
                                                 LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
 HRESULT      OleCreateFromDataEx(LPDATAOBJECT pSrcDataObj, const IID* const riid, DWORD dwFlags, DWORD renderopt, ULONG num_formats,
                                                   DWORD *adv_flags, LPFORMATETC fmts, IAdviseSink *sink, DWORD *conns,
                                                   LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID* ppvObj);
 HRESULT      OleCreateDefaultHandler(const CLSID* const clsid, LPUNKNOWN pUnkOuter, const IID* const riid, LPVOID* ppvObj);
 HRESULT      OleCreateEmbeddingHelper(const CLSID* const clsid, LPUNKNOWN pUnkOuter, DWORD flags, IClassFactory *pCF, const IID* const riid, LPVOID* ppvObj);
 HRESULT      CreateOleAdviseHolder (LPOLEADVISEHOLDER *ppOAHolder);
 HRESULT      OleInitialize(LPVOID pvReserved);
 void         OleUninitialize(void);
 BOOL         IsValidInterface(LPUNKNOWN punk);
 DWORD        OleBuildVersion(void);






typedef struct _OLESTREAM* LPOLESTREAM;
typedef struct _OLESTREAMVTBL {
	DWORD	( *Get)(LPOLESTREAM,LPSTR,DWORD);
	DWORD	( *Put)(LPOLESTREAM,LPSTR,DWORD);
} OLESTREAMVTBL;
typedef OLESTREAMVTBL*	LPOLESTREAMVTBL;
typedef struct _OLESTREAM {
	LPOLESTREAMVTBL	lpstbl;
} OLESTREAM;

 HRESULT      OleConvertOLESTREAMToIStorage( LPOLESTREAM lpolestream, LPSTORAGE pstg, const DVTARGETDEVICE* ptd);
 HRESULT      OleConvertIStorageToOLESTREAM( LPSTORAGE pstg, LPOLESTREAM lpolestream);
 HRESULT      OleConvertIStorageToOLESTREAMEx( LPSTORAGE stg, CLIPFORMAT cf, LONG width, LONG height,
                                                                DWORD size, LPSTGMEDIUM medium, LPOLESTREAM olestream );
 HRESULT      OleDoAutoConvert( LPSTORAGE pStg, LPCLSID pClsidNew );
 HRESULT      OleGetAutoConvert( const CLSID* const clsidOld, LPCLSID pClsidNew );
 HRESULT      OleSetAutoConvert( const CLSID* const clsidOld, const CLSID* const clsidNew );






# 14 "include/oaidl.h" 2

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 27 "include/xmldom.idl" 2

# 1 "include/idispids.h" 1 3

































# 28 "include/xmldom.idl" 2







struct IXMLDOMImplementation;
struct IXMLDOMNode;
struct IXMLDOMDocumentFragment;
struct IXMLDOMDocument;
struct IXMLDOMNodeList;
struct IXMLDOMNamedNodeMap;
struct IXMLDOMCharacterData;
struct IXMLDOMAttribute;
struct IXMLDOMElement;
struct IXMLDOMText;
struct IXMLDOMComment;
struct IXMLDOMProcessingInstruction;
struct IXMLDOMCDATASection;
struct IXMLDOMDocumentType;
struct IXMLDOMNotation;
struct IXMLDOMEntity;
struct IXMLDOMEntityReference;
struct IXMLDOMParseError;

cpp_quote("#ifndef __MSXML_DOMNODETYPE_DEFINED")
cpp_quote("#define __MSXML_DOMNODETYPE_DEFINED")
typedef enum tagDOMNodeType {
    NODE_INVALID,
    NODE_ELEMENT,
    NODE_ATTRIBUTE,
    NODE_TEXT,
    NODE_CDATA_SECTION,
    NODE_ENTITY_REFERENCE,
    NODE_ENTITY,
    NODE_PROCESSING_INSTRUCTION,
    NODE_COMMENT,
    NODE_DOCUMENT,
    NODE_DOCUMENT_TYPE,
    NODE_DOCUMENT_FRAGMENT,
    NODE_NOTATION
} DOMNodeType;
cpp_quote("#endif")

[
local,
object,
odl,
dual,
oleautomation,

uuid(2933bf80-7b36-11d2-b20e-00c04f983e60),
pointer_default(unique)
]
struct IXMLDOMNode : IDispatch {
    [propget, id(DISPID_DOM_NODE_NODENAME)]
    HRESULT nodeName( [out,retval] BSTR *name );

    [propget, id(DISPID_DOM_NODE_NODEVALUE)]
    HRESULT nodeValue( [out,retval] VARIANT *value );

    [propput, id(DISPID_DOM_NODE_NODEVALUE)]
    HRESULT nodeValue( [in] VARIANT value );

    [propget, id(DISPID_DOM_NODE_NODETYPE)]
    HRESULT nodeType( [out,retval] DOMNodeType *type );

    [propget, id(DISPID_DOM_NODE_PARENTNODE)]
    HRESULT parentNode( [out,retval] IXMLDOMNode **parent );

    [propget, id(DISPID_DOM_NODE_CHILDNODES)]
    HRESULT childNodes( [out,retval] IXMLDOMNodeList **childList );

    [propget, id(DISPID_DOM_NODE_FIRSTCHILD)]
    HRESULT firstChild( [out,retval] IXMLDOMNode **firstChild );

    [propget, id(DISPID_DOM_NODE_LASTCHILD)]
    HRESULT lastChild( [out,retval] IXMLDOMNode **lastChild );

    [propget, id(DISPID_DOM_NODE_PREVIOUSSIBLING)]
    HRESULT previousSibling( [out,retval] IXMLDOMNode **previousSibling );

    [propget, id(DISPID_DOM_NODE_NEXTSIBLING)]
    HRESULT nextSibling( [out,retval] IXMLDOMNode **nextSibling );

    [propget, id(DISPID_DOM_NODE_ATTRIBUTES)]
    HRESULT attributes( [out,retval] IXMLDOMNamedNodeMap **attributeMap );

    [id(DISPID_DOM_NODE_INSERTBEFORE)]
    HRESULT insertBefore( [in] IXMLDOMNode * newChild,
                          [in] VARIANT refChild,
                          [out,retval] IXMLDOMNode **outNewChild );

    [id(DISPID_DOM_NODE_REPLACECHILD)]
    HRESULT replaceChild( [in] IXMLDOMNode *newChild,
                          [in] IXMLDOMNode *oldChild,
                          [out,retval] IXMLDOMNode **outOldChild );

    [id(DISPID_DOM_NODE_REMOVECHILD)]
    HRESULT removeChild( [in] IXMLDOMNode *childNode,
                         [out,retval] IXMLDOMNode **oldChild );

    [id(DISPID_DOM_NODE_APPENDCHILD)]
    HRESULT appendChild( [in] IXMLDOMNode *newChild,
                         [out,retval] IXMLDOMNode **outNewChild );

    [id(DISPID_DOM_NODE_HASCHILDNODES)]
    HRESULT hasChildNodes( [out,retval] VARIANT_BOOL *hasChild );

    [propget, id(DISPID_DOM_NODE_OWNERDOC)]
    HRESULT ownerDocument( [out,retval] IXMLDOMDocument **DOMDocument );

    [id(DISPID_DOM_NODE_CLONENODE)]
    HRESULT cloneNode( [in] VARIANT_BOOL deep,
                       [out,retval] IXMLDOMNode **cloneRoot );

    [propget, id(DISPID_XMLDOM_NODE_STRINGTYPE)]
    HRESULT nodeTypeString( [out,retval] BSTR *nodeType );

    [propget, id(DISPID_XMLDOM_NODE_TEXT)]
    HRESULT text( [out,retval] BSTR *text );

    [propput, id(DISPID_XMLDOM_NODE_TEXT)]
    HRESULT text( [in] BSTR text );

    [propget, id(DISPID_XMLDOM_NODE_SPECIFIED)]
    HRESULT specified( [out,retval] VARIANT_BOOL *isSpecified );

    [propget, id(DISPID_XMLDOM_NODE_DEFINITION)]
    HRESULT definition( [out,retval] IXMLDOMNode **definitionNode );

    [propget, id(DISPID_XMLDOM_NODE_NODETYPEDVALUE)]
    HRESULT nodeTypedValue( [out,retval] VARIANT *typedValue );

    [propput, id(DISPID_XMLDOM_NODE_NODETYPEDVALUE)]
    HRESULT nodeTypedValue( [in] VARIANT typedValue );

    [propget, id(DISPID_XMLDOM_NODE_DATATYPE)]
    HRESULT dataType( [out,retval] VARIANT *dataTypeName );

    [propput, id(DISPID_XMLDOM_NODE_DATATYPE)]
    HRESULT dataType( [in] BSTR dataTypeName );

    [propget, id(DISPID_XMLDOM_NODE_XML)]
    HRESULT xml( [out,retval] BSTR *xmlString );

    [id(DISPID_XMLDOM_NODE_TRANSFORMNODE)]
    HRESULT transformNode( [in] IXMLDOMNode *styleSheet,
                           [out,retval] BSTR *xmlString );

    [id(DISPID_XMLDOM_NODE_SELECTNODES)]
    HRESULT selectNodes( [in] BSTR queryString,
                         [out,retval] IXMLDOMNodeList **resultList );

    [id(DISPID_XMLDOM_NODE_SELECTSINGLENODE)]
    HRESULT selectSingleNode( [in] BSTR queryString,
                              [out,retval] IXMLDOMNode **resultNode );

    [propget, id(DISPID_XMLDOM_NODE_PARSED)]
    HRESULT parsed( [out,retval] VARIANT_BOOL *isParsed );

    [propget, id(DISPID_XMLDOM_NODE_NAMESPACE)]
    HRESULT namespaceURI( [out,retval] BSTR *namespaceURI );

    [propget, id(DISPID_XMLDOM_NODE_PREFIX)]
    HRESULT prefix( [out,retval] BSTR *prefixString );

    [propget, id(DISPID_XMLDOM_NODE_BASENAME)]
    HRESULT baseName( [out,retval] BSTR *nameString );

    [id(DISPID_XMLDOM_NODE_TRANSFORMNODETOOBJECT)]
    HRESULT transformNodeToObject( [in] IXMLDOMNode *stylesheet,
                                   [in] VARIANT outputObject );
}

[
local,
object,
odl,
dual,

oleautomation,
uuid(2933bf81-7b36-11d2-b20e-00c04f983e60),
pointer_default(unique)
]
struct IXMLDOMDocument : IXMLDOMNode
{
    [propget, id(DISPID_DOM_DOCUMENT_DOCTYPE)]
    HRESULT doctype( [out,retval] IXMLDOMDocumentType **documentType );

    [propget, id(DISPID_DOM_DOCUMENT_IMPLEMENTATION)]
    HRESULT implementation( [out,retval] IXMLDOMImplementation **impl );

    [propget, id(DISPID_DOM_DOCUMENT_DOCUMENTELEMENT)]
    HRESULT documentElement( [out,retval] IXMLDOMElement **DOMElement );

    [propputref, id(DISPID_DOM_DOCUMENT_DOCUMENTELEMENT)]
    HRESULT documentElement( [in] IXMLDOMElement *DOMElement );

    [id(DISPID_DOM_DOCUMENT_CREATEELEMENT)]
    HRESULT createElement( [in] BSTR tagname,
                           [out,retval] IXMLDOMElement **element );

    [id(DISPID_DOM_DOCUMENT_CREATEDOCUMENTFRAGMENT)]
    HRESULT createDocumentFragment( [out,retval] IXMLDOMDocumentFragment **docFrag );

    [id(DISPID_DOM_DOCUMENT_CREATETEXTNODE)]
    HRESULT createTextNode( [in] BSTR data,
                            [out,retval] IXMLDOMText **text );

    [id(DISPID_DOM_DOCUMENT_CREATECOMMENT)]
    HRESULT createComment( [in] BSTR data,
                           [out,retval] IXMLDOMComment **comment );

    [id(DISPID_DOM_DOCUMENT_CREATECDATASECTION)]
    HRESULT createCDATASection( [in] BSTR data,
                                [out,retval] IXMLDOMCDATASection **cdata );

    [id(DISPID_DOM_DOCUMENT_CREATEPROCESSINGINSTRUCTION)]
    HRESULT createProcessingInstruction( [in] BSTR target,
                                         [in] BSTR data,
                                         [out,retval] IXMLDOMProcessingInstruction **pi );

    [id(DISPID_DOM_DOCUMENT_CREATEATTRIBUTE)]
    HRESULT createAttribute( [in] BSTR name,
                             [out,retval] IXMLDOMAttribute **attribute );

    [id(DISPID_DOM_DOCUMENT_CREATEENTITYREFERENCE)]
    HRESULT createEntityReference( [in] BSTR name,
                                   [out,retval] IXMLDOMEntityReference **entityRef );

    [id(DISPID_DOM_DOCUMENT_GETELEMENTSBYTAGNAME)]
    HRESULT getElementsByTagName( [in] BSTR tagName,
                                  [out,retval] IXMLDOMNodeList **resultList );

    [id(DISPID_XMLDOM_DOCUMENT_CREATENODE)]
    HRESULT createNode( [in] VARIANT Type,
                        [in] BSTR name,
                        [in] BSTR namespaceURI,
                        [out,retval] IXMLDOMNode **node );

    [id(DISPID_XMLDOM_DOCUMENT_NODEFROMID)]
    HRESULT nodeFromID( [in] BSTR idString,
                        [out,retval] IXMLDOMNode **node );

    [id(DISPID_XMLDOM_DOCUMENT_LOAD)]
    HRESULT load( [in] VARIANT xmlSource,
                  [out,retval] VARIANT_BOOL *isSuccessful );

    [propget, id((-525))]
    HRESULT readyState( [out,retval] LONG *value );

    [propget, id(DISPID_XMLDOM_DOCUMENT_PARSEERROR)]
    HRESULT parseError( [out,retval] IXMLDOMParseError **errorObj );

    [propget, id(DISPID_XMLDOM_DOCUMENT_URL)]
    HRESULT url( [out,retval] BSTR *urlString );

    
    [propget, id(DISPID_XMLDOM_DOCUMENT_ASYNC)]
    HRESULT async( [out,retval] VARIANT_BOOL *isAsync );

    [propput, id(DISPID_XMLDOM_DOCUMENT_ASYNC)]
    HRESULT async( [in] VARIANT_BOOL isAsync );

    [id(DISPID_XMLDOM_DOCUMENT_ABORT)]
    HRESULT abort();

    [id(DISPID_XMLDOM_DOCUMENT_LOADXML)]
    HRESULT loadXML( [in] BSTR bstrXML,
                     [out,retval] VARIANT_BOOL *isSuccessful );

    [id(DISPID_XMLDOM_DOCUMENT_SAVE)]
    HRESULT save( [in] VARIANT destination );

    [propget, id(DISPID_XMLDOM_DOCUMENT_VALIDATE)]
    HRESULT validateOnParse( [out,retval] VARIANT_BOOL *isValidating );

    [propput, id(DISPID_XMLDOM_DOCUMENT_VALIDATE)]
    HRESULT validateOnParse( [in] VARIANT_BOOL isValidating );

    [propget, id(DISPID_XMLDOM_DOCUMENT_RESOLVENAMESPACE)]
    HRESULT resolveExternals( [out,retval] VARIANT_BOOL *isResolving );

    [propput, id(DISPID_XMLDOM_DOCUMENT_RESOLVENAMESPACE)]
    HRESULT resolveExternals( [in] VARIANT_BOOL isValidating );

    [propget, id(DISPID_XMLDOM_DOCUMENT_PRESERVEWHITESPACE)]
    HRESULT preserveWhiteSpace( [out,retval] VARIANT_BOOL *isPreserving );

    [propput, id(DISPID_XMLDOM_DOCUMENT_PRESERVEWHITESPACE)]
    HRESULT preserveWhiteSpace( [in] VARIANT_BOOL isPreserving );

    [propput, id(DISPID_XMLDOM_DOCUMENT_ONREADYSTATECHANGE)]
    HRESULT onreadystatechange( [in] VARIANT readystatechangeSink );

    [propput, id(DISPID_XMLDOM_DOCUMENT_ONDATAAVAILABLE)]
    HRESULT ondataavailable( [in] VARIANT ondataavailableSink );

    [propput, id(DISPID_XMLDOM_DOCUMENT_ONTRANSFORMNODE)]
    HRESULT ontransformnode( [in] VARIANT ontransformnodeSink );
}

[
local,
object,
odl,
dual,

oleautomation,
uuid(2933bf82-7b36-11d2-b20e-00c04f983e60),
pointer_default(unique)
]
struct IXMLDOMNodeList : IDispatch
{
    [propget, id((0))]
    HRESULT item( [in] LONG index,
                  [out,retval] IXMLDOMNode **listItem );

    [propget, id(DISPID_DOM_NODELIST_LENGTH)]
    HRESULT length( [out,retval] LONG *listLength );

    [id(DISPID_XMLDOM_NODELIST_NEXTNODE)]
    HRESULT nextNode( [out,retval] IXMLDOMNode **nextItem );

    [id(DISPID_XMLDOM_NODELIST_RESET)]
    HRESULT reset();

    [id((-4))]
    HRESULT _newEnum( [out,retval] IUnknown **ppUnk );
}

[
local,
object,
odl,
dual,

oleautomation,
uuid(2933bf83-7b36-11d2-b20e-00c04f983e60),
pointer_default(unique)
]
struct IXMLDOMNamedNodeMap : IDispatch
{
    [id(DISPID_DOM_NAMEDNODEMAP_GETNAMEDITEM)]
    HRESULT getNamedItem( [in] BSTR name,
                          [out,retval] IXMLDOMNode **namedItem );

    [id(DISPID_DOM_NAMEDNODEMAP_SETNAMEDITEM)]
    HRESULT setNamedItem( [in] IXMLDOMNode *newItem,
                          [out,retval] IXMLDOMNode **namedItem );

    [id(DISPID_DOM_NAMEDNODEMAP_REMOVENAMEDITEM)]
    HRESULT removeNamedItem( [in] BSTR name,
                             [out,retval] IXMLDOMNode **namedItem );

    [propget, id((0))]
    HRESULT item( [in] LONG index,
                  [out,retval] IXMLDOMNode **listItem );

    [propget, id(DISPID_DOM_NODELIST_LENGTH)]
    HRESULT length( [out,retval] LONG *listLength );

    [id(DISPID_XMLDOM_NAMEDNODEMAP_GETQUALIFIEDITEM)]
    HRESULT getQualifiedItem( [in] BSTR baseName,
                              [in] BSTR namespaceURI,
                              [out,retval] IXMLDOMNode **qualifiedItem );

    [id(DISPID_XMLDOM_NAMEDNODEMAP_REMOVEQUALIFIEDITEM)]
    HRESULT removeQualifiedItem( [in] BSTR baseName,
                                 [in] BSTR namespaceURI,
                                 [out,retval] IXMLDOMNode **qualifiedItem );

    [id(DISPID_XMLDOM_NAMEDNODEMAP_NEXTNODE)]
    HRESULT nextNode( [out,retval] IXMLDOMNode **nextItem );

    [id(DISPID_XMLDOM_NAMEDNODEMAP_RESET)]
    HRESULT reset();

    [id((-4))]
    HRESULT _newEnum( [out,retval] IUnknown **ppUnk );
}

[
local,
object,
odl,
dual,

oleautomation,
uuid(3efaa413-272f-11d2-836f-0000f87a7782),
pointer_default(unique)
]
struct IXMLDOMDocumentFragment : IXMLDOMNode
{
    
}

[
local,
object,
odl,
dual,

oleautomation,
uuid(2933bf84-7b36-11d2-b20e-00c04f983e60),
pointer_default(unique)
]
struct IXMLDOMCharacterData : IXMLDOMNode
{
    [propget, id(DISPID_DOM_DATA_DATA)]
    HRESULT data( [out,retval] BSTR *data );

    [propput, id(DISPID_DOM_DATA_DATA)]
    HRESULT data( [in] BSTR data );

    [propget, id(DISPID_DOM_DATA_LENGTH)]
    HRESULT length( [out,retval] LONG *dataLength );

    [id(DISPID_DOM_DATA_SUBSTRING)]
    HRESULT substringData( [in] LONG offset,
                           [in] LONG count,
                           [out,retval] BSTR *data );

    [id(DISPID_DOM_DATA_APPEND)]
    HRESULT appendData( [in] BSTR data );

    [id(DISPID_DOM_DATA_INSERT)]
    HRESULT insertData( [in] LONG offset,
                        [in] BSTR data );

    [id(DISPID_DOM_DATA_DELETE)]
    HRESULT deleteData( [in] LONG offset,
                        [in] LONG count );

    [id(DISPID_DOM_DATA_REPLACE)]
    HRESULT replaceData( [in] LONG offset,
                         [in] LONG count,
                         [in] BSTR data );
}

[
local,
object,
odl,
dual,

oleautomation,
uuid(2933bf85-7b36-11d2-b20e-00c04f983e60),
pointer_default(unique)
]
struct IXMLDOMAttribute : IXMLDOMNode
{
    [propget,id(DISPID_DOM_ATTRIBUTE_GETNAME)]
    HRESULT name( [out,retval] BSTR *attributeName );

    [propget,id(DISPID_DOM_ATTRIBUTE_VALUE)]
    HRESULT value( [out,retval] VARIANT *attributeValue );

    [propput,id(DISPID_DOM_ATTRIBUTE_VALUE)]
    HRESULT value( [in] VARIANT attributeValue );
}

[
local,
object,
odl,
dual,

oleautomation,
uuid(2933bf86-7b36-11d2-b20e-00c04f983e60),
pointer_default(unique)
]
struct IXMLDOMElement : IXMLDOMNode
{
    [propget, id(DISPID_DOM_ELEMENT_GETTAGNAME)]
    HRESULT tagName( [out,retval] BSTR *tagName );

    [id(DISPID_DOM_ELEMENT_GETATTRIBUTE)]
    HRESULT getAttribute( [in] BSTR name,
                          [out,retval] VARIANT * value );

    [id(DISPID_DOM_ELEMENT_SETATTRIBUTE)]
    HRESULT setAttribute( [in] BSTR name,
                          [in] VARIANT value );

    [id(DISPID_DOM_ELEMENT_REMOVEATTRIBUTE)]
    HRESULT removeAttribute( [in] BSTR name );

    [id(DISPID_DOM_ELEMENT_GETATTRIBUTENODE)]
    HRESULT getAttributeNode( [in] BSTR name,
                              [out, retval] IXMLDOMAttribute ** attributeNode );

    [id(DISPID_DOM_ELEMENT_SETATTRIBUTENODE)]
    HRESULT setAttributeNode( [in] IXMLDOMAttribute *DOMAttribute,
                              [out, retval] IXMLDOMAttribute ** attributeNode );

    [id(DISPID_DOM_ELEMENT_REMOVEATTRIBUTENODE)]
    HRESULT removeAttributeNode( [in] IXMLDOMAttribute *DOMAttribute,
                              [out, retval] IXMLDOMAttribute ** attributeNode );

    [id(DISPID_DOM_ELEMENT_GETELEMENTSBYTAGNAME)]
    HRESULT getElementsByTagName( [in] BSTR tagName,
                              [out, retval] IXMLDOMNodeList ** resultList );

    [id(DISPID_DOM_ELEMENT_NORMALIZE)]
    HRESULT normalize();
}

[
local,
object,
odl,
dual,

oleautomation,
uuid(2933bf87-7b36-11d2-b20e-00c04f983e60),
pointer_default(unique)
]
struct IXMLDOMText : IXMLDOMCharacterData
{
    [id(DISPID_DOM_TEXT_SPLITTEXT)]
    HRESULT splitText( [in] LONG offset,
                       [out,retval] IXMLDOMText **rightHandTextNode );
}

[
local,
object,
odl,
dual,

oleautomation,
uuid(2933bf88-7b36-11d2-b20e-00c04f983e60),
pointer_default(unique)
]
struct IXMLDOMComment : IXMLDOMCharacterData
{
    
}

[
local,
object,
odl,
dual,

oleautomation,
uuid(2933bf89-7b36-11d2-b20e-00c04f983e60),
pointer_default(unique)
]
struct IXMLDOMProcessingInstruction : IXMLDOMNode
{
    [propget, id(DISPID_DOM_PI_TARGET)]
    HRESULT target( [out, retval] BSTR *name );

    [propget, id(DISPID_DOM_PI_DATA)]
    HRESULT data( [out, retval] BSTR *value );

    [propput, id(DISPID_DOM_PI_DATA)]
    HRESULT data( [in] BSTR value );
}

[
local,
object,
odl,
dual,

oleautomation,
uuid(2933bf8a-7b36-11d2-b20e-00c04f983e60),
pointer_default(unique)
]
struct IXMLDOMCDATASection : IXMLDOMText
{
    
}

[
local,
object,
odl,
dual,

oleautomation,
uuid(2933bf8b-7b36-11d2-b20e-00c04f983e60),
pointer_default(unique)
]
struct IXMLDOMDocumentType : IXMLDOMNode
{
    [propget, id(DISPID_DOM_DOCUMENTTYPE_NAME)]
    HRESULT name( [out,retval] BSTR *rootName );

    [propget, id(DISPID_DOM_DOCUMENTTYPE_ENTITIES)]
    HRESULT entities( [out,retval] IXMLDOMNamedNodeMap **entityMap );

    [propget, id(DISPID_DOM_DOCUMENTTYPE_NOTATIONS)]
    HRESULT notations( [out,retval] IXMLDOMNamedNodeMap **notationMap );
}

[
local,
object,
odl,
dual,
nonextensible,
oleautomation,
uuid(2933bf8c-7b36-11d2-b20e-00c04f983e60),
pointer_default(unique)
]
struct IXMLDOMNotation : IXMLDOMNode
{
    [propget, id(DISPID_DOM_NOTATION_PUBLICID)]
    HRESULT publicId([out, retval] VARIANT *publicId);

    [propget, id(DISPID_DOM_NOTATION_SYSTEMID)]
    HRESULT systemId([out, retval] VARIANT *systemId);
}

[
local,
object,
odl,
dual,
nonextensible,
oleautomation,
uuid(2933bf8d-7b36-11d2-b20e-00c04f983e60),
pointer_default(unique)
]
struct IXMLDOMEntity : IXMLDOMNode
{
    [propget, id(DISPID_DOM_ENTITY_PUBLICID)]
    HRESULT publicId([out, retval] VARIANT *publicId);

    [propget, id(DISPID_DOM_ENTITY_SYSTEMID)]
    HRESULT systemId([out, retval] VARIANT *systemId);

    [propget, id(DISPID_DOM_ENTITY_NOTATIONNAME)]
    HRESULT notationName([out, retval] BSTR *name);
}

[
local,
object,
odl,
dual,
nonextensible,
oleautomation,
uuid(2933bf8e-7b36-11d2-b20e-00c04f983e60),
pointer_default(unique)
]
struct IXMLDOMEntityReference : IXMLDOMNode
{
}

[
local,
object,
odl,
dual,
nonextensible,
oleautomation,
uuid(2933bf8f-7b36-11d2-b20e-00c04f983e60),
pointer_default(unique)
]
struct IXMLDOMImplementation : IDispatch
{
    [id(DISPID_DOM_IMPLEMENTATION_HASFEATURE)]
    HRESULT hasFeature([in] BSTR feature, [in] BSTR version, [out, retval] VARIANT_BOOL *pbool);
}

[
local,
object,
odl,
dual,
oleautomation,

helpstring("structure for reporting parse errors"),
pointer_default(unique),
uuid (3efaa426-272f-11d2-836f-0000f87a7782)
]
struct IXMLDOMParseError : IDispatch
{
    [propget, id((0))]
    HRESULT errorCode([retval, out] LONG *errCode);

    [propget, id(DISPID_DOM_ERROR_URL)]
    HRESULT url([retval, out] BSTR *p);

    [propget, id(DISPID_DOM_ERROR_REASON)]
    HRESULT reason([retval, out] BSTR *p);

    [propget, id(DISPID_DOM_ERROR_SRCTEXT)]
    HRESULT srcText([retval, out] BSTR *p);

    [propget, id(DISPID_DOM_ERROR_LINE)]
    HRESULT line([retval, out] LONG *lineNo);

    [propget, id(DISPID_DOM_ERROR_LINEPOS)]
    HRESULT linepos([retval, out] LONG * linePos);

    [propget, id(DISPID_DOM_ERROR_FILEPOS)]
    HRESULT filepos([retval, out] LONG * filePos);
}

[
    hidden,
    uuid(3efaa427-272f-11d2-836f-0000f87a7782)
]
dispinterface XMLDOMDocumentEvents
{
    properties:
    methods:
    [id(DISPID_XMLDOMEVENT_ONDATAAVAILABLE)]
    HRESULT ondataavailable();

    [id(DISPID_XMLDOMEVENT_ONREADYSTATECHANGE)]
    HRESULT onreadystatechange();
}

[
    helpstring("XML DOM Document"),
    progid("Microsoft.XMLDOM.1.0"),
    vi_progid("Microsoft.XMLDOM"),
    threading(both),
    version(1.0),
    uuid(2933bf90-7b36-11d2-b20e-00c04f983e60)
]
coclass DOMDocument
{
    [default] struct IXMLDOMDocument;
    [default, source] dispinterface XMLDOMDocumentEvents;
}

[
    helpstring("Free Threaded XML DOM Document"),
    progid("Microsoft.FreeThreadedXMLDOM.1.0"),
    vi_progid("Microsoft.FreeThreadedXMLDOM"),
    threading(both),
    version(1.0),
    uuid(2933bf91-7b36-11d2-b20e-00c04f983e60)
]
coclass DOMFreeThreadedDocument
{
    [default] struct IXMLDOMDocument;
    [default, source] dispinterface XMLDOMDocumentEvents;
}

[
object,
uuid(ed8c108d-4349-11d2-91a4-00c04f7969e8),
odl,
dual,
oleautomation,
pointer_default(unique)
]
struct IXMLHttpRequest : IDispatch
{
    [id(1)]
    HRESULT open([in] BSTR bstrMethod, [in] BSTR bstrUrl,
                 [in, optional] VARIANT varAsync,
                 [in, optional] VARIANT varUser,
                 [in, optional] VARIANT varPassword);
    [id(2)]
    HRESULT setRequestHeader([in] BSTR bstrHeader, [in] BSTR bstrValue);

    [id(3)]
    HRESULT getResponseHeader([in] BSTR bstrHeader, [out, retval] BSTR *pbstrValue);

    [id(4)]
    HRESULT getAllResponseHeaders([out, retval] BSTR *pbstrHeaders);

    [id(5)]
    HRESULT send([in, optional] VARIANT varBody);

    [id(6)]
    HRESULT abort();

    [propget, id(7)]
    HRESULT status([out, retval] LONG *plStatus);

    [propget, id(8)]
    HRESULT statusText([out, retval] BSTR *bstrStatus);

    [propget, id(9)]
    HRESULT responseXML([out, retval] IDispatch **ppBody);

    [propget, id(10)]
    HRESULT responseText([out, retval] BSTR *pbstrBody);

    [propget, id(11)]
    HRESULT responseBody([out, retval] VARIANT *pvarBody);

    [propget, id(12)]
    HRESULT responseStream([out, retval] VARIANT *pvarBody);

    [propget, id(13)]
    HRESULT readyState([out, retval] LONG *plState);

    [propput, id(14)]
    HRESULT onreadystatechange([in] IDispatch *pReadyStateSink);
}

[
    helpstring("XML HTTP Request"),
    progid("Microsoft.XMLHTTP.1.0"),
    vi_progid("Microsoft.XMLHTTP"),
    threading(apartment),
    version(1.0),
    uuid(ed8c108e-4349-11d2-91a4-00c04f7969e8)
]
coclass XMLHTTPRequest
{
    [default] struct IXMLHttpRequest;
}
